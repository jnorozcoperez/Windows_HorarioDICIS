#pragma once  //__________________________________________Excel.h

// Wintempla Com::Assistant::ImportComLibrary running on mar., feb. 20 2018 05:21:40 p. m.
// ProgID: Excel.OpenDocumentSpreadsheet.12
// Description: Microsoft Excel 16.0 Object Library
// Help File: C:\Program Files\Microsoft Office\Root\Office16\VBAXL10.CHM

namespace Excel {

	class Adjustments;
	class CalloutFormat;
	class ColorFormat;
	class LineFormat;
	class ShapeNode;
	class ShapeNodes;
	class PictureFormat;
	class ShadowFormat;
	class TextEffectFormat;
	class ThreeDFormat;
	class FillFormat;
	class DiagramNodes;
	class DiagramNodeChildren;
	class DiagramNode;
	class IRTDUpdateEvent;
	class IRtdServer;
	class TextFrame2;
	class Model3DFormat;
	class ApplicationX;
	class ChartX;
	class Sheets;
	class WorksheetX;
	class GlobalX;
	class WorkbookX;
	class Workbooks;
	class PublishObject;
	class DefaultWebOptions;
	class WebOptions;
	class TreeviewControl;
	class CubeField;
	class CubeFields;
	class Font;
	class Window;
	class Windows;
	class AppEvents;
	class WorksheetFunction;
	class Range;
	class ChartEvents;
	class VPageBreak;
	class HPageBreak;
	class HPageBreaks;
	class VPageBreaks;
	class RecentFile;
	class RecentFiles;
	class DocEvents;
	class Style;
	class Styles;
	class Borders;
	class AddIn;
	class AddIns;
	class Toolbar;
	class Toolbars;
	class ToolbarButton;
	class ToolbarButtons;
	class Areas;
	class WorkbookEvents;
	class MenuBars;
	class MenuBar;
	class Menus;
	class Menu;
	class MenuItems;
	class MenuItem;
	class Charts;
	class DrawingObjects;
	class PivotCache;
	class PivotCaches;
	class PivotFormula;
	class PivotFormulas;
	class PivotTable;
	class PivotTables;
	class PivotField;
	class PivotFields;
	class CalculatedFields;
	class PivotItem;
	class PivotItems;
	class CalculatedItems;
	class Characters;
	class Dialogs;
	class Dialog;
	class SoundNote;
	class Button;
	class Buttons;
	class CheckBox;
	class CheckBoxes;
	class OptionButton;
	class OptionButtons;
	class EditBox;
	class EditBoxes;
	class ScrollBar;
	class ScrollBars;
	class ListBox;
	class ListBoxes;
	class GroupBox;
	class GroupBoxes;
	class DropDown;
	class DropDowns;
	class Spinner;
	class Spinners;
	class DialogFrame;
	class Label;
	class Labels;
	class Panes;
	class Pane;
	class Scenarios;
	class Scenario;
	class GroupObject;
	class GroupObjects;
	class Line;
	class Lines;
	class Rectangle;
	class Rectangles;
	class Oval;
	class Ovals;
	class Arc;
	class Arcs;
	class OLEObjectEvents;
	class OLEObjectX;
	class OLEObjects;
	class TextBox;
	class TextBoxes;
	class Picture;
	class Pictures;
	class Drawing;
	class Drawings;
	class RoutingSlip;
	class Outline;
	class Module;
	class Modules;
	class DialogSheet;
	class DialogSheets;
	class Worksheets;
	class PageSetup;
	class Names;
	class Name;
	class ChartObject;
	class ChartObjects;
	class Mailer;
	class CustomViews;
	class CustomView;
	class FormatConditions;
	class FormatCondition;
	class Comments;
	class Comment;
	class RefreshEvents;
	class QueryTableX;
	class QueryTables;
	class Parameter;
	class Parameters;
	class ODBCError;
	class ODBCErrors;
	class Validation;
	class Hyperlinks;
	class Hyperlink;
	class AutoFilter;
	class Filters;
	class Filter;
	class AutoCorrect;
	class Border;
	class Interior;
	class ChartFillFormat;
	class ChartColorFormat;
	class Axis;
	class ChartTitle;
	class AxisTitle;
	class ChartGroup;
	class ChartGroups;
	class Axes;
	class Points;
	class Point;
	class Series;
	class SeriesCollection;
	class DataLabel;
	class DataLabels;
	class LegendEntry;
	class LegendEntries;
	class LegendKey;
	class Trendlines;
	class Trendline;
	class Corners;
	class SeriesLines;
	class HiLoLines;
	class Gridlines;
	class DropLines;
	class LeaderLines;
	class UpBars;
	class DownBars;
	class Floor;
	class Walls;
	class TickLabels;
	class PlotArea;
	class ChartArea;
	class Legend;
	class ErrorBars;
	class DataTable;
	class Phonetic;
	class Shape;
	class Shapes;
	class ShapeRange;
	class GroupShapes;
	class TextFrame;
	class ConnectorFormat;
	class FreeformBuilder;
	class ControlFormat;
	class OLEFormat;
	class LinkFormat;
	class PublishObjects;
	class OLEDBError;
	class OLEDBErrors;
	class Phonetics;
	class PivotLayout;
	class DisplayUnitLabel;
	class CellFormat;
	class UsedObjects;
	class CustomProperties;
	class CustomProperty;
	class CalculatedMembers;
	class CalculatedMember;
	class Watches;
	class Watch;
	class PivotCell;
	class Graphic;
	class AutoRecover;
	class ErrorCheckingOptions;
	class Errors;
	class Error;
	class SmartTagAction;
	class SmartTagActions;
	class SmartTag;
	class SmartTags;
	class SmartTagRecognizer;
	class SmartTagRecognizers;
	class SmartTagOptions;
	class SpellingOptions;
	class Speech;
	class Protection;
	class PivotItemList;
	class Tab;
	class AllowEditRanges;
	class AllowEditRange;
	class UserAccessList;
	class UserAccess;
	class RTD;
	class Diagram;
	class ListObjects;
	class ListObject;
	class ListColumns;
	class ListColumn;
	class ListRows;
	class ListRow;
	class XmlNamespace;
	class XmlNamespaces;
	class XmlDataBinding;
	class XmlSchema;
	class XmlSchemas;
	class XmlMap;
	class XmlMaps;
	class ListDataFormat;
	class XPath;
	class PivotLineCells;
	class PivotLine;
	class PivotLines;
	class PivotAxis;
	class PivotFilter;
	class PivotFilters;
	class WorkbookConnection;
	class Connections;
	class WorksheetView;
	class ChartView;
	class ModuleView;
	class DialogSheetView;
	class SheetViews;
	class OLEDBConnection;
	class ODBCConnection;
	class Action;
	class Actions;
	class FormatColor;
	class ConditionValue;
	class ColorScale;
	class ColorScaleCriteria;
	class ColorScaleCriterion;
	class Databar;
	class IconSetCondition;
	class IconCriteria;
	class IconCriterion;
	class Icon;
	class IconSet;
	class IconSets;
	class Top10;
	class AboveAverage;
	class UniqueValues;
	class Ranges;
	class HeaderFooter;
	class Page;
	class Pages;
	class ServerViewableItems;
	class TableStyleElement;
	class TableStyleElements;
	class TableStyle;
	class TableStyles;
	class SortField;
	class SortFields;
	class Sort;
	class Research;
	class ColorStop;
	class ColorStops;
	class LinearGradient;
	class RectangularGradient;
	class MultiThreadedCalculation;
	class ChartFormat;
	class FileExportConverter;
	class FileExportConverters;
	class AddIns2;
	class SparklineGroups;
	class SparklineGroup;
	class SparkPoints;
	class Sparkline;
	class SparkAxes;
	class SparkHorizontalAxis;
	class SparkVerticalAxis;
	class SparkColor;
	class DataBarBorder;
	class NegativeBarFormat;
	class ValueChange;
	class PivotTableChangeList;
	class DisplayFormat;
	class SlicerCaches;
	class SlicerCache;
	class SlicerCacheLevels;
	class SlicerCacheLevel;
	class Slicers;
	class Slicer;
	class SlicerItem;
	class SlicerItems;
	class SlicerPivotTables;
	class ProtectedViewWindows;
	class ProtectedViewWindow;
	class TableObject;
	class PivotValueCell;
	class QuickAnalysis;
	class ModelConnection;
	class WorksheetDataConnection;
	class TextConnection;
	class DataFeedConnection;
	class ModelTableColumn;
	class ModelTableColumns;
	class ModelTable;
	class ModelTables;
	class ModelRelationship;
	class ModelRelationships;
	class Model;
	class FullSeriesCollection;
	class ChartCategory;
	class CategoryCollection;
	class TimelineState;
	class TimelineViewState;
	class ModelTableNames;
	class ModelTableNameChange;
	class ModelTableNameChanges;
	class ModelChanges;
	class ModelColumnName;
	class ModelColumnNames;
	class ModelColumnChange;
	class ModelColumnChanges;
	class ModelMeasureName;
	class ModelMeasureNames;
	class WorkbookQuery;
	class Queries;
	class ModelMeasure;
	class ModelMeasures;
	class ModelFormatGeneral;
	class ModelFormatDate;
	class ModelFormatDecimalNumber;
	class ModelFormatWholeNumber;
	class ModelFormatPercentageNumber;
	class ModelFormatScientificNumber;
	class ModelFormatCurrency;
	class ModelFormatBoolean;
	class PublishedDocs;
	class PublishedDoc;
	class SeriesGradientStopColorFormat;
	class ChartSeriesGradientStopData;
	class DefaultPivotTableLayoutOptions;
	//________________________________________________________Constants
	enum Constants
	{
		xlAll = -4104,
		xlAutomatic = -4105,
		xlBoth = 1,
		xlCenter = -4108,
		xlChecker = 9,
		xlCircle = 8,
		xlCorner = 2,
		xlCrissCross = 16,
		xlCross = 4,
		xlDiamond = 2,
		xlDistributed = -4117,
		xlDoubleAccounting = 5,
		xlFixedValue = 1,
		xlFormats = -4122,
		xlGray16 = 17,
		xlGray8 = 18,
		xlGrid = 15,
		xlHigh = -4127,
		xlInside = 2,
		xlJustify = -4130,
		xlLightDown = 13,
		xlLightHorizontal = 11,
		xlLightUp = 14,
		xlLightVertical = 12,
		xlLow = -4134,
		xlManual = -4135,
		xlMinusValues = 3,
		xlModule = -4141,
		xlNextToAxis = 4,
		xlNone = -4142,
		xlNotes = -4144,
		xlOff = -4146,
		xlOn = 1,
		xlPercent = 2,
		xlPlus = 9,
		xlPlusValues = 2,
		xlSemiGray75 = 10,
		xlShowLabel = 4,
		xlShowLabelAndPercent = 5,
		xlShowPercent = 3,
		xlShowValue = 2,
		xlSimple = -4154,
		xlSingle = 2,
		xlSingleAccounting = 4,
		xlSolid = 1,
		xlSquare = 1,
		xlStar = 5,
		xlStError = 4,
		xlToolbarButton = 2,
		xlTriangle = 3,
		xlGray25 = -4124,
		xlGray50 = -4125,
		xlGray75 = -4126,
		xlBottom = -4107,
		xlLeft = -4131,
		xlRight = -4152,
		xlTop = -4160,
		xl3DBar = -4099,
		xl3DSurface = -4103,
		xlBar = 2,
		xlColumn = 3,
		xlCombination = -4111,
		xlCustom = -4114,
		xlDefaultAutoFormat = -1,
		xlMaximum = 2,
		xlMinimum = 4,
		xlOpaque = 3,
		xlTransparent = 2,
		xlBidi = -5000,
		xlLatin = -5001,
		xlContext = -5002,
		xlLTR = -5003,
		xlRTL = -5004,
		xlFullScript = 1,
		xlPartialScript = 2,
		xlMixedScript = 3,
		xlMixedAuthorizedScript = 4,
		xlVisualCursor = 2,
		xlLogicalCursor = 1,
		xlSystem = 1,
		xlPartial = 3,
		xlHindiNumerals = 3,
		xlBidiCalendar = 3,
		xlGregorian = 2,
		xlComplete = 4,
		xlScale = 3,
		xlClosed = 3,
		xlColor1 = 7,
		xlColor2 = 8,
		xlColor3 = 9,
		xlConstants = 2,
		xlContents = 2,
		xlBelow = 1,
		xlCascade = 7,
		xlCenterAcrossSelection = 7,
		xlChart4 = 2,
		xlChartSeries = 17,
		xlChartShort = 6,
		xlChartTitles = 18,
		xlClassic1 = 1,
		xlClassic2 = 2,
		xlClassic3 = 3,
		xl3DEffects1 = 13,
		xl3DEffects2 = 14,
		xlAbove = 0,
		xlAccounting1 = 4,
		xlAccounting2 = 5,
		xlAccounting3 = 6,
		xlAccounting4 = 17,
		xlAdd = 2,
		xlDebugCodePane = 13,
		xlDesktop = 9,
		xlDirect = 1,
		xlDivide = 5,
		xlDoubleClosed = 5,
		xlDoubleOpen = 4,
		xlDoubleQuote = 1,
		xlEntireChart = 20,
		xlExcelMenus = 1,
		xlExtended = 3,
		xlFill = 5,
		xlFirst = 0,
		xlFloating = 5,
		xlFormula = 5,
		xlGeneral = 1,
		xlGridline = 22,
		xlIcons = 1,
		xlImmediatePane = 12,
		xlInteger = 2,
		xlLast = 1,
		xlLastCell = 11,
		xlList1 = 10,
		xlList2 = 11,
		xlList3 = 12,
		xlLocalFormat1 = 15,
		xlLocalFormat2 = 16,
		xlLong = 3,
		xlLotusHelp = 2,
		xlMacrosheetCell = 7,
		xlMixed = 2,
		xlMultiply = 4,
		xlNarrow = 1,
		xlNoDocuments = 3,
		xlOpen = 2,
		xlOutside = 3,
		xlReference = 4,
		xlSemiautomatic = 2,
		xlShort = 1,
		xlSingleQuote = 2,
		xlStrict = 2,
		xlSubtract = 3,
		xlTextBox = 16,
		xlTiled = 1,
		xlTitleBar = 8,
		xlToolbar = 1,
		xlVisible = 12,
		xlWatchPane = 11,
		xlWide = 3,
		xlWorkbookTab = 6,
		xlWorksheet4 = 1,
		xlWorksheetCell = 3,
		xlWorksheetShort = 5,
		xlAllExceptBorders = 7,
		xlLeftToRight = 2,
		xlTopToBottom = 1,
		xlVeryHidden = 2,
		xlDrawingObject = 14
	};

	//________________________________________________________XlCreator
	enum XlCreator
	{
		//	xlCreatorCode = 1480803660
	};

	//________________________________________________________XlChartGallery
	enum XlChartGallery
	{
		xlBuiltIn = 21,
		xlUserDefined = 22,
		xlAnyGallery = 23
	};

	//________________________________________________________XlColorIndex
	enum XlColorIndex
	{
		xlColorIndexAutomatic = -4105,
		xlColorIndexNone = -4142
	};

	//________________________________________________________XlEndStyleCap
	enum XlEndStyleCap
	{
		xlCap = 1,
		xlNoCap = 2
	};

	//________________________________________________________XlRowCol
	enum XlRowCol
	{
		xlColumns = 2,
		xlRows = 1
	};

	//________________________________________________________XlScaleType
	enum XlScaleType
	{
		xlScaleLinear = -4132,
		xlScaleLogarithmic = -4133
	};

	//________________________________________________________XlDataSeriesType
	enum XlDataSeriesType
	{
		xlAutoFill = 4,
		xlChronological = 3,
		xlGrowth = 2,
		xlDataSeriesLinear = -4132
	};

	//________________________________________________________XlAxisCrosses
	enum XlAxisCrosses
	{
		xlAxisCrossesAutomatic = -4105,
		xlAxisCrossesCustom = -4114,
		xlAxisCrossesMaximum = 2,
		xlAxisCrossesMinimum = 4
	};

	//________________________________________________________XlAxisGroup
	enum XlAxisGroup
	{
		xlPrimary = 1,
		xlSecondary = 2
	};

	//________________________________________________________XlBackground
	enum XlBackground
	{
		xlBackgroundAutomatic = -4105,
		xlBackgroundOpaque = 3,
		xlBackgroundTransparent = 2
	};

	//________________________________________________________XlWindowState
	enum XlWindowState
	{
		xlMaximized = -4137,
		xlMinimized = -4140,
		xlNormal = -4143
	};

	//________________________________________________________XlAxisType
	enum XlAxisType
	{
		xlCategory = 1,
		xlSeriesAxis = 3,
		xlValue = 2
	};

	//________________________________________________________XlArrowHeadLength
	enum XlArrowHeadLength
	{
		xlArrowHeadLengthLong = 3,
		xlArrowHeadLengthMedium = -4138,
		xlArrowHeadLengthShort = 1
	};

	//________________________________________________________XlVAlign
	enum XlVAlign
	{
		xlVAlignBottom = -4107,
		xlVAlignCenter = -4108,
		xlVAlignDistributed = -4117,
		xlVAlignJustify = -4130,
		xlVAlignTop = -4160
	};

	//________________________________________________________XlTickMark
	enum XlTickMark
	{
		xlTickMarkCross = 4,
		xlTickMarkInside = 2,
		xlTickMarkNone = -4142,
		xlTickMarkOutside = 3
	};

	//________________________________________________________XlErrorBarDirection
	enum XlErrorBarDirection
	{
		xlX = -4168,
		xlY = 1
	};

	//________________________________________________________XlErrorBarInclude
	enum XlErrorBarInclude
	{
		xlErrorBarIncludeBoth = 1,
		xlErrorBarIncludeMinusValues = 3,
		xlErrorBarIncludeNone = -4142,
		xlErrorBarIncludePlusValues = 2
	};

	//________________________________________________________XlDisplayBlanksAs
	enum XlDisplayBlanksAs
	{
		xlInterpolated = 3,
		xlNotPlotted = 1,
		xlZero = 2
	};

	//________________________________________________________XlArrowHeadStyle
	enum XlArrowHeadStyle
	{
		xlArrowHeadStyleClosed = 3,
		xlArrowHeadStyleDoubleClosed = 5,
		xlArrowHeadStyleDoubleOpen = 4,
		xlArrowHeadStyleNone = -4142,
		xlArrowHeadStyleOpen = 2
	};

	//________________________________________________________XlArrowHeadWidth
	enum XlArrowHeadWidth
	{
		xlArrowHeadWidthMedium = -4138,
		xlArrowHeadWidthNarrow = 1,
		xlArrowHeadWidthWide = 3
	};

	//________________________________________________________XlHAlign
	enum XlHAlign
	{
		xlHAlignCenter = -4108,
		xlHAlignCenterAcrossSelection = 7,
		xlHAlignDistributed = -4117,
		xlHAlignFill = 5,
		xlHAlignGeneral = 1,
		xlHAlignJustify = -4130,
		xlHAlignLeft = -4131,
		xlHAlignRight = -4152
	};

	//________________________________________________________XlTickLabelPosition
	enum XlTickLabelPosition
	{
		xlTickLabelPositionHigh = -4127,
		xlTickLabelPositionLow = -4134,
		xlTickLabelPositionNextToAxis = 4,
		xlTickLabelPositionNone = -4142
	};

	//________________________________________________________XlLegendPosition
	enum XlLegendPosition
	{
		xlLegendPositionBottom = -4107,
		xlLegendPositionCorner = 2,
		xlLegendPositionLeft = -4131,
		xlLegendPositionRight = -4152,
		xlLegendPositionTop = -4160,
		xlLegendPositionCustom = -4161
	};

	//________________________________________________________XlChartPictureType
	enum XlChartPictureType
	{
		xlStackScale = 3,
		xlStack = 2,
		xlStretch = 1
	};

	//________________________________________________________XlChartPicturePlacement
	enum XlChartPicturePlacement
	{
		xlSides = 1,
		xlEnd = 2,
		xlEndSides = 3,
		xlFront = 4,
		xlFrontSides = 5,
		xlFrontEnd = 6,
		xlAllFaces = 7
	};

	//________________________________________________________XlOrientation
	enum XlOrientation
	{
		xlDownward = -4170,
		xlHorizontal = -4128,
		xlUpward = -4171,
		xlVertical = -4166
	};

	//________________________________________________________XlTickLabelOrientation
	enum XlTickLabelOrientation
	{
		xlTickLabelOrientationAutomatic = -4105,
		xlTickLabelOrientationDownward = -4170,
		xlTickLabelOrientationHorizontal = -4128,
		xlTickLabelOrientationUpward = -4171,
		xlTickLabelOrientationVertical = -4166
	};

	//________________________________________________________XlBorderWeight
	enum XlBorderWeight
	{
		xlHairline = 1,
		xlMedium = -4138,
		xlThick = 4,
		xlThin = 2
	};

	//________________________________________________________XlDataSeriesDate
	enum XlDataSeriesDate
	{
		xlDay = 1,
		xlMonth = 3,
		xlWeekday = 2,
		xlYear = 4
	};

	//________________________________________________________XlUnderlineStyle
	enum XlUnderlineStyle
	{
		xlUnderlineStyleDouble = -4119,
		xlUnderlineStyleDoubleAccounting = 5,
		xlUnderlineStyleNone = -4142,
		xlUnderlineStyleSingle = 2,
		xlUnderlineStyleSingleAccounting = 4
	};

	//________________________________________________________XlErrorBarType
	enum XlErrorBarType
	{
		xlErrorBarTypeCustom = -4114,
		xlErrorBarTypeFixedValue = 1,
		xlErrorBarTypePercent = 2,
		xlErrorBarTypeStDev = -4155,
		xlErrorBarTypeStError = 4
	};

	//________________________________________________________XlTrendlineType
	enum XlTrendlineType
	{
		xlExponential = 5,
		xlLinear = -4132,
		xlLogarithmic = -4133,
		xlMovingAvg = 6,
		xlPolynomial = 3,
		xlPower = 4
	};

	//________________________________________________________XlLineStyle
	enum XlLineStyle
	{
		xlContinuous = 1,
		xlDash = -4115,
		xlDashDot = 4,
		xlDashDotDot = 5,
		xlDot = -4118,
		xlDouble = -4119,
		xlSlantDashDot = 13,
		xlLineStyleNone = -4142
	};

	//________________________________________________________XlDataLabelsType
	enum XlDataLabelsType
	{
		xlDataLabelsShowNone = -4142,
		xlDataLabelsShowValue = 2,
		xlDataLabelsShowPercent = 3,
		xlDataLabelsShowLabel = 4,
		xlDataLabelsShowLabelAndPercent = 5,
		xlDataLabelsShowBubbleSizes = 6
	};

	//________________________________________________________XlMarkerStyle
	enum XlMarkerStyle
	{
		xlMarkerStyleAutomatic = -4105,
		xlMarkerStyleCircle = 8,
		xlMarkerStyleDash = -4115,
		xlMarkerStyleDiamond = 2,
		xlMarkerStyleDot = -4118,
		xlMarkerStyleNone = -4142,
		xlMarkerStylePicture = -4147,
		xlMarkerStylePlus = 9,
		xlMarkerStyleSquare = 1,
		xlMarkerStyleStar = 5,
		xlMarkerStyleTriangle = 3,
		xlMarkerStyleX = -4168
	};

	//________________________________________________________XlPictureConvertorType
	enum XlPictureConvertorType
	{
		xlBMP = 1,
		xlCGM = 7,
		xlDRW = 4,
		xlDXF = 5,
		xlEPS = 8,
		xlHGL = 6,
		xlPCT = 13,
		xlPCX = 10,
		xlPIC = 11,
		xlPLT = 12,
		xlTIF = 9,
		xlWMF = 2,
		xlWPG = 3
	};

	//________________________________________________________XlPattern
	enum XlPattern
	{
		xlPatternAutomatic = -4105,
		xlPatternChecker = 9,
		xlPatternCrissCross = 16,
		xlPatternDown = -4121,
		xlPatternGray16 = 17,
		xlPatternGray25 = -4124,
		xlPatternGray50 = -4125,
		xlPatternGray75 = -4126,
		xlPatternGray8 = 18,
		xlPatternGrid = 15,
		xlPatternHorizontal = -4128,
		xlPatternLightDown = 13,
		xlPatternLightHorizontal = 11,
		xlPatternLightUp = 14,
		xlPatternLightVertical = 12,
		xlPatternNone = -4142,
		xlPatternSemiGray75 = 10,
		xlPatternSolid = 1,
		xlPatternUp = -4162,
		xlPatternVertical = -4166,
		xlPatternLinearGradient = 4000,
		xlPatternRectangularGradient = 4001
	};

	//________________________________________________________XlChartSplitType
	enum XlChartSplitType
	{
		xlSplitByPosition = 1,
		xlSplitByPercentValue = 3,
		xlSplitByCustomSplit = 4,
		xlSplitByValue = 2
	};

	//________________________________________________________XlDisplayUnit
	enum XlDisplayUnit
	{
		xlHundreds = -2,
		xlThousands = -3,
		xlTenThousands = -4,
		xlHundredThousands = -5,
		xlMillions = -6,
		xlTenMillions = -7,
		xlHundredMillions = -8,
		xlThousandMillions = -9,
		xlMillionMillions = -10
	};

	//________________________________________________________XlDataLabelPosition
	enum XlDataLabelPosition
	{
		xlLabelPositionCenter = -4108,
		xlLabelPositionAbove = 0,
		xlLabelPositionBelow = 1,
		xlLabelPositionLeft = -4131,
		xlLabelPositionRight = -4152,
		xlLabelPositionOutsideEnd = 2,
		xlLabelPositionInsideEnd = 3,
		xlLabelPositionInsideBase = 4,
		xlLabelPositionBestFit = 5,
		xlLabelPositionMixed = 6,
		xlLabelPositionCustom = 7
	};

	//________________________________________________________XlTimeUnit
	enum XlTimeUnit
	{
		xlDays = 0,
		xlMonths = 1,
		xlYears = 2
	};

	//________________________________________________________XlCategoryType
	enum XlCategoryType
	{
		xlCategoryScale = 2,
		xlTimeScale = 3,
		xlAutomaticScale = -4105
	};

	//________________________________________________________XlBarShape
	enum XlBarShape
	{
		xlBox = 0,
		xlPyramidToPoint = 1,
		xlPyramidToMax = 2,
		xlCylinder = 3,
		xlConeToPoint = 4,
		xlConeToMax = 5
	};

	//________________________________________________________XlChartType
	enum XlChartType
	{
		xlColumnClustered = 51,
		xlColumnStacked = 52,
		xlColumnStacked100 = 53,
		xl3DColumnClustered = 54,
		xl3DColumnStacked = 55,
		xl3DColumnStacked100 = 56,
		xlBarClustered = 57,
		xlBarStacked = 58,
		xlBarStacked100 = 59,
		xl3DBarClustered = 60,
		xl3DBarStacked = 61,
		xl3DBarStacked100 = 62,
		xlLineStacked = 63,
		xlLineStacked100 = 64,
		xlLineMarkers = 65,
		xlLineMarkersStacked = 66,
		xlLineMarkersStacked100 = 67,
		xlPieOfPie = 68,
		xlPieExploded = 69,
		xl3DPieExploded = 70,
		xlBarOfPie = 71,
		xlXYScatterSmooth = 72,
		xlXYScatterSmoothNoMarkers = 73,
		xlXYScatterLines = 74,
		xlXYScatterLinesNoMarkers = 75,
		xlAreaStacked = 76,
		xlAreaStacked100 = 77,
		xl3DAreaStacked = 78,
		xl3DAreaStacked100 = 79,
		xlDoughnutExploded = 80,
		xlRadarMarkers = 81,
		xlRadarFilled = 82,
		xlSurface = 83,
		xlSurfaceWireframe = 84,
		xlSurfaceTopView = 85,
		xlSurfaceTopViewWireframe = 86,
		xlBubble = 15,
		xlBubble3DEffect = 87,
		xlStockHLC = 88,
		xlStockOHLC = 89,
		xlStockVHLC = 90,
		xlStockVOHLC = 91,
		xlCylinderColClustered = 92,
		xlCylinderColStacked = 93,
		xlCylinderColStacked100 = 94,
		xlCylinderBarClustered = 95,
		xlCylinderBarStacked = 96,
		xlCylinderBarStacked100 = 97,
		xlCylinderCol = 98,
		xlConeColClustered = 99,
		xlConeColStacked = 100,
		xlConeColStacked100 = 101,
		xlConeBarClustered = 102,
		xlConeBarStacked = 103,
		xlConeBarStacked100 = 104,
		xlConeCol = 105,
		xlPyramidColClustered = 106,
		xlPyramidColStacked = 107,
		xlPyramidColStacked100 = 108,
		xlPyramidBarClustered = 109,
		xlPyramidBarStacked = 110,
		xlPyramidBarStacked100 = 111,
		xlPyramidCol = 112,
		xl3DColumn = -4100,
		xlLine = 4,
		xl3DLine = -4101,
		xl3DPie = -4102,
		xlPie = 5,
		xlXYScatter = -4169,
		xl3DArea = -4098,
		xlArea = 1,
		xlDoughnut = -4120,
		xlRadar = -4151,
		xlTreemap = 117,
		xlHistogram = 118,
		xlWaterfall = 119,
		xlSunburst = 120,
		xlBoxwhisker = 121,
		xlPareto = 122,
		xlFunnel = 123,
		xlRegionMap = 140
	};

	//________________________________________________________XlChartItem
	enum XlChartItem
	{
		xlDataLabel = 0,
		xlChartArea = 2,
		xlSeries = 3,
		xlChartTitle = 4,
		xlWalls = 5,
		xlCorners = 6,
		xlDataTable = 7,
		xlTrendline = 8,
		xlErrorBars = 9,
		xlXErrorBars = 10,
		xlYErrorBars = 11,
		xlLegendEntry = 12,
		xlLegendKey = 13,
		xlShape = 14,
		xlMajorGridlines = 15,
		xlMinorGridlines = 16,
		xlAxisTitle = 17,
		xlUpBars = 18,
		xlPlotArea = 19,
		xlDownBars = 20,
		xlAxis = 21,
		xlSeriesLines = 22,
		xlFloor = 23,
		xlLegend = 24,
		xlHiLoLines = 25,
		xlDropLines = 26,
		xlRadarAxisLabels = 27,
		xlNothing = 28,
		xlLeaderLines = 29,
		xlDisplayUnitLabel = 30,
		xlPivotChartFieldButton = 31,
		xlPivotChartDropZone = 32,
		xlPivotChartExpandEntireFieldButton = 33,
		xlPivotChartCollapseEntireFieldButton = 34
	};

	//________________________________________________________XlSizeRepresents
	enum XlSizeRepresents
	{
		xlSizeIsWidth = 2,
		xlSizeIsArea = 1
	};

	//________________________________________________________XlInsertShiftDirection
	enum XlInsertShiftDirection
	{
		xlShiftDown = -4121,
		xlShiftToRight = -4161
	};

	//________________________________________________________XlDeleteShiftDirection
	enum XlDeleteShiftDirection
	{
		xlShiftToLeft = -4159,
		xlShiftUp = -4162
	};

	//________________________________________________________XlDirection
	enum XlDirection
	{
		xlDown = -4121,
		xlToLeft = -4159,
		xlToRight = -4161,
		xlUp = -4162
	};

	//________________________________________________________XlConsolidationFunction
	enum XlConsolidationFunction
	{
		xlAverage = -4106,
		xlCount = -4112,
		xlCountNums = -4113,
		xlMax = -4136,
		xlMin = -4139,
		xlProduct = -4149,
		xlStDev = -4155,
		xlStDevP = -4156,
		xlSum = -4157,
		xlVar = -4164,
		xlVarP = -4165,
		xlUnknown = 1000,
		xlDistinctCount = 11
	};

	//________________________________________________________XlSheetType
	enum XlSheetType
	{
		xlChart = -4109,
		xlDialogSheet = -4116,
		xlExcel4IntlMacroSheet = 4,
		xlExcel4MacroSheet = 3,
		xlWorksheet = -4167
	};

	//________________________________________________________XlLocationInTable
	enum XlLocationInTable
	{
		xlColumnHeader = -4110,
		xlColumnItem = 5,
		xlDataHeader = 3,
		xlDataItem = 7,
		xlPageHeader = 2,
		xlPageItem = 6,
		xlRowHeader = -4153,
		xlRowItem = 4,
		xlTableBody = 8
	};

	//________________________________________________________XlFindLookIn
	enum XlFindLookIn
	{
		xlFormulas = -4123,
		xlComments = -4144,
		xlValues = -4163
	};

	//________________________________________________________XlWindowType
	enum XlWindowType
	{
		xlChartAsWindow = 5,
		xlChartInPlace = 4,
		xlClipboard = 3,
		xlInfo = -4129,
		xlWorkbook = 1
	};

	//________________________________________________________XlPivotFieldDataType
	enum XlPivotFieldDataType
	{
		xlDate = 2,
		xlNumber = -4145,
		xlText = -4158
	};

	//________________________________________________________XlCopyPictureFormat
	enum XlCopyPictureFormat
	{
		xlBitmap = 2,
		xlPicture = -4147
	};

	//________________________________________________________XlPivotTableSourceType
	enum XlPivotTableSourceType
	{
		xlScenario = 4,
		xlConsolidation = 3,
		xlDatabase = 1,
		xlExternal = 2,
		xlPivotTable = -4148
	};

	//________________________________________________________XlReferenceStyle
	enum XlReferenceStyle
	{
		xlA1 = 1,
		xlR1C1 = -4150
	};

	//________________________________________________________XlMSApplication
	enum XlMSApplication
	{
		xlMicrosoftAccess = 4,
		xlMicrosoftFoxPro = 5,
		xlMicrosoftMail = 3,
		xlMicrosoftPowerPoint = 2,
		xlMicrosoftProject = 6,
		xlMicrosoftSchedulePlus = 7,
		xlMicrosoftWord = 1
	};

	//________________________________________________________XlMouseButton
	enum XlMouseButton
	{
		xlNoButton = 0,
		xlPrimaryButton = 1,
		xlSecondaryButton = 2
	};

	//________________________________________________________XlCutCopyMode
	enum XlCutCopyMode
	{
		xlCopy = 1,
		xlCut = 2
	};

	//________________________________________________________XlFillWith
	enum XlFillWith
	{
		xlFillWithAll = -4104,
		xlFillWithContents = 2,
		xlFillWithFormats = -4122
	};

	//________________________________________________________XlFilterAction
	enum XlFilterAction
	{
		xlFilterCopy = 2,
		xlFilterInPlace = 1
	};

	//________________________________________________________XlOrder
	enum XlOrder
	{
		xlDownThenOver = 1,
		xlOverThenDown = 2
	};

	//________________________________________________________XlLinkType
	enum XlLinkType
	{
		xlLinkTypeExcelLinks = 1,
		xlLinkTypeOLELinks = 2
	};

	//________________________________________________________XlApplyNamesOrder
	enum XlApplyNamesOrder
	{
		xlColumnThenRow = 2,
		xlRowThenColumn = 1
	};

	//________________________________________________________XlEnableCancelKey
	enum XlEnableCancelKey
	{
		xlDisabled = 0,
		xlErrorHandler = 2,
		xlInterrupt = 1
	};

	//________________________________________________________XlPageBreak
	enum XlPageBreak
	{
		xlPageBreakAutomatic = -4105,
		xlPageBreakManual = -4135,
		xlPageBreakNone = -4142
	};

	//________________________________________________________XlOLEType
	enum XlOLEType
	{
		xlOLEControl = 2,
		xlOLEEmbed = 1,
		xlOLELink = 0
	};

	//________________________________________________________XlPageOrientation
	enum XlPageOrientation
	{
		xlLandscape = 2,
		xlPortrait = 1
	};

	//________________________________________________________XlLinkInfo
	enum XlLinkInfo
	{
		xlEditionDate = 2,
		xlUpdateState = 1,
		xlLinkInfoStatus = 3
	};

	//________________________________________________________XlCommandUnderlines
	enum XlCommandUnderlines
	{
		xlCommandUnderlinesAutomatic = -4105,
		xlCommandUnderlinesOff = -4146,
		xlCommandUnderlinesOn = 1
	};

	//________________________________________________________XlOLEVerb
	enum XlOLEVerb
	{
		xlVerbOpen = 2,
		xlVerbPrimary = 1
	};

	//________________________________________________________XlCalculation
	enum XlCalculation
	{
		xlCalculationAutomatic = -4105,
		xlCalculationManual = -4135,
		xlCalculationSemiautomatic = 2
	};

	//________________________________________________________XlFileAccess
	enum XlFileAccess
	{
		xlReadOnly = 3,
		xlReadWrite = 2
	};

	//________________________________________________________XlEditionType
	enum XlEditionType
	{
		xlPublisher = 1,
		xlSubscriber = 2
	};

	//________________________________________________________XlObjectSize
	enum XlObjectSize
	{
		xlFitToPage = 2,
		xlFullPage = 3,
		xlScreenSize = 1
	};

	//________________________________________________________XlLookAt
	enum XlLookAt
	{
		xlPart = 2,
		xlWhole = 1
	};

	//________________________________________________________XlMailSystem
	enum XlMailSystem
	{
		xlMAPI = 1,
		xlNoMailSystem = 0,
		xlPowerTalk = 2
	};

	//________________________________________________________XlLinkInfoType
	enum XlLinkInfoType
	{
		xlLinkInfoOLELinks = 2,
		xlLinkInfoPublishers = 5,
		xlLinkInfoSubscribers = 6
	};

	//________________________________________________________XlCVError
	enum XlCVError
	{
		xlErrBlocked = 2047,
		xlErrConnect = 2046,
		xlErrDiv0 = 2007,
		xlErrField = 2049,
		xlErrGettingData = 2043,
		xlErrNA = 2042,
		xlErrName = 2029,
		xlErrNoSpill = 2045,
		xlErrNull = 2000,
		xlErrNum = 2036,
		xlErrRef = 2023,
		xlErrUnknown = 2048,
		xlErrValue = 2015
	};

	//________________________________________________________XlEditionFormat
	enum XlEditionFormat
	{
		xlBIFF = 2,
		xlPICT = 1,
		xlRTF = 4,
		xlVALU = 8
	};

	//________________________________________________________XlLink
	enum XlLink
	{
		xlExcelLinks = 1,
		xlOLELinks = 2,
		xlPublishers = 5,
		xlSubscribers = 6
	};

	//________________________________________________________XlCellType
	enum XlCellType
	{
		xlCellTypeBlanks = 4,
		xlCellTypeConstants = 2,
		xlCellTypeFormulas = -4123,
		xlCellTypeLastCell = 11,
		xlCellTypeComments = -4144,
		xlCellTypeVisible = 12,
		xlCellTypeAllFormatConditions = -4172,
		xlCellTypeSameFormatConditions = -4173,
		xlCellTypeAllValidation = -4174,
		xlCellTypeSameValidation = -4175
	};

	//________________________________________________________XlArrangeStyle
	enum XlArrangeStyle
	{
		xlArrangeStyleCascade = 7,
		xlArrangeStyleHorizontal = -4128,
		xlArrangeStyleTiled = 1,
		xlArrangeStyleVertical = -4166
	};

	//________________________________________________________XlMousePointer
	enum XlMousePointer
	{
		xlIBeam = 3,
		xlDefault = -4143,
		xlNorthwestArrow = 1,
		xlWait = 2
	};

	//________________________________________________________XlEditionOptionsOption
	enum XlEditionOptionsOption
	{
		xlAutomaticUpdate = 4,
		xlCancel = 1,
		xlChangeAttributes = 6,
		xlManualUpdate = 5,
		xlOpenSource = 3,
		xlSelect = 3,
		xlSendPublisher = 2,
		xlUpdateSubscriber = 2
	};

	//________________________________________________________XlAutoFillType
	enum XlAutoFillType
	{
		xlFillCopy = 1,
		xlFillDays = 5,
		xlFillDefault = 0,
		xlFillFormats = 3,
		xlFillMonths = 7,
		xlFillSeries = 2,
		xlFillValues = 4,
		xlFillWeekdays = 6,
		xlFillYears = 8,
		xlGrowthTrend = 10,
		xlLinearTrend = 9,
		xlFlashFill = 11
	};

	//________________________________________________________XlAutoFilterOperator
	enum XlAutoFilterOperator
	{
		xlAnd = 1,
		xlBottom10Items = 4,
		xlBottom10Percent = 6,
		xlOr = 2,
		xlTop10Items = 3,
		xlTop10Percent = 5,
		xlFilterValues = 7,
		xlFilterCellColor = 8,
		xlFilterFontColor = 9,
		xlFilterIcon = 10,
		xlFilterDynamic = 11,
		xlFilterNoFill = 12,
		xlFilterAutomaticFontColor = 13,
		xlFilterNoIcon = 14
	};

	//________________________________________________________XlClipboardFormat
	enum XlClipboardFormat
	{
		xlClipboardFormatBIFF12 = 63,
		xlClipboardFormatBIFF = 8,
		xlClipboardFormatBIFF2 = 18,
		xlClipboardFormatBIFF3 = 20,
		xlClipboardFormatBIFF4 = 30,
		xlClipboardFormatBinary = 15,
		xlClipboardFormatBitmap = 9,
		xlClipboardFormatCGM = 13,
		xlClipboardFormatCSV = 5,
		xlClipboardFormatDIF = 4,
		xlClipboardFormatDspText = 12,
		xlClipboardFormatEmbeddedObject = 21,
		xlClipboardFormatEmbedSource = 22,
		xlClipboardFormatLink = 11,
		xlClipboardFormatLinkSource = 23,
		xlClipboardFormatLinkSourceDesc = 32,
		xlClipboardFormatMovie = 24,
		xlClipboardFormatNative = 14,
		xlClipboardFormatObjectDesc = 31,
		xlClipboardFormatObjectLink = 19,
		xlClipboardFormatOwnerLink = 17,
		xlClipboardFormatPICT = 2,
		xlClipboardFormatPrintPICT = 3,
		xlClipboardFormatRTF = 7,
		xlClipboardFormatScreenPICT = 29,
		xlClipboardFormatStandardFont = 28,
		xlClipboardFormatStandardScale = 27,
		xlClipboardFormatSYLK = 6,
		xlClipboardFormatTable = 16,
		xlClipboardFormatText = 0,
		xlClipboardFormatToolFace = 25,
		xlClipboardFormatToolFacePICT = 26,
		xlClipboardFormatVALU = 1,
		xlClipboardFormatWK1 = 10
	};

	//________________________________________________________XlFileFormat
	enum XlFileFormat
	{
		xlAddIn = 18,
		xlCSV = 6,
		xlCSVMac = 22,
		xlCSVMSDOS = 24,
		xlCSVWindows = 23,
		xlDBF2 = 7,
		xlDBF3 = 8,
		xlDBF4 = 11,
		xlDIF = 9,
		xlExcel2 = 16,
		xlExcel2FarEast = 27,
		xlExcel3 = 29,
		xlExcel4 = 33,
		xlExcel5 = 39,
		xlExcel7 = 39,
		xlExcel9795 = 43,
		xlExcel4Workbook = 35,
		xlIntlAddIn = 26,
		xlIntlMacro = 25,
		xlWorkbookNormal = -4143,
		xlSYLK = 2,
		xlTemplate = 17,
		xlCurrentPlatformText = -4158,
		xlTextMac = 19,
		xlTextMSDOS = 21,
		xlTextPrinter = 36,
		xlTextWindows = 20,
		xlWJ2WD1 = 14,
		xlWK1 = 5,
		xlWK1ALL = 31,
		xlWK1FMT = 30,
		xlWK3 = 15,
		xlWK4 = 38,
		xlWK3FM3 = 32,
		xlWKS = 4,
		xlWorks2FarEast = 28,
		xlWQ1 = 34,
		xlWJ3 = 40,
		xlWJ3FJ3 = 41,
		xlUnicodeText = 42,
		xlHtml = 44,
		xlWebArchive = 45,
		xlXMLSpreadsheet = 46,
		xlExcel12 = 50,
		xlOpenXMLWorkbook = 51,
		xlOpenXMLWorkbookMacroEnabled = 52,
		xlOpenXMLTemplateMacroEnabled = 53,
		xlTemplate8 = 17,
		xlOpenXMLTemplate = 54,
		xlAddIn8 = 18,
		xlOpenXMLAddIn = 55,
		xlExcel8 = 56,
		xlOpenDocumentSpreadsheet = 60,
		xlOpenXMLStrictWorkbook = 61,
		xlCSVUTF8 = 62,
		xlWorkbookDefault = 51
	};

	//________________________________________________________XlApplicationInternational
	enum XlApplicationInternational
	{
		xl24HourClock = 33,
		xl4DigitYears = 43,
		xlAlternateArraySeparator = 16,
		xlColumnSeparator = 14,
		xlCountryCode = 1,
		xlCountrySetting = 2,
		xlCurrencyBefore = 37,
		xlCurrencyCode = 25,
		xlCurrencyDigits = 27,
		xlCurrencyLeadingZeros = 40,
		xlCurrencyMinusSign = 38,
		xlCurrencyNegative = 28,
		xlCurrencySpaceBefore = 36,
		xlCurrencyTrailingZeros = 39,
		xlDateOrder = 32,
		xlDateSeparator = 17,
		xlDayCode = 21,
		xlDayLeadingZero = 42,
		xlDecimalSeparator = 3,
		xlGeneralFormatName = 26,
		xlHourCode = 22,
		xlLeftBrace = 12,
		xlLeftBracket = 10,
		xlListSeparator = 5,
		xlLowerCaseColumnLetter = 9,
		xlLowerCaseRowLetter = 8,
		xlMDY = 44,
		xlMetric = 35,
		xlMinuteCode = 23,
		xlMonthCode = 20,
		xlMonthLeadingZero = 41,
		xlMonthNameChars = 30,
		xlNoncurrencyDigits = 29,
		xlNonEnglishFunctions = 34,
		xlRightBrace = 13,
		xlRightBracket = 11,
		xlRowSeparator = 15,
		xlSecondCode = 24,
		xlThousandsSeparator = 4,
		xlTimeLeadingZero = 45,
		xlTimeSeparator = 18,
		xlUpperCaseColumnLetter = 7,
		xlUpperCaseRowLetter = 6,
		xlWeekdayNameChars = 31,
		xlYearCode = 19,
		xlUICultureTag = 46
	};

	//________________________________________________________XlPageBreakExtent
	enum XlPageBreakExtent
	{
		xlPageBreakFull = 1,
		xlPageBreakPartial = 2
	};

	//________________________________________________________XlCellInsertionMode
	enum XlCellInsertionMode
	{
		xlOverwriteCells = 0,
		xlInsertDeleteCells = 1,
		xlInsertEntireRows = 2
	};

	//________________________________________________________XlFormulaLabel
	enum XlFormulaLabel
	{
		xlNoLabels = -4142,
		xlRowLabels = 1,
		xlColumnLabels = 2,
		xlMixedLabels = 3
	};

	//________________________________________________________XlHighlightChangesTime
	enum XlHighlightChangesTime
	{
		xlSinceMyLastSave = 1,
		xlAllChanges = 2,
		xlNotYetReviewed = 3
	};

	//________________________________________________________XlCommentDisplayMode
	enum XlCommentDisplayMode
	{
		xlNoIndicator = 0,
		xlCommentIndicatorOnly = -1,
		xlCommentAndIndicator = 1
	};

	//________________________________________________________XlFormatConditionType
	enum XlFormatConditionType
	{
		xlCellValue = 1,
		xlExpression = 2,
		xlColorScale = 3,
		xlDatabar = 4,
		xlTop10 = 5,
		xlIconSets = 6,
		xlUniqueValues = 8,
		xlTextString = 9,
		xlBlanksCondition = 10,
		xlTimePeriod = 11,
		xlAboveAverageCondition = 12,
		xlNoBlanksCondition = 13,
		xlErrorsCondition = 16,
		xlNoErrorsCondition = 17
	};

	//________________________________________________________XlFormatConditionOperator
	enum XlFormatConditionOperator
	{
		xlBetween = 1,
		xlNotBetween = 2,
		xlEqual = 3,
		xlNotEqual = 4,
		xlGreater = 5,
		xlLess = 6,
		xlGreaterEqual = 7,
		xlLessEqual = 8
	};

	//________________________________________________________XlEnableSelection
	enum XlEnableSelection
	{
		xlNoRestrictions = 0,
		xlUnlockedCells = 1,
		xlNoSelection = -4142
	};

	//________________________________________________________XlDVType
	enum XlDVType
	{
		xlValidateInputOnly = 0,
		xlValidateWholeNumber = 1,
		xlValidateDecimal = 2,
		xlValidateList = 3,
		xlValidateDate = 4,
		xlValidateTime = 5,
		xlValidateTextLength = 6,
		xlValidateCustom = 7
	};

	//________________________________________________________XlIMEMode
	enum XlIMEMode
	{
		xlIMEModeNoControl = 0,
		xlIMEModeOn = 1,
		xlIMEModeOff = 2,
		xlIMEModeDisable = 3,
		xlIMEModeHiragana = 4,
		xlIMEModeKatakana = 5,
		xlIMEModeKatakanaHalf = 6,
		xlIMEModeAlphaFull = 7,
		xlIMEModeAlpha = 8,
		xlIMEModeHangulFull = 9,
		xlIMEModeHangul = 10
	};

	//________________________________________________________XlDVAlertStyle
	enum XlDVAlertStyle
	{
		xlValidAlertStop = 1,
		xlValidAlertWarning = 2,
		xlValidAlertInformation = 3
	};

	//________________________________________________________XlChartLocation
	enum XlChartLocation
	{
		xlLocationAsNewSheet = 1,
		xlLocationAsObject = 2,
		xlLocationAutomatic = 3
	};

	//________________________________________________________XlPaperSize
	enum XlPaperSize
	{
		xlPaper10x14 = 16,
		xlPaper11x17 = 17,
		xlPaperA3 = 8,
		xlPaperA4 = 9,
		xlPaperA4Small = 10,
		xlPaperA5 = 11,
		xlPaperB4 = 12,
		xlPaperB5 = 13,
		xlPaperCsheet = 24,
		xlPaperDsheet = 25,
		xlPaperEnvelope10 = 20,
		xlPaperEnvelope11 = 21,
		xlPaperEnvelope12 = 22,
		xlPaperEnvelope14 = 23,
		xlPaperEnvelope9 = 19,
		xlPaperEnvelopeB4 = 33,
		xlPaperEnvelopeB5 = 34,
		xlPaperEnvelopeB6 = 35,
		xlPaperEnvelopeC3 = 29,
		xlPaperEnvelopeC4 = 30,
		xlPaperEnvelopeC5 = 28,
		xlPaperEnvelopeC6 = 31,
		xlPaperEnvelopeC65 = 32,
		xlPaperEnvelopeDL = 27,
		xlPaperEnvelopeItaly = 36,
		xlPaperEnvelopeMonarch = 37,
		xlPaperEnvelopePersonal = 38,
		xlPaperEsheet = 26,
		xlPaperExecutive = 7,
		xlPaperFanfoldLegalGerman = 41,
		xlPaperFanfoldStdGerman = 40,
		xlPaperFanfoldUS = 39,
		xlPaperFolio = 14,
		xlPaperLedger = 4,
		xlPaperLegal = 5,
		xlPaperLetter = 1,
		xlPaperLetterSmall = 2,
		xlPaperNote = 18,
		xlPaperQuarto = 15,
		xlPaperStatement = 6,
		xlPaperTabloid = 3,
		xlPaperUser = 256
	};

	//________________________________________________________XlPasteSpecialOperation
	enum XlPasteSpecialOperation
	{
		xlPasteSpecialOperationAdd = 2,
		xlPasteSpecialOperationDivide = 5,
		xlPasteSpecialOperationMultiply = 4,
		xlPasteSpecialOperationNone = -4142,
		xlPasteSpecialOperationSubtract = 3
	};

	//________________________________________________________XlPasteType
	enum XlPasteType
	{
		xlPasteAll = -4104,
		xlPasteAllUsingSourceTheme = 13,
		xlPasteAllMergingConditionalFormats = 14,
		xlPasteAllExceptBorders = 7,
		xlPasteFormats = -4122,
		xlPasteFormulas = -4123,
		xlPasteComments = -4144,
		xlPasteValues = -4163,
		xlPasteColumnWidths = 8,
		xlPasteValidation = 6,
		xlPasteFormulasAndNumberFormats = 11,
		xlPasteValuesAndNumberFormats = 12
	};

	//________________________________________________________XlPhoneticCharacterType
	enum XlPhoneticCharacterType
	{
		xlKatakanaHalf = 0,
		xlKatakana = 1,
		xlHiragana = 2,
		xlNoConversion = 3
	};

	//________________________________________________________XlPhoneticAlignment
	enum XlPhoneticAlignment
	{
		xlPhoneticAlignNoControl = 0,
		xlPhoneticAlignLeft = 1,
		xlPhoneticAlignCenter = 2,
		xlPhoneticAlignDistributed = 3
	};

	//________________________________________________________XlPictureAppearance
	enum XlPictureAppearance
	{
		xlPrinter = 2,
		xlScreen = 1
	};

	//________________________________________________________XlPivotFieldOrientation
	enum XlPivotFieldOrientation
	{
		xlColumnField = 2,
		xlDataField = 4,
		xlHidden = 0,
		xlPageField = 3,
		xlRowField = 1
	};

	//________________________________________________________XlPivotFieldCalculation
	enum XlPivotFieldCalculation
	{
		xlDifferenceFrom = 2,
		xlIndex = 9,
		xlNoAdditionalCalculation = -4143,
		xlPercentDifferenceFrom = 4,
		xlPercentOf = 3,
		xlPercentOfColumn = 7,
		xlPercentOfRow = 6,
		xlPercentOfTotal = 8,
		xlRunningTotal = 5,
		xlPercentOfParentRow = 10,
		xlPercentOfParentColumn = 11,
		xlPercentOfParent = 12,
		xlPercentRunningTotal = 13,
		xlRankAscending = 14,
		xlRankDecending = 15
	};

	//________________________________________________________XlPlacement
	enum XlPlacement
	{
		xlFreeFloating = 3,
		xlMove = 2,
		xlMoveAndSize = 1
	};

	//________________________________________________________XlPlatform
	enum XlPlatform
	{
		xlMacintosh = 1,
		xlMSDOS = 3,
		xlWindows = 2
	};

	//________________________________________________________XlPrintLocation
	enum XlPrintLocation
	{
		xlPrintSheetEnd = 1,
		xlPrintInPlace = 16,
		xlPrintNoComments = -4142
	};

	//________________________________________________________XlPriority
	enum XlPriority
	{
		xlPriorityHigh = -4127,
		xlPriorityLow = -4134,
		xlPriorityNormal = -4143
	};

	//________________________________________________________XlPTSelectionMode
	enum XlPTSelectionMode
	{
		xlLabelOnly = 1,
		xlDataAndLabel = 0,
		xlDataOnly = 2,
		xlOrigin = 3,
		xlButton = 15,
		xlBlanks = 4,
		xlFirstRow = 256
	};

	//________________________________________________________XlRangeAutoFormat
	enum XlRangeAutoFormat
	{
		xlRangeAutoFormat3DEffects1 = 13,
		xlRangeAutoFormat3DEffects2 = 14,
		xlRangeAutoFormatAccounting1 = 4,
		xlRangeAutoFormatAccounting2 = 5,
		xlRangeAutoFormatAccounting3 = 6,
		xlRangeAutoFormatAccounting4 = 17,
		xlRangeAutoFormatClassic1 = 1,
		xlRangeAutoFormatClassic2 = 2,
		xlRangeAutoFormatClassic3 = 3,
		xlRangeAutoFormatColor1 = 7,
		xlRangeAutoFormatColor2 = 8,
		xlRangeAutoFormatColor3 = 9,
		xlRangeAutoFormatList1 = 10,
		xlRangeAutoFormatList2 = 11,
		xlRangeAutoFormatList3 = 12,
		xlRangeAutoFormatLocalFormat1 = 15,
		xlRangeAutoFormatLocalFormat2 = 16,
		xlRangeAutoFormatLocalFormat3 = 19,
		xlRangeAutoFormatLocalFormat4 = 20,
		xlRangeAutoFormatReport1 = 21,
		xlRangeAutoFormatReport2 = 22,
		xlRangeAutoFormatReport3 = 23,
		xlRangeAutoFormatReport4 = 24,
		xlRangeAutoFormatReport5 = 25,
		xlRangeAutoFormatReport6 = 26,
		xlRangeAutoFormatReport7 = 27,
		xlRangeAutoFormatReport8 = 28,
		xlRangeAutoFormatReport9 = 29,
		xlRangeAutoFormatReport10 = 30,
		xlRangeAutoFormatClassicPivotTable = 31,
		xlRangeAutoFormatTable1 = 32,
		xlRangeAutoFormatTable2 = 33,
		xlRangeAutoFormatTable3 = 34,
		xlRangeAutoFormatTable4 = 35,
		xlRangeAutoFormatTable5 = 36,
		xlRangeAutoFormatTable6 = 37,
		xlRangeAutoFormatTable7 = 38,
		xlRangeAutoFormatTable8 = 39,
		xlRangeAutoFormatTable9 = 40,
		xlRangeAutoFormatTable10 = 41,
		xlRangeAutoFormatPTNone = 42,
		xlRangeAutoFormatNone = -4142,
		xlRangeAutoFormatSimple = -4154
	};

	//________________________________________________________XlReferenceType
	enum XlReferenceType
	{
		xlAbsolute = 1,
		xlAbsRowRelColumn = 2,
		xlRelative = 4,
		xlRelRowAbsColumn = 3
	};

	//________________________________________________________XlLayoutFormType
	enum XlLayoutFormType
	{
		xlTabular = 0,
		xlOutline = 1
	};

	//________________________________________________________XlRoutingSlipDelivery
	enum XlRoutingSlipDelivery
	{
		xlAllAtOnce = 2,
		xlOneAfterAnother = 1
	};

	//________________________________________________________XlRoutingSlipStatus
	enum XlRoutingSlipStatus
	{
		xlNotYetRouted = 0,
		xlRoutingComplete = 2,
		xlRoutingInProgress = 1
	};

	//________________________________________________________XlRunAutoMacro
	enum XlRunAutoMacro
	{
		xlAutoActivate = 3,
		xlAutoClose = 2,
		xlAutoDeactivate = 4,
		xlAutoOpen = 1
	};

	//________________________________________________________XlSaveAction
	enum XlSaveAction
	{
		xlDoNotSaveChanges = 2,
		xlSaveChanges = 1
	};

	//________________________________________________________XlSaveAsAccessMode
	enum XlSaveAsAccessMode
	{
		xlExclusive = 3,
		xlNoChange = 1,
		xlShared = 2
	};

	//________________________________________________________XlSaveConflictResolution
	enum XlSaveConflictResolution
	{
		xlLocalSessionChanges = 2,
		xlOtherSessionChanges = 3,
		xlUserResolution = 1
	};

	//________________________________________________________XlSearchDirection
	enum XlSearchDirection
	{
		xlNext = 1,
		xlPrevious = 2
	};

	//________________________________________________________XlSearchOrder
	enum XlSearchOrder
	{
		xlByColumns = 2,
		xlByRows = 1
	};

	//________________________________________________________XlSheetVisibility
	enum XlSheetVisibility
	{
		xlSheetVisible = -1,
		xlSheetHidden = 0,
		xlSheetVeryHidden = 2
	};

	//________________________________________________________XlSortMethod
	enum XlSortMethod
	{
		xlPinYin = 1,
		xlStroke = 2
	};

	//________________________________________________________XlSortMethodOld
	enum XlSortMethodOld
	{
		xlCodePage = 2,
		xlSyllabary = 1
	};

	//________________________________________________________XlSortOrder
	enum XlSortOrder
	{
		xlAscending = 1,
		xlDescending = 2
	};

	//________________________________________________________XlSortOrientation
	enum XlSortOrientation
	{
		xlSortRows = 2,
		xlSortColumns = 1
	};

	//________________________________________________________XlSortType
	enum XlSortType
	{
		xlSortLabels = 2,
		xlSortValues = 1
	};

	//________________________________________________________XlSpecialCellsValue
	enum XlSpecialCellsValue
	{
		xlErrors = 16,
		xlLogical = 4,
		xlNumbers = 1,
		xlTextValues = 2
	};

	//________________________________________________________XlSubscribeToFormat
	enum XlSubscribeToFormat
	{
		xlSubscribeToPicture = -4147,
		xlSubscribeToText = -4158
	};

	//________________________________________________________XlSummaryRow
	enum XlSummaryRow
	{
		xlSummaryAbove = 0,
		xlSummaryBelow = 1
	};

	//________________________________________________________XlSummaryColumn
	enum XlSummaryColumn
	{
		xlSummaryOnLeft = -4131,
		xlSummaryOnRight = -4152
	};

	//________________________________________________________XlSummaryReportType
	enum XlSummaryReportType
	{
		xlSummaryPivotTable = -4148,
		xlStandardSummary = 1
	};

	//________________________________________________________XlTabPosition
	enum XlTabPosition
	{
		xlTabPositionFirst = 0,
		xlTabPositionLast = 1
	};

	//________________________________________________________XlTextParsingType
	enum XlTextParsingType
	{
		xlDelimited = 1,
		xlFixedWidth = 2
	};

	//________________________________________________________XlTextQualifier
	enum XlTextQualifier
	{
		xlTextQualifierDoubleQuote = 1,
		xlTextQualifierNone = -4142,
		xlTextQualifierSingleQuote = 2
	};

	//________________________________________________________XlWBATemplate
	enum XlWBATemplate
	{
		xlWBATChart = -4109,
		xlWBATExcel4IntlMacroSheet = 4,
		xlWBATExcel4MacroSheet = 3,
		xlWBATWorksheet = -4167
	};

	//________________________________________________________XlWindowView
	enum XlWindowView
	{
		xlNormalView = 1,
		xlPageBreakPreview = 2,
		xlPageLayoutView = 3
	};

	//________________________________________________________XlXLMMacroType
	enum XlXLMMacroType
	{
		xlCommand = 2,
		xlFunction = 1,
		xlNotXLM = 3
	};

	//________________________________________________________XlYesNoGuess
	enum XlYesNoGuess
	{
		xlGuess = 0,
		xlNo = 2,
		xlYes = 1
	};

	//________________________________________________________XlBordersIndex
	enum XlBordersIndex
	{
		xlInsideHorizontal = 12,
		xlInsideVertical = 11,
		xlDiagonalDown = 5,
		xlDiagonalUp = 6,
		xlEdgeBottom = 9,
		xlEdgeLeft = 7,
		xlEdgeRight = 10,
		xlEdgeTop = 8
	};

	//________________________________________________________XlToolbarProtection
	enum XlToolbarProtection
	{
		xlNoButtonChanges = 1,
		xlNoChanges = 4,
		xlNoDockingChanges = 3,
		xlToolbarProtectionNone = -4143,
		xlNoShapeChanges = 2
	};

	//________________________________________________________XlBuiltInDialog
	enum XlBuiltInDialog
	{
		xlDialogOpen = 1,
		xlDialogOpenLinks = 2,
		xlDialogSaveAs = 5,
		xlDialogFileDelete = 6,
		xlDialogPageSetup = 7,
		xlDialogPrint = 8,
		xlDialogPrinterSetup = 9,
		xlDialogArrangeAll = 12,
		xlDialogWindowSize = 13,
		xlDialogWindowMove = 14,
		xlDialogRun = 17,
		xlDialogSetPrintTitles = 23,
		xlDialogFont = 26,
		xlDialogDisplay = 27,
		xlDialogProtectDocument = 28,
		xlDialogCalculation = 32,
		xlDialogExtract = 35,
		xlDialogDataDelete = 36,
		xlDialogSort = 39,
		xlDialogDataSeries = 40,
		xlDialogTable = 41,
		xlDialogFormatNumber = 42,
		xlDialogAlignment = 43,
		xlDialogStyle = 44,
		xlDialogBorder = 45,
		xlDialogCellProtection = 46,
		xlDialogColumnWidth = 47,
		xlDialogClear = 52,
		xlDialogPasteSpecial = 53,
		xlDialogEditDelete = 54,
		xlDialogInsert = 55,
		xlDialogPasteNames = 58,
		xlDialogDefineName = 61,
		xlDialogCreateNames = 62,
		xlDialogFormulaGoto = 63,
		xlDialogFormulaFind = 64,
		xlDialogGalleryArea = 67,
		xlDialogGalleryBar = 68,
		xlDialogGalleryColumn = 69,
		xlDialogGalleryLine = 70,
		xlDialogGalleryPie = 71,
		xlDialogGalleryScatter = 72,
		xlDialogCombination = 73,
		xlDialogGridlines = 76,
		xlDialogAxes = 78,
		xlDialogAttachText = 80,
		xlDialogPatterns = 84,
		xlDialogMainChart = 85,
		xlDialogOverlay = 86,
		xlDialogScale = 87,
		xlDialogFormatLegend = 88,
		xlDialogFormatText = 89,
		xlDialogParse = 91,
		xlDialogUnhide = 94,
		xlDialogWorkspace = 95,
		xlDialogActivate = 103,
		xlDialogCopyPicture = 108,
		xlDialogDeleteName = 110,
		xlDialogDeleteFormat = 111,
		xlDialogNew = 119,
		xlDialogRowHeight = 127,
		xlDialogFormatMove = 128,
		xlDialogFormatSize = 129,
		xlDialogFormulaReplace = 130,
		xlDialogSelectSpecial = 132,
		xlDialogApplyNames = 133,
		xlDialogReplaceFont = 134,
		xlDialogSplit = 137,
		xlDialogOutline = 142,
		xlDialogSaveWorkbook = 145,
		xlDialogCopyChart = 147,
		xlDialogFormatFont = 150,
		xlDialogNote = 154,
		xlDialogSetUpdateStatus = 159,
		xlDialogColorPalette = 161,
		xlDialogChangeLink = 166,
		xlDialogAppMove = 170,
		xlDialogAppSize = 171,
		xlDialogMainChartType = 185,
		xlDialogOverlayChartType = 186,
		xlDialogOpenMail = 188,
		xlDialogSendMail = 189,
		xlDialogStandardFont = 190,
		xlDialogConsolidate = 191,
		xlDialogSortSpecial = 192,
		xlDialogGallery3dArea = 193,
		xlDialogGallery3dColumn = 194,
		xlDialogGallery3dLine = 195,
		xlDialogGallery3dPie = 196,
		xlDialogView3d = 197,
		xlDialogGoalSeek = 198,
		xlDialogWorkgroup = 199,
		xlDialogFillGroup = 200,
		xlDialogUpdateLink = 201,
		xlDialogPromote = 202,
		xlDialogDemote = 203,
		xlDialogShowDetail = 204,
		xlDialogObjectProperties = 207,
		xlDialogSaveNewObject = 208,
		xlDialogApplyStyle = 212,
		xlDialogAssignToObject = 213,
		xlDialogObjectProtection = 214,
		xlDialogCreatePublisher = 217,
		xlDialogSubscribeTo = 218,
		xlDialogShowToolbar = 220,
		xlDialogPrintPreview = 222,
		xlDialogEditColor = 223,
		xlDialogFormatMain = 225,
		xlDialogFormatOverlay = 226,
		xlDialogEditSeries = 228,
		xlDialogDefineStyle = 229,
		xlDialogGalleryRadar = 249,
		xlDialogEditionOptions = 251,
		xlDialogZoom = 256,
		xlDialogInsertObject = 259,
		xlDialogSize = 261,
		xlDialogMove = 262,
		xlDialogFormatAuto = 269,
		xlDialogGallery3dBar = 272,
		xlDialogGallery3dSurface = 273,
		xlDialogCustomizeToolbar = 276,
		xlDialogWorkbookAdd = 281,
		xlDialogWorkbookMove = 282,
		xlDialogWorkbookCopy = 283,
		xlDialogWorkbookOptions = 284,
		xlDialogSaveWorkspace = 285,
		xlDialogChartWizard = 288,
		xlDialogAssignToTool = 293,
		xlDialogPlacement = 300,
		xlDialogFillWorkgroup = 301,
		xlDialogWorkbookNew = 302,
		xlDialogScenarioCells = 305,
		xlDialogScenarioAdd = 307,
		xlDialogScenarioEdit = 308,
		xlDialogScenarioSummary = 311,
		xlDialogPivotTableWizard = 312,
		xlDialogPivotFieldProperties = 313,
		xlDialogOptionsCalculation = 318,
		xlDialogOptionsEdit = 319,
		xlDialogOptionsView = 320,
		xlDialogAddinManager = 321,
		xlDialogMenuEditor = 322,
		xlDialogAttachToolbars = 323,
		xlDialogOptionsChart = 325,
		xlDialogVbaInsertFile = 328,
		xlDialogVbaProcedureDefinition = 330,
		xlDialogRoutingSlip = 336,
		xlDialogMailLogon = 339,
		xlDialogInsertPicture = 342,
		xlDialogGalleryDoughnut = 344,
		xlDialogChartTrend = 350,
		xlDialogWorkbookInsert = 354,
		xlDialogOptionsTransition = 355,
		xlDialogOptionsGeneral = 356,
		xlDialogFilterAdvanced = 370,
		xlDialogMailNextLetter = 378,
		xlDialogDataLabel = 379,
		xlDialogInsertTitle = 380,
		xlDialogFontProperties = 381,
		xlDialogMacroOptions = 382,
		xlDialogWorkbookUnhide = 384,
		xlDialogWorkbookName = 386,
		xlDialogGalleryCustom = 388,
		xlDialogAddChartAutoformat = 390,
		xlDialogChartAddData = 392,
		xlDialogTabOrder = 394,
		xlDialogSubtotalCreate = 398,
		xlDialogWorkbookTabSplit = 415,
		xlDialogWorkbookProtect = 417,
		xlDialogScrollbarProperties = 420,
		xlDialogPivotShowPages = 421,
		xlDialogTextToColumns = 422,
		xlDialogFormatCharttype = 423,
		xlDialogPivotFieldGroup = 433,
		xlDialogPivotFieldUngroup = 434,
		xlDialogCheckboxProperties = 435,
		xlDialogLabelProperties = 436,
		xlDialogListboxProperties = 437,
		xlDialogEditboxProperties = 438,
		xlDialogOpenText = 441,
		xlDialogPushbuttonProperties = 445,
		xlDialogFilter = 447,
		xlDialogFunctionWizard = 450,
		xlDialogSaveCopyAs = 456,
		xlDialogOptionsListsAdd = 458,
		xlDialogSeriesAxes = 460,
		xlDialogSeriesX = 461,
		xlDialogSeriesY = 462,
		xlDialogErrorbarX = 463,
		xlDialogErrorbarY = 464,
		xlDialogFormatChart = 465,
		xlDialogSeriesOrder = 466,
		xlDialogMailEditMailer = 470,
		xlDialogStandardWidth = 472,
		xlDialogScenarioMerge = 473,
		xlDialogProperties = 474,
		xlDialogSummaryInfo = 474,
		xlDialogFindFile = 475,
		xlDialogActiveCellFont = 476,
		xlDialogVbaMakeAddin = 478,
		xlDialogFileSharing = 481,
		xlDialogAutoCorrect = 485,
		xlDialogCustomViews = 493,
		xlDialogInsertNameLabel = 496,
		xlDialogSeriesShape = 504,
		xlDialogChartOptionsDataLabels = 505,
		xlDialogChartOptionsDataTable = 506,
		xlDialogSetBackgroundPicture = 509,
		xlDialogDataValidation = 525,
		xlDialogChartType = 526,
		xlDialogChartLocation = 527,
		_xlDialogPhonetic = 538,
		xlDialogChartSourceData = 540,
		_xlDialogChartSourceData = 541,
		xlDialogSeriesOptions = 557,
		xlDialogPivotTableOptions = 567,
		xlDialogPivotSolveOrder = 568,
		xlDialogPivotCalculatedField = 570,
		xlDialogPivotCalculatedItem = 572,
		xlDialogConditionalFormatting = 583,
		xlDialogInsertHyperlink = 596,
		xlDialogProtectSharing = 620,
		xlDialogOptionsME = 647,
		xlDialogPublishAsWebPage = 653,
		xlDialogPhonetic = 656,
		xlDialogNewWebQuery = 667,
		xlDialogImportTextFile = 666,
		xlDialogExternalDataProperties = 530,
		xlDialogWebOptionsGeneral = 683,
		xlDialogWebOptionsFiles = 684,
		xlDialogWebOptionsPictures = 685,
		xlDialogWebOptionsEncoding = 686,
		xlDialogWebOptionsFonts = 687,
		xlDialogPivotClientServerSet = 689,
		xlDialogPropertyFields = 754,
		xlDialogSearch = 731,
		xlDialogEvaluateFormula = 709,
		xlDialogDataLabelMultiple = 723,
		xlDialogChartOptionsDataLabelMultiple = 724,
		xlDialogErrorChecking = 732,
		xlDialogWebOptionsBrowsers = 773,
		xlDialogCreateList = 796,
		xlDialogPermission = 832,
		xlDialogMyPermission = 834,
		xlDialogDocumentInspector = 862,
		xlDialogNameManager = 977,
		xlDialogNewName = 978,
		xlDialogSparklineInsertLine = 1133,
		xlDialogSparklineInsertColumn = 1134,
		xlDialogSparklineInsertWinLoss = 1135,
		xlDialogSlicerSettings = 1179,
		xlDialogSlicerCreation = 1182,
		xlDialogSlicerPivotTableConnections = 1184,
		xlDialogPivotTableSlicerConnections = 1183,
		xlDialogPivotTableWhatIfAnalysisSettings = 1153,
		xlDialogSetManager = 1109,
		xlDialogSetMDXEditor = 1208,
		xlDialogSetTupleEditorOnRows = 1107,
		xlDialogSetTupleEditorOnColumns = 1108,
		xlDialogManageRelationships = 1271,
		xlDialogCreateRelationship = 1272,
		xlDialogRecommendedPivotTables = 1258,
		xlDialogForecastETS = 1300,
		xlDialogPivotDefaultLayout = 1360
	};

	//________________________________________________________XlParameterType
	enum XlParameterType
	{
		xlPrompt = 0,
		xlConstant = 1,
		xlRange = 2
	};

	//________________________________________________________XlParameterDataType
	enum XlParameterDataType
	{
		xlParamTypeUnknown = 0,
		xlParamTypeChar = 1,
		xlParamTypeNumeric = 2,
		xlParamTypeDecimal = 3,
		xlParamTypeInteger = 4,
		xlParamTypeSmallInt = 5,
		xlParamTypeFloat = 6,
		xlParamTypeReal = 7,
		xlParamTypeDouble = 8,
		xlParamTypeVarChar = 12,
		xlParamTypeDate = 9,
		xlParamTypeTime = 10,
		xlParamTypeTimestamp = 11,
		xlParamTypeLongVarChar = -1,
		xlParamTypeBinary = -2,
		xlParamTypeVarBinary = -3,
		xlParamTypeLongVarBinary = -4,
		xlParamTypeBigInt = -5,
		xlParamTypeTinyInt = -6,
		xlParamTypeBit = -7,
		xlParamTypeWChar = -8
	};

	//________________________________________________________XlFormControl
	enum XlFormControl
	{
		xlButtonControl = 0,
		xlCheckBox = 1,
		xlDropDown = 2,
		xlEditBox = 3,
		xlGroupBox = 4,
		xlLabel = 5,
		xlListBox = 6,
		xlOptionButton = 7,
		xlScrollBar = 8,
		xlSpinner = 9
	};

	//________________________________________________________XlSourceType
	enum XlSourceType
	{
		xlSourceWorkbook = 0,
		xlSourceSheet = 1,
		xlSourcePrintArea = 2,
		xlSourceAutoFilter = 3,
		xlSourceRange = 4,
		xlSourceChart = 5,
		xlSourcePivotTable = 6,
		xlSourceQuery = 7
	};

	//________________________________________________________XlHtmlType
	enum XlHtmlType
	{
		xlHtmlStatic = 0,
		xlHtmlCalc = 1,
		xlHtmlList = 2,
		xlHtmlChart = 3
	};

	//________________________________________________________XlPivotFormatType
	enum XlPivotFormatType
	{
		xlReport1 = 0,
		xlReport2 = 1,
		xlReport3 = 2,
		xlReport4 = 3,
		xlReport5 = 4,
		xlReport6 = 5,
		xlReport7 = 6,
		xlReport8 = 7,
		xlReport9 = 8,
		xlReport10 = 9,
		xlTable1 = 10,
		xlTable2 = 11,
		xlTable3 = 12,
		xlTable4 = 13,
		xlTable5 = 14,
		xlTable6 = 15,
		xlTable7 = 16,
		xlTable8 = 17,
		xlTable9 = 18,
		xlTable10 = 19,
		xlPTClassic = 20,
		xlPTNone = 21
	};

	//________________________________________________________XlCmdType
	enum XlCmdType
	{
		xlCmdCube = 1,
		xlCmdSql = 2,
		xlCmdTable = 3,
		xlCmdDefault = 4,
		xlCmdList = 5,
		xlCmdTableCollection = 6,
		xlCmdExcel = 7,
		xlCmdDAX = 8
	};

	//________________________________________________________XlColumnDataType
	enum XlColumnDataType
	{
		xlGeneralFormat = 1,
		xlTextFormat = 2,
		xlMDYFormat = 3,
		xlDMYFormat = 4,
		xlYMDFormat = 5,
		xlMYDFormat = 6,
		xlDYMFormat = 7,
		xlYDMFormat = 8,
		xlSkipColumn = 9,
		xlEMDFormat = 10
	};

	//________________________________________________________XlQueryType
	enum XlQueryType
	{
		xlODBCQuery = 1,
		xlDAORecordset = 2,
		xlWebQuery = 4,
		xlOLEDBQuery = 5,
		xlTextImport = 6,
		xlADORecordset = 7
	};

	//________________________________________________________XlWebSelectionType
	enum XlWebSelectionType
	{
		xlEntirePage = 1,
		xlAllTables = 2,
		xlSpecifiedTables = 3
	};

	//________________________________________________________XlCubeFieldType
	enum XlCubeFieldType
	{
		xlHierarchy = 1,
		xlMeasure = 2,
		xlSet = 3
	};

	//________________________________________________________XlWebFormatting
	enum XlWebFormatting
	{
		xlWebFormattingAll = 1,
		xlWebFormattingRTF = 2,
		xlWebFormattingNone = 3
	};

	//________________________________________________________XlDisplayDrawingObjects
	enum XlDisplayDrawingObjects
	{
		xlDisplayShapes = -4104,
		xlHide = 3,
		xlPlaceholders = 2
	};

	//________________________________________________________XlSubtototalLocationType
	enum XlSubtototalLocationType
	{
		xlAtTop = 1,
		xlAtBottom = 2
	};

	//________________________________________________________XlPivotTableVersionList
	enum XlPivotTableVersionList
	{
		xlPivotTableVersion2000 = 0,
		xlPivotTableVersion10 = 1,
		xlPivotTableVersion11 = 2,
		xlPivotTableVersion12 = 3,
		xlPivotTableVersion14 = 4,
		xlPivotTableVersion15 = 5,
		xlPivotTableVersionCurrent = -1
	};

	//________________________________________________________XlPrintErrors
	enum XlPrintErrors
	{
		xlPrintErrorsDisplayed = 0,
		xlPrintErrorsBlank = 1,
		xlPrintErrorsDash = 2,
		xlPrintErrorsNA = 3
	};

	//________________________________________________________XlPivotCellType
	enum XlPivotCellType
	{
		xlPivotCellValue = 0,
		xlPivotCellPivotItem = 1,
		xlPivotCellSubtotal = 2,
		xlPivotCellGrandTotal = 3,
		xlPivotCellDataField = 4,
		xlPivotCellPivotField = 5,
		xlPivotCellPageFieldItem = 6,
		xlPivotCellCustomSubtotal = 7,
		xlPivotCellDataPivotField = 8,
		xlPivotCellBlankCell = 9
	};

	//________________________________________________________XlPivotTableMissingItems
	enum XlPivotTableMissingItems
	{
		xlMissingItemsDefault = -1,
		xlMissingItemsNone = 0,
		xlMissingItemsMax = 32500,
		xlMissingItemsMax2 = 1048576
	};

	//________________________________________________________XlCalculationState
	enum XlCalculationState
	{
		xlDone = 0,
		xlCalculating = 1,
		xlPending = 2
	};

	//________________________________________________________XlCalculationInterruptKey
	enum XlCalculationInterruptKey
	{
		xlNoKey = 0,
		xlEscKey = 1,
		xlAnyKey = 2
	};

	//________________________________________________________XlSortDataOption
	enum XlSortDataOption
	{
		xlSortNormal = 0,
		xlSortTextAsNumbers = 1
	};

	//________________________________________________________XlUpdateLinks
	enum XlUpdateLinks
	{
		xlUpdateLinksUserSetting = 1,
		xlUpdateLinksNever = 2,
		xlUpdateLinksAlways = 3
	};

	//________________________________________________________XlLinkStatus
	enum XlLinkStatus
	{
		xlLinkStatusOK = 0,
		xlLinkStatusMissingFile = 1,
		xlLinkStatusMissingSheet = 2,
		xlLinkStatusOld = 3,
		xlLinkStatusSourceNotCalculated = 4,
		xlLinkStatusIndeterminate = 5,
		xlLinkStatusNotStarted = 6,
		xlLinkStatusInvalidName = 7,
		xlLinkStatusSourceNotOpen = 8,
		xlLinkStatusSourceOpen = 9,
		xlLinkStatusCopiedValues = 10
	};

	//________________________________________________________XlSearchWithin
	enum XlSearchWithin
	{
		xlWithinSheet = 1,
		xlWithinWorkbook = 2
	};

	//________________________________________________________XlCorruptLoad
	enum XlCorruptLoad
	{
		xlNormalLoad = 0,
		xlRepairFile = 1,
		xlExtractData = 2
	};

	//________________________________________________________XlRobustConnect
	enum XlRobustConnect
	{
		xlAsRequired = 0,
		xlAlways = 1,
		xlNever = 2
	};

	//________________________________________________________XlErrorChecks
	enum XlErrorChecks
	{
		xlEvaluateToError = 1,
		xlTextDate = 2,
		xlNumberAsText = 3,
		xlInconsistentFormula = 4,
		xlOmittedCells = 5,
		xlUnlockedFormulaCells = 6,
		xlEmptyCellReferences = 7,
		xlListDataValidation = 8,
		xlInconsistentListFormula = 9
	};

	//________________________________________________________XlDataLabelSeparator
	enum XlDataLabelSeparator
	{
		//	xlDataLabelSeparatorDefault = 1
	};

	//________________________________________________________XlSmartTagDisplayMode
	enum XlSmartTagDisplayMode
	{
		xlIndicatorAndButton = 0,
		xlDisplayNone = 1,
		xlButtonOnly = 2
	};

	//________________________________________________________XlRangeValueDataType
	enum XlRangeValueDataType
	{
		xlRangeValueDefault = 10,
		xlRangeValueXMLSpreadsheet = 11,
		xlRangeValueMSPersistXML = 12
	};

	//________________________________________________________XlSpeakDirection
	enum XlSpeakDirection
	{
		xlSpeakByRows = 0,
		xlSpeakByColumns = 1
	};

	//________________________________________________________XlInsertFormatOrigin
	enum XlInsertFormatOrigin
	{
		xlFormatFromLeftOrAbove = 0,
		xlFormatFromRightOrBelow = 1
	};

	//________________________________________________________XlArabicModes
	enum XlArabicModes
	{
		xlArabicNone = 0,
		xlArabicStrictAlefHamza = 1,
		xlArabicStrictFinalYaa = 2,
		xlArabicBothStrict = 3
	};

	//________________________________________________________XlImportDataAs
	enum XlImportDataAs
	{
		xlQueryTable = 0,
		xlPivotTableReport = 1,
		xlTable = 2
	};

	//________________________________________________________XlCalculatedMemberType
	enum XlCalculatedMemberType
	{
		xlCalculatedMember = 0,
		xlCalculatedSet = 1,
		xlCalculatedMeasure = 2
	};

	//________________________________________________________XlHebrewModes
	enum XlHebrewModes
	{
		xlHebrewFullScript = 0,
		xlHebrewPartialScript = 1,
		xlHebrewMixedScript = 2,
		xlHebrewMixedAuthorizedScript = 3
	};

	//________________________________________________________XlListObjectSourceType
	enum XlListObjectSourceType
	{
		xlSrcExternal = 0,
		xlSrcRange = 1,
		xlSrcXml = 2,
		xlSrcQuery = 3,
		xlSrcModel = 4
	};

	//________________________________________________________XlTextVisualLayoutType
	enum XlTextVisualLayoutType
	{
		xlTextVisualLTR = 1,
		xlTextVisualRTL = 2
	};

	//________________________________________________________XlListDataType
	enum XlListDataType
	{
		xlListDataTypeNone = 0,
		xlListDataTypeText = 1,
		xlListDataTypeMultiLineText = 2,
		xlListDataTypeNumber = 3,
		xlListDataTypeCurrency = 4,
		xlListDataTypeDateTime = 5,
		xlListDataTypeChoice = 6,
		xlListDataTypeChoiceMulti = 7,
		xlListDataTypeListLookup = 8,
		xlListDataTypeCheckbox = 9,
		xlListDataTypeHyperLink = 10,
		xlListDataTypeCounter = 11,
		xlListDataTypeMultiLineRichText = 12
	};

	//________________________________________________________XlTotalsCalculation
	enum XlTotalsCalculation
	{
		xlTotalsCalculationNone = 0,
		xlTotalsCalculationSum = 1,
		xlTotalsCalculationAverage = 2,
		xlTotalsCalculationCount = 3,
		xlTotalsCalculationCountNums = 4,
		xlTotalsCalculationMin = 5,
		xlTotalsCalculationMax = 6,
		xlTotalsCalculationStdDev = 7,
		xlTotalsCalculationVar = 8,
		xlTotalsCalculationCustom = 9
	};

	//________________________________________________________XlXmlLoadOption
	enum XlXmlLoadOption
	{
		xlXmlLoadPromptUser = 0,
		xlXmlLoadOpenXml = 1,
		xlXmlLoadImportToList = 2,
		xlXmlLoadMapXml = 3
	};

	//________________________________________________________XlSmartTagControlType
	enum XlSmartTagControlType
	{
		xlSmartTagControlSmartTag = 1,
		xlSmartTagControlLink = 2,
		xlSmartTagControlHelp = 3,
		xlSmartTagControlHelpURL = 4,
		xlSmartTagControlSeparator = 5,
		xlSmartTagControlButton = 6,
		xlSmartTagControlLabel = 7,
		xlSmartTagControlImage = 8,
		xlSmartTagControlCheckbox = 9,
		xlSmartTagControlTextbox = 10,
		xlSmartTagControlListbox = 11,
		xlSmartTagControlCombo = 12,
		xlSmartTagControlActiveX = 13,
		xlSmartTagControlRadioGroup = 14
	};

	//________________________________________________________XlListConflict
	enum XlListConflict
	{
		xlListConflictDialog = 0,
		xlListConflictRetryAllConflicts = 1,
		xlListConflictDiscardAllConflicts = 2,
		xlListConflictError = 3
	};

	//________________________________________________________XlXmlExportResult
	enum XlXmlExportResult
	{
		xlXmlExportSuccess = 0,
		xlXmlExportValidationFailed = 1
	};

	//________________________________________________________XlXmlImportResult
	enum XlXmlImportResult
	{
		xlXmlImportSuccess = 0,
		xlXmlImportElementsTruncated = 1,
		xlXmlImportValidationFailed = 2
	};

	//________________________________________________________XlRemoveDocInfoType
	enum XlRemoveDocInfoType
	{
		xlRDIComments = 1,
		xlRDIRemovePersonalInformation = 4,
		xlRDIEmailHeader = 5,
		xlRDIRoutingSlip = 6,
		xlRDISendForReview = 7,
		xlRDIDocumentProperties = 8,
		xlRDIDocumentWorkspace = 10,
		xlRDIInkAnnotations = 11,
		xlRDIScenarioComments = 12,
		xlRDIPublishInfo = 13,
		xlRDIDocumentServerProperties = 14,
		xlRDIDocumentManagementPolicy = 15,
		xlRDIContentType = 16,
		xlRDIDefinedNameComments = 18,
		xlRDIInactiveDataConnections = 19,
		xlRDIPrinterPath = 20,
		xlRDIInlineWebExtensions = 21,
		xlRDITaskpaneWebExtensions = 22,
		xlRDIExcelDataModel = 23,
		xlRDIAll = 99
	};

	//________________________________________________________XlRgbColor
	enum XlRgbColor
	{
		rgbAliceBlue = 16775408,
		rgbAntiqueWhite = 14150650,
		rgbAqua = 16776960,
		rgbAquamarine = 13959039,
		rgbAzure = 16777200,
		rgbBeige = 14480885,
		rgbBisque = 12903679,
		rgbBlack = 0,
		rgbBlanchedAlmond = 13495295,
		rgbBlue = 16711680,
		rgbBlueViolet = 14822282,
		rgbBrown = 2763429,
		rgbBurlyWood = 8894686,
		rgbCadetBlue = 10526303,
		rgbChartreuse = 65407,
		rgbCoral = 5275647,
		rgbCornflowerBlue = 15570276,
		rgbCornsilk = 14481663,
		rgbCrimson = 3937500,
		rgbDarkBlue = 9109504,
		rgbDarkCyan = 9145088,
		rgbDarkGoldenrod = 755384,
		rgbDarkGreen = 25600,
		rgbDarkGray = 11119017,
		rgbDarkGrey = 11119017,
		rgbDarkKhaki = 7059389,
		rgbDarkMagenta = 9109643,
		rgbDarkOliveGreen = 3107669,
		rgbDarkOrange = 36095,
		rgbDarkOrchid = 13382297,
		rgbDarkRed = 139,
		rgbDarkSalmon = 8034025,
		rgbDarkSeaGreen = 9419919,
		rgbDarkSlateBlue = 9125192,
		rgbDarkSlateGray = 5197615,
		rgbDarkSlateGrey = 5197615,
		rgbDarkTurquoise = 13749760,
		rgbDarkViolet = 13828244,
		rgbDeepPink = 9639167,
		rgbDeepSkyBlue = 16760576,
		rgbDimGray = 6908265,
		rgbDimGrey = 6908265,
		rgbDodgerBlue = 16748574,
		rgbFireBrick = 2237106,
		rgbFloralWhite = 15792895,
		rgbForestGreen = 2263842,
		rgbFuchsia = 16711935,
		rgbGainsboro = 14474460,
		rgbGhostWhite = 16775416,
		rgbGold = 55295,
		rgbGoldenrod = 2139610,
		rgbGray = 8421504,
		rgbGreen = 32768,
		rgbGrey = 8421504,
		rgbGreenYellow = 3145645,
		rgbHoneydew = 15794160,
		rgbHotPink = 11823615,
		rgbIndianRed = 6053069,
		rgbIndigo = 8519755,
		rgbIvory = 15794175,
		rgbKhaki = 9234160,
		rgbLavender = 16443110,
		rgbLavenderBlush = 16118015,
		rgbLawnGreen = 64636,
		rgbLemonChiffon = 13499135,
		rgbLightBlue = 15128749,
		rgbLightCoral = 8421616,
		rgbLightCyan = 9145088,
		rgbLightGoldenrodYellow = 13826810,
		rgbLightGray = 13882323,
		rgbLightGreen = 9498256,
		rgbLightGrey = 13882323,
		rgbLightPink = 12695295,
		rgbLightSalmon = 8036607,
		rgbLightSeaGreen = 11186720,
		rgbLightSkyBlue = 16436871,
		rgbLightSlateGray = 10061943,
		rgbLightSlateGrey = 10061943,
		rgbLightSteelBlue = 14599344,
		rgbLightYellow = 14745599,
		rgbLime = 65280,
		rgbLimeGreen = 3329330,
		rgbLinen = 15134970,
		rgbMaroon = 128,
		rgbMediumAquamarine = 11206502,
		rgbMediumBlue = 13434880,
		rgbMediumOrchid = 13850042,
		rgbMediumPurple = 14381203,
		rgbMediumSeaGreen = 7451452,
		rgbMediumSlateBlue = 15624315,
		rgbMediumSpringGreen = 10156544,
		rgbMediumTurquoise = 13422920,
		rgbMediumVioletRed = 8721863,
		rgbMidnightBlue = 7346457,
		rgbMintCream = 16449525,
		rgbMistyRose = 14804223,
		rgbMoccasin = 11920639,
		rgbNavajoWhite = 11394815,
		rgbNavy = 8388608,
		rgbNavyBlue = 8388608,
		rgbOldLace = 15136253,
		rgbOlive = 32896,
		rgbOliveDrab = 2330219,
		rgbOrange = 42495,
		rgbOrangeRed = 17919,
		rgbOrchid = 14053594,
		rgbPaleGoldenrod = 7071982,
		rgbPaleGreen = 10025880,
		rgbPaleTurquoise = 15658671,
		rgbPaleVioletRed = 9662683,
		rgbPapayaWhip = 14020607,
		rgbPeachPuff = 12180223,
		rgbPeru = 4163021,
		rgbPink = 13353215,
		rgbPlum = 14524637,
		rgbPowderBlue = 15130800,
		rgbPurple = 8388736,
		rgbRed = 255,
		rgbRosyBrown = 9408444,
		rgbRoyalBlue = 14772545,
		rgbSalmon = 7504122,
		rgbSandyBrown = 6333684,
		rgbSeaGreen = 5737262,
		rgbSeashell = 15660543,
		rgbSienna = 2970272,
		rgbSilver = 12632256,
		rgbSkyBlue = 15453831,
		rgbSlateBlue = 13458026,
		rgbSlateGray = 9470064,
		rgbSlateGrey = 9470064,
		rgbSnow = 16448255,
		rgbSpringGreen = 8388352,
		rgbSteelBlue = 11829830,
		rgbTan = 9221330,
		rgbTeal = 8421376,
		rgbThistle = 14204888,
		rgbTomato = 4678655,
		rgbTurquoise = 13688896,
		rgbYellow = 65535,
		rgbYellowGreen = 3329434,
		rgbViolet = 15631086,
		rgbWheat = 11788021,
		rgbWhite = 16777215,
		rgbWhiteSmoke = 16119285
	};

	//________________________________________________________XlStdColorScale
	enum XlStdColorScale
	{
		xlColorScaleRYG = 1,
		xlColorScaleGYR = 2,
		xlColorScaleBlackWhite = 3,
		xlColorScaleWhiteBlack = 4
	};

	//________________________________________________________XlConditionValueTypes
	enum XlConditionValueTypes
	{
		xlConditionValueNone = -1,
		xlConditionValueNumber = 0,
		xlConditionValueLowestValue = 1,
		xlConditionValueHighestValue = 2,
		xlConditionValuePercent = 3,
		xlConditionValueFormula = 4,
		xlConditionValuePercentile = 5,
		xlConditionValueAutomaticMin = 6,
		xlConditionValueAutomaticMax = 7
	};

	//________________________________________________________XlFormatFilterTypes
	enum XlFormatFilterTypes
	{
		xlFilterBottom = 0,
		xlFilterTop = 1,
		xlFilterBottomPercent = 2,
		xlFilterTopPercent = 3
	};

	//________________________________________________________XlContainsOperator
	enum XlContainsOperator
	{
		xlContains = 0,
		xlDoesNotContain = 1,
		xlBeginsWith = 2,
		xlEndsWith = 3
	};

	//________________________________________________________XlAboveBelow
	enum XlAboveBelow
	{
		xlAboveAverage = 0,
		xlBelowAverage = 1,
		xlEqualAboveAverage = 2,
		xlEqualBelowAverage = 3,
		xlAboveStdDev = 4,
		xlBelowStdDev = 5
	};

	//________________________________________________________XlLookFor
	enum XlLookFor
	{
		xlLookForBlanks = 0,
		xlLookForErrors = 1,
		xlLookForFormulas = 2
	};

	//________________________________________________________XlTimePeriods
	enum XlTimePeriods
	{
		xlToday = 0,
		xlYesterday = 1,
		xlLast7Days = 2,
		xlThisWeek = 3,
		xlLastWeek = 4,
		xlLastMonth = 5,
		xlTomorrow = 6,
		xlNextWeek = 7,
		xlNextMonth = 8,
		xlThisMonth = 9
	};

	//________________________________________________________XlDupeUnique
	enum XlDupeUnique
	{
		xlUnique = 0,
		xlDuplicate = 1
	};

	//________________________________________________________XlTopBottom
	enum XlTopBottom
	{
		xlTop10Top = 1,
		xlTop10Bottom = 0
	};

	//________________________________________________________XlIconSet
	enum XlIconSet
	{
		xlCustomSet = -1,
		xl3Arrows = 1,
		xl3ArrowsGray = 2,
		xl3Flags = 3,
		xl3TrafficLights1 = 4,
		xl3TrafficLights2 = 5,
		xl3Signs = 6,
		xl3Symbols = 7,
		xl3Symbols2 = 8,
		xl4Arrows = 9,
		xl4ArrowsGray = 10,
		xl4RedToBlack = 11,
		xl4CRV = 12,
		xl4TrafficLights = 13,
		xl5Arrows = 14,
		xl5ArrowsGray = 15,
		xl5CRV = 16,
		xl5Quarters = 17,
		xl3Stars = 18,
		xl3Triangles = 19,
		xl5Boxes = 20
	};

	//________________________________________________________XlThemeFont
	enum XlThemeFont
	{
		xlThemeFontNone = 0,
		xlThemeFontMajor = 1,
		xlThemeFontMinor = 2
	};

	//________________________________________________________XlPivotLineType
	enum XlPivotLineType
	{
		xlPivotLineRegular = 0,
		xlPivotLineSubtotal = 1,
		xlPivotLineGrandTotal = 2,
		xlPivotLineBlank = 3
	};

	//________________________________________________________XlCheckInVersionType
	enum XlCheckInVersionType
	{
		xlCheckInMinorVersion = 0,
		xlCheckInMajorVersion = 1,
		xlCheckInOverwriteVersion = 2
	};

	//________________________________________________________XlPropertyDisplayedIn
	enum XlPropertyDisplayedIn
	{
		xlDisplayPropertyInPivotTable = 1,
		xlDisplayPropertyInTooltip = 2,
		xlDisplayPropertyInPivotTableAndTooltip = 3
	};

	//________________________________________________________XlConnectionType
	enum XlConnectionType
	{
		xlConnectionTypeOLEDB = 1,
		xlConnectionTypeODBC = 2,
		xlConnectionTypeXMLMAP = 3,
		xlConnectionTypeTEXT = 4,
		xlConnectionTypeWEB = 5,
		xlConnectionTypeDATAFEED = 6,
		xlConnectionTypeMODEL = 7,
		xlConnectionTypeWORKSHEET = 8,
		xlConnectionTypeNOSOURCE = 9
	};

	//________________________________________________________XlActionType
	enum XlActionType
	{
		xlActionTypeUrl = 1,
		xlActionTypeRowset = 16,
		xlActionTypeReport = 128,
		xlActionTypeDrillthrough = 256
	};

	//________________________________________________________XlLayoutRowType
	enum XlLayoutRowType
	{
		xlCompactRow = 0,
		xlTabularRow = 1,
		xlOutlineRow = 2
	};

	//________________________________________________________XlMeasurementUnits
	enum XlMeasurementUnits
	{
		xlInches = 0,
		xlCentimeters = 1,
		xlMillimeters = 2
	};

	//________________________________________________________XlPivotFilterType
	enum XlPivotFilterType
	{
		xlTopCount = 1,
		xlBottomCount = 2,
		xlTopPercent = 3,
		xlBottomPercent = 4,
		xlTopSum = 5,
		xlBottomSum = 6,
		xlValueEquals = 7,
		xlValueDoesNotEqual = 8,
		xlValueIsGreaterThan = 9,
		xlValueIsGreaterThanOrEqualTo = 10,
		xlValueIsLessThan = 11,
		xlValueIsLessThanOrEqualTo = 12,
		xlValueIsBetween = 13,
		xlValueIsNotBetween = 14,
		xlCaptionEquals = 15,
		xlCaptionDoesNotEqual = 16,
		xlCaptionBeginsWith = 17,
		xlCaptionDoesNotBeginWith = 18,
		xlCaptionEndsWith = 19,
		xlCaptionDoesNotEndWith = 20,
		xlCaptionContains = 21,
		xlCaptionDoesNotContain = 22,
		xlCaptionIsGreaterThan = 23,
		xlCaptionIsGreaterThanOrEqualTo = 24,
		xlCaptionIsLessThan = 25,
		xlCaptionIsLessThanOrEqualTo = 26,
		xlCaptionIsBetween = 27,
		xlCaptionIsNotBetween = 28,
		xlSpecificDate = 29,
		xlNotSpecificDate = 30,
		xlBefore = 31,
		xlBeforeOrEqualTo = 32,
		xlAfter = 33,
		xlAfterOrEqualTo = 34,
		xlDateBetween = 35,
		xlDateNotBetween = 36,
		xlDateTomorrow = 37,
		xlDateToday = 38,
		xlDateYesterday = 39,
		xlDateNextWeek = 40,
		xlDateThisWeek = 41,
		xlDateLastWeek = 42,
		xlDateNextMonth = 43,
		xlDateThisMonth = 44,
		xlDateLastMonth = 45,
		xlDateNextQuarter = 46,
		xlDateThisQuarter = 47,
		xlDateLastQuarter = 48,
		xlDateNextYear = 49,
		xlDateThisYear = 50,
		xlDateLastYear = 51,
		xlYearToDate = 52,
		xlAllDatesInPeriodQuarter1 = 53,
		xlAllDatesInPeriodQuarter2 = 54,
		xlAllDatesInPeriodQuarter3 = 55,
		xlAllDatesInPeriodQuarter4 = 56,
		xlAllDatesInPeriodJanuary = 57,
		xlAllDatesInPeriodFebruary = 58,
		xlAllDatesInPeriodMarch = 59,
		xlAllDatesInPeriodApril = 60,
		xlAllDatesInPeriodMay = 61,
		xlAllDatesInPeriodJune = 62,
		xlAllDatesInPeriodJuly = 63,
		xlAllDatesInPeriodAugust = 64,
		xlAllDatesInPeriodSeptember = 65,
		xlAllDatesInPeriodOctober = 66,
		xlAllDatesInPeriodNovember = 67,
		xlAllDatesInPeriodDecember = 68
	};

	//________________________________________________________XlCredentialsMethod
	enum XlCredentialsMethod
	{
		xlCredentialsMethodIntegrated = 0,
		xlCredentialsMethodNone = 1,
		xlCredentialsMethodStored = 2
	};

	//________________________________________________________XlCubeFieldSubType
	enum XlCubeFieldSubType
	{
		xlCubeHierarchy = 1,
		xlCubeMeasure = 2,
		xlCubeSet = 3,
		xlCubeAttribute = 4,
		xlCubeCalculatedMeasure = 5,
		xlCubeKPIValue = 6,
		xlCubeKPIGoal = 7,
		xlCubeKPIStatus = 8,
		xlCubeKPITrend = 9,
		xlCubeKPIWeight = 10,
		xlCubeImplicitMeasure = 11
	};

	//________________________________________________________XlSortOn
	enum XlSortOn
	{
		xlSortOnValues = 0,
		xlSortOnCellColor = 1,
		xlSortOnFontColor = 2,
		xlSortOnIcon = 3
	};

	//________________________________________________________XlDynamicFilterCriteria
	enum XlDynamicFilterCriteria
	{
		xlFilterToday = 1,
		xlFilterYesterday = 2,
		xlFilterTomorrow = 3,
		xlFilterThisWeek = 4,
		xlFilterLastWeek = 5,
		xlFilterNextWeek = 6,
		xlFilterThisMonth = 7,
		xlFilterLastMonth = 8,
		xlFilterNextMonth = 9,
		xlFilterThisQuarter = 10,
		xlFilterLastQuarter = 11,
		xlFilterNextQuarter = 12,
		xlFilterThisYear = 13,
		xlFilterLastYear = 14,
		xlFilterNextYear = 15,
		xlFilterYearToDate = 16,
		xlFilterAllDatesInPeriodQuarter1 = 17,
		xlFilterAllDatesInPeriodQuarter2 = 18,
		xlFilterAllDatesInPeriodQuarter3 = 19,
		xlFilterAllDatesInPeriodQuarter4 = 20,
		xlFilterAllDatesInPeriodJanuary = 21,
		xlFilterAllDatesInPeriodFebruray = 22,
		xlFilterAllDatesInPeriodMarch = 23,
		xlFilterAllDatesInPeriodApril = 24,
		xlFilterAllDatesInPeriodMay = 25,
		xlFilterAllDatesInPeriodJune = 26,
		xlFilterAllDatesInPeriodJuly = 27,
		xlFilterAllDatesInPeriodAugust = 28,
		xlFilterAllDatesInPeriodSeptember = 29,
		xlFilterAllDatesInPeriodOctober = 30,
		xlFilterAllDatesInPeriodNovember = 31,
		xlFilterAllDatesInPeriodDecember = 32,
		xlFilterAboveAverage = 33,
		xlFilterBelowAverage = 34
	};

	//________________________________________________________XlFilterAllDatesInPeriod
	enum XlFilterAllDatesInPeriod
	{
		xlFilterAllDatesInPeriodYear = 0,
		xlFilterAllDatesInPeriodMonth = 1,
		xlFilterAllDatesInPeriodDay = 2,
		xlFilterAllDatesInPeriodHour = 3,
		xlFilterAllDatesInPeriodMinute = 4,
		xlFilterAllDatesInPeriodSecond = 5
	};

	//________________________________________________________XlTableStyleElementType
	enum XlTableStyleElementType
	{
		xlWholeTable = 0,
		xlHeaderRow = 1,
		xlTotalRow = 2,
		xlGrandTotalRow = 2,
		xlFirstColumn = 3,
		xlLastColumn = 4,
		xlGrandTotalColumn = 4,
		xlRowStripe1 = 5,
		xlRowStripe2 = 6,
		xlColumnStripe1 = 7,
		xlColumnStripe2 = 8,
		xlFirstHeaderCell = 9,
		xlLastHeaderCell = 10,
		xlFirstTotalCell = 11,
		xlLastTotalCell = 12,
		xlSubtotalColumn1 = 13,
		xlSubtotalColumn2 = 14,
		xlSubtotalColumn3 = 15,
		xlSubtotalRow1 = 16,
		xlSubtotalRow2 = 17,
		xlSubtotalRow3 = 18,
		xlBlankRow = 19,
		xlColumnSubheading1 = 20,
		xlColumnSubheading2 = 21,
		xlColumnSubheading3 = 22,
		xlRowSubheading1 = 23,
		xlRowSubheading2 = 24,
		xlRowSubheading3 = 25,
		xlPageFieldLabels = 26,
		xlPageFieldValues = 27,
		xlSlicerUnselectedItemWithData = 28,
		xlSlicerUnselectedItemWithNoData = 29,
		xlSlicerSelectedItemWithData = 30,
		xlSlicerSelectedItemWithNoData = 31,
		xlSlicerHoveredUnselectedItemWithData = 32,
		xlSlicerHoveredSelectedItemWithData = 33,
		xlSlicerHoveredUnselectedItemWithNoData = 34,
		xlSlicerHoveredSelectedItemWithNoData = 35,
		xlTimelineSelectionLabel = 36,
		xlTimelineTimeLevel = 37,
		xlTimelinePeriodLabels1 = 38,
		xlTimelinePeriodLabels2 = 39,
		xlTimelineSelectedTimeBlock = 40,
		xlTimelineUnselectedTimeBlock = 41,
		xlTimelineSelectedTimeBlockSpace = 42
	};

	//________________________________________________________XlPivotConditionScope
	enum XlPivotConditionScope
	{
		xlSelectionScope = 0,
		xlFieldsScope = 1,
		xlDataFieldScope = 2
	};

	//________________________________________________________XlCalcFor
	enum XlCalcFor
	{
		xlAllValues = 0,
		xlRowGroups = 1,
		xlColGroups = 2
	};

	//________________________________________________________XlThemeColor
	enum XlThemeColor
	{
		xlThemeColorDark1 = 1,
		xlThemeColorLight1 = 2,
		xlThemeColorDark2 = 3,
		xlThemeColorLight2 = 4,
		xlThemeColorAccent1 = 5,
		xlThemeColorAccent2 = 6,
		xlThemeColorAccent3 = 7,
		xlThemeColorAccent4 = 8,
		xlThemeColorAccent5 = 9,
		xlThemeColorAccent6 = 10,
		xlThemeColorHyperlink = 11,
		xlThemeColorFollowedHyperlink = 12
	};

	//________________________________________________________XlFixedFormatType
	enum XlFixedFormatType
	{
		xlTypePDF = 0,
		xlTypeXPS = 1
	};

	//________________________________________________________XlFixedFormatQuality
	enum XlFixedFormatQuality
	{
		xlQualityStandard = 0,
		xlQualityMinimum = 1
	};

	//________________________________________________________XlChartElementPosition
	enum XlChartElementPosition
	{
		xlChartElementPositionAutomatic = -4105,
		xlChartElementPositionCustom = -4114
	};

	//________________________________________________________XlGenerateTableRefs
	enum XlGenerateTableRefs
	{
		xlGenerateTableRefA1 = 0,
		xlGenerateTableRefStruct = 1
	};

	//________________________________________________________XlGradientFillType
	enum XlGradientFillType
	{
		xlGradientFillLinear = 0,
		xlGradientFillPath = 1
	};

	//________________________________________________________XlThreadMode
	enum XlThreadMode
	{
		xlThreadModeAutomatic = 0,
		xlThreadModeManual = 1
	};

	//________________________________________________________XlOartHorizontalOverflow
	enum XlOartHorizontalOverflow
	{
		xlOartHorizontalOverflowOverflow = 0,
		xlOartHorizontalOverflowClip = 1
	};

	//________________________________________________________XlOartVerticalOverflow
	enum XlOartVerticalOverflow
	{
		xlOartVerticalOverflowOverflow = 0,
		xlOartVerticalOverflowClip = 1,
		xlOartVerticalOverflowEllipsis = 2
	};

	//________________________________________________________XlSparkScale
	enum XlSparkScale
	{
		xlSparkScaleGroup = 1,
		xlSparkScaleSingle = 2,
		xlSparkScaleCustom = 3
	};

	//________________________________________________________XlSparkType
	enum XlSparkType
	{
		xlSparkLine = 1,
		xlSparkColumn = 2,
		xlSparkColumnStacked100 = 3
	};

	//________________________________________________________XlSparklineRowCol
	enum XlSparklineRowCol
	{
		xlSparklineNonSquare = 0,
		xlSparklineRowsSquare = 1,
		xlSparklineColumnsSquare = 2
	};

	//________________________________________________________XlDataBarFillType
	enum XlDataBarFillType
	{
		xlDataBarFillSolid = 0,
		xlDataBarFillGradient = 1
	};

	//________________________________________________________XlDataBarBorderType
	enum XlDataBarBorderType
	{
		xlDataBarBorderNone = 0,
		xlDataBarBorderSolid = 1
	};

	//________________________________________________________XlDataBarAxisPosition
	enum XlDataBarAxisPosition
	{
		xlDataBarAxisAutomatic = 0,
		xlDataBarAxisMidpoint = 1,
		xlDataBarAxisNone = 2
	};

	//________________________________________________________XlDataBarNegativeColorType
	enum XlDataBarNegativeColorType
	{
		xlDataBarColor = 0,
		xlDataBarSameAsPositive = 1
	};

	//________________________________________________________XlAllocation
	enum XlAllocation
	{
		xlManualAllocation = 1,
		xlAutomaticAllocation = 2
	};

	//________________________________________________________XlAllocationValue
	enum XlAllocationValue
	{
		xlAllocateValue = 1,
		xlAllocateIncrement = 2
	};

	//________________________________________________________XlAllocationMethod
	enum XlAllocationMethod
	{
		xlEqualAllocation = 1,
		xlWeightedAllocation = 2
	};

	//________________________________________________________XlCellChangedState
	enum XlCellChangedState
	{
		xlCellNotChanged = 1,
		xlCellChanged = 2,
		xlCellChangeApplied = 3
	};

	//________________________________________________________XlPivotFieldRepeatLabels
	enum XlPivotFieldRepeatLabels
	{
		xlDoNotRepeatLabels = 1,
		xlRepeatLabels = 2
	};

	//________________________________________________________XlPieSliceIndex
	enum XlPieSliceIndex
	{
		xlOuterCounterClockwisePoint = 1,
		xlOuterCenterPoint = 2,
		xlOuterClockwisePoint = 3,
		xlMidClockwiseRadiusPoint = 4,
		xlCenterPoint = 5,
		xlMidCounterClockwiseRadiusPoint = 6,
		xlInnerClockwisePoint = 7,
		xlInnerCenterPoint = 8,
		xlInnerCounterClockwisePoint = 9
	};

	//________________________________________________________XlSpanishModes
	enum XlSpanishModes
	{
		xlSpanishTuteoOnly = 0,
		xlSpanishTuteoAndVoseo = 1,
		xlSpanishVoseoOnly = 2
	};

	//________________________________________________________XlSlicerCrossFilterType
	enum XlSlicerCrossFilterType
	{
		xlSlicerNoCrossFilter = 1,
		xlSlicerCrossFilterShowItemsWithDataAtTop = 2,
		xlSlicerCrossFilterShowItemsWithNoData = 3,
		xlSlicerCrossFilterHideButtonsWithNoData = 4
	};

	//________________________________________________________XlSlicerSort
	enum XlSlicerSort
	{
		xlSlicerSortDataSourceOrder = 1,
		xlSlicerSortAscending = 2,
		xlSlicerSortDescending = 3
	};

	//________________________________________________________XlIcon
	enum XlIcon
	{
		xlIconNoCellIcon = -1,
		xlIconGreenUpArrow = 1,
		xlIconYellowSideArrow = 2,
		xlIconRedDownArrow = 3,
		xlIconGrayUpArrow = 4,
		xlIconGraySideArrow = 5,
		xlIconGrayDownArrow = 6,
		xlIconGreenFlag = 7,
		xlIconYellowFlag = 8,
		xlIconRedFlag = 9,
		xlIconGreenCircle = 10,
		xlIconYellowCircle = 11,
		xlIconRedCircleWithBorder = 12,
		xlIconBlackCircleWithBorder = 13,
		xlIconGreenTrafficLight = 14,
		xlIconYellowTrafficLight = 15,
		xlIconRedTrafficLight = 16,
		xlIconYellowTriangle = 17,
		xlIconRedDiamond = 18,
		xlIconGreenCheckSymbol = 19,
		xlIconYellowExclamationSymbol = 20,
		xlIconRedCrossSymbol = 21,
		xlIconGreenCheck = 22,
		xlIconYellowExclamation = 23,
		xlIconRedCross = 24,
		xlIconYellowUpInclineArrow = 25,
		xlIconYellowDownInclineArrow = 26,
		xlIconGrayUpInclineArrow = 27,
		xlIconGrayDownInclineArrow = 28,
		xlIconRedCircle = 29,
		xlIconPinkCircle = 30,
		xlIconGrayCircle = 31,
		xlIconBlackCircle = 32,
		xlIconCircleWithOneWhiteQuarter = 33,
		xlIconCircleWithTwoWhiteQuarters = 34,
		xlIconCircleWithThreeWhiteQuarters = 35,
		xlIconWhiteCircleAllWhiteQuarters = 36,
		xlIcon0Bars = 37,
		xlIcon1Bar = 38,
		xlIcon2Bars = 39,
		xlIcon3Bars = 40,
		xlIcon4Bars = 41,
		xlIconGoldStar = 42,
		xlIconHalfGoldStar = 43,
		xlIconSilverStar = 44,
		xlIconGreenUpTriangle = 45,
		xlIconYellowDash = 46,
		xlIconRedDownTriangle = 47,
		xlIcon4FilledBoxes = 48,
		xlIcon3FilledBoxes = 49,
		xlIcon2FilledBoxes = 50,
		xlIcon1FilledBox = 51,
		xlIcon0FilledBoxes = 52
	};

	//________________________________________________________XlProtectedViewCloseReason
	enum XlProtectedViewCloseReason
	{
		xlProtectedViewCloseNormal = 0,
		xlProtectedViewCloseEdit = 1,
		xlProtectedViewCloseForced = 2
	};

	//________________________________________________________XlProtectedViewWindowState
	enum XlProtectedViewWindowState
	{
		xlProtectedViewWindowNormal = 0,
		xlProtectedViewWindowMinimized = 1,
		xlProtectedViewWindowMaximized = 2
	};

	//________________________________________________________XlFileValidationPivotMode
	enum XlFileValidationPivotMode
	{
		xlFileValidationPivotDefault = 0,
		xlFileValidationPivotRun = 1,
		xlFileValidationPivotSkip = 2
	};

	//________________________________________________________XlPieSliceLocation
	enum XlPieSliceLocation
	{
		xlHorizontalCoordinate = 1,
		xlVerticalCoordinate = 2
	};

	//________________________________________________________XlPortugueseReform
	enum XlPortugueseReform
	{
		xlPortuguesePreReform = 1,
		xlPortuguesePostReform = 2,
		xlPortugueseBoth = 3
	};

	//________________________________________________________XlQuickAnalysisMode
	enum XlQuickAnalysisMode
	{
		xlLensOnly = 0,
		xlFormatConditions = 1,
		xlRecommendedCharts = 2,
		xlTotals = 3,
		xlTables = 4,
		xlSparklines = 5
	};

	//________________________________________________________XlSlicerCacheType
	enum XlSlicerCacheType
	{
		xlSlicer = 1,
		xlTimeline = 2
	};

	//________________________________________________________XlCategoryLabelLevel
	enum XlCategoryLabelLevel
	{
		xlCategoryLabelLevelNone = -3,
		xlCategoryLabelLevelCustom = -2,
		xlCategoryLabelLevelAll = -1
	};

	//________________________________________________________XlSeriesNameLevel
	enum XlSeriesNameLevel
	{
		xlSeriesNameLevelNone = -3,
		xlSeriesNameLevelCustom = -2,
		xlSeriesNameLevelAll = -1
	};

	//________________________________________________________XlCalcMemNumberFormatType
	enum XlCalcMemNumberFormatType
	{
		xlNumberFormatTypeDefault = 0,
		xlNumberFormatTypeNumber = 1,
		xlNumberFormatTypePercent = 2
	};

	//________________________________________________________XlTimelineLevel
	enum XlTimelineLevel
	{
		xlTimelineLevelYears = 0,
		xlTimelineLevelQuarters = 1,
		xlTimelineLevelMonths = 2,
		xlTimelineLevelDays = 3
	};

	//________________________________________________________XlFilterStatus
	enum XlFilterStatus
	{
		xlFilterStatusOK = 0,
		xlFilterStatusDateWrongOrder = 1,
		xlFilterStatusDateHasTime = 2,
		xlFilterStatusInvalidDate = 3
	};

	//________________________________________________________XlModelChangeSource
	enum XlModelChangeSource
	{
		xlChangeByExcel = 0,
		xlChangeByPowerPivotAddIn = 1
	};

	//________________________________________________________XlParentDataLabelOptions
	enum XlParentDataLabelOptions
	{
		xlParentDataLabelOptionsNone = 0,
		xlParentDataLabelOptionsBanner = 1,
		xlParentDataLabelOptionsOverlapping = 2
	};

	//________________________________________________________XlBinsType
	enum XlBinsType
	{
		xlBinsTypeAutomatic = 0,
		xlBinsTypeCategorical = 1,
		xlBinsTypeManual = 2,
		xlBinsTypeBinSize = 3,
		xlBinsTypeBinCount = 4
	};

	//________________________________________________________XlForecastDataCompletion
	enum XlForecastDataCompletion
	{
		xlForecastDataCompletionZeros = 0,
		xlForecastDataCompletionInterpolate = 1
	};

	//________________________________________________________XlForecastAggregation
	enum XlForecastAggregation
	{
		xlForecastAggregationAverage = 1,
		xlForecastAggregationCount = 2,
		xlForecastAggregationCountA = 3,
		xlForecastAggregationMax = 4,
		xlForecastAggregationMedian = 5,
		xlForecastAggregationMin = 6,
		xlForecastAggregationSum = 7
	};

	//________________________________________________________XlForecastChartType
	enum XlForecastChartType
	{
		xlForecastChartTypeLine = 0,
		xlForecastChartTypeColumn = 1
	};

	//________________________________________________________XlPublishToDocsDisclosureScope
	enum XlPublishToDocsDisclosureScope
	{
		msoPublic = 0,
		msoLimited = 1,
		msoOrganization = 2,
		msoNoOverwrite = 3
	};

	//________________________________________________________XlCategorySortOrder
	enum XlCategorySortOrder
	{
		xlIndexAscending = 0,
		xlIndexDescending = 1,
		xlCategoryAscending = 2,
		xlCategoryDescending = 3
	};

	//________________________________________________________XlValueSortOrder
	enum XlValueSortOrder
	{
		xlValueNone = 0,
		xlValueAscending = 1,
		xlValueDescending = 2
	};

	//________________________________________________________XlGeoProjectionType
	enum XlGeoProjectionType
	{
		xlGeoProjectionTypeAutomatic = 0,
		xlGeoProjectionTypeMercator = 1,
		xlGeoProjectionTypeMiller = 2,
		xlGeoProjectionTypeAlbers = 3,
		xlGeoProjectionTypeRobinson = 4
	};

	//________________________________________________________XlGeoMappingLevel
	enum XlGeoMappingLevel
	{
		xlGeoMappingLevelAutomatic = 0,
		xlGeoMappingLevelDataOnly = 1,
		xlGeoMappingLevelPostalCode = 2,
		xlGeoMappingLevelCounty = 3,
		xlGeoMappingLevelState = 4,
		xlGeoMappingLevelCountryRegion = 5,
		xlGeoMappingLevelCountryRegionList = 6,
		xlGeoMappingLevelWorld = 7
	};

	//________________________________________________________XlRegionLabelOptions
	enum XlRegionLabelOptions
	{
		xlRegionLabelOptionsNone = 0,
		xlRegionLabelOptionsBestFitOnly = 1,
		xlRegionLabelOptionsShowAll = 2
	};

	//________________________________________________________XlPublishToPBIPublishType
	enum XlPublishToPBIPublishType
	{
		msoPBIExport = 0,
		msoPBIUpload = 1
	};

	//________________________________________________________XlPublishToPBINameConflictAction
	enum XlPublishToPBINameConflictAction
	{
		msoPBIIgnore = 0,
		msoPBIAbort = 1,
		msoPBIOverwrite = 2
	};

	//________________________________________________________XlSeriesColorGradientStyle
	enum XlSeriesColorGradientStyle
	{
		xlSeriesColorGradientStyleSequential = 0,
		xlSeriesColorGradientStyleDiverging = 1
	};

	//________________________________________________________XlGradientStopPositionType
	enum XlGradientStopPositionType
	{
		xlGradientStopPositionTypeExtremeValue = 0,
		xlGradientStopPositionTypeNumber = 1,
		xlGradientStopPositionTypePercent = 2
	};

	//________________________________________________________Adjustments
	// {000C0310-0000-0000-C000-000000000046}
	class Adjustments : public Com::Object
	{
	public:
		Adjustments();
		~Adjustments();
		Adjustments(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Adjustments& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Count)) int Count;
		int get_Count();
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		float get_Item(int Index);
		void put_Item(int Item, float Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________CalloutFormat
	// {000C0311-0000-0000-C000-000000000046}
	class CalloutFormat : public Com::Object
	{
	public:
		CalloutFormat();
		~CalloutFormat();
		CalloutFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CalloutFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accent, put = put_Accent)) /* MsoTriState*/ short Accent;
		/* MsoTriState*/ short get_Accent();
		void put_Accent(/* MsoTriState*/ short Accent);
		//
		__declspec(property(get = get_Angle, put = put_Angle)) /* MsoCalloutAngleType*/ short Angle;
		/* MsoCalloutAngleType*/ short get_Angle();
		void put_Angle(/* MsoCalloutAngleType*/ short Angle);
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_AutoAttach, put = put_AutoAttach)) /* MsoTriState*/ short AutoAttach;
		/* MsoTriState*/ short get_AutoAttach();
		void put_AutoAttach(/* MsoTriState*/ short AutoAttach);
		//
		__declspec(property(get = get_AutoLength)) /* MsoTriState*/ short AutoLength;
		/* MsoTriState*/ short get_AutoLength();
		void AutomaticLength();
		//
		__declspec(property(get = get_Border, put = put_Border)) /* MsoTriState*/ short BorderX;
		/* MsoTriState*/ short get_Border();
		void put_Border(/* MsoTriState*/ short Border);
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		void CustomDrop(float Drop);
		void CustomLength(float Length);
		//
		__declspec(property(get = get_Drop)) float Drop;
		float get_Drop();
		//
		__declspec(property(get = get_DropType)) /* MsoCalloutDropType*/ short DropType;
		/* MsoCalloutDropType*/ short get_DropType();
		//
		__declspec(property(get = get_Gap, put = put_Gap)) float Gap;
		float get_Gap();
		void put_Gap(float Gap);
		//
		__declspec(property(get = get_Length)) float Length;
		float get_Length();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void PresetDrop(/* MsoCalloutDropType*/ short DropType);
		//
		__declspec(property(get = get_Type, put = put_Type)) /* MsoCalloutType*/ short Type;
		/* MsoCalloutType*/ short get_Type();
		void put_Type(/* MsoCalloutType*/ short Type);
	};

	//________________________________________________________ColorFormat
	// {000C0312-0000-0000-C000-000000000046}
	class ColorFormat : public Com::Object
	{
	public:
		ColorFormat();
		~ColorFormat();
		ColorFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ColorFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Brightness, put = put_Brightness)) float Brightness;
		float get_Brightness();
		void put_Brightness(float Brightness);
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_ObjectThemeColor, put = put_ObjectThemeColor)) /* MsoThemeColorIndex*/ short ObjectThemeColor;
		/* MsoThemeColorIndex*/ short get_ObjectThemeColor();
		void put_ObjectThemeColor(/* MsoThemeColorIndex*/ short ObjectThemeColor);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RGB, put = put_RGB)) /* MsoRGBType*/ short RGB;
		/* MsoRGBType*/ short get_RGB();
		void put_RGB(/* MsoRGBType*/ short RGB);
		//
		__declspec(property(get = get_SchemeColor, put = put_SchemeColor)) int SchemeColor;
		int get_SchemeColor();
		void put_SchemeColor(int SchemeColor);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) float TintAndShade;
		float get_TintAndShade();
		void put_TintAndShade(float TintAndShade);
		//
		__declspec(property(get = get_Type)) /* MsoColorType*/ short Type;
		/* MsoColorType*/ short get_Type();
	};

	//________________________________________________________LineFormat
	// {000C0317-0000-0000-C000-000000000046}
	class LineFormat : public Com::Object
	{
	public:
		LineFormat();
		~LineFormat();
		LineFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		LineFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_BackColor, put = put_BackColor)) Excel::ColorFormat BackColor;
		Excel::ColorFormat get_BackColor();
		void put_BackColor(Excel::ColorFormat& BackColor);
		//
		__declspec(property(get = get_BeginArrowheadLength, put = put_BeginArrowheadLength)) /* MsoArrowheadLength*/ short BeginArrowheadLength;
		/* MsoArrowheadLength*/ short get_BeginArrowheadLength();
		void put_BeginArrowheadLength(/* MsoArrowheadLength*/ short BeginArrowheadLength);
		//
		__declspec(property(get = get_BeginArrowheadStyle, put = put_BeginArrowheadStyle)) /* MsoArrowheadStyle*/ short BeginArrowheadStyle;
		/* MsoArrowheadStyle*/ short get_BeginArrowheadStyle();
		void put_BeginArrowheadStyle(/* MsoArrowheadStyle*/ short BeginArrowheadStyle);
		//
		__declspec(property(get = get_BeginArrowheadWidth, put = put_BeginArrowheadWidth)) /* MsoArrowheadWidth*/ short BeginArrowheadWidth;
		/* MsoArrowheadWidth*/ short get_BeginArrowheadWidth();
		void put_BeginArrowheadWidth(/* MsoArrowheadWidth*/ short BeginArrowheadWidth);
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_DashStyle, put = put_DashStyle)) /* MsoLineDashStyle*/ short DashStyle;
		/* MsoLineDashStyle*/ short get_DashStyle();
		void put_DashStyle(/* MsoLineDashStyle*/ short DashStyle);
		//
		__declspec(property(get = get_EndArrowheadLength, put = put_EndArrowheadLength)) /* MsoArrowheadLength*/ short EndArrowheadLength;
		/* MsoArrowheadLength*/ short get_EndArrowheadLength();
		void put_EndArrowheadLength(/* MsoArrowheadLength*/ short EndArrowheadLength);
		//
		__declspec(property(get = get_EndArrowheadStyle, put = put_EndArrowheadStyle)) /* MsoArrowheadStyle*/ short EndArrowheadStyle;
		/* MsoArrowheadStyle*/ short get_EndArrowheadStyle();
		void put_EndArrowheadStyle(/* MsoArrowheadStyle*/ short EndArrowheadStyle);
		//
		__declspec(property(get = get_EndArrowheadWidth, put = put_EndArrowheadWidth)) /* MsoArrowheadWidth*/ short EndArrowheadWidth;
		/* MsoArrowheadWidth*/ short get_EndArrowheadWidth();
		void put_EndArrowheadWidth(/* MsoArrowheadWidth*/ short EndArrowheadWidth);
		//
		__declspec(property(get = get_ForeColor, put = put_ForeColor)) Excel::ColorFormat ForeColor;
		Excel::ColorFormat get_ForeColor();
		void put_ForeColor(Excel::ColorFormat& ForeColor);
		//
		__declspec(property(get = get_InsetPen, put = put_InsetPen)) /* MsoTriState*/ short InsetPen;
		/* MsoTriState*/ short get_InsetPen();
		void put_InsetPen(/* MsoTriState*/ short InsetPen);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Pattern, put = put_Pattern)) /* MsoPatternType*/ short Pattern;
		/* MsoPatternType*/ short get_Pattern();
		void put_Pattern(/* MsoPatternType*/ short Pattern);
		//
		__declspec(property(get = get_Style, put = put_Style)) /* MsoLineStyle*/ short StyleX;
		/* MsoLineStyle*/ short get_Style();
		void put_Style(/* MsoLineStyle*/ short Style);
		//
		__declspec(property(get = get_Transparency, put = put_Transparency)) float Transparency;
		float get_Transparency();
		void put_Transparency(float Transparency);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) /* MsoTriState*/ short Visible;
		/* MsoTriState*/ short get_Visible();
		void put_Visible(/* MsoTriState*/ short Visible);
		//
		__declspec(property(get = get_Weight, put = put_Weight)) float Weight;
		float get_Weight();
		void put_Weight(float Weight);
	};

	//________________________________________________________ShapeNode
	// {000C0318-0000-0000-C000-000000000046}
	class ShapeNode : public Com::Object
	{
	public:
		ShapeNode();
		~ShapeNode();
		ShapeNode(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ShapeNode& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_EditingType)) /* MsoEditingType*/ short EditingType;
		/* MsoEditingType*/ short get_EditingType();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Points)) _variant_t PointsX;
		_variant_t get_Points();
		//
		__declspec(property(get = get_SegmentType)) /* MsoSegmentType*/ short SegmentType;
		/* MsoSegmentType*/ short get_SegmentType();
	};

	//________________________________________________________ShapeNodes
	// {000C0319-0000-0000-C000-000000000046}
	class ShapeNodes : public Com::Object
	{
	public:
		ShapeNodes();
		~ShapeNodes();
		ShapeNodes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ShapeNodes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Count)) int Count;
		int get_Count();
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		void Delete(int Index);
		void Insert(int Index, /* MsoSegmentType*/ short SegmentType, /* MsoEditingType*/ short EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3);
		Excel::ShapeNode Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void SetEditingType(int Index, /* MsoEditingType*/ short EditingType);
		void SetPosition(int Index, float X1, float Y1);
		void SetSegmentType(int Index, /* MsoSegmentType*/ short SegmentType);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________PictureFormat
	// {000C031A-0000-0000-C000-000000000046}
	class PictureFormat : public Com::Object
	{
	public:
		PictureFormat();
		~PictureFormat();
		PictureFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PictureFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Brightness, put = put_Brightness)) float Brightness;
		float get_Brightness();
		void put_Brightness(float Brightness);
		//
		__declspec(property(get = get_ColorType, put = put_ColorType)) /* MsoPictureColorType*/ short ColorType;
		/* MsoPictureColorType*/ short get_ColorType();
		void put_ColorType(/* MsoPictureColorType*/ short ColorType);
		//
		__declspec(property(get = get_Contrast, put = put_Contrast)) float Contrast;
		float get_Contrast();
		void put_Contrast(float Contrast);
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_Crop)) Com::Object Crop;
		Com::Object get_Crop();
		//
		__declspec(property(get = get_CropBottom, put = put_CropBottom)) float CropBottom;
		float get_CropBottom();
		void put_CropBottom(float CropBottom);
		//
		__declspec(property(get = get_CropLeft, put = put_CropLeft)) float CropLeft;
		float get_CropLeft();
		void put_CropLeft(float CropLeft);
		//
		__declspec(property(get = get_CropRight, put = put_CropRight)) float CropRight;
		float get_CropRight();
		void put_CropRight(float CropRight);
		//
		__declspec(property(get = get_CropTop, put = put_CropTop)) float CropTop;
		float get_CropTop();
		void put_CropTop(float CropTop);
		void IncrementBrightness(float Increment);
		void IncrementContrast(float Increment);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_TransparencyColor, put = put_TransparencyColor)) /* MsoRGBType*/ short TransparencyColor;
		/* MsoRGBType*/ short get_TransparencyColor();
		void put_TransparencyColor(/* MsoRGBType*/ short TransparencyColor);
		//
		__declspec(property(get = get_TransparentBackground, put = put_TransparentBackground)) /* MsoTriState*/ short TransparentBackground;
		/* MsoTriState*/ short get_TransparentBackground();
		void put_TransparentBackground(/* MsoTriState*/ short TransparentBackground);
	};

	//________________________________________________________ShadowFormat
	// {000C031B-0000-0000-C000-000000000046}
	class ShadowFormat : public Com::Object
	{
	public:
		ShadowFormat();
		~ShadowFormat();
		ShadowFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ShadowFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Blur, put = put_Blur)) float Blur;
		float get_Blur();
		void put_Blur(float Blur);
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_ForeColor, put = put_ForeColor)) Excel::ColorFormat ForeColor;
		Excel::ColorFormat get_ForeColor();
		void put_ForeColor(Excel::ColorFormat& ForeColor);
		void IncrementOffsetX(float Increment);
		void IncrementOffsetY(float Increment);
		//
		__declspec(property(get = get_Obscured, put = put_Obscured)) /* MsoTriState*/ short Obscured;
		/* MsoTriState*/ short get_Obscured();
		void put_Obscured(/* MsoTriState*/ short Obscured);
		//
		__declspec(property(get = get_OffsetX, put = put_OffsetX)) float OffsetX;
		float get_OffsetX();
		void put_OffsetX(float OffsetX);
		//
		__declspec(property(get = get_OffsetY, put = put_OffsetY)) float OffsetY;
		float get_OffsetY();
		void put_OffsetY(float OffsetY);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RotateWithShape, put = put_RotateWithShape)) /* MsoTriState*/ short RotateWithShape;
		/* MsoTriState*/ short get_RotateWithShape();
		void put_RotateWithShape(/* MsoTriState*/ short RotateWithShape);
		//
		__declspec(property(get = get_Size, put = put_Size)) float Size;
		float get_Size();
		void put_Size(float Size);
		//
		__declspec(property(get = get_Style, put = put_Style)) /* MsoShadowStyle*/ short StyleX;
		/* MsoShadowStyle*/ short get_Style();
		void put_Style(/* MsoShadowStyle*/ short Style);
		//
		__declspec(property(get = get_Transparency, put = put_Transparency)) float Transparency;
		float get_Transparency();
		void put_Transparency(float Transparency);
		//
		__declspec(property(get = get_Type, put = put_Type)) /* MsoShadowType*/ short Type;
		/* MsoShadowType*/ short get_Type();
		void put_Type(/* MsoShadowType*/ short Type);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) /* MsoTriState*/ short Visible;
		/* MsoTriState*/ short get_Visible();
		void put_Visible(/* MsoTriState*/ short Visible);
	};

	//________________________________________________________TextEffectFormat
	// {000C031F-0000-0000-C000-000000000046}
	class TextEffectFormat : public Com::Object
	{
	public:
		TextEffectFormat();
		~TextEffectFormat();
		TextEffectFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TextEffectFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Alignment, put = put_Alignment)) /* MsoTextEffectAlignment*/ short Alignment;
		/* MsoTextEffectAlignment*/ short get_Alignment();
		void put_Alignment(/* MsoTextEffectAlignment*/ short Alignment);
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_FontBold, put = put_FontBold)) /* MsoTriState*/ short FontBold;
		/* MsoTriState*/ short get_FontBold();
		void put_FontBold(/* MsoTriState*/ short FontBold);
		//
		__declspec(property(get = get_FontItalic, put = put_FontItalic)) /* MsoTriState*/ short FontItalic;
		/* MsoTriState*/ short get_FontItalic();
		void put_FontItalic(/* MsoTriState*/ short FontItalic);
		//
		__declspec(property(get = get_FontName, put = put_FontName)) wstring FontName;
		wstring get_FontName();
		void put_FontName(wstring FontName);
		//
		__declspec(property(get = get_FontSize, put = put_FontSize)) float FontSize;
		float get_FontSize();
		void put_FontSize(float FontSize);
		//
		__declspec(property(get = get_KernedPairs, put = put_KernedPairs)) /* MsoTriState*/ short KernedPairs;
		/* MsoTriState*/ short get_KernedPairs();
		void put_KernedPairs(/* MsoTriState*/ short KernedPairs);
		//
		__declspec(property(get = get_NormalizedHeight, put = put_NormalizedHeight)) /* MsoTriState*/ short NormalizedHeight;
		/* MsoTriState*/ short get_NormalizedHeight();
		void put_NormalizedHeight(/* MsoTriState*/ short NormalizedHeight);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PresetShape, put = put_PresetShape)) /* MsoPresetTextEffectShape*/ short PresetShape;
		/* MsoPresetTextEffectShape*/ short get_PresetShape();
		void put_PresetShape(/* MsoPresetTextEffectShape*/ short PresetShape);
		//
		__declspec(property(get = get_PresetTextEffect, put = put_PresetTextEffect)) /* MsoPresetTextEffect*/ short PresetTextEffect;
		/* MsoPresetTextEffect*/ short get_PresetTextEffect();
		void put_PresetTextEffect(/* MsoPresetTextEffect*/ short PresetTextEffect);
		//
		__declspec(property(get = get_RotatedChars, put = put_RotatedChars)) /* MsoTriState*/ short RotatedChars;
		/* MsoTriState*/ short get_RotatedChars();
		void put_RotatedChars(/* MsoTriState*/ short RotatedChars);
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		void ToggleVerticalText();
		//
		__declspec(property(get = get_Tracking, put = put_Tracking)) float Tracking;
		float get_Tracking();
		void put_Tracking(float Tracking);
	};

	//________________________________________________________ThreeDFormat
	// {000C0321-0000-0000-C000-000000000046}
	class ThreeDFormat : public Com::Object
	{
	public:
		ThreeDFormat();
		~ThreeDFormat();
		ThreeDFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ThreeDFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_BevelBottomDepth, put = put_BevelBottomDepth)) float BevelBottomDepth;
		float get_BevelBottomDepth();
		void put_BevelBottomDepth(float BevelBottomDepth);
		//
		__declspec(property(get = get_BevelBottomInset, put = put_BevelBottomInset)) float BevelBottomInset;
		float get_BevelBottomInset();
		void put_BevelBottomInset(float BevelBottomInset);
		//
		__declspec(property(get = get_BevelBottomType, put = put_BevelBottomType)) /* MsoBevelType*/ short BevelBottomType;
		/* MsoBevelType*/ short get_BevelBottomType();
		void put_BevelBottomType(/* MsoBevelType*/ short BevelBottomType);
		//
		__declspec(property(get = get_BevelTopDepth, put = put_BevelTopDepth)) float BevelTopDepth;
		float get_BevelTopDepth();
		void put_BevelTopDepth(float BevelTopDepth);
		//
		__declspec(property(get = get_BevelTopInset, put = put_BevelTopInset)) float BevelTopInset;
		float get_BevelTopInset();
		void put_BevelTopInset(float BevelTopInset);
		//
		__declspec(property(get = get_BevelTopType, put = put_BevelTopType)) /* MsoBevelType*/ short BevelTopType;
		/* MsoBevelType*/ short get_BevelTopType();
		void put_BevelTopType(/* MsoBevelType*/ short BevelTopType);
		//
		__declspec(property(get = get_ContourColor)) Excel::ColorFormat ContourColor;
		Excel::ColorFormat get_ContourColor();
		//
		__declspec(property(get = get_ContourWidth, put = put_ContourWidth)) float ContourWidth;
		float get_ContourWidth();
		void put_ContourWidth(float ContourWidth);
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_Depth, put = put_Depth)) float Depth;
		float get_Depth();
		void put_Depth(float Depth);
		//
		__declspec(property(get = get_ExtrusionColor)) Excel::ColorFormat ExtrusionColor;
		Excel::ColorFormat get_ExtrusionColor();
		//
		__declspec(property(get = get_ExtrusionColorType, put = put_ExtrusionColorType)) /* MsoExtrusionColorType*/ short ExtrusionColorType;
		/* MsoExtrusionColorType*/ short get_ExtrusionColorType();
		void put_ExtrusionColorType(/* MsoExtrusionColorType*/ short ExtrusionColorType);
		//
		__declspec(property(get = get_FieldOfView, put = put_FieldOfView)) float FieldOfView;
		float get_FieldOfView();
		void put_FieldOfView(float FieldOfView);
		void IncrementRotationHorizontal(float Increment);
		void IncrementRotationVertical(float Increment);
		void IncrementRotationX(float Increment);
		void IncrementRotationY(float Increment);
		void IncrementRotationZ(float Increment);
		//
		__declspec(property(get = get_LightAngle, put = put_LightAngle)) float LightAngle;
		float get_LightAngle();
		void put_LightAngle(float LightAngle);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Perspective, put = put_Perspective)) /* MsoTriState*/ short Perspective;
		/* MsoTriState*/ short get_Perspective();
		void put_Perspective(/* MsoTriState*/ short Perspective);
		//
		__declspec(property(get = get_PresetCamera)) /* MsoPresetCamera*/ short PresetCamera;
		/* MsoPresetCamera*/ short get_PresetCamera();
		//
		__declspec(property(get = get_PresetExtrusionDirection)) /* MsoPresetExtrusionDirection*/ short PresetExtrusionDirection;
		/* MsoPresetExtrusionDirection*/ short get_PresetExtrusionDirection();
		//
		__declspec(property(get = get_PresetLighting, put = put_PresetLighting)) /* MsoLightRigType*/ short PresetLighting;
		/* MsoLightRigType*/ short get_PresetLighting();
		void put_PresetLighting(/* MsoLightRigType*/ short PresetLighting);
		//
		__declspec(property(get = get_PresetLightingDirection, put = put_PresetLightingDirection)) /* MsoPresetLightingDirection*/ short PresetLightingDirection;
		/* MsoPresetLightingDirection*/ short get_PresetLightingDirection();
		void put_PresetLightingDirection(/* MsoPresetLightingDirection*/ short PresetLightingDirection);
		//
		__declspec(property(get = get_PresetLightingSoftness, put = put_PresetLightingSoftness)) /* MsoPresetLightingSoftness*/ short PresetLightingSoftness;
		/* MsoPresetLightingSoftness*/ short get_PresetLightingSoftness();
		void put_PresetLightingSoftness(/* MsoPresetLightingSoftness*/ short PresetLightingSoftness);
		//
		__declspec(property(get = get_PresetMaterial, put = put_PresetMaterial)) /* MsoPresetMaterial*/ short PresetMaterial;
		/* MsoPresetMaterial*/ short get_PresetMaterial();
		void put_PresetMaterial(/* MsoPresetMaterial*/ short PresetMaterial);
		//
		__declspec(property(get = get_PresetThreeDFormat)) /* MsoPresetThreeDFormat*/ short PresetThreeDFormat;
		/* MsoPresetThreeDFormat*/ short get_PresetThreeDFormat();
		//
		__declspec(property(get = get_ProjectText, put = put_ProjectText)) /* MsoTriState*/ short ProjectText;
		/* MsoTriState*/ short get_ProjectText();
		void put_ProjectText(/* MsoTriState*/ short ProjectText);
		void ResetRotation();
		//
		__declspec(property(get = get_RotationX, put = put_RotationX)) float RotationX;
		float get_RotationX();
		void put_RotationX(float RotationX);
		//
		__declspec(property(get = get_RotationY, put = put_RotationY)) float RotationY;
		float get_RotationY();
		void put_RotationY(float RotationY);
		//
		__declspec(property(get = get_RotationZ, put = put_RotationZ)) float RotationZ;
		float get_RotationZ();
		void put_RotationZ(float RotationZ);
		void SetExtrusionDirection(/* MsoPresetExtrusionDirection*/ short PresetExtrusionDirection);
		void SetPresetCamera(/* MsoPresetCamera*/ short PresetCamera);
		void SetThreeDFormat(/* MsoPresetThreeDFormat*/ short PresetThreeDFormat);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) /* MsoTriState*/ short Visible;
		/* MsoTriState*/ short get_Visible();
		void put_Visible(/* MsoTriState*/ short Visible);
		//
		__declspec(property(get = get_Z, put = put_Z)) float Z;
		float get_Z();
		void put_Z(float Z);
	};

	//________________________________________________________FillFormat
	// {000C0314-0000-0000-C000-000000000046}
	class FillFormat : public Com::Object
	{
	public:
		FillFormat();
		~FillFormat();
		FillFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		FillFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_BackColor, put = put_BackColor)) Excel::ColorFormat BackColor;
		Excel::ColorFormat get_BackColor();
		void put_BackColor(Excel::ColorFormat& BackColor);
		void Background();
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_ForeColor, put = put_ForeColor)) Excel::ColorFormat ForeColor;
		Excel::ColorFormat get_ForeColor();
		void put_ForeColor(Excel::ColorFormat& ForeColor);
		//
		__declspec(property(get = get_GradientAngle, put = put_GradientAngle)) float GradientAngle;
		float get_GradientAngle();
		void put_GradientAngle(float GradientAngle);
		//
		__declspec(property(get = get_GradientColorType)) /* MsoGradientColorType*/ short GradientColorType;
		/* MsoGradientColorType*/ short get_GradientColorType();
		//
		__declspec(property(get = get_GradientDegree)) float GradientDegree;
		float get_GradientDegree();
		//
		__declspec(property(get = get_GradientStops)) Com::Object GradientStops;
		Com::Object get_GradientStops();
		//
		__declspec(property(get = get_GradientStyle)) /* MsoGradientStyle*/ short GradientStyle;
		/* MsoGradientStyle*/ short get_GradientStyle();
		//
		__declspec(property(get = get_GradientVariant)) int GradientVariant;
		int get_GradientVariant();
		void OneColorGradient(/* MsoGradientStyle*/ short Style, int Variant, float Degree);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Pattern)) /* MsoPatternType*/ short Pattern;
		/* MsoPatternType*/ short get_Pattern();
		void Patterned(/* MsoPatternType*/ short Pattern);
		//
		__declspec(property(get = get_PictureEffects)) Com::Object PictureEffects;
		Com::Object get_PictureEffects();
		void PresetGradient(/* MsoGradientStyle*/ short Style, int Variant, /* MsoPresetGradientType*/ short PresetGradientType);
		//
		__declspec(property(get = get_PresetGradientType)) /* MsoPresetGradientType*/ short PresetGradientType;
		/* MsoPresetGradientType*/ short get_PresetGradientType();
		//
		__declspec(property(get = get_PresetTexture)) /* MsoPresetTexture*/ short PresetTexture;
		/* MsoPresetTexture*/ short get_PresetTexture();
		void PresetTextured(/* MsoPresetTexture*/ short PresetTexture);
		//
		__declspec(property(get = get_RotateWithObject, put = put_RotateWithObject)) /* MsoTriState*/ short RotateWithObject;
		/* MsoTriState*/ short get_RotateWithObject();
		void put_RotateWithObject(/* MsoTriState*/ short RotateWithObject);
		void Solid();
		//
		__declspec(property(get = get_TextureAlignment, put = put_TextureAlignment)) /* MsoTextureAlignment*/ short TextureAlignment;
		/* MsoTextureAlignment*/ short get_TextureAlignment();
		void put_TextureAlignment(/* MsoTextureAlignment*/ short TextureAlignment);
		//
		__declspec(property(get = get_TextureHorizontalScale, put = put_TextureHorizontalScale)) float TextureHorizontalScale;
		float get_TextureHorizontalScale();
		void put_TextureHorizontalScale(float TextureHorizontalScale);
		//
		__declspec(property(get = get_TextureName)) wstring TextureName;
		wstring get_TextureName();
		//
		__declspec(property(get = get_TextureOffsetX, put = put_TextureOffsetX)) float TextureOffsetX;
		float get_TextureOffsetX();
		void put_TextureOffsetX(float TextureOffsetX);
		//
		__declspec(property(get = get_TextureOffsetY, put = put_TextureOffsetY)) float TextureOffsetY;
		float get_TextureOffsetY();
		void put_TextureOffsetY(float TextureOffsetY);
		//
		__declspec(property(get = get_TextureTile, put = put_TextureTile)) /* MsoTriState*/ short TextureTile;
		/* MsoTriState*/ short get_TextureTile();
		void put_TextureTile(/* MsoTriState*/ short TextureTile);
		//
		__declspec(property(get = get_TextureType)) /* MsoTextureType*/ short TextureType;
		/* MsoTextureType*/ short get_TextureType();
		//
		__declspec(property(get = get_TextureVerticalScale, put = put_TextureVerticalScale)) float TextureVerticalScale;
		float get_TextureVerticalScale();
		void put_TextureVerticalScale(float TextureVerticalScale);
		//
		__declspec(property(get = get_Transparency, put = put_Transparency)) float Transparency;
		float get_Transparency();
		void put_Transparency(float Transparency);
		void TwoColorGradient(/* MsoGradientStyle*/ short Style, int Variant);
		//
		__declspec(property(get = get_Type)) /* MsoFillType*/ short Type;
		/* MsoFillType*/ short get_Type();
		void UserPicture(wstring PictureFile);
		void UserTextured(wstring TextureFile);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) /* MsoTriState*/ short Visible;
		/* MsoTriState*/ short get_Visible();
		void put_Visible(/* MsoTriState*/ short Visible);
	};

	//________________________________________________________DiagramNodes
	// {000C036E-0000-0000-C000-000000000046}
	class DiagramNodes : public Com::Object
	{
	public:
		DiagramNodes();
		~DiagramNodes();
		DiagramNodes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DiagramNodes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Count)) int Count;
		int get_Count();
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		Excel::DiagramNode Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void SelectAll();
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________DiagramNodeChildren
	// {000C036F-0000-0000-C000-000000000046}
	class DiagramNodeChildren : public Com::Object
	{
	public:
		DiagramNodeChildren();
		~DiagramNodeChildren();
		DiagramNodeChildren(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DiagramNodeChildren& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::DiagramNode AddNode(_variant_t Index, /* MsoDiagramNodeType*/ short nodeType);
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Count)) int Count;
		int get_Count();
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_FirstChild)) Excel::DiagramNode FirstChild;
		Excel::DiagramNode get_FirstChild();
		Excel::DiagramNode Item(_variant_t Index);
		//
		__declspec(property(get = get_LastChild)) Excel::DiagramNode LastChild;
		Excel::DiagramNode get_LastChild();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void SelectAll();
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________DiagramNode
	// {000C0370-0000-0000-C000-000000000046}
	class DiagramNode : public Com::Object
	{
	public:
		DiagramNode();
		~DiagramNode();
		DiagramNode(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DiagramNode& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::DiagramNode AddNode(/* MsoRelativeNodePosition*/ short pos, /* MsoDiagramNodeType*/ short nodeType);
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_Children)) Excel::DiagramNodeChildren Children;
		Excel::DiagramNodeChildren get_Children();
		Excel::DiagramNode CloneNode(bool copyChildren, Excel::DiagramNode& pTargetNode, /* MsoRelativeNodePosition*/ short pos);
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Diagram)) Com::Object DiagramX;
		Com::Object get_Diagram();
		//
		__declspec(property(get = get_Layout, put = put_Layout)) /* MsoOrgChartLayoutType*/ short Layout;
		/* MsoOrgChartLayoutType*/ short get_Layout();
		void put_Layout(/* MsoOrgChartLayoutType*/ short Layout);
		void MoveNode(Excel::DiagramNode& pTargetNode, /* MsoRelativeNodePosition*/ short pos);
		Excel::DiagramNode NextNode();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::DiagramNode PrevNode();
		void ReplaceNode(Excel::DiagramNode& pTargetNode);
		//
		__declspec(property(get = get_Root)) Excel::DiagramNode Root;
		Excel::DiagramNode get_Root();
		//
		__declspec(property(get = get_Shape)) Excel::Shape ShapeX;
		Excel::Shape get_Shape();
		void SwapNode(Excel::DiagramNode& pTargetNode, bool swapChildren);
		//
		__declspec(property(get = get_TextShape)) Excel::Shape TextShape;
		Excel::Shape get_TextShape();
		void TransferChildren(Excel::DiagramNode& pReceivingNode);
	};

	//________________________________________________________IRTDUpdateEvent
	// {A43788C1-D91B-11D3-8F39-00C04F3651B8}
	class IRTDUpdateEvent : public Com::Object
	{
	public:
		IRTDUpdateEvent();
		~IRTDUpdateEvent();
		IRTDUpdateEvent(const Com::Object& init) { Com::Object::Private_Copy(init); }
		IRTDUpdateEvent& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Disconnect();
		//
		__declspec(property(get = get_HeartbeatInterval, put = put_HeartbeatInterval)) long HeartbeatInterval;
		long get_HeartbeatInterval();
		void put_HeartbeatInterval(long HeartbeatInterval);
		void UpdateNotify();
	};

	//________________________________________________________IRtdServer
	// {EC0E6191-DB51-11D3-8F3E-00C04F3651B8}
	class IRtdServer : public Com::Object
	{
	public:
		IRtdServer();
		~IRtdServer();
		IRtdServer(const Com::Object& init) { Com::Object::Private_Copy(init); }
		IRtdServer& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		_variant_t ConnectData(long TopicID, SAFEARRAY* Strings, VARIANT_BOOL& GetNewValues);
		void DisconnectData(long TopicID);
		long Heartbeat();
		void RefreshData(long& TopicCount);
		long ServerStart(Excel::IRTDUpdateEvent& CallbackObject);
		void ServerTerminate();
	};

	//________________________________________________________TextFrame2
	// {000C0398-0000-0000-C000-000000000046}
	class TextFrame2 : public Com::Object
	{
	public:
		TextFrame2();
		~TextFrame2();
		TextFrame2(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TextFrame2& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) /* MsoAutoSize*/ short AutoSize;
		/* MsoAutoSize*/ short get_AutoSize();
		void put_AutoSize(/* MsoAutoSize*/ short AutoSize);
		//
		__declspec(property(get = get_Column)) Com::Object Column;
		Com::Object get_Column();
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		void DeleteText();
		//
		__declspec(property(get = get_HasText)) /* MsoTriState*/ short HasText;
		/* MsoTriState*/ short get_HasText();
		//
		__declspec(property(get = get_HorizontalAnchor, put = put_HorizontalAnchor)) /* MsoHorizontalAnchor*/ short HorizontalAnchor;
		/* MsoHorizontalAnchor*/ short get_HorizontalAnchor();
		void put_HorizontalAnchor(/* MsoHorizontalAnchor*/ short HorizontalAnchor);
		//
		__declspec(property(get = get_MarginBottom, put = put_MarginBottom)) float MarginBottom;
		float get_MarginBottom();
		void put_MarginBottom(float MarginBottom);
		//
		__declspec(property(get = get_MarginLeft, put = put_MarginLeft)) float MarginLeft;
		float get_MarginLeft();
		void put_MarginLeft(float MarginLeft);
		//
		__declspec(property(get = get_MarginRight, put = put_MarginRight)) float MarginRight;
		float get_MarginRight();
		void put_MarginRight(float MarginRight);
		//
		__declspec(property(get = get_MarginTop, put = put_MarginTop)) float MarginTop;
		float get_MarginTop();
		void put_MarginTop(float MarginTop);
		//
		__declspec(property(get = get_NoTextRotation, put = put_NoTextRotation)) /* MsoTriState*/ short NoTextRotation;
		/* MsoTriState*/ short get_NoTextRotation();
		void put_NoTextRotation(/* MsoTriState*/ short NoTextRotation);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) /* MsoTextOrientation*/ short Orientation;
		/* MsoTextOrientation*/ short get_Orientation();
		void put_Orientation(/* MsoTextOrientation*/ short Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PathFormat, put = put_PathFormat)) /* MsoPathFormat*/ short PathFormat;
		/* MsoPathFormat*/ short get_PathFormat();
		void put_PathFormat(/* MsoPathFormat*/ short PathFormat);
		//
		__declspec(property(get = get_Ruler)) Com::Object Ruler;
		Com::Object get_Ruler();
		//
		__declspec(property(get = get_TextRange)) Com::Object TextRange;
		Com::Object get_TextRange();
		//
		__declspec(property(get = get_ThreeD)) Excel::ThreeDFormat ThreeD;
		Excel::ThreeDFormat get_ThreeD();
		//
		__declspec(property(get = get_VerticalAnchor, put = put_VerticalAnchor)) /* MsoVerticalAnchor*/ short VerticalAnchor;
		/* MsoVerticalAnchor*/ short get_VerticalAnchor();
		void put_VerticalAnchor(/* MsoVerticalAnchor*/ short VerticalAnchor);
		//
		__declspec(property(get = get_WarpFormat, put = put_WarpFormat)) /* MsoWarpFormat*/ short WarpFormat;
		/* MsoWarpFormat*/ short get_WarpFormat();
		void put_WarpFormat(/* MsoWarpFormat*/ short WarpFormat);
		//
		__declspec(property(get = get_WordArtformat, put = put_WordArtformat)) /* MsoPresetTextEffect*/ short WordArtformat;
		/* MsoPresetTextEffect*/ short get_WordArtformat();
		void put_WordArtformat(/* MsoPresetTextEffect*/ short WordArtformat);
		//
		__declspec(property(get = get_WordWrap, put = put_WordWrap)) /* MsoTriState*/ short WordWrap;
		/* MsoTriState*/ short get_WordWrap();
		void put_WordWrap(/* MsoTriState*/ short WordWrap);
	};

	//________________________________________________________Model3DFormat
	// {000C03D8-0000-0000-C000-000000000046}
	class Model3DFormat : public Com::Object
	{
	public:
		Model3DFormat();
		~Model3DFormat();
		Model3DFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Model3DFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Com::Object Application;
		Com::Object get_Application();
		//
		__declspec(property(get = get_AutoFit, put = put_AutoFit)) /* MsoTriState*/ short AutoFit;
		/* MsoTriState*/ short get_AutoFit();
		void put_AutoFit(/* MsoTriState*/ short AutoFit);
		//
		__declspec(property(get = get_Creator)) long Creator;
		long get_Creator();
		//
		__declspec(property(get = get_FieldOfView, put = put_FieldOfView)) float FieldOfView;
		float get_FieldOfView();
		void put_FieldOfView(float FieldOfView);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RotationX, put = put_RotationX)) float RotationX;
		float get_RotationX();
		void put_RotationX(float RotationX);
		//
		__declspec(property(get = get_RotationY, put = put_RotationY)) float RotationY;
		float get_RotationY();
		void put_RotationY(float RotationY);
		//
		__declspec(property(get = get_RotationZ, put = put_RotationZ)) float RotationZ;
		float get_RotationZ();
		void put_RotationZ(float RotationZ);
	};

	//_________________________________________________________Application
	// {000208D5-0000-0000-C000-000000000046}
	class ApplicationX : public Com::Object
	{
	public:
		ApplicationX();
		~ApplicationX();
		ApplicationX(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ApplicationX& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void ActivateMicrosoftApp(Excel::XlMSApplication Index);
		//
		__declspec(property(get = get_ActiveCell)) Excel::Range ActiveCell;
		Excel::Range get_ActiveCell();
		//
		__declspec(property(get = get_ActiveChart)) Excel::ChartX ActiveChart;
		Excel::ChartX get_ActiveChart();
		//
		__declspec(property(get = get_ActiveDialog)) Excel::DialogSheet ActiveDialog;
		Excel::DialogSheet get_ActiveDialog();
		//
		__declspec(property(get = get_ActiveEncryptionSession)) long ActiveEncryptionSession;
		long get_ActiveEncryptionSession();
		//
		__declspec(property(get = get_ActiveMenuBar)) Excel::MenuBar ActiveMenuBar;
		Excel::MenuBar get_ActiveMenuBar();
		//
		__declspec(property(get = get_ActivePrinter, put = put_ActivePrinter)) wstring ActivePrinter;
		wstring get_ActivePrinter();
		void put_ActivePrinter(wstring ActivePrinter);
		//
		__declspec(property(get = get_ActiveProtectedViewWindow)) Excel::ProtectedViewWindow ActiveProtectedViewWindow;
		Excel::ProtectedViewWindow get_ActiveProtectedViewWindow();
		//
		__declspec(property(get = get_ActiveSheet)) Com::Object ActiveSheet;
		Com::Object get_ActiveSheet();
		//
		__declspec(property(get = get_ActiveWindow)) Excel::Window ActiveWindow;
		Excel::Window get_ActiveWindow();
		//
		__declspec(property(get = get_ActiveWorkbook)) Excel::WorkbookX ActiveWorkbook;
		Excel::WorkbookX get_ActiveWorkbook();
		void AddChartAutoFormat(_variant_t Chart, wstring Name, _variant_t Description);
		void AddChartAutoFormat(_variant_t Chart, wstring Name);
		void AddCustomList(_variant_t ListArray, _variant_t ByRow);
		void AddCustomList(_variant_t ListArray);
		//
		__declspec(property(get = get_AddIns)) Excel::AddIns AddInsX;
		Excel::AddIns get_AddIns();
		//
		__declspec(property(get = get_AddIns2)) Excel::AddIns2 AddIns2X;
		Excel::AddIns2 get_AddIns2();
		//
		__declspec(property(get = get_AlertBeforeOverwriting, put = put_AlertBeforeOverwriting)) bool AlertBeforeOverwriting;
		bool get_AlertBeforeOverwriting();
		void put_AlertBeforeOverwriting(bool AlertBeforeOverwriting);
		//
		__declspec(property(get = get_AltStartupPath, put = put_AltStartupPath)) wstring AltStartupPath;
		wstring get_AltStartupPath();
		void put_AltStartupPath(wstring AltStartupPath);
		//
		__declspec(property(get = get_AlwaysUseClearType, put = put_AlwaysUseClearType)) bool AlwaysUseClearType;
		bool get_AlwaysUseClearType();
		void put_AlwaysUseClearType(bool AlwaysUseClearType);
		//
		__declspec(property(get = get_AnswerWizard)) Com::Object AnswerWizard;
		Com::Object get_AnswerWizard();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ArbitraryXMLSupportAvailable)) bool ArbitraryXMLSupportAvailable;
		bool get_ArbitraryXMLSupportAvailable();
		//
		__declspec(property(get = get_AskToUpdateLinks, put = put_AskToUpdateLinks)) bool AskToUpdateLinks;
		bool get_AskToUpdateLinks();
		void put_AskToUpdateLinks(bool AskToUpdateLinks);
		//
		__declspec(property(get = get_Assistance)) Com::Object Assistance;
		Com::Object get_Assistance();
		//
		__declspec(property(get = get_Assistant)) Com::Object Assistant;
		Com::Object get_Assistant();
		//
		__declspec(property(get = get_AutoCorrect)) Excel::AutoCorrect AutoCorrectX;
		Excel::AutoCorrect get_AutoCorrect();
		//
		__declspec(property(get = get_AutoFormatAsYouTypeReplaceHyperlinks, put = put_AutoFormatAsYouTypeReplaceHyperlinks)) bool AutoFormatAsYouTypeReplaceHyperlinks;
		bool get_AutoFormatAsYouTypeReplaceHyperlinks();
		void put_AutoFormatAsYouTypeReplaceHyperlinks(bool AutoFormatAsYouTypeReplaceHyperlinks);
		//
		__declspec(property(get = get_AutoPercentEntry, put = put_AutoPercentEntry)) bool AutoPercentEntry;
		bool get_AutoPercentEntry();
		void put_AutoPercentEntry(bool AutoPercentEntry);
		//
		__declspec(property(get = get_AutoRecover)) Excel::AutoRecover AutoRecoverX;
		Excel::AutoRecover get_AutoRecover();
		//
		__declspec(property(get = get_AutomationSecurity, put = put_AutomationSecurity)) /* MsoAutomationSecurity*/ short AutomationSecurity;
		/* MsoAutomationSecurity*/ short get_AutomationSecurity();
		void put_AutomationSecurity(/* MsoAutomationSecurity*/ short AutomationSecurity);
		//
		__declspec(property(get = get_Build)) long Build;
		long get_Build();
		//
		__declspec(property(get = get_COMAddIns)) Com::Object COMAddIns;
		Com::Object get_COMAddIns();
		void Calculate();
		//
		__declspec(property(get = get_CalculateBeforeSave, put = put_CalculateBeforeSave)) bool CalculateBeforeSave;
		bool get_CalculateBeforeSave();
		void put_CalculateBeforeSave(bool CalculateBeforeSave);
		void CalculateFull();
		void CalculateFullRebuild();
		void CalculateUntilAsyncQueriesDone();
		//
		__declspec(property(get = get_Calculation, put = put_Calculation)) Excel::XlCalculation Calculation;
		Excel::XlCalculation get_Calculation();
		void put_Calculation(Excel::XlCalculation Calculation);
		//
		__declspec(property(get = get_CalculationInterruptKey, put = put_CalculationInterruptKey)) Excel::XlCalculationInterruptKey CalculationInterruptKey;
		Excel::XlCalculationInterruptKey get_CalculationInterruptKey();
		void put_CalculationInterruptKey(Excel::XlCalculationInterruptKey CalculationInterruptKey);
		//
		__declspec(property(get = get_CalculationState)) Excel::XlCalculationState CalculationState;
		Excel::XlCalculationState get_CalculationState();
		//
		__declspec(property(get = get_CalculationVersion)) long CalculationVersion;
		long get_CalculationVersion();
		_variant_t get_Caller(_variant_t Index);
		_variant_t get_Caller();
		//
		__declspec(property(get = get_CanPlaySounds)) bool CanPlaySounds;
		bool get_CanPlaySounds();
		//
		__declspec(property(get = get_CanRecordSounds)) bool CanRecordSounds;
		bool get_CanRecordSounds();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		//
		__declspec(property(get = get_CellDragAndDrop, put = put_CellDragAndDrop)) bool CellDragAndDrop;
		bool get_CellDragAndDrop();
		void put_CellDragAndDrop(bool CellDragAndDrop);
		//
		__declspec(property(get = get_Cells)) Excel::Range Cells;
		Excel::Range get_Cells();
		double CentimetersToPoints(double Centimeters);
		//
		__declspec(property(get = get_ChartDataPointTrack, put = put_ChartDataPointTrack)) bool ChartDataPointTrack;
		bool get_ChartDataPointTrack();
		void put_ChartDataPointTrack(bool ChartDataPointTrack);
		//
		__declspec(property(get = get_Charts)) Excel::Sheets ChartsX;
		Excel::Sheets get_Charts();
		void CheckAbort(_variant_t KeepAbort);
		void CheckAbort();
		bool CheckSpelling(wstring Word, _variant_t CustomDictionary, _variant_t IgnoreUppercase);
		bool CheckSpelling(wstring Word);
		_variant_t get_ClipboardFormats(_variant_t Index);
		_variant_t get_ClipboardFormats();
		//
		__declspec(property(get = get_ClusterConnector, put = put_ClusterConnector)) wstring ClusterConnector;
		wstring get_ClusterConnector();
		void put_ClusterConnector(wstring ClusterConnector);
		//
		__declspec(property(get = get_ColorButtons, put = put_ColorButtons)) bool ColorButtons;
		bool get_ColorButtons();
		void put_ColorButtons(bool ColorButtons);
		//
		__declspec(property(get = get_Columns)) Excel::Range Columns;
		Excel::Range get_Columns();
		//
		__declspec(property(get = get_CommandBars)) Com::Object CommandBars;
		Com::Object get_CommandBars();
		//
		__declspec(property(get = get_CommandUnderlines, put = put_CommandUnderlines)) Excel::XlCommandUnderlines CommandUnderlines;
		Excel::XlCommandUnderlines get_CommandUnderlines();
		void put_CommandUnderlines(Excel::XlCommandUnderlines CommandUnderlines);
		//
		__declspec(property(get = get_ConstrainNumeric, put = put_ConstrainNumeric)) bool ConstrainNumeric;
		bool get_ConstrainNumeric();
		void put_ConstrainNumeric(bool ConstrainNumeric);
		//
		__declspec(property(get = get_ControlCharacters, put = put_ControlCharacters)) bool ControlCharacters;
		bool get_ControlCharacters();
		void put_ControlCharacters(bool ControlCharacters);
		_variant_t ConvertFormula(_variant_t Formula, Excel::XlReferenceStyle FromReferenceStyle, _variant_t ToReferenceStyle, _variant_t ToAbsolute, _variant_t RelativeTo);
		_variant_t ConvertFormula(_variant_t Formula, Excel::XlReferenceStyle FromReferenceStyle);
		//
		__declspec(property(get = get_CopyObjectsWithCells, put = put_CopyObjectsWithCells)) bool CopyObjectsWithCells;
		bool get_CopyObjectsWithCells();
		void put_CopyObjectsWithCells(bool CopyObjectsWithCells);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Cursor, put = put_Cursor)) Excel::XlMousePointer Cursor;
		Excel::XlMousePointer get_Cursor();
		void put_Cursor(Excel::XlMousePointer Cursor);
		//
		__declspec(property(get = get_CursorMovement, put = put_CursorMovement)) long CursorMovement;
		long get_CursorMovement();
		void put_CursorMovement(long CursorMovement);
		//
		__declspec(property(get = get_CustomListCount)) long CustomListCount;
		long get_CustomListCount();
		//
		__declspec(property(get = get_CutCopyMode, put = put_CutCopyMode)) Excel::XlCutCopyMode CutCopyMode;
		Excel::XlCutCopyMode get_CutCopyMode();
		void put_CutCopyMode(Excel::XlCutCopyMode CutCopyMode);
		//
		__declspec(property(get = get_DDEAppReturnCode)) long DDEAppReturnCode;
		long get_DDEAppReturnCode();
		void DDEExecute(long Channel, wstring String);
		long DDEInitiate(wstring App, wstring Topic);
		void DDEPoke(long Channel, _variant_t Item, _variant_t Data);
		_variant_t DDERequest(long Channel, wstring Item);
		void DDETerminate(long Channel);
		//
		__declspec(property(get = get_DataEntryMode, put = put_DataEntryMode)) long DataEntryMode;
		long get_DataEntryMode();
		void put_DataEntryMode(long DataEntryMode);
		//
		__declspec(property(get = get_DecimalSeparator, put = put_DecimalSeparator)) wstring DecimalSeparator;
		wstring get_DecimalSeparator();
		void put_DecimalSeparator(wstring DecimalSeparator);
		//
		__declspec(property(get = get_DefaultFilePath, put = put_DefaultFilePath)) wstring DefaultFilePath;
		wstring get_DefaultFilePath();
		void put_DefaultFilePath(wstring DefaultFilePath);
		//
		__declspec(property(get = get_DefaultPivotTableLayoutOptions)) Excel::DefaultPivotTableLayoutOptions DefaultPivotTableLayoutOptionsX;
		Excel::DefaultPivotTableLayoutOptions get_DefaultPivotTableLayoutOptions();
		//
		__declspec(property(get = get_DefaultSaveFormat, put = put_DefaultSaveFormat)) Excel::XlFileFormat DefaultSaveFormat;
		Excel::XlFileFormat get_DefaultSaveFormat();
		void put_DefaultSaveFormat(Excel::XlFileFormat DefaultSaveFormat);
		//
		__declspec(property(get = get_DefaultSheetDirection, put = put_DefaultSheetDirection)) long DefaultSheetDirection;
		long get_DefaultSheetDirection();
		void put_DefaultSheetDirection(long DefaultSheetDirection);
		//
		__declspec(property(get = get_DefaultWebOptions)) Excel::DefaultWebOptions DefaultWebOptionsX;
		Excel::DefaultWebOptions get_DefaultWebOptions();
		//
		__declspec(property(get = get_DeferAsyncQueries, put = put_DeferAsyncQueries)) bool DeferAsyncQueries;
		bool get_DeferAsyncQueries();
		void put_DeferAsyncQueries(bool DeferAsyncQueries);
		void DeleteChartAutoFormat(wstring Name);
		void DeleteCustomList(long ListNum);
		//
		__declspec(property(get = get_DialogSheets)) Excel::Sheets DialogSheetsX;
		Excel::Sheets get_DialogSheets();
		//
		__declspec(property(get = get_Dialogs)) Excel::Dialogs DialogsX;
		Excel::Dialogs get_Dialogs();
		//
		__declspec(property(get = get_DisplayAlerts, put = put_DisplayAlerts)) bool DisplayAlerts;
		bool get_DisplayAlerts();
		void put_DisplayAlerts(bool DisplayAlerts);
		//
		__declspec(property(get = get_DisplayClipboardWindow, put = put_DisplayClipboardWindow)) bool DisplayClipboardWindow;
		bool get_DisplayClipboardWindow();
		void put_DisplayClipboardWindow(bool DisplayClipboardWindow);
		//
		__declspec(property(get = get_DisplayCommentIndicator, put = put_DisplayCommentIndicator)) Excel::XlCommentDisplayMode DisplayCommentIndicator;
		Excel::XlCommentDisplayMode get_DisplayCommentIndicator();
		void put_DisplayCommentIndicator(Excel::XlCommentDisplayMode DisplayCommentIndicator);
		//
		__declspec(property(get = get_DisplayDocumentActionTaskPane, put = put_DisplayDocumentActionTaskPane)) bool DisplayDocumentActionTaskPane;
		bool get_DisplayDocumentActionTaskPane();
		void put_DisplayDocumentActionTaskPane(bool DisplayDocumentActionTaskPane);
		//
		__declspec(property(get = get_DisplayDocumentInformationPanel, put = put_DisplayDocumentInformationPanel)) bool DisplayDocumentInformationPanel;
		bool get_DisplayDocumentInformationPanel();
		void put_DisplayDocumentInformationPanel(bool DisplayDocumentInformationPanel);
		//
		__declspec(property(get = get_DisplayExcel4Menus, put = put_DisplayExcel4Menus)) bool DisplayExcel4Menus;
		bool get_DisplayExcel4Menus();
		void put_DisplayExcel4Menus(bool DisplayExcel4Menus);
		//
		__declspec(property(get = get_DisplayFormulaAutoComplete, put = put_DisplayFormulaAutoComplete)) bool DisplayFormulaAutoComplete;
		bool get_DisplayFormulaAutoComplete();
		void put_DisplayFormulaAutoComplete(bool DisplayFormulaAutoComplete);
		//
		__declspec(property(get = get_DisplayFormulaBar, put = put_DisplayFormulaBar)) bool DisplayFormulaBar;
		bool get_DisplayFormulaBar();
		void put_DisplayFormulaBar(bool DisplayFormulaBar);
		//
		__declspec(property(get = get_DisplayFullScreen, put = put_DisplayFullScreen)) bool DisplayFullScreen;
		bool get_DisplayFullScreen();
		void put_DisplayFullScreen(bool DisplayFullScreen);
		//
		__declspec(property(get = get_DisplayFunctionToolTips, put = put_DisplayFunctionToolTips)) bool DisplayFunctionToolTips;
		bool get_DisplayFunctionToolTips();
		void put_DisplayFunctionToolTips(bool DisplayFunctionToolTips);
		//
		__declspec(property(get = get_DisplayInfoWindow, put = put_DisplayInfoWindow)) bool DisplayInfoWindow;
		bool get_DisplayInfoWindow();
		void put_DisplayInfoWindow(bool DisplayInfoWindow);
		//
		__declspec(property(get = get_DisplayInsertOptions, put = put_DisplayInsertOptions)) bool DisplayInsertOptions;
		bool get_DisplayInsertOptions();
		void put_DisplayInsertOptions(bool DisplayInsertOptions);
		//
		__declspec(property(get = get_DisplayNoteIndicator, put = put_DisplayNoteIndicator)) bool DisplayNoteIndicator;
		bool get_DisplayNoteIndicator();
		void put_DisplayNoteIndicator(bool DisplayNoteIndicator);
		//
		__declspec(property(get = get_DisplayPasteOptions, put = put_DisplayPasteOptions)) bool DisplayPasteOptions;
		bool get_DisplayPasteOptions();
		void put_DisplayPasteOptions(bool DisplayPasteOptions);
		//
		__declspec(property(get = get_DisplayRecentFiles, put = put_DisplayRecentFiles)) bool DisplayRecentFiles;
		bool get_DisplayRecentFiles();
		void put_DisplayRecentFiles(bool DisplayRecentFiles);
		//
		__declspec(property(get = get_DisplayScrollBars, put = put_DisplayScrollBars)) bool DisplayScrollBars;
		bool get_DisplayScrollBars();
		void put_DisplayScrollBars(bool DisplayScrollBars);
		//
		__declspec(property(get = get_DisplayStatusBar, put = put_DisplayStatusBar)) bool DisplayStatusBar;
		bool get_DisplayStatusBar();
		void put_DisplayStatusBar(bool DisplayStatusBar);
		void DisplayXMLSourcePane(_variant_t XmlMap);
		void DisplayXMLSourcePane();
		void DoubleClick();
		_variant_t Dummy1(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t Dummy1();
		bool Dummy10(_variant_t arg);
		bool Dummy10();
		//
		__declspec(property(get = get_Dummy101)) Com::Object Dummy101;
		Com::Object get_Dummy101();
		void Dummy11();
		void Dummy12(Excel::PivotTable& p1, Excel::PivotTable& p2);
		_variant_t Dummy13(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t Dummy13(_variant_t Arg1);
		void Dummy14();
		_variant_t Dummy2(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8);
		_variant_t Dummy2();
		_variant_t Dummy20(long grfCompareFunctions);
		//
		__declspec(property(get = get_Dummy22, put = put_Dummy22)) bool Dummy22;
		bool get_Dummy22();
		void put_Dummy22(bool Dummy22);
		//
		__declspec(property(get = get_Dummy23, put = put_Dummy23)) bool Dummy23;
		bool get_Dummy23();
		void put_Dummy23(bool Dummy23);
		_variant_t Dummy3();
		_variant_t Dummy4(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15);
		_variant_t Dummy4();
		_variant_t Dummy5(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13);
		_variant_t Dummy5();
		_variant_t Dummy6();
		_variant_t Dummy7();
		_variant_t Dummy8(_variant_t Arg1);
		_variant_t Dummy8();
		_variant_t Dummy9();
		//
		__declspec(property(get = get_EditDirectlyInCell, put = put_EditDirectlyInCell)) bool EditDirectlyInCell;
		bool get_EditDirectlyInCell();
		void put_EditDirectlyInCell(bool EditDirectlyInCell);
		//
		__declspec(property(get = get_EnableAnimations, put = put_EnableAnimations)) bool EnableAnimations;
		bool get_EnableAnimations();
		void put_EnableAnimations(bool EnableAnimations);
		//
		__declspec(property(get = get_EnableAutoComplete, put = put_EnableAutoComplete)) bool EnableAutoComplete;
		bool get_EnableAutoComplete();
		void put_EnableAutoComplete(bool EnableAutoComplete);
		//
		__declspec(property(get = get_EnableCancelKey, put = put_EnableCancelKey)) Excel::XlEnableCancelKey EnableCancelKey;
		Excel::XlEnableCancelKey get_EnableCancelKey();
		void put_EnableCancelKey(Excel::XlEnableCancelKey EnableCancelKey);
		//
		__declspec(property(get = get_EnableCheckFileExtensions, put = put_EnableCheckFileExtensions)) bool EnableCheckFileExtensions;
		bool get_EnableCheckFileExtensions();
		void put_EnableCheckFileExtensions(bool EnableCheckFileExtensions);
		//
		__declspec(property(get = get_EnableEvents, put = put_EnableEvents)) bool EnableEvents;
		bool get_EnableEvents();
		void put_EnableEvents(bool EnableEvents);
		//
		__declspec(property(get = get_EnableLargeOperationAlert, put = put_EnableLargeOperationAlert)) bool EnableLargeOperationAlert;
		bool get_EnableLargeOperationAlert();
		void put_EnableLargeOperationAlert(bool EnableLargeOperationAlert);
		//
		__declspec(property(get = get_EnableLivePreview, put = put_EnableLivePreview)) bool EnableLivePreview;
		bool get_EnableLivePreview();
		void put_EnableLivePreview(bool EnableLivePreview);
		//
		__declspec(property(get = get_EnableMacroAnimations, put = put_EnableMacroAnimations)) bool EnableMacroAnimations;
		bool get_EnableMacroAnimations();
		void put_EnableMacroAnimations(bool EnableMacroAnimations);
		//
		__declspec(property(get = get_EnableSound, put = put_EnableSound)) bool EnableSound;
		bool get_EnableSound();
		void put_EnableSound(bool EnableSound);
		//
		__declspec(property(get = get_EnableTipWizard, put = put_EnableTipWizard)) bool EnableTipWizard;
		bool get_EnableTipWizard();
		void put_EnableTipWizard(bool EnableTipWizard);
		//
		__declspec(property(get = get_ErrorCheckingOptions)) Excel::ErrorCheckingOptions ErrorCheckingOptionsX;
		Excel::ErrorCheckingOptions get_ErrorCheckingOptions();
		_variant_t Evaluate(_variant_t Name);
		//
		__declspec(property(get = get_Excel4IntlMacroSheets)) Excel::Sheets Excel4IntlMacroSheets;
		Excel::Sheets get_Excel4IntlMacroSheets();
		//
		__declspec(property(get = get_Excel4MacroSheets)) Excel::Sheets Excel4MacroSheets;
		Excel::Sheets get_Excel4MacroSheets();
		_variant_t ExecuteExcel4Macro(wstring String);
		//
		__declspec(property(get = get_ExtendList, put = put_ExtendList)) bool ExtendList;
		bool get_ExtendList();
		void put_ExtendList(bool ExtendList);
		//
		__declspec(property(get = get_FeatureInstall, put = put_FeatureInstall)) /* MsoFeatureInstall*/ short FeatureInstall;
		/* MsoFeatureInstall*/ short get_FeatureInstall();
		void put_FeatureInstall(/* MsoFeatureInstall*/ short FeatureInstall);
		_variant_t get_FileConverters(_variant_t Index1, _variant_t Index2);
		_variant_t get_FileConverters();
		Com::Object get_FileDialog(/* MsoFileDialogType*/ short fileDialogType);
		//
		__declspec(property(get = get_FileExportConverters)) Excel::FileExportConverters FileExportConvertersX;
		Excel::FileExportConverters get_FileExportConverters();
		//
		__declspec(property(get = get_FileFind)) Com::Object FileFind;
		Com::Object get_FileFind();
		//
		__declspec(property(get = get_FileSearch)) Com::Object FileSearch;
		Com::Object get_FileSearch();
		//
		__declspec(property(get = get_FileValidation, put = put_FileValidation)) /* MsoFileValidationMode*/ short FileValidation;
		/* MsoFileValidationMode*/ short get_FileValidation();
		void put_FileValidation(/* MsoFileValidationMode*/ short FileValidation);
		//
		__declspec(property(get = get_FileValidationPivot, put = put_FileValidationPivot)) Excel::XlFileValidationPivotMode FileValidationPivot;
		Excel::XlFileValidationPivotMode get_FileValidationPivot();
		void put_FileValidationPivot(Excel::XlFileValidationPivotMode FileValidationPivot);
		bool FindFile();
		//
		__declspec(property(get = get_FindFormat)) Excel::CellFormat FindFormat;
		Excel::CellFormat get_FindFormat();
		void put_FindFormat(Excel::CellFormat& FindFormat);
		//
		__declspec(property(get = get_FixedDecimal, put = put_FixedDecimal)) bool FixedDecimal;
		bool get_FixedDecimal();
		void put_FixedDecimal(bool FixedDecimal);
		//
		__declspec(property(get = get_FixedDecimalPlaces, put = put_FixedDecimalPlaces)) long FixedDecimalPlaces;
		long get_FixedDecimalPlaces();
		void put_FixedDecimalPlaces(long FixedDecimalPlaces);
		//
		__declspec(property(get = get_FlashFill, put = put_FlashFill)) bool FlashFill;
		bool get_FlashFill();
		void put_FlashFill(bool FlashFill);
		//
		__declspec(property(get = get_FlashFillMode, put = put_FlashFillMode)) bool FlashFillMode;
		bool get_FlashFillMode();
		void put_FlashFillMode(bool FlashFillMode);
		//
		__declspec(property(get = get_FormulaBarHeight, put = put_FormulaBarHeight)) long FormulaBarHeight;
		long get_FormulaBarHeight();
		void put_FormulaBarHeight(long FormulaBarHeight);
		//
		__declspec(property(get = get_GenerateGetPivotData, put = put_GenerateGetPivotData)) bool GenerateGetPivotData;
		bool get_GenerateGetPivotData();
		void put_GenerateGetPivotData(bool GenerateGetPivotData);
		//
		__declspec(property(get = get_GenerateTableRefs, put = put_GenerateTableRefs)) Excel::XlGenerateTableRefs GenerateTableRefs;
		Excel::XlGenerateTableRefs get_GenerateTableRefs();
		void put_GenerateTableRefs(Excel::XlGenerateTableRefs GenerateTableRefs);
		_variant_t GetCustomListContents(long ListNum);
		long GetCustomListNum(_variant_t ListArray);
		_variant_t GetOpenFilename(_variant_t FileFilter, _variant_t FilterIndex, _variant_t Title, _variant_t ButtonText, _variant_t MultiSelect);
		_variant_t GetOpenFilename();
		wstring GetPhonetic(_variant_t Text);
		wstring GetPhonetic();
		_variant_t GetSaveAsFilename(_variant_t InitialFilename, _variant_t FileFilter, _variant_t FilterIndex, _variant_t Title, _variant_t ButtonText);
		_variant_t GetSaveAsFilename();
		void Goto(_variant_t Reference, _variant_t Scroll);
		void Goto();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		void Help(_variant_t HelpFile, _variant_t HelpContextID);
		void Help();
		//
		__declspec(property(get = get_HighQualityModeForGraphics, put = put_HighQualityModeForGraphics)) bool HighQualityModeForGraphics;
		bool get_HighQualityModeForGraphics();
		void put_HighQualityModeForGraphics(bool HighQualityModeForGraphics);
		//
		__declspec(property(get = get_Hinstance)) long Hinstance;
		long get_Hinstance();
		//
		__declspec(property(get = get_HinstancePtr)) _variant_t HinstancePtr;
		_variant_t get_HinstancePtr();
		//
		__declspec(property(get = get_Hwnd)) long Hwnd;
		long get_Hwnd();
		//
		__declspec(property(get = get_IgnoreRemoteRequests, put = put_IgnoreRemoteRequests)) bool IgnoreRemoteRequests;
		bool get_IgnoreRemoteRequests();
		void put_IgnoreRemoteRequests(bool IgnoreRemoteRequests);
		double InchesToPoints(double Inches);
		_variant_t InputBox(wstring Prompt, _variant_t Title, _variant_t Default, _variant_t Left, _variant_t Top, _variant_t HelpFile, _variant_t HelpContextID, _variant_t Type);
		_variant_t InputBox(wstring Prompt);
		//
		__declspec(property(get = get_Interactive, put = put_Interactive)) bool Interactive;
		bool get_Interactive();
		void put_Interactive(bool Interactive);
		_variant_t get_International(_variant_t Index);
		_variant_t get_International();
		Excel::Range Intersect(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		Excel::Range Intersect(Excel::Range& Arg1, Excel::Range& Arg2);
		//
		__declspec(property(get = get_IsSandboxed)) bool IsSandboxed;
		bool get_IsSandboxed();
		//
		__declspec(property(get = get_Iteration, put = put_Iteration)) bool Iteration;
		bool get_Iteration();
		void put_Iteration(bool Iteration);
		//
		__declspec(property(get = get_LanguageSettings)) Com::Object LanguageSettings;
		Com::Object get_LanguageSettings();
		//
		__declspec(property(get = get_LargeButtons, put = put_LargeButtons)) bool LargeButtons;
		bool get_LargeButtons();
		void put_LargeButtons(bool LargeButtons);
		//
		__declspec(property(get = get_LargeOperationCellThousandCount, put = put_LargeOperationCellThousandCount)) long LargeOperationCellThousandCount;
		long get_LargeOperationCellThousandCount();
		void put_LargeOperationCellThousandCount(long LargeOperationCellThousandCount);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LibraryPath)) wstring LibraryPath;
		wstring get_LibraryPath();
		void MacroOptions(_variant_t Macro, _variant_t Description, _variant_t HasMenu, _variant_t MenuText, _variant_t HasShortcutKey, _variant_t ShortcutKey, _variant_t Category, _variant_t StatusBar, _variant_t HelpContextID, _variant_t HelpFile, _variant_t ArgumentDescriptions);
		void MacroOptions();
		void MailLogoff();
		void MailLogon(_variant_t Name, _variant_t Password, _variant_t DownloadNewMail);
		void MailLogon();
		//
		__declspec(property(get = get_MailSession)) _variant_t MailSession;
		_variant_t get_MailSession();
		//
		__declspec(property(get = get_MailSystem)) Excel::XlMailSystem MailSystem;
		Excel::XlMailSystem get_MailSystem();
		//
		__declspec(property(get = get_MapPaperSize, put = put_MapPaperSize)) bool MapPaperSize;
		bool get_MapPaperSize();
		void put_MapPaperSize(bool MapPaperSize);
		//
		__declspec(property(get = get_MathCoprocessorAvailable)) bool MathCoprocessorAvailable;
		bool get_MathCoprocessorAvailable();
		//
		__declspec(property(get = get_MaxChange, put = put_MaxChange)) double MaxChange;
		double get_MaxChange();
		void put_MaxChange(double MaxChange);
		//
		__declspec(property(get = get_MaxIterations, put = put_MaxIterations)) long MaxIterations;
		long get_MaxIterations();
		void put_MaxIterations(long MaxIterations);
		//
		__declspec(property(get = get_MeasurementUnit, put = put_MeasurementUnit)) long MeasurementUnit;
		long get_MeasurementUnit();
		void put_MeasurementUnit(long MeasurementUnit);
		//
		__declspec(property(get = get_MemoryFree)) long MemoryFree;
		long get_MemoryFree();
		//
		__declspec(property(get = get_MemoryTotal)) long MemoryTotal;
		long get_MemoryTotal();
		//
		__declspec(property(get = get_MemoryUsed)) long MemoryUsed;
		long get_MemoryUsed();
		//
		__declspec(property(get = get_MenuBars)) Excel::MenuBars MenuBarsX;
		Excel::MenuBars get_MenuBars();
		//
		__declspec(property(get = get_MergeInstances, put = put_MergeInstances)) bool MergeInstances;
		bool get_MergeInstances();
		void put_MergeInstances(bool MergeInstances);
		//
		__declspec(property(get = get_Modules)) Excel::Modules ModulesX;
		Excel::Modules get_Modules();
		//
		__declspec(property(get = get_MouseAvailable)) bool MouseAvailable;
		bool get_MouseAvailable();
		//
		__declspec(property(get = get_MoveAfterReturn, put = put_MoveAfterReturn)) bool MoveAfterReturn;
		bool get_MoveAfterReturn();
		void put_MoveAfterReturn(bool MoveAfterReturn);
		//
		__declspec(property(get = get_MoveAfterReturnDirection, put = put_MoveAfterReturnDirection)) Excel::XlDirection MoveAfterReturnDirection;
		Excel::XlDirection get_MoveAfterReturnDirection();
		void put_MoveAfterReturnDirection(Excel::XlDirection MoveAfterReturnDirection);
		//
		__declspec(property(get = get_MultiThreadedCalculation)) Excel::MultiThreadedCalculation MultiThreadedCalculationX;
		Excel::MultiThreadedCalculation get_MultiThreadedCalculation();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Names)) Excel::Names NamesX;
		Excel::Names get_Names();
		//
		__declspec(property(get = get_NetworkTemplatesPath)) wstring NetworkTemplatesPath;
		wstring get_NetworkTemplatesPath();
		//
		__declspec(property(get = get_NewWorkbook)) Com::Object NewWorkbook;
		Com::Object get_NewWorkbook();
		Excel::WorkbookX NextLetter();
		//
		__declspec(property(get = get_ODBCErrors)) Excel::ODBCErrors ODBCErrorsX;
		Excel::ODBCErrors get_ODBCErrors();
		//
		__declspec(property(get = get_ODBCTimeout, put = put_ODBCTimeout)) long ODBCTimeout;
		long get_ODBCTimeout();
		void put_ODBCTimeout(long ODBCTimeout);
		//
		__declspec(property(get = get_OLEDBErrors)) Excel::OLEDBErrors OLEDBErrorsX;
		Excel::OLEDBErrors get_OLEDBErrors();
		//
		__declspec(property(get = get_OnCalculate, put = put_OnCalculate)) wstring OnCalculate;
		wstring get_OnCalculate();
		void put_OnCalculate(wstring OnCalculate);
		//
		__declspec(property(get = get_OnData, put = put_OnData)) wstring OnData;
		wstring get_OnData();
		void put_OnData(wstring OnData);
		//
		__declspec(property(get = get_OnDoubleClick, put = put_OnDoubleClick)) wstring OnDoubleClick;
		wstring get_OnDoubleClick();
		void put_OnDoubleClick(wstring OnDoubleClick);
		//
		__declspec(property(get = get_OnEntry, put = put_OnEntry)) wstring OnEntry;
		wstring get_OnEntry();
		void put_OnEntry(wstring OnEntry);
		void OnKey(wstring Key, _variant_t Procedure);
		void OnKey(wstring Key);
		void OnRepeat(wstring Text, wstring Procedure);
		//
		__declspec(property(get = get_OnSheetActivate, put = put_OnSheetActivate)) wstring OnSheetActivate;
		wstring get_OnSheetActivate();
		void put_OnSheetActivate(wstring OnSheetActivate);
		//
		__declspec(property(get = get_OnSheetDeactivate, put = put_OnSheetDeactivate)) wstring OnSheetDeactivate;
		wstring get_OnSheetDeactivate();
		void put_OnSheetDeactivate(wstring OnSheetDeactivate);
		void OnTime(_variant_t EarliestTime, wstring Procedure, _variant_t LatestTime, _variant_t Schedule);
		void OnTime(_variant_t EarliestTime, wstring Procedure);
		void OnUndo(wstring Text, wstring Procedure);
		//
		__declspec(property(get = get_OnWindow, put = put_OnWindow)) wstring OnWindow;
		wstring get_OnWindow();
		void put_OnWindow(wstring OnWindow);
		//
		__declspec(property(get = get_OperatingSystem)) wstring OperatingSystem;
		wstring get_OperatingSystem();
		//
		__declspec(property(get = get_OrganizationName)) wstring OrganizationName;
		wstring get_OrganizationName();
		//
		__declspec(property(get = get_Parent)) Excel::ApplicationX Parent;
		Excel::ApplicationX get_Parent();
		//
		__declspec(property(get = get_Path)) wstring Path;
		wstring get_Path();
		//
		__declspec(property(get = get_PathSeparator)) wstring PathSeparator;
		wstring get_PathSeparator();
		//
		__declspec(property(get = get_PivotTableSelection, put = put_PivotTableSelection)) bool PivotTableSelection;
		bool get_PivotTableSelection();
		void put_PivotTableSelection(bool PivotTableSelection);
		_variant_t get_PreviousSelections(_variant_t Index);
		_variant_t get_PreviousSelections();
		//
		__declspec(property(get = get_PrintCommunication, put = put_PrintCommunication)) bool PrintCommunication;
		bool get_PrintCommunication();
		void put_PrintCommunication(bool PrintCommunication);
		//
		__declspec(property(get = get_ProductCode)) wstring ProductCode;
		wstring get_ProductCode();
		//
		__declspec(property(get = get_PromptForSummaryInfo, put = put_PromptForSummaryInfo)) bool PromptForSummaryInfo;
		bool get_PromptForSummaryInfo();
		void put_PromptForSummaryInfo(bool PromptForSummaryInfo);
		//
		__declspec(property(get = get_ProtectedViewWindows)) Excel::ProtectedViewWindows ProtectedViewWindowsX;
		Excel::ProtectedViewWindows get_ProtectedViewWindows();
		//
		__declspec(property(get = get_QuickAnalysis)) Excel::QuickAnalysis QuickAnalysisX;
		Excel::QuickAnalysis get_QuickAnalysis();
		void Quit();
		//
		__declspec(property(get = get_Quitting)) bool Quitting;
		bool get_Quitting();
		//
		__declspec(property(get = get_RTD)) Excel::RTD RTDX;
		Excel::RTD get_RTD();
		Excel::Range get_Range(_variant_t Cell1, _variant_t Cell2);
		Excel::Range get_Range(_variant_t Cell1);
		//
		__declspec(property(get = get_Ready)) bool Ready;
		bool get_Ready();
		//
		__declspec(property(get = get_RecentFiles)) Excel::RecentFiles RecentFilesX;
		Excel::RecentFiles get_RecentFiles();
		void RecordMacro(_variant_t BasicCode, _variant_t XlmCode);
		void RecordMacro();
		//
		__declspec(property(get = get_RecordRelative)) bool RecordRelative;
		bool get_RecordRelative();
		//
		__declspec(property(get = get_ReferenceStyle, put = put_ReferenceStyle)) Excel::XlReferenceStyle ReferenceStyle;
		Excel::XlReferenceStyle get_ReferenceStyle();
		void put_ReferenceStyle(Excel::XlReferenceStyle ReferenceStyle);
		bool RegisterXLL(wstring Filename);
		_variant_t get_RegisteredFunctions(_variant_t Index1, _variant_t Index2);
		_variant_t get_RegisteredFunctions();
		void Repeat();
		//
		__declspec(property(get = get_ReplaceFormat)) Excel::CellFormat ReplaceFormat;
		Excel::CellFormat get_ReplaceFormat();
		void put_ReplaceFormat(Excel::CellFormat& ReplaceFormat);
		void ResetTipWizard();
		//
		__declspec(property(get = get_RollZoom, put = put_RollZoom)) bool RollZoom;
		bool get_RollZoom();
		void put_RollZoom(bool RollZoom);
		//
		__declspec(property(get = get_Rows)) Excel::Range Rows;
		Excel::Range get_Rows();
		_variant_t Run(_variant_t Macro, _variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t Run();
		void Save(_variant_t Filename);
		void Save();
		//
		__declspec(property(get = get_SaveISO8601Dates, put = put_SaveISO8601Dates)) bool SaveISO8601Dates;
		bool get_SaveISO8601Dates();
		void put_SaveISO8601Dates(bool SaveISO8601Dates);
		void SaveWorkspace(_variant_t Filename);
		void SaveWorkspace();
		//
		__declspec(property(get = get_ScreenUpdating, put = put_ScreenUpdating)) bool ScreenUpdating;
		bool get_ScreenUpdating();
		void put_ScreenUpdating(bool ScreenUpdating);
		//
		__declspec(property(get = get_Selection)) Com::Object Selection;
		Com::Object get_Selection();
		void SendKeys(_variant_t Keys, _variant_t Wait);
		void SendKeys(_variant_t Keys);
		void SetDefaultChart(_variant_t FormatName, _variant_t Gallery);
		void SetDefaultChart();
		long SharePointVersion(wstring bstrUrl);
		//
		__declspec(property(get = get_Sheets)) Excel::Sheets SheetsX;
		Excel::Sheets get_Sheets();
		//
		__declspec(property(get = get_SheetsInNewWorkbook, put = put_SheetsInNewWorkbook)) long SheetsInNewWorkbook;
		long get_SheetsInNewWorkbook();
		void put_SheetsInNewWorkbook(long SheetsInNewWorkbook);
		Excel::Menu get_ShortcutMenus(long Index);
		//
		__declspec(property(get = get_ShowChartTipNames, put = put_ShowChartTipNames)) bool ShowChartTipNames;
		bool get_ShowChartTipNames();
		void put_ShowChartTipNames(bool ShowChartTipNames);
		//
		__declspec(property(get = get_ShowChartTipValues, put = put_ShowChartTipValues)) bool ShowChartTipValues;
		bool get_ShowChartTipValues();
		void put_ShowChartTipValues(bool ShowChartTipValues);
		//
		__declspec(property(get = get_ShowDevTools, put = put_ShowDevTools)) bool ShowDevTools;
		bool get_ShowDevTools();
		void put_ShowDevTools(bool ShowDevTools);
		//
		__declspec(property(get = get_ShowMenuFloaties, put = put_ShowMenuFloaties)) bool ShowMenuFloaties;
		bool get_ShowMenuFloaties();
		void put_ShowMenuFloaties(bool ShowMenuFloaties);
		//
		__declspec(property(get = get_ShowQuickAnalysis, put = put_ShowQuickAnalysis)) bool ShowQuickAnalysis;
		bool get_ShowQuickAnalysis();
		void put_ShowQuickAnalysis(bool ShowQuickAnalysis);
		//
		__declspec(property(get = get_ShowSelectionFloaties, put = put_ShowSelectionFloaties)) bool ShowSelectionFloaties;
		bool get_ShowSelectionFloaties();
		void put_ShowSelectionFloaties(bool ShowSelectionFloaties);
		//
		__declspec(property(get = get_ShowStartupDialog, put = put_ShowStartupDialog)) bool ShowStartupDialog;
		bool get_ShowStartupDialog();
		void put_ShowStartupDialog(bool ShowStartupDialog);
		//
		__declspec(property(get = get_ShowToolTips, put = put_ShowToolTips)) bool ShowToolTips;
		bool get_ShowToolTips();
		void put_ShowToolTips(bool ShowToolTips);
		//
		__declspec(property(get = get_ShowWindowsInTaskbar, put = put_ShowWindowsInTaskbar)) bool ShowWindowsInTaskbar;
		bool get_ShowWindowsInTaskbar();
		void put_ShowWindowsInTaskbar(bool ShowWindowsInTaskbar);
		//
		__declspec(property(get = get_SmartArtColors)) Com::Object SmartArtColors;
		Com::Object get_SmartArtColors();
		//
		__declspec(property(get = get_SmartArtLayouts)) Com::Object SmartArtLayouts;
		Com::Object get_SmartArtLayouts();
		//
		__declspec(property(get = get_SmartArtQuickStyles)) Com::Object SmartArtQuickStyles;
		Com::Object get_SmartArtQuickStyles();
		//
		__declspec(property(get = get_SmartTagRecognizers)) Excel::SmartTagRecognizers SmartTagRecognizersX;
		Excel::SmartTagRecognizers get_SmartTagRecognizers();
		//
		__declspec(property(get = get_Speech)) Excel::Speech SpeechX;
		Excel::Speech get_Speech();
		//
		__declspec(property(get = get_SpellingOptions)) Excel::SpellingOptions SpellingOptionsX;
		Excel::SpellingOptions get_SpellingOptions();
		//
		__declspec(property(get = get_StandardFont, put = put_StandardFont)) wstring StandardFont;
		wstring get_StandardFont();
		void put_StandardFont(wstring StandardFont);
		//
		__declspec(property(get = get_StandardFontSize, put = put_StandardFontSize)) double StandardFontSize;
		double get_StandardFontSize();
		void put_StandardFontSize(double StandardFontSize);
		//
		__declspec(property(get = get_StartupPath)) wstring StartupPath;
		wstring get_StartupPath();
		//
		__declspec(property(get = get_StatusBar, put = put_StatusBar)) _variant_t StatusBar;
		_variant_t get_StatusBar();
		void put_StatusBar(_variant_t StatusBar);
		_variant_t Support(Com::Object Object, long ID, _variant_t arg);
		_variant_t Support(Com::Object Object, long ID);
		//
		__declspec(property(get = get_TemplatesPath)) wstring TemplatesPath;
		wstring get_TemplatesPath();
		//
		__declspec(property(get = get_ThisCell)) Excel::Range ThisCell;
		Excel::Range get_ThisCell();
		//
		__declspec(property(get = get_ThisWorkbook)) Excel::WorkbookX ThisWorkbook;
		Excel::WorkbookX get_ThisWorkbook();
		//
		__declspec(property(get = get_ThousandsSeparator, put = put_ThousandsSeparator)) wstring ThousandsSeparator;
		wstring get_ThousandsSeparator();
		void put_ThousandsSeparator(wstring ThousandsSeparator);
		//
		__declspec(property(get = get_Toolbars)) Excel::Toolbars ToolbarsX;
		Excel::Toolbars get_Toolbars();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TransitionMenuKey, put = put_TransitionMenuKey)) wstring TransitionMenuKey;
		wstring get_TransitionMenuKey();
		void put_TransitionMenuKey(wstring TransitionMenuKey);
		//
		__declspec(property(get = get_TransitionMenuKeyAction, put = put_TransitionMenuKeyAction)) long TransitionMenuKeyAction;
		long get_TransitionMenuKeyAction();
		void put_TransitionMenuKeyAction(long TransitionMenuKeyAction);
		//
		__declspec(property(get = get_TransitionNavigKeys, put = put_TransitionNavigKeys)) bool TransitionNavigKeys;
		bool get_TransitionNavigKeys();
		void put_TransitionNavigKeys(bool TransitionNavigKeys);
		//
		__declspec(property(get = get_UILanguage, put = put_UILanguage)) long UILanguage;
		long get_UILanguage();
		void put_UILanguage(long UILanguage);
		void Undo();
		Excel::Range Union(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		Excel::Range Union(Excel::Range& Arg1, Excel::Range& Arg2);
		//
		__declspec(property(get = get_UsableHeight)) double UsableHeight;
		double get_UsableHeight();
		//
		__declspec(property(get = get_UsableWidth)) double UsableWidth;
		double get_UsableWidth();
		//
		__declspec(property(get = get_UseClusterConnector, put = put_UseClusterConnector)) bool UseClusterConnector;
		bool get_UseClusterConnector();
		void put_UseClusterConnector(bool UseClusterConnector);
		//
		__declspec(property(get = get_UseSystemSeparators, put = put_UseSystemSeparators)) bool UseSystemSeparators;
		bool get_UseSystemSeparators();
		void put_UseSystemSeparators(bool UseSystemSeparators);
		//
		__declspec(property(get = get_UsedObjects)) Excel::UsedObjects UsedObjectsX;
		Excel::UsedObjects get_UsedObjects();
		//
		__declspec(property(get = get_UserControl, put = put_UserControl)) bool UserControl;
		bool get_UserControl();
		void put_UserControl(bool UserControl);
		//
		__declspec(property(get = get_UserLibraryPath)) wstring UserLibraryPath;
		wstring get_UserLibraryPath();
		//
		__declspec(property(get = get_UserName, put = put_UserName)) wstring UserName;
		wstring get_UserName();
		void put_UserName(wstring UserName);
		//
		__declspec(property(get = get_VBE)) Com::Object VBE;
		Com::Object get_VBE();
		//
		__declspec(property(get = get_Value)) wstring Value;
		wstring get_Value();
		//
		__declspec(property(get = get_Version)) wstring Version;
		wstring get_Version();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		void Volatile(_variant_t Volatile);
		void Volatile();
		bool Wait(_variant_t Time);
		//
		__declspec(property(get = get_WarnOnFunctionNameConflict, put = put_WarnOnFunctionNameConflict)) bool WarnOnFunctionNameConflict;
		bool get_WarnOnFunctionNameConflict();
		void put_WarnOnFunctionNameConflict(bool WarnOnFunctionNameConflict);
		//
		__declspec(property(get = get_Watches)) Excel::Watches WatchesX;
		Excel::Watches get_Watches();
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_WindowState, put = put_WindowState)) Excel::XlWindowState WindowState;
		Excel::XlWindowState get_WindowState();
		void put_WindowState(Excel::XlWindowState WindowState);
		//
		__declspec(property(get = get_Windows)) Excel::Windows WindowsX;
		Excel::Windows get_Windows();
		//
		__declspec(property(get = get_WindowsForPens)) bool WindowsForPens;
		bool get_WindowsForPens();
		//
		__declspec(property(get = get_Workbooks)) Excel::Workbooks WorkbooksX;
		Excel::Workbooks get_Workbooks();
		//
		__declspec(property(get = get_WorksheetFunction)) Excel::WorksheetFunction WorksheetFunctionX;
		Excel::WorksheetFunction get_WorksheetFunction();
		//
		__declspec(property(get = get_Worksheets)) Excel::Sheets WorksheetsX;
		Excel::Sheets get_Worksheets();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
		_variant_t _Evaluate(_variant_t Name);
		void _FindFile();
		void _MacroOptions(_variant_t Macro, _variant_t Description, _variant_t HasMenu, _variant_t MenuText, _variant_t HasShortcutKey, _variant_t ShortcutKey, _variant_t Category, _variant_t StatusBar, _variant_t HelpContextID, _variant_t HelpFile);
		void _MacroOptions();
		_variant_t _Run2(_variant_t Macro, _variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t _Run2();
		_variant_t _WSFunction(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t _WSFunction();
		void _Wait(_variant_t Time);
	};

	//_________________________________________________________Chart
	// {000208D6-0000-0000-C000-000000000046}
	class ChartX : public Com::Object
	{
	public:
		ChartX();
		~ChartX();
		ChartX(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartX& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void ApplyChartTemplate(wstring Filename);
		void ApplyCustomType(Excel::XlChartType ChartType, _variant_t TypeName);
		void ApplyCustomType(Excel::XlChartType ChartType);
		void ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines, _variant_t ShowSeriesName, _variant_t ShowCategoryName, _variant_t ShowValue, _variant_t ShowPercentage, _variant_t ShowBubbleSize, _variant_t Separator);
		void ApplyDataLabels(Excel::XlDataLabelsType Type);
		void ApplyLayout(long Layout, _variant_t ChartType);
		void ApplyLayout(long Layout);
		Com::Object Arcs(_variant_t Index);
		Com::Object Arcs();
		//
		__declspec(property(get = get_Area3DGroup)) Excel::ChartGroup Area3DGroup;
		Excel::ChartGroup get_Area3DGroup();
		Com::Object AreaGroups(_variant_t Index);
		Com::Object AreaGroups();
		void AutoFormat(long Gallery, _variant_t Format);
		void AutoFormat(long Gallery);
		//
		__declspec(property(get = get_AutoScaling, put = put_AutoScaling)) bool AutoScaling;
		bool get_AutoScaling();
		void put_AutoScaling(bool AutoScaling);
		Com::Object Axes(_variant_t Type, Excel::XlAxisGroup AxisGroup);
		//
		__declspec(property(get = get_BackWall)) Excel::Walls BackWall;
		Excel::Walls get_BackWall();
		//
		__declspec(property(get = get_Bar3DGroup)) Excel::ChartGroup Bar3DGroup;
		Excel::ChartGroup get_Bar3DGroup();
		Com::Object BarGroups(_variant_t Index);
		Com::Object BarGroups();
		//
		__declspec(property(get = get_BarShape, put = put_BarShape)) Excel::XlBarShape BarShape;
		Excel::XlBarShape get_BarShape();
		void put_BarShape(Excel::XlBarShape BarShape);
		Com::Object Buttons(_variant_t Index);
		Com::Object Buttons();
		//
		__declspec(property(get = get_CategoryLabelLevel, put = put_CategoryLabelLevel)) Excel::XlCategoryLabelLevel CategoryLabelLevel;
		Excel::XlCategoryLabelLevel get_CategoryLabelLevel();
		void put_CategoryLabelLevel(Excel::XlCategoryLabelLevel CategoryLabelLevel);
		//
		__declspec(property(get = get_ChartArea)) Excel::ChartArea ChartAreaX;
		Excel::ChartArea get_ChartArea();
		//
		__declspec(property(get = get_ChartColor, put = put_ChartColor)) _variant_t ChartColor;
		_variant_t get_ChartColor();
		void put_ChartColor(_variant_t ChartColor);
		Com::Object ChartGroups(_variant_t Index);
		Com::Object ChartGroups();
		Com::Object ChartObjects(_variant_t Index);
		Com::Object ChartObjects();
		//
		__declspec(property(get = get_ChartStyle, put = put_ChartStyle)) _variant_t ChartStyle;
		_variant_t get_ChartStyle();
		void put_ChartStyle(_variant_t ChartStyle);
		//
		__declspec(property(get = get_ChartTitle)) Excel::ChartTitle ChartTitleX;
		Excel::ChartTitle get_ChartTitle();
		//
		__declspec(property(get = get_ChartType, put = put_ChartType)) Excel::XlChartType ChartType;
		Excel::XlChartType get_ChartType();
		void put_ChartType(Excel::XlChartType ChartType);
		void ChartWizard(_variant_t Source, _variant_t Gallery, _variant_t Format, _variant_t PlotBy, _variant_t CategoryLabels, _variant_t SeriesLabels, _variant_t HasLegend, _variant_t Title, _variant_t CategoryTitle, _variant_t ValueTitle, _variant_t ExtraTitle);
		void ChartWizard();
		Com::Object CheckBoxes(_variant_t Index);
		Com::Object CheckBoxes();
		void CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		void CheckSpelling();
		void ClearToMatchColorStyle();
		void ClearToMatchStyle();
		//
		__declspec(property(get = get_CodeName)) wstring CodeName;
		wstring get_CodeName();
		//
		__declspec(property(get = get_Column3DGroup)) Excel::ChartGroup Column3DGroup;
		Excel::ChartGroup get_Column3DGroup();
		Com::Object ColumnGroups(_variant_t Index);
		Com::Object ColumnGroups();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		void CopyChartBuild();
		void CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format, Excel::XlPictureAppearance Size);
		//
		__declspec(property(get = get_Corners)) Excel::Corners CornersX;
		Excel::Corners get_Corners();
		void CreatePublisher(_variant_t Edition, Excel::XlPictureAppearance Appearance, Excel::XlPictureAppearance Size, _variant_t ContainsPICT, _variant_t ContainsBIFF, _variant_t ContainsRTF, _variant_t ContainsVALU);
		void CreatePublisher(_variant_t Edition, Excel::XlPictureAppearance Appearance, Excel::XlPictureAppearance Size);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataTable)) Excel::DataTable DataTableX;
		Excel::DataTable get_DataTable();
		void Delete();
		void DeleteHiddenContent();
		//
		__declspec(property(get = get_DepthPercent, put = put_DepthPercent)) long DepthPercent;
		long get_DepthPercent();
		void put_DepthPercent(long DepthPercent);
		void Deselect();
		//
		__declspec(property(get = get_DisplayBlanksAs, put = put_DisplayBlanksAs)) Excel::XlDisplayBlanksAs DisplayBlanksAs;
		Excel::XlDisplayBlanksAs get_DisplayBlanksAs();
		void put_DisplayBlanksAs(Excel::XlDisplayBlanksAs DisplayBlanksAs);
		//
		__declspec(property(get = get_DisplayValueNotAvailableAsBlank, put = put_DisplayValueNotAvailableAsBlank)) bool DisplayValueNotAvailableAsBlank;
		bool get_DisplayValueNotAvailableAsBlank();
		void put_DisplayValueNotAvailableAsBlank(bool DisplayValueNotAvailableAsBlank);
		Com::Object DoughnutGroups(_variant_t Index);
		Com::Object DoughnutGroups();
		Com::Object DrawingObjects(_variant_t Index);
		Com::Object DrawingObjects();
		Com::Object Drawings(_variant_t Index);
		Com::Object Drawings();
		Com::Object DropDowns(_variant_t Index);
		Com::Object DropDowns();
		//
		__declspec(property(get = get_Dummy24, put = put_Dummy24)) bool Dummy24;
		bool get_Dummy24();
		void put_Dummy24(bool Dummy24);
		//
		__declspec(property(get = get_Dummy25, put = put_Dummy25)) bool Dummy25;
		bool get_Dummy25();
		void put_Dummy25(bool Dummy25);
		//
		__declspec(property(get = get_Elevation, put = put_Elevation)) long Elevation;
		long get_Elevation();
		void put_Elevation(long Elevation);
		_variant_t Evaluate(_variant_t Name);
		bool Export(wstring Filename, _variant_t FilterName, _variant_t Interactive);
		bool Export(wstring Filename);
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity);
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		//
		__declspec(property(get = get_Floor)) Excel::Floor FloorX;
		Excel::Floor get_Floor();
		Com::Object FullSeriesCollection(_variant_t Index);
		Com::Object FullSeriesCollection();
		//
		__declspec(property(get = get_GapDepth, put = put_GapDepth)) long GapDepth;
		long get_GapDepth();
		void put_GapDepth(long GapDepth);
		void GetChartElement(long x, long y, long& ElementID, long& Arg1, long& Arg2);
		_variant_t GetProperty(wstring ID);
		Com::Object GroupBoxes(_variant_t Index);
		Com::Object GroupBoxes();
		Com::Object GroupObjects(_variant_t Index);
		Com::Object GroupObjects();
		_variant_t get_HasAxis(_variant_t Index1, _variant_t Index2);
		_variant_t get_HasAxis();
		void put_HasAxis(_variant_t HasAxis, _variant_t Index1, _variant_t Index2);
		void put_HasAxis(_variant_t HasAxis);
		//
		__declspec(property(get = get_HasDataTable, put = put_HasDataTable)) bool HasDataTable;
		bool get_HasDataTable();
		void put_HasDataTable(bool HasDataTable);
		//
		__declspec(property(get = get_HasHiddenContent)) bool HasHiddenContent;
		bool get_HasHiddenContent();
		//
		__declspec(property(get = get_HasLegend, put = put_HasLegend)) bool HasLegend;
		bool get_HasLegend();
		void put_HasLegend(bool HasLegend);
		//
		__declspec(property(get = get_HasPivotFields, put = put_HasPivotFields)) bool HasPivotFields;
		bool get_HasPivotFields();
		void put_HasPivotFields(bool HasPivotFields);
		//
		__declspec(property(get = get_HasTitle, put = put_HasTitle)) bool HasTitle;
		bool get_HasTitle();
		void put_HasTitle(bool HasTitle);
		//
		__declspec(property(get = get_HeightPercent, put = put_HeightPercent)) long HeightPercent;
		long get_HeightPercent();
		void put_HeightPercent(long HeightPercent);
		//
		__declspec(property(get = get_Hyperlinks)) Excel::Hyperlinks HyperlinksX;
		Excel::Hyperlinks get_Hyperlinks();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		Com::Object Labels(_variant_t Index);
		Com::Object Labels();
		//
		__declspec(property(get = get_Legend)) Excel::Legend LegendX;
		Excel::Legend get_Legend();
		//
		__declspec(property(get = get_Line3DGroup)) Excel::ChartGroup Line3DGroup;
		Excel::ChartGroup get_Line3DGroup();
		Com::Object LineGroups(_variant_t Index);
		Com::Object LineGroups();
		Com::Object Lines(_variant_t Index);
		Com::Object Lines();
		Com::Object ListBoxes(_variant_t Index);
		Com::Object ListBoxes();
		Excel::ChartX Location(Excel::XlChartLocation Where, _variant_t Name);
		Excel::ChartX Location(Excel::XlChartLocation Where);
		//
		__declspec(property(get = get_MailEnvelope)) Com::Object MailEnvelope;
		Com::Object get_MailEnvelope();
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Next)) Com::Object Next;
		Com::Object get_Next();
		Com::Object OLEObjects(_variant_t Index);
		Com::Object OLEObjects();
		//
		__declspec(property(get = get_OnDoubleClick, put = put_OnDoubleClick)) wstring OnDoubleClick;
		wstring get_OnDoubleClick();
		void put_OnDoubleClick(wstring OnDoubleClick);
		//
		__declspec(property(get = get_OnSheetActivate, put = put_OnSheetActivate)) wstring OnSheetActivate;
		wstring get_OnSheetActivate();
		void put_OnSheetActivate(wstring OnSheetActivate);
		//
		__declspec(property(get = get_OnSheetDeactivate, put = put_OnSheetDeactivate)) wstring OnSheetDeactivate;
		wstring get_OnSheetDeactivate();
		void put_OnSheetDeactivate(wstring OnSheetDeactivate);
		Com::Object OptionButtons(_variant_t Index);
		Com::Object OptionButtons();
		Com::Object Ovals(_variant_t Index);
		Com::Object Ovals();
		//
		__declspec(property(get = get_PageSetup)) Excel::PageSetup PageSetupX;
		Excel::PageSetup get_PageSetup();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Paste(_variant_t Type);
		void Paste();
		//
		__declspec(property(get = get_Perspective, put = put_Perspective)) long Perspective;
		long get_Perspective();
		void put_Perspective(long Perspective);
		Com::Object Pictures(_variant_t Index);
		Com::Object Pictures();
		//
		__declspec(property(get = get_Pie3DGroup)) Excel::ChartGroup Pie3DGroup;
		Excel::ChartGroup get_Pie3DGroup();
		Com::Object PieGroups(_variant_t Index);
		Com::Object PieGroups();
		//
		__declspec(property(get = get_PivotLayout)) Excel::PivotLayout PivotLayoutX;
		Excel::PivotLayout get_PivotLayout();
		//
		__declspec(property(get = get_PlotArea)) Excel::PlotArea PlotAreaX;
		Excel::PlotArea get_PlotArea();
		//
		__declspec(property(get = get_PlotBy, put = put_PlotBy)) Excel::XlRowCol PlotBy;
		Excel::XlRowCol get_PlotBy();
		void put_PlotBy(Excel::XlRowCol PlotBy);
		//
		__declspec(property(get = get_PlotVisibleOnly, put = put_PlotVisibleOnly)) bool PlotVisibleOnly;
		bool get_PlotVisibleOnly();
		void put_PlotVisibleOnly(bool PlotVisibleOnly);
		//
		__declspec(property(get = get_Previous)) Com::Object Previous;
		Com::Object get_Previous();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void PrintOut();
		void PrintPreview(_variant_t EnableChanges);
		void PrintPreview();
		//
		__declspec(property(get = get_PrintedCommentPages)) long PrintedCommentPages;
		long get_PrintedCommentPages();
		void Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly);
		void Protect();
		//
		__declspec(property(get = get_ProtectContents)) bool ProtectContents;
		bool get_ProtectContents();
		//
		__declspec(property(get = get_ProtectData, put = put_ProtectData)) bool ProtectData;
		bool get_ProtectData();
		void put_ProtectData(bool ProtectData);
		//
		__declspec(property(get = get_ProtectDrawingObjects)) bool ProtectDrawingObjects;
		bool get_ProtectDrawingObjects();
		//
		__declspec(property(get = get_ProtectFormatting, put = put_ProtectFormatting)) bool ProtectFormatting;
		bool get_ProtectFormatting();
		void put_ProtectFormatting(bool ProtectFormatting);
		//
		__declspec(property(get = get_ProtectGoalSeek, put = put_ProtectGoalSeek)) bool ProtectGoalSeek;
		bool get_ProtectGoalSeek();
		void put_ProtectGoalSeek(bool ProtectGoalSeek);
		//
		__declspec(property(get = get_ProtectSelection, put = put_ProtectSelection)) bool ProtectSelection;
		bool get_ProtectSelection();
		void put_ProtectSelection(bool ProtectSelection);
		//
		__declspec(property(get = get_ProtectionMode)) bool ProtectionMode;
		bool get_ProtectionMode();
		Com::Object RadarGroups(_variant_t Index);
		Com::Object RadarGroups();
		Com::Object Rectangles(_variant_t Index);
		Com::Object Rectangles();
		void Refresh();
		//
		__declspec(property(get = get_RightAngleAxes, put = put_RightAngleAxes)) _variant_t RightAngleAxes;
		_variant_t get_RightAngleAxes();
		void put_RightAngleAxes(_variant_t RightAngleAxes);
		//
		__declspec(property(get = get_Rotation, put = put_Rotation)) _variant_t Rotation;
		_variant_t get_Rotation();
		void put_Rotation(_variant_t Rotation);
		void SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local);
		void SaveAs(wstring Filename);
		void SaveChartTemplate(wstring Filename);
		//
		__declspec(property(get = get_Scripts)) Com::Object Scripts;
		Com::Object get_Scripts();
		Com::Object ScrollBars(_variant_t Index);
		Com::Object ScrollBars();
		void Select(_variant_t Replace);
		void Select();
		Com::Object SeriesCollection(_variant_t Index);
		Com::Object SeriesCollection();
		//
		__declspec(property(get = get_SeriesNameLevel, put = put_SeriesNameLevel)) Excel::XlSeriesNameLevel SeriesNameLevel;
		Excel::XlSeriesNameLevel get_SeriesNameLevel();
		void put_SeriesNameLevel(Excel::XlSeriesNameLevel SeriesNameLevel);
		void SetBackgroundPicture(wstring Filename);
		void SetDefaultChart(_variant_t Name);
		void SetElement(/* MsoChartElementType*/ short Element);
		void SetProperty(wstring ID, _variant_t Value);
		void SetSourceData(Excel::Range& Source, _variant_t PlotBy);
		void SetSourceData(Excel::Range& Source);
		//
		__declspec(property(get = get_Shapes)) Excel::Shapes ShapesX;
		Excel::Shapes get_Shapes();
		//
		__declspec(property(get = get_ShowAllFieldButtons, put = put_ShowAllFieldButtons)) bool ShowAllFieldButtons;
		bool get_ShowAllFieldButtons();
		void put_ShowAllFieldButtons(bool ShowAllFieldButtons);
		//
		__declspec(property(get = get_ShowAxisFieldButtons, put = put_ShowAxisFieldButtons)) bool ShowAxisFieldButtons;
		bool get_ShowAxisFieldButtons();
		void put_ShowAxisFieldButtons(bool ShowAxisFieldButtons);
		//
		__declspec(property(get = get_ShowDataLabelsOverMaximum, put = put_ShowDataLabelsOverMaximum)) bool ShowDataLabelsOverMaximum;
		bool get_ShowDataLabelsOverMaximum();
		void put_ShowDataLabelsOverMaximum(bool ShowDataLabelsOverMaximum);
		//
		__declspec(property(get = get_ShowExpandCollapseEntireFieldButtons, put = put_ShowExpandCollapseEntireFieldButtons)) bool ShowExpandCollapseEntireFieldButtons;
		bool get_ShowExpandCollapseEntireFieldButtons();
		void put_ShowExpandCollapseEntireFieldButtons(bool ShowExpandCollapseEntireFieldButtons);
		//
		__declspec(property(get = get_ShowLegendFieldButtons, put = put_ShowLegendFieldButtons)) bool ShowLegendFieldButtons;
		bool get_ShowLegendFieldButtons();
		void put_ShowLegendFieldButtons(bool ShowLegendFieldButtons);
		//
		__declspec(property(get = get_ShowReportFilterFieldButtons, put = put_ShowReportFilterFieldButtons)) bool ShowReportFilterFieldButtons;
		bool get_ShowReportFilterFieldButtons();
		void put_ShowReportFilterFieldButtons(bool ShowReportFilterFieldButtons);
		//
		__declspec(property(get = get_ShowValueFieldButtons, put = put_ShowValueFieldButtons)) bool ShowValueFieldButtons;
		bool get_ShowValueFieldButtons();
		void put_ShowValueFieldButtons(bool ShowValueFieldButtons);
		//
		__declspec(property(get = get_ShowWindow, put = put_ShowWindow)) bool ShowWindow;
		bool get_ShowWindow();
		void put_ShowWindow(bool ShowWindow);
		//
		__declspec(property(get = get_SideWall)) Excel::Walls SideWall;
		Excel::Walls get_SideWall();
		//
		__declspec(property(get = get_SizeWithWindow, put = put_SizeWithWindow)) bool SizeWithWindow;
		bool get_SizeWithWindow();
		void put_SizeWithWindow(bool SizeWithWindow);
		Com::Object Spinners(_variant_t Index);
		Com::Object Spinners();
		//
		__declspec(property(get = get_SubType, put = put_SubType)) long SubType;
		long get_SubType();
		void put_SubType(long SubType);
		//
		__declspec(property(get = get_SurfaceGroup)) Excel::ChartGroup SurfaceGroup;
		Excel::ChartGroup get_SurfaceGroup();
		//
		__declspec(property(get = get_Tab)) Excel::Tab TabX;
		Excel::Tab get_Tab();
		Com::Object TextBoxes(_variant_t Index);
		Com::Object TextBoxes();
		//
		__declspec(property(get = get_Type, put = put_Type)) long Type;
		long get_Type();
		void put_Type(long Type);
		void Unprotect(_variant_t Password);
		void Unprotect();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) Excel::XlSheetVisibility Visible;
		Excel::XlSheetVisibility get_Visible();
		void put_Visible(Excel::XlSheetVisibility Visible);
		//
		__declspec(property(get = get_Walls)) Excel::Walls WallsX;
		Excel::Walls get_Walls();
		//
		__declspec(property(get = get_WallsAndGridlines2D, put = put_WallsAndGridlines2D)) bool WallsAndGridlines2D;
		bool get_WallsAndGridlines2D();
		void put_WallsAndGridlines2D(bool WallsAndGridlines2D);
		Com::Object XYGroups(_variant_t Index);
		Com::Object XYGroups();
		void _ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines);
		void _ApplyDataLabels(Excel::XlDataLabelsType Type);
		//
		__declspec(property(get = get__CodeName, put = put__CodeName)) wstring _CodeName;
		wstring get__CodeName();
		void put__CodeName(wstring _CodeName);
		void _Dummy23();
		_variant_t _Evaluate(_variant_t Name);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void _Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly);
		void _Protect();
		void _SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local);
		void _SaveAs(wstring Filename);
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
		void __SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout);
		void __SaveAs(wstring Filename);
	};

	//________________________________________________________Sheets
	// {000208D7-0000-0000-C000-000000000046}
	class Sheets : public Com::Object
	{
	public:
		Sheets();
		~Sheets();
		Sheets(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Sheets& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Com::Object Add(_variant_t Before, _variant_t After, _variant_t Count, _variant_t Type);
		Com::Object Add();
		Com::Object Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout);
		Com::Object Add2();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		void FillAcrossSheets(Excel::Range& Range, Excel::XlFillWith Type);
		//
		__declspec(property(get = get_HPageBreaks)) Excel::HPageBreaks HPageBreaksX;
		Excel::HPageBreaks get_HPageBreaks();
		Com::Object get_Item(_variant_t Index);
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas);
		void PrintOut();
		void PrintPreview(_variant_t EnableChanges);
		void PrintPreview();
		void Select(_variant_t Replace);
		void Select();
		//
		__declspec(property(get = get_VPageBreaks)) Excel::VPageBreaks VPageBreaksX;
		Excel::VPageBreaks get_VPageBreaks();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) _variant_t Visible;
		_variant_t get_Visible();
		void put_Visible(_variant_t Visible);
		Com::Object get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
	};

	//_________________________________________________________Worksheet
	// {000208D8-0000-0000-C000-000000000046}
	class WorksheetX : public Com::Object
	{
	public:
		WorksheetX();
		~WorksheetX();
		WorksheetX(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WorksheetX& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		Com::Object Arcs(_variant_t Index);
		Com::Object Arcs();
		//
		__declspec(property(get = get_AutoFilter)) Excel::AutoFilter AutoFilterX;
		Excel::AutoFilter get_AutoFilter();
		//
		__declspec(property(get = get_AutoFilterMode, put = put_AutoFilterMode)) bool AutoFilterMode;
		bool get_AutoFilterMode();
		void put_AutoFilterMode(bool AutoFilterMode);
		Com::Object Buttons(_variant_t Index);
		Com::Object Buttons();
		void Calculate();
		//
		__declspec(property(get = get_Cells)) Excel::Range Cells;
		Excel::Range get_Cells();
		Com::Object ChartObjects(_variant_t Index);
		Com::Object ChartObjects();
		Com::Object CheckBoxes(_variant_t Index);
		Com::Object CheckBoxes();
		void CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		void CheckSpelling();
		void CircleInvalid();
		//
		__declspec(property(get = get_CircularReference)) Excel::Range CircularReference;
		Excel::Range get_CircularReference();
		void ClearArrows();
		void ClearCircles();
		//
		__declspec(property(get = get_CodeName)) wstring CodeName;
		wstring get_CodeName();
		//
		__declspec(property(get = get_Columns)) Excel::Range Columns;
		Excel::Range get_Columns();
		//
		__declspec(property(get = get_Comments)) Excel::Comments CommentsX;
		Excel::Comments get_Comments();
		//
		__declspec(property(get = get_ConsolidationFunction)) Excel::XlConsolidationFunction ConsolidationFunction;
		Excel::XlConsolidationFunction get_ConsolidationFunction();
		//
		__declspec(property(get = get_ConsolidationOptions)) _variant_t ConsolidationOptions;
		_variant_t get_ConsolidationOptions();
		//
		__declspec(property(get = get_ConsolidationSources)) _variant_t ConsolidationSources;
		_variant_t get_ConsolidationSources();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CustomProperties)) Excel::CustomProperties CustomPropertiesX;
		Excel::CustomProperties get_CustomProperties();
		void Delete();
		//
		__declspec(property(get = get_DisplayAutomaticPageBreaks, put = put_DisplayAutomaticPageBreaks)) bool DisplayAutomaticPageBreaks;
		bool get_DisplayAutomaticPageBreaks();
		void put_DisplayAutomaticPageBreaks(bool DisplayAutomaticPageBreaks);
		//
		__declspec(property(get = get_DisplayPageBreaks, put = put_DisplayPageBreaks)) bool DisplayPageBreaks;
		bool get_DisplayPageBreaks();
		void put_DisplayPageBreaks(bool DisplayPageBreaks);
		//
		__declspec(property(get = get_DisplayRightToLeft, put = put_DisplayRightToLeft)) bool DisplayRightToLeft;
		bool get_DisplayRightToLeft();
		void put_DisplayRightToLeft(bool DisplayRightToLeft);
		Com::Object DrawingObjects(_variant_t Index);
		Com::Object DrawingObjects();
		Com::Object Drawings(_variant_t Index);
		Com::Object Drawings();
		Com::Object DropDowns(_variant_t Index);
		Com::Object DropDowns();
		//
		__declspec(property(get = get_EnableAutoFilter, put = put_EnableAutoFilter)) bool EnableAutoFilter;
		bool get_EnableAutoFilter();
		void put_EnableAutoFilter(bool EnableAutoFilter);
		//
		__declspec(property(get = get_EnableCalculation, put = put_EnableCalculation)) bool EnableCalculation;
		bool get_EnableCalculation();
		void put_EnableCalculation(bool EnableCalculation);
		//
		__declspec(property(get = get_EnableFormatConditionsCalculation, put = put_EnableFormatConditionsCalculation)) bool EnableFormatConditionsCalculation;
		bool get_EnableFormatConditionsCalculation();
		void put_EnableFormatConditionsCalculation(bool EnableFormatConditionsCalculation);
		//
		__declspec(property(get = get_EnableOutlining, put = put_EnableOutlining)) bool EnableOutlining;
		bool get_EnableOutlining();
		void put_EnableOutlining(bool EnableOutlining);
		//
		__declspec(property(get = get_EnablePivotTable, put = put_EnablePivotTable)) bool EnablePivotTable;
		bool get_EnablePivotTable();
		void put_EnablePivotTable(bool EnablePivotTable);
		//
		__declspec(property(get = get_EnableSelection, put = put_EnableSelection)) Excel::XlEnableSelection EnableSelection;
		Excel::XlEnableSelection get_EnableSelection();
		void put_EnableSelection(Excel::XlEnableSelection EnableSelection);
		_variant_t Evaluate(_variant_t Name);
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity);
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		//
		__declspec(property(get = get_FilterMode)) bool FilterMode;
		bool get_FilterMode();
		Com::Object GroupBoxes(_variant_t Index);
		Com::Object GroupBoxes();
		Com::Object GroupObjects(_variant_t Index);
		Com::Object GroupObjects();
		//
		__declspec(property(get = get_HPageBreaks)) Excel::HPageBreaks HPageBreaksX;
		Excel::HPageBreaks get_HPageBreaks();
		//
		__declspec(property(get = get_Hyperlinks)) Excel::Hyperlinks HyperlinksX;
		Excel::Hyperlinks get_Hyperlinks();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		Com::Object Labels(_variant_t Index);
		Com::Object Labels();
		Com::Object Lines(_variant_t Index);
		Com::Object Lines();
		Com::Object ListBoxes(_variant_t Index);
		Com::Object ListBoxes();
		//
		__declspec(property(get = get_ListObjects)) Excel::ListObjects ListObjectsX;
		Excel::ListObjects get_ListObjects();
		//
		__declspec(property(get = get_MailEnvelope)) Com::Object MailEnvelope;
		Com::Object get_MailEnvelope();
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Names)) Excel::Names NamesX;
		Excel::Names get_Names();
		//
		__declspec(property(get = get_Next)) Com::Object Next;
		Com::Object get_Next();
		Com::Object OLEObjects(_variant_t Index);
		Com::Object OLEObjects();
		//
		__declspec(property(get = get_OnCalculate, put = put_OnCalculate)) wstring OnCalculate;
		wstring get_OnCalculate();
		void put_OnCalculate(wstring OnCalculate);
		//
		__declspec(property(get = get_OnData, put = put_OnData)) wstring OnData;
		wstring get_OnData();
		void put_OnData(wstring OnData);
		//
		__declspec(property(get = get_OnDoubleClick, put = put_OnDoubleClick)) wstring OnDoubleClick;
		wstring get_OnDoubleClick();
		void put_OnDoubleClick(wstring OnDoubleClick);
		//
		__declspec(property(get = get_OnEntry, put = put_OnEntry)) wstring OnEntry;
		wstring get_OnEntry();
		void put_OnEntry(wstring OnEntry);
		//
		__declspec(property(get = get_OnSheetActivate, put = put_OnSheetActivate)) wstring OnSheetActivate;
		wstring get_OnSheetActivate();
		void put_OnSheetActivate(wstring OnSheetActivate);
		//
		__declspec(property(get = get_OnSheetDeactivate, put = put_OnSheetDeactivate)) wstring OnSheetDeactivate;
		wstring get_OnSheetDeactivate();
		void put_OnSheetDeactivate(wstring OnSheetDeactivate);
		Com::Object OptionButtons(_variant_t Index);
		Com::Object OptionButtons();
		//
		__declspec(property(get = get_Outline)) Excel::Outline OutlineX;
		Excel::Outline get_Outline();
		Com::Object Ovals(_variant_t Index);
		Com::Object Ovals();
		//
		__declspec(property(get = get_PageSetup)) Excel::PageSetup PageSetupX;
		Excel::PageSetup get_PageSetup();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Paste(_variant_t Destination, _variant_t Link);
		void Paste();
		void PasteSpecial(_variant_t Format, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel, _variant_t NoHTMLFormatting);
		void PasteSpecial();
		Com::Object Pictures(_variant_t Index);
		Com::Object Pictures();
		Excel::PivotTable PivotTableWizard(_variant_t SourceType, _variant_t SourceData, _variant_t TableDestination, _variant_t TableName, _variant_t RowGrand, _variant_t ColumnGrand, _variant_t SaveData, _variant_t HasAutoFormat, _variant_t AutoPage, _variant_t Reserved, _variant_t BackgroundQuery, _variant_t OptimizeCache, _variant_t PageFieldOrder, _variant_t PageFieldWrapCount, _variant_t ReadData, _variant_t Connection);
		Excel::PivotTable PivotTableWizard();
		Com::Object PivotTables(_variant_t Index);
		Com::Object PivotTables();
		//
		__declspec(property(get = get_Previous)) Com::Object Previous;
		Com::Object get_Previous();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas);
		void PrintOut();
		void PrintPreview(_variant_t EnableChanges);
		void PrintPreview();
		//
		__declspec(property(get = get_PrintedCommentPages)) long PrintedCommentPages;
		long get_PrintedCommentPages();
		void Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly, _variant_t AllowFormattingCells, _variant_t AllowFormattingColumns, _variant_t AllowFormattingRows, _variant_t AllowInsertingColumns, _variant_t AllowInsertingRows, _variant_t AllowInsertingHyperlinks, _variant_t AllowDeletingColumns, _variant_t AllowDeletingRows, _variant_t AllowSorting, _variant_t AllowFiltering, _variant_t AllowUsingPivotTables);
		void Protect();
		//
		__declspec(property(get = get_ProtectContents)) bool ProtectContents;
		bool get_ProtectContents();
		//
		__declspec(property(get = get_ProtectDrawingObjects)) bool ProtectDrawingObjects;
		bool get_ProtectDrawingObjects();
		//
		__declspec(property(get = get_ProtectScenarios)) bool ProtectScenarios;
		bool get_ProtectScenarios();
		//
		__declspec(property(get = get_Protection)) Excel::Protection ProtectionX;
		Excel::Protection get_Protection();
		//
		__declspec(property(get = get_ProtectionMode)) bool ProtectionMode;
		bool get_ProtectionMode();
		//
		__declspec(property(get = get_QueryTables)) Excel::QueryTables QueryTablesX;
		Excel::QueryTables get_QueryTables();
		Excel::Range get_Range(_variant_t Cell1, _variant_t Cell2);
		Excel::Range get_Range(_variant_t Cell1);
		Com::Object Rectangles(_variant_t Index);
		Com::Object Rectangles();
		void ResetAllPageBreaks();
		//
		__declspec(property(get = get_Rows)) Excel::Range Rows;
		Excel::Range get_Rows();
		void SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local);
		void SaveAs(wstring Filename);
		Com::Object Scenarios(_variant_t Index);
		Com::Object Scenarios();
		//
		__declspec(property(get = get_Scripts)) Com::Object Scripts;
		Com::Object get_Scripts();
		//
		__declspec(property(get = get_ScrollArea, put = put_ScrollArea)) wstring ScrollArea;
		wstring get_ScrollArea();
		void put_ScrollArea(wstring ScrollArea);
		Com::Object ScrollBars(_variant_t Index);
		Com::Object ScrollBars();
		void Select(_variant_t Replace);
		void Select();
		void SetBackgroundPicture(wstring Filename);
		//
		__declspec(property(get = get_Shapes)) Excel::Shapes ShapesX;
		Excel::Shapes get_Shapes();
		void ShowAllData();
		void ShowDataForm();
		//
		__declspec(property(get = get_SmartTags)) Excel::SmartTags SmartTagsX;
		Excel::SmartTags get_SmartTags();
		//
		__declspec(property(get = get_Sort)) Excel::Sort SortX;
		Excel::Sort get_Sort();
		Com::Object Spinners(_variant_t Index);
		Com::Object Spinners();
		//
		__declspec(property(get = get_StandardHeight)) double StandardHeight;
		double get_StandardHeight();
		//
		__declspec(property(get = get_StandardWidth, put = put_StandardWidth)) double StandardWidth;
		double get_StandardWidth();
		void put_StandardWidth(double StandardWidth);
		//
		__declspec(property(get = get_Tab)) Excel::Tab TabX;
		Excel::Tab get_Tab();
		Com::Object TextBoxes(_variant_t Index);
		Com::Object TextBoxes();
		//
		__declspec(property(get = get_TransitionExpEval, put = put_TransitionExpEval)) bool TransitionExpEval;
		bool get_TransitionExpEval();
		void put_TransitionExpEval(bool TransitionExpEval);
		//
		__declspec(property(get = get_TransitionFormEntry, put = put_TransitionFormEntry)) bool TransitionFormEntry;
		bool get_TransitionFormEntry();
		void put_TransitionFormEntry(bool TransitionFormEntry);
		//
		__declspec(property(get = get_Type)) Excel::XlSheetType Type;
		Excel::XlSheetType get_Type();
		void Unprotect(_variant_t Password);
		void Unprotect();
		//
		__declspec(property(get = get_UsedRange)) Excel::Range UsedRange;
		Excel::Range get_UsedRange();
		//
		__declspec(property(get = get_VPageBreaks)) Excel::VPageBreaks VPageBreaksX;
		Excel::VPageBreaks get_VPageBreaks();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) Excel::XlSheetVisibility Visible;
		Excel::XlSheetVisibility get_Visible();
		void put_Visible(Excel::XlSheetVisibility Visible);
		Excel::Range XmlDataQuery(wstring XPath, _variant_t SelectionNamespaces, _variant_t Map);
		Excel::Range XmlDataQuery(wstring XPath);
		Excel::Range XmlMapQuery(wstring XPath, _variant_t SelectionNamespaces, _variant_t Map);
		Excel::Range XmlMapQuery(wstring XPath);
		void _CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang, _variant_t IgnoreFinalYaa, _variant_t SpellScript);
		void _CheckSpelling();
		//
		__declspec(property(get = get__CodeName, put = put__CodeName)) wstring _CodeName;
		wstring get__CodeName();
		void put__CodeName(wstring _CodeName);
		//
		__declspec(property(get = get__DisplayRightToLeft, put = put__DisplayRightToLeft)) long _DisplayRightToLeft;
		long get__DisplayRightToLeft();
		void put__DisplayRightToLeft(long _DisplayRightToLeft);
		_variant_t _Evaluate(_variant_t Name);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		void _PasteSpecial(_variant_t Format, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel);
		void _PasteSpecial();
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void _Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly);
		void _Protect();
		void _SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local);
		void _SaveAs(wstring Filename);
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
		void __SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout);
		void __SaveAs(wstring Filename);
	};

	//_________________________________________________________Global
	// {000208D9-0000-0000-C000-000000000046}
	class GlobalX : public Com::Object
	{
	public:
		GlobalX();
		~GlobalX();
		GlobalX(const Com::Object& init) { Com::Object::Private_Copy(init); }
		GlobalX& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_ActiveCell)) Excel::Range ActiveCell;
		Excel::Range get_ActiveCell();
		//
		__declspec(property(get = get_ActiveChart)) Excel::ChartX ActiveChart;
		Excel::ChartX get_ActiveChart();
		//
		__declspec(property(get = get_ActiveDialog)) Excel::DialogSheet ActiveDialog;
		Excel::DialogSheet get_ActiveDialog();
		//
		__declspec(property(get = get_ActiveMenuBar)) Excel::MenuBar ActiveMenuBar;
		Excel::MenuBar get_ActiveMenuBar();
		//
		__declspec(property(get = get_ActivePrinter, put = put_ActivePrinter)) wstring ActivePrinter;
		wstring get_ActivePrinter();
		void put_ActivePrinter(wstring ActivePrinter);
		//
		__declspec(property(get = get_ActiveSheet)) Com::Object ActiveSheet;
		Com::Object get_ActiveSheet();
		//
		__declspec(property(get = get_ActiveWindow)) Excel::Window ActiveWindow;
		Excel::Window get_ActiveWindow();
		//
		__declspec(property(get = get_ActiveWorkbook)) Excel::WorkbookX ActiveWorkbook;
		Excel::WorkbookX get_ActiveWorkbook();
		//
		__declspec(property(get = get_AddIns)) Excel::AddIns AddInsX;
		Excel::AddIns get_AddIns();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Assistant)) Com::Object Assistant;
		Com::Object get_Assistant();
		void Calculate();
		//
		__declspec(property(get = get_Cells)) Excel::Range Cells;
		Excel::Range get_Cells();
		//
		__declspec(property(get = get_Charts)) Excel::Sheets ChartsX;
		Excel::Sheets get_Charts();
		//
		__declspec(property(get = get_Columns)) Excel::Range Columns;
		Excel::Range get_Columns();
		//
		__declspec(property(get = get_CommandBars)) Com::Object CommandBars;
		Com::Object get_CommandBars();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DDEAppReturnCode)) long DDEAppReturnCode;
		long get_DDEAppReturnCode();
		void DDEExecute(long Channel, wstring String);
		long DDEInitiate(wstring App, wstring Topic);
		void DDEPoke(long Channel, _variant_t Item, _variant_t Data);
		_variant_t DDERequest(long Channel, wstring Item);
		void DDETerminate(long Channel);
		//
		__declspec(property(get = get_DialogSheets)) Excel::Sheets DialogSheetsX;
		Excel::Sheets get_DialogSheets();
		_variant_t Evaluate(_variant_t Name);
		//
		__declspec(property(get = get_Excel4IntlMacroSheets)) Excel::Sheets Excel4IntlMacroSheets;
		Excel::Sheets get_Excel4IntlMacroSheets();
		//
		__declspec(property(get = get_Excel4MacroSheets)) Excel::Sheets Excel4MacroSheets;
		Excel::Sheets get_Excel4MacroSheets();
		_variant_t ExecuteExcel4Macro(wstring String);
		Excel::Range Intersect(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		Excel::Range Intersect(Excel::Range& Arg1, Excel::Range& Arg2);
		//
		__declspec(property(get = get_MenuBars)) Excel::MenuBars MenuBarsX;
		Excel::MenuBars get_MenuBars();
		//
		__declspec(property(get = get_Modules)) Excel::Modules ModulesX;
		Excel::Modules get_Modules();
		//
		__declspec(property(get = get_Names)) Excel::Names NamesX;
		Excel::Names get_Names();
		//
		__declspec(property(get = get_Parent)) Excel::ApplicationX Parent;
		Excel::ApplicationX get_Parent();
		Excel::Range get_Range(_variant_t Cell1, _variant_t Cell2);
		Excel::Range get_Range(_variant_t Cell1);
		//
		__declspec(property(get = get_Rows)) Excel::Range Rows;
		Excel::Range get_Rows();
		_variant_t Run(_variant_t Macro, _variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t Run();
		//
		__declspec(property(get = get_Selection)) Com::Object Selection;
		Com::Object get_Selection();
		void SendKeys(_variant_t Keys, _variant_t Wait);
		void SendKeys(_variant_t Keys);
		//
		__declspec(property(get = get_Sheets)) Excel::Sheets SheetsX;
		Excel::Sheets get_Sheets();
		Excel::Menu get_ShortcutMenus(long Index);
		//
		__declspec(property(get = get_ThisWorkbook)) Excel::WorkbookX ThisWorkbook;
		Excel::WorkbookX get_ThisWorkbook();
		//
		__declspec(property(get = get_Toolbars)) Excel::Toolbars ToolbarsX;
		Excel::Toolbars get_Toolbars();
		Excel::Range Union(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		Excel::Range Union(Excel::Range& Arg1, Excel::Range& Arg2);
		//
		__declspec(property(get = get_Windows)) Excel::Windows WindowsX;
		Excel::Windows get_Windows();
		//
		__declspec(property(get = get_Workbooks)) Excel::Workbooks WorkbooksX;
		Excel::Workbooks get_Workbooks();
		//
		__declspec(property(get = get_WorksheetFunction)) Excel::WorksheetFunction WorksheetFunctionX;
		Excel::WorksheetFunction get_WorksheetFunction();
		//
		__declspec(property(get = get_Worksheets)) Excel::Sheets WorksheetsX;
		Excel::Sheets get_Worksheets();
		_variant_t _Evaluate(_variant_t Name);
		_variant_t _Run2(_variant_t Macro, _variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t _Run2();
	};

	//_________________________________________________________Workbook
	// {000208DA-0000-0000-C000-000000000046}
	class WorkbookX : public Com::Object
	{
	public:
		WorkbookX();
		~WorkbookX();
		WorkbookX(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WorkbookX& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AcceptAllChanges(_variant_t When, _variant_t Who, _variant_t Where);
		void AcceptAllChanges();
		//
		__declspec(property(get = get_AcceptLabelsInFormulas, put = put_AcceptLabelsInFormulas)) bool AcceptLabelsInFormulas;
		bool get_AcceptLabelsInFormulas();
		void put_AcceptLabelsInFormulas(bool AcceptLabelsInFormulas);
		//
		__declspec(property(get = get_AccuracyVersion, put = put_AccuracyVersion)) long AccuracyVersion;
		long get_AccuracyVersion();
		void put_AccuracyVersion(long AccuracyVersion);
		void Activate();
		//
		__declspec(property(get = get_ActiveChart)) Excel::ChartX ActiveChart;
		Excel::ChartX get_ActiveChart();
		//
		__declspec(property(get = get_ActiveSheet)) Com::Object ActiveSheet;
		Com::Object get_ActiveSheet();
		//
		__declspec(property(get = get_ActiveSlicer)) Excel::Slicer ActiveSlicer;
		Excel::Slicer get_ActiveSlicer();
		void AddToFavorites();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void ApplyTheme(wstring Filename);
		//
		__declspec(property(get = get_Author, put = put_Author)) wstring Author;
		wstring get_Author();
		void put_Author(wstring Author);
		//
		__declspec(property(get = get_AutoSaveOn, put = put_AutoSaveOn)) bool AutoSaveOn;
		bool get_AutoSaveOn();
		void put_AutoSaveOn(bool AutoSaveOn);
		//
		__declspec(property(get = get_AutoUpdateFrequency, put = put_AutoUpdateFrequency)) long AutoUpdateFrequency;
		long get_AutoUpdateFrequency();
		void put_AutoUpdateFrequency(long AutoUpdateFrequency);
		//
		__declspec(property(get = get_AutoUpdateSaveChanges, put = put_AutoUpdateSaveChanges)) bool AutoUpdateSaveChanges;
		bool get_AutoUpdateSaveChanges();
		void put_AutoUpdateSaveChanges(bool AutoUpdateSaveChanges);
		void BreakLink(wstring Name, Excel::XlLinkType Type);
		//
		__declspec(property(get = get_BuiltinDocumentProperties)) Com::Object BuiltinDocumentProperties;
		Com::Object get_BuiltinDocumentProperties();
		//
		__declspec(property(get = get_CalculationVersion)) long CalculationVersion;
		long get_CalculationVersion();
		bool CanCheckIn();
		//
		__declspec(property(get = get_CaseSensitive)) bool CaseSensitive;
		bool get_CaseSensitive();
		void ChangeFileAccess(Excel::XlFileAccess Mode, _variant_t WritePassword, _variant_t Notify);
		void ChangeFileAccess(Excel::XlFileAccess Mode);
		//
		__declspec(property(get = get_ChangeHistoryDuration, put = put_ChangeHistoryDuration)) long ChangeHistoryDuration;
		long get_ChangeHistoryDuration();
		void put_ChangeHistoryDuration(long ChangeHistoryDuration);
		void ChangeLink(wstring Name, wstring NewName, Excel::XlLinkType Type);
		//
		__declspec(property(get = get_ChartDataPointTrack, put = put_ChartDataPointTrack)) bool ChartDataPointTrack;
		bool get_ChartDataPointTrack();
		void put_ChartDataPointTrack(bool ChartDataPointTrack);
		//
		__declspec(property(get = get_Charts)) Excel::Sheets ChartsX;
		Excel::Sheets get_Charts();
		//
		__declspec(property(get = get_CheckCompatibility, put = put_CheckCompatibility)) bool CheckCompatibility;
		bool get_CheckCompatibility();
		void put_CheckCompatibility(bool CheckCompatibility);
		void CheckIn(_variant_t SaveChanges, _variant_t Comments, _variant_t MakePublic);
		void CheckIn();
		void CheckInWithVersion(_variant_t SaveChanges, _variant_t Comments, _variant_t MakePublic, _variant_t VersionType);
		void CheckInWithVersion();
		void Close(_variant_t SaveChanges, _variant_t Filename, _variant_t RouteWorkbook);
		void Close();
		//
		__declspec(property(get = get_CodeName)) wstring CodeName;
		wstring get_CodeName();
		_variant_t get_Colors(_variant_t Index);
		_variant_t get_Colors();
		void put_Colors(_variant_t Colors, _variant_t Index);
		void put_Colors(_variant_t Colors);
		//
		__declspec(property(get = get_CommandBars)) Com::Object CommandBars;
		Com::Object get_CommandBars();
		//
		__declspec(property(get = get_Comments, put = put_Comments)) wstring CommentsX;
		wstring get_Comments();
		void put_Comments(wstring Comments);
		//
		__declspec(property(get = get_ConflictResolution, put = put_ConflictResolution)) Excel::XlSaveConflictResolution ConflictResolution;
		Excel::XlSaveConflictResolution get_ConflictResolution();
		void put_ConflictResolution(Excel::XlSaveConflictResolution ConflictResolution);
		//
		__declspec(property(get = get_Connections)) Excel::Connections ConnectionsX;
		Excel::Connections get_Connections();
		//
		__declspec(property(get = get_ConnectionsDisabled)) bool ConnectionsDisabled;
		bool get_ConnectionsDisabled();
		//
		__declspec(property(get = get_Container)) Com::Object Container;
		Com::Object get_Container();
		//
		__declspec(property(get = get_ContentTypeProperties)) Com::Object ContentTypeProperties;
		Com::Object get_ContentTypeProperties();
		//
		__declspec(property(get = get_CreateBackup)) bool CreateBackup;
		bool get_CreateBackup();
		void CreateForecastSheet(Excel::Range& Timeline, Excel::Range& Values, _variant_t ForecastStart, _variant_t ForecastEnd, _variant_t ConfInt, _variant_t Seasonality, _variant_t DataCompletion, _variant_t Aggregation, _variant_t ChartType, _variant_t ShowStatsTable);
		void CreateForecastSheet(Excel::Range& Timeline, Excel::Range& Values);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CustomDocumentProperties)) Com::Object CustomDocumentProperties;
		Com::Object get_CustomDocumentProperties();
		//
		__declspec(property(get = get_CustomViews)) Excel::CustomViews CustomViewsX;
		Excel::CustomViews get_CustomViews();
		//
		__declspec(property(get = get_CustomXMLParts)) Com::Object CustomXMLParts;
		Com::Object get_CustomXMLParts();
		//
		__declspec(property(get = get_Date1904, put = put_Date1904)) bool Date1904;
		bool get_Date1904();
		void put_Date1904(bool Date1904);
		//
		__declspec(property(get = get_DefaultPivotTableStyle, put = put_DefaultPivotTableStyle)) _variant_t DefaultPivotTableStyle;
		_variant_t get_DefaultPivotTableStyle();
		void put_DefaultPivotTableStyle(_variant_t DefaultPivotTableStyle);
		//
		__declspec(property(get = get_DefaultSlicerStyle, put = put_DefaultSlicerStyle)) _variant_t DefaultSlicerStyle;
		_variant_t get_DefaultSlicerStyle();
		void put_DefaultSlicerStyle(_variant_t DefaultSlicerStyle);
		//
		__declspec(property(get = get_DefaultTableStyle, put = put_DefaultTableStyle)) _variant_t DefaultTableStyle;
		_variant_t get_DefaultTableStyle();
		void put_DefaultTableStyle(_variant_t DefaultTableStyle);
		//
		__declspec(property(get = get_DefaultTimelineStyle, put = put_DefaultTimelineStyle)) _variant_t DefaultTimelineStyle;
		_variant_t get_DefaultTimelineStyle();
		void put_DefaultTimelineStyle(_variant_t DefaultTimelineStyle);
		void DeleteNumberFormat(wstring NumberFormat);
		//
		__declspec(property(get = get_DialogSheets)) Excel::Sheets DialogSheetsX;
		Excel::Sheets get_DialogSheets();
		//
		__declspec(property(get = get_DisplayDrawingObjects, put = put_DisplayDrawingObjects)) Excel::XlDisplayDrawingObjects DisplayDrawingObjects;
		Excel::XlDisplayDrawingObjects get_DisplayDrawingObjects();
		void put_DisplayDrawingObjects(Excel::XlDisplayDrawingObjects DisplayDrawingObjects);
		//
		__declspec(property(get = get_DisplayInkComments, put = put_DisplayInkComments)) bool DisplayInkComments;
		bool get_DisplayInkComments();
		void put_DisplayInkComments(bool DisplayInkComments);
		//
		__declspec(property(get = get_DoNotPromptForConvert, put = put_DoNotPromptForConvert)) bool DoNotPromptForConvert;
		bool get_DoNotPromptForConvert();
		void put_DoNotPromptForConvert(bool DoNotPromptForConvert);
		//
		__declspec(property(get = get_DocumentInspectors)) Com::Object DocumentInspectors;
		Com::Object get_DocumentInspectors();
		//
		__declspec(property(get = get_DocumentLibraryVersions)) Com::Object DocumentLibraryVersions;
		Com::Object get_DocumentLibraryVersions();
		void Dummy16();
		void Dummy17(long calcid);
		void Dummy26();
		void Dummy27();
		//
		__declspec(property(get = get_EnableAutoRecover, put = put_EnableAutoRecover)) bool EnableAutoRecover;
		bool get_EnableAutoRecover();
		void put_EnableAutoRecover(bool EnableAutoRecover);
		void EnableConnections();
		//
		__declspec(property(get = get_EncryptionProvider, put = put_EncryptionProvider)) wstring EncryptionProvider;
		wstring get_EncryptionProvider();
		void put_EncryptionProvider(wstring EncryptionProvider);
		void EndReview();
		//
		__declspec(property(get = get_EnvelopeVisible, put = put_EnvelopeVisible)) bool EnvelopeVisible;
		bool get_EnvelopeVisible();
		void put_EnvelopeVisible(bool EnvelopeVisible);
		//
		__declspec(property(get = get_Excel4IntlMacroSheets)) Excel::Sheets Excel4IntlMacroSheets;
		Excel::Sheets get_Excel4IntlMacroSheets();
		//
		__declspec(property(get = get_Excel4MacroSheets)) Excel::Sheets Excel4MacroSheets;
		Excel::Sheets get_Excel4MacroSheets();
		//
		__declspec(property(get = get_Excel8CompatibilityMode)) bool Excel8CompatibilityMode;
		bool get_Excel8CompatibilityMode();
		bool ExclusiveAccess();
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity);
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		//
		__declspec(property(get = get_FileFormat)) Excel::XlFileFormat FileFormat;
		Excel::XlFileFormat get_FileFormat();
		//
		__declspec(property(get = get_Final, put = put_Final)) bool Final;
		bool get_Final();
		void put_Final(bool Final);
		void FollowHyperlink(wstring Address, _variant_t SubAddress, _variant_t NewWindow, _variant_t AddHistory, _variant_t ExtraInfo, _variant_t Method, _variant_t HeaderInfo);
		void FollowHyperlink(wstring Address);
		//
		__declspec(property(get = get_ForceFullCalculation, put = put_ForceFullCalculation)) bool ForceFullCalculation;
		bool get_ForceFullCalculation();
		void put_ForceFullCalculation(bool ForceFullCalculation);
		void ForwardMailer();
		//
		__declspec(property(get = get_FullName)) wstring FullName;
		wstring get_FullName();
		//
		__declspec(property(get = get_FullNameURLEncoded)) wstring FullNameURLEncoded;
		wstring get_FullNameURLEncoded();
		Com::Object GetWorkflowTasks();
		Com::Object GetWorkflowTemplates();
		//
		__declspec(property(get = get_HTMLProject)) Com::Object HTMLProject;
		Com::Object get_HTMLProject();
		//
		__declspec(property(get = get_HasMailer, put = put_HasMailer)) bool HasMailer;
		bool get_HasMailer();
		void put_HasMailer(bool HasMailer);
		//
		__declspec(property(get = get_HasPassword)) bool HasPassword;
		bool get_HasPassword();
		//
		__declspec(property(get = get_HasRoutingSlip, put = put_HasRoutingSlip)) bool HasRoutingSlip;
		bool get_HasRoutingSlip();
		void put_HasRoutingSlip(bool HasRoutingSlip);
		//
		__declspec(property(get = get_HasVBProject)) bool HasVBProject;
		bool get_HasVBProject();
		//
		__declspec(property(get = get_HighlightChangesOnScreen, put = put_HighlightChangesOnScreen)) bool HighlightChangesOnScreen;
		bool get_HighlightChangesOnScreen();
		void put_HighlightChangesOnScreen(bool HighlightChangesOnScreen);
		void HighlightChangesOptions(_variant_t When, _variant_t Who, _variant_t Where);
		void HighlightChangesOptions();
		//
		__declspec(property(get = get_IconSets)) Excel::IconSets IconSetsX;
		Excel::IconSets get_IconSets();
		//
		__declspec(property(get = get_InactiveListBorderVisible, put = put_InactiveListBorderVisible)) bool InactiveListBorderVisible;
		bool get_InactiveListBorderVisible();
		void put_InactiveListBorderVisible(bool InactiveListBorderVisible);
		//
		__declspec(property(get = get_IsAddin, put = put_IsAddin)) bool IsAddin;
		bool get_IsAddin();
		void put_IsAddin(bool IsAddin);
		//
		__declspec(property(get = get_IsInplace)) bool IsInplace;
		bool get_IsInplace();
		//
		__declspec(property(get = get_KeepChangeHistory, put = put_KeepChangeHistory)) bool KeepChangeHistory;
		bool get_KeepChangeHistory();
		void put_KeepChangeHistory(bool KeepChangeHistory);
		//
		__declspec(property(get = get_Keywords, put = put_Keywords)) wstring Keywords;
		wstring get_Keywords();
		void put_Keywords(wstring Keywords);
		_variant_t LinkInfo(wstring Name, Excel::XlLinkInfo LinkInfo, _variant_t Type, _variant_t EditionRef);
		_variant_t LinkInfo(wstring Name, Excel::XlLinkInfo LinkInfo);
		_variant_t LinkSources(_variant_t Type);
		_variant_t LinkSources();
		//
		__declspec(property(get = get_ListChangesOnNewSheet, put = put_ListChangesOnNewSheet)) bool ListChangesOnNewSheet;
		bool get_ListChangesOnNewSheet();
		void put_ListChangesOnNewSheet(bool ListChangesOnNewSheet);
		void LockServerFile();
		Excel::PublishedDocs LookUpInDocs(_variant_t Filename);
		Excel::PublishedDocs LookUpInDocs();
		//
		__declspec(property(get = get_Mailer)) Excel::Mailer MailerX;
		Excel::Mailer get_Mailer();
		void MergeWorkbook(_variant_t Filename);
		//
		__declspec(property(get = get_Model)) Excel::Model ModelX;
		Excel::Model get_Model();
		//
		__declspec(property(get = get_Modules)) Excel::Sheets ModulesX;
		Excel::Sheets get_Modules();
		//
		__declspec(property(get = get_MultiUserEditing)) bool MultiUserEditing;
		bool get_MultiUserEditing();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Names)) Excel::Names NamesX;
		Excel::Names get_Names();
		Excel::Window NewWindow();
		//
		__declspec(property(get = get_OnSave, put = put_OnSave)) wstring OnSave;
		wstring get_OnSave();
		void put_OnSave(wstring OnSave);
		//
		__declspec(property(get = get_OnSheetActivate, put = put_OnSheetActivate)) wstring OnSheetActivate;
		wstring get_OnSheetActivate();
		void put_OnSheetActivate(wstring OnSheetActivate);
		//
		__declspec(property(get = get_OnSheetDeactivate, put = put_OnSheetDeactivate)) wstring OnSheetDeactivate;
		wstring get_OnSheetDeactivate();
		void put_OnSheetDeactivate(wstring OnSheetDeactivate);
		void OpenLinks(wstring Name, _variant_t ReadOnly, _variant_t Type);
		void OpenLinks(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Password, put = put_Password)) wstring Password;
		wstring get_Password();
		void put_Password(wstring Password);
		//
		__declspec(property(get = get_PasswordEncryptionAlgorithm)) wstring PasswordEncryptionAlgorithm;
		wstring get_PasswordEncryptionAlgorithm();
		//
		__declspec(property(get = get_PasswordEncryptionFileProperties)) bool PasswordEncryptionFileProperties;
		bool get_PasswordEncryptionFileProperties();
		//
		__declspec(property(get = get_PasswordEncryptionKeyLength)) long PasswordEncryptionKeyLength;
		long get_PasswordEncryptionKeyLength();
		//
		__declspec(property(get = get_PasswordEncryptionProvider)) wstring PasswordEncryptionProvider;
		wstring get_PasswordEncryptionProvider();
		//
		__declspec(property(get = get_Path)) wstring Path;
		wstring get_Path();
		//
		__declspec(property(get = get_Permission)) Com::Object Permission;
		Com::Object get_Permission();
		//
		__declspec(property(get = get_PersonalViewListSettings, put = put_PersonalViewListSettings)) bool PersonalViewListSettings;
		bool get_PersonalViewListSettings();
		void put_PersonalViewListSettings(bool PersonalViewListSettings);
		//
		__declspec(property(get = get_PersonalViewPrintSettings, put = put_PersonalViewPrintSettings)) bool PersonalViewPrintSettings;
		bool get_PersonalViewPrintSettings();
		void put_PersonalViewPrintSettings(bool PersonalViewPrintSettings);
		Excel::PivotCaches PivotCaches();
		void PivotTableWizard(_variant_t SourceType, _variant_t SourceData, _variant_t TableDestination, _variant_t TableName, _variant_t RowGrand, _variant_t ColumnGrand, _variant_t SaveData, _variant_t HasAutoFormat, _variant_t AutoPage, _variant_t Reserved, _variant_t BackgroundQuery, _variant_t OptimizeCache, _variant_t PageFieldOrder, _variant_t PageFieldWrapCount, _variant_t ReadData, _variant_t Connection);
		void PivotTableWizard();
		//
		__declspec(property(get = get_PivotTables)) Com::Object PivotTablesX;
		Com::Object get_PivotTables();
		void Post(_variant_t DestName);
		void Post();
		//
		__declspec(property(get = get_PrecisionAsDisplayed, put = put_PrecisionAsDisplayed)) bool PrecisionAsDisplayed;
		bool get_PrecisionAsDisplayed();
		void put_PrecisionAsDisplayed(bool PrecisionAsDisplayed);
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas);
		void PrintOut();
		void PrintPreview(_variant_t EnableChanges);
		void PrintPreview();
		void Protect(_variant_t Password, _variant_t Structure, _variant_t Windows);
		void Protect();
		void ProtectSharing(_variant_t Filename, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t SharingPassword, _variant_t FileFormat);
		void ProtectSharing();
		//
		__declspec(property(get = get_ProtectStructure)) bool ProtectStructure;
		bool get_ProtectStructure();
		//
		__declspec(property(get = get_ProtectWindows)) bool ProtectWindows;
		bool get_ProtectWindows();
		//
		__declspec(property(get = get_PublishObjects)) Excel::PublishObjects PublishObjectsX;
		Excel::PublishObjects get_PublishObjects();
		wstring PublishToDocs(wstring Title, Excel::XlPublishToDocsDisclosureScope DisclosureScope, _variant_t OverwriteUrl);
		wstring PublishToDocs(wstring Title, Excel::XlPublishToDocsDisclosureScope DisclosureScope);
		wstring PublishToPBI(_variant_t PublishType, _variant_t nameConflict, _variant_t bstrGroupName);
		wstring PublishToPBI();
		void PurgeChangeHistoryNow(long Days, _variant_t SharingPassword);
		void PurgeChangeHistoryNow(long Days);
		//
		__declspec(property(get = get_Queries)) Excel::Queries QueriesX;
		Excel::Queries get_Queries();
		//
		__declspec(property(get = get_ReadOnly)) bool ReadOnly;
		bool get_ReadOnly();
		//
		__declspec(property(get = get_ReadOnlyRecommended, put = put_ReadOnlyRecommended)) bool ReadOnlyRecommended;
		bool get_ReadOnlyRecommended();
		void put_ReadOnlyRecommended(bool ReadOnlyRecommended);
		void RecheckSmartTags();
		void RefreshAll();
		void RejectAllChanges(_variant_t When, _variant_t Who, _variant_t Where);
		void RejectAllChanges();
		void ReloadAs(/* MsoEncoding*/ short Encoding);
		void RemoveDocumentInformation(Excel::XlRemoveDocInfoType RemoveDocInfoType);
		//
		__declspec(property(get = get_RemovePersonalInformation, put = put_RemovePersonalInformation)) bool RemovePersonalInformation;
		bool get_RemovePersonalInformation();
		void put_RemovePersonalInformation(bool RemovePersonalInformation);
		void RemoveUser(long Index);
		void Reply();
		void ReplyAll();
		void ReplyWithChanges(_variant_t ShowMessage);
		void ReplyWithChanges();
		//
		__declspec(property(get = get_Research)) Excel::Research ResearchX;
		Excel::Research get_Research();
		void ResetColors();
		//
		__declspec(property(get = get_RevisionNumber)) long RevisionNumber;
		long get_RevisionNumber();
		void Route();
		//
		__declspec(property(get = get_Routed)) bool Routed;
		bool get_Routed();
		//
		__declspec(property(get = get_RoutingSlip)) Excel::RoutingSlip RoutingSlipX;
		Excel::RoutingSlip get_RoutingSlip();
		void RunAutoMacros(Excel::XlRunAutoMacro Which);
		void Save();
		void SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode, _variant_t ConflictResolution, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local, _variant_t WorkIdentity);
		void SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode);
		void SaveAsXMLData(wstring Filename, Excel::XmlMap& Map);
		void SaveCopyAs(_variant_t Filename);
		void SaveCopyAs();
		//
		__declspec(property(get = get_SaveLinkValues, put = put_SaveLinkValues)) bool SaveLinkValues;
		bool get_SaveLinkValues();
		void put_SaveLinkValues(bool SaveLinkValues);
		//
		__declspec(property(get = get_Saved, put = put_Saved)) bool Saved;
		bool get_Saved();
		void put_Saved(bool Saved);
		void SendFaxOverInternet(_variant_t Recipients, _variant_t Subject, _variant_t ShowMessage);
		void SendFaxOverInternet();
		void SendForReview(_variant_t Recipients, _variant_t Subject, _variant_t ShowMessage, _variant_t IncludeAttachment);
		void SendForReview();
		void SendMail(_variant_t Recipients, _variant_t Subject, _variant_t ReturnReceipt);
		void SendMail(_variant_t Recipients);
		void SendMailer(_variant_t FileFormat, Excel::XlPriority Priority);
		//
		__declspec(property(get = get_ServerPolicy)) Com::Object ServerPolicy;
		Com::Object get_ServerPolicy();
		//
		__declspec(property(get = get_ServerViewableItems)) Excel::ServerViewableItems ServerViewableItemsX;
		Excel::ServerViewableItems get_ServerViewableItems();
		void SetLinkOnData(wstring Name, _variant_t Procedure);
		void SetLinkOnData(wstring Name);
		void SetPasswordEncryptionOptions(_variant_t PasswordEncryptionProvider, _variant_t PasswordEncryptionAlgorithm, _variant_t PasswordEncryptionKeyLength, _variant_t PasswordEncryptionFileProperties);
		void SetPasswordEncryptionOptions();
		//
		__declspec(property(get = get_SharedWorkspace)) Com::Object SharedWorkspace;
		Com::Object get_SharedWorkspace();
		//
		__declspec(property(get = get_Sheets)) Excel::Sheets SheetsX;
		Excel::Sheets get_Sheets();
		//
		__declspec(property(get = get_ShowConflictHistory, put = put_ShowConflictHistory)) bool ShowConflictHistory;
		bool get_ShowConflictHistory();
		void put_ShowConflictHistory(bool ShowConflictHistory);
		//
		__declspec(property(get = get_ShowPivotChartActiveFields, put = put_ShowPivotChartActiveFields)) bool ShowPivotChartActiveFields;
		bool get_ShowPivotChartActiveFields();
		void put_ShowPivotChartActiveFields(bool ShowPivotChartActiveFields);
		//
		__declspec(property(get = get_ShowPivotTableFieldList, put = put_ShowPivotTableFieldList)) bool ShowPivotTableFieldList;
		bool get_ShowPivotTableFieldList();
		void put_ShowPivotTableFieldList(bool ShowPivotTableFieldList);
		//
		__declspec(property(get = get_Signatures)) Com::Object Signatures;
		Com::Object get_Signatures();
		//
		__declspec(property(get = get_SlicerCaches)) Excel::SlicerCaches SlicerCachesX;
		Excel::SlicerCaches get_SlicerCaches();
		//
		__declspec(property(get = get_SmartDocument)) Com::Object SmartDocument;
		Com::Object get_SmartDocument();
		//
		__declspec(property(get = get_SmartTagOptions)) Excel::SmartTagOptions SmartTagOptionsX;
		Excel::SmartTagOptions get_SmartTagOptions();
		//
		__declspec(property(get = get_Styles)) Excel::Styles StylesX;
		Excel::Styles get_Styles();
		//
		__declspec(property(get = get_Subject, put = put_Subject)) wstring Subject;
		wstring get_Subject();
		void put_Subject(wstring Subject);
		//
		__declspec(property(get = get_Sync)) Com::Object Sync;
		Com::Object get_Sync();
		//
		__declspec(property(get = get_TableStyles)) Excel::TableStyles TableStylesX;
		Excel::TableStyles get_TableStyles();
		//
		__declspec(property(get = get_TemplateRemoveExtData, put = put_TemplateRemoveExtData)) bool TemplateRemoveExtData;
		bool get_TemplateRemoveExtData();
		void put_TemplateRemoveExtData(bool TemplateRemoveExtData);
		//
		__declspec(property(get = get_Theme)) Com::Object Theme;
		Com::Object get_Theme();
		//
		__declspec(property(get = get_Title, put = put_Title)) wstring Title;
		wstring get_Title();
		void put_Title(wstring Title);
		void ToggleFormsDesign();
		void Unprotect(_variant_t Password);
		void Unprotect();
		void UnprotectSharing(_variant_t SharingPassword);
		void UnprotectSharing();
		void UpdateFromFile();
		void UpdateLink(_variant_t Name, _variant_t Type);
		void UpdateLink();
		//
		__declspec(property(get = get_UpdateLinks, put = put_UpdateLinks)) Excel::XlUpdateLinks UpdateLinks;
		Excel::XlUpdateLinks get_UpdateLinks();
		void put_UpdateLinks(Excel::XlUpdateLinks UpdateLinks);
		//
		__declspec(property(get = get_UpdateRemoteReferences, put = put_UpdateRemoteReferences)) bool UpdateRemoteReferences;
		bool get_UpdateRemoteReferences();
		void put_UpdateRemoteReferences(bool UpdateRemoteReferences);
		//
		__declspec(property(get = get_UseWholeCellCriteria)) bool UseWholeCellCriteria;
		bool get_UseWholeCellCriteria();
		//
		__declspec(property(get = get_UseWildcards)) bool UseWildcards;
		bool get_UseWildcards();
		//
		__declspec(property(get = get_UserControl, put = put_UserControl)) bool UserControl;
		bool get_UserControl();
		void put_UserControl(bool UserControl);
		//
		__declspec(property(get = get_UserStatus)) _variant_t UserStatus;
		_variant_t get_UserStatus();
		//
		__declspec(property(get = get_VBASigned)) bool VBASigned;
		bool get_VBASigned();
		//
		__declspec(property(get = get_VBProject)) Com::Object VBProject;
		Com::Object get_VBProject();
		//
		__declspec(property(get = get_WebOptions)) Excel::WebOptions WebOptionsX;
		Excel::WebOptions get_WebOptions();
		void WebPagePreview();
		//
		__declspec(property(get = get_Windows)) Excel::Windows WindowsX;
		Excel::Windows get_Windows();
		//
		__declspec(property(get = get_WorkIdentity, put = put_WorkIdentity)) wstring WorkIdentity;
		wstring get_WorkIdentity();
		void put_WorkIdentity(wstring WorkIdentity);
		//
		__declspec(property(get = get_Worksheets)) Excel::Sheets WorksheetsX;
		Excel::Sheets get_Worksheets();
		//
		__declspec(property(get = get_WritePassword, put = put_WritePassword)) wstring WritePassword;
		wstring get_WritePassword();
		void put_WritePassword(wstring WritePassword);
		//
		__declspec(property(get = get_WriteReserved)) bool WriteReserved;
		bool get_WriteReserved();
		//
		__declspec(property(get = get_WriteReservedBy)) wstring WriteReservedBy;
		wstring get_WriteReservedBy();
		Excel::XlXmlImportResult XmlImport(wstring Url, Com::Object& ImportMap, _variant_t Overwrite, _variant_t Destination);
		Excel::XlXmlImportResult XmlImport(wstring Url, Com::Object& ImportMap);
		Excel::XlXmlImportResult XmlImportXml(wstring Data, Com::Object& ImportMap, _variant_t Overwrite, _variant_t Destination);
		Excel::XlXmlImportResult XmlImportXml(wstring Data, Com::Object& ImportMap);
		//
		__declspec(property(get = get_XmlMaps)) Excel::XmlMaps XmlMapsX;
		Excel::XmlMaps get_XmlMaps();
		//
		__declspec(property(get = get_XmlNamespaces)) Excel::XmlNamespaces XmlNamespacesX;
		Excel::XmlNamespaces get_XmlNamespaces();
		//
		__declspec(property(get = get__CodeName, put = put__CodeName)) wstring _CodeName;
		wstring get__CodeName();
		void put__CodeName(wstring _CodeName);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void _Protect(_variant_t Password, _variant_t Structure, _variant_t Windows);
		void _Protect();
		void _ProtectSharing(_variant_t Filename, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t SharingPassword);
		void _ProtectSharing();
		//
		__declspec(property(get = get__ReadOnlyRecommended)) bool _ReadOnlyRecommended;
		bool get__ReadOnlyRecommended();
		void _SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode, _variant_t ConflictResolution, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local);
		void _SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode);
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
		void __SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode, _variant_t ConflictResolution, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout);
		void __SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode);
		void sblt(wstring s);
	};

	//________________________________________________________Workbooks
	// {000208DB-0000-0000-C000-000000000046}
	class Workbooks : public Com::Object
	{
	public:
		Workbooks();
		~Workbooks();
		Workbooks(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Workbooks& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::WorkbookX Add(_variant_t Template);
		Excel::WorkbookX Add();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		bool CanCheckOut(wstring Filename);
		void CheckOut(wstring Filename);
		void Close();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::WorkbookX get_Item(_variant_t Index);
		Excel::WorkbookX Open(wstring Filename, _variant_t UpdateLinks, _variant_t ReadOnly, _variant_t Format, _variant_t Password, _variant_t WriteResPassword, _variant_t IgnoreReadOnlyRecommended, _variant_t Origin, _variant_t Delimiter, _variant_t Editable, _variant_t Notify, _variant_t Converter, _variant_t AddToMru, _variant_t Local, _variant_t CorruptLoad);
		Excel::WorkbookX Open(wstring Filename);
		Excel::WorkbookX OpenDatabase(wstring Filename, _variant_t CommandText, _variant_t CommandType, _variant_t BackgroundQuery, _variant_t ImportDataAs);
		Excel::WorkbookX OpenDatabase(wstring Filename);
		void OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier, _variant_t ConsecutiveDelimiter, _variant_t Tab, _variant_t Semicolon, _variant_t Comma, _variant_t Space, _variant_t Other, _variant_t OtherChar, _variant_t FieldInfo, _variant_t TextVisualLayout, _variant_t DecimalSeparator, _variant_t ThousandsSeparator, _variant_t TrailingMinusNumbers, _variant_t Local);
		void OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier);
		Excel::WorkbookX OpenXML(wstring Filename, _variant_t Stylesheets, _variant_t LoadOption);
		Excel::WorkbookX OpenXML(wstring Filename);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::WorkbookX get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
		Excel::WorkbookX _Open(wstring Filename, _variant_t UpdateLinks, _variant_t ReadOnly, _variant_t Format, _variant_t Password, _variant_t WriteResPassword, _variant_t IgnoreReadOnlyRecommended, _variant_t Origin, _variant_t Delimiter, _variant_t Editable, _variant_t Notify, _variant_t Converter, _variant_t AddToMru);
		Excel::WorkbookX _Open(wstring Filename);
		void _OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier, _variant_t ConsecutiveDelimiter, _variant_t Tab, _variant_t Semicolon, _variant_t Comma, _variant_t Space, _variant_t Other, _variant_t OtherChar, _variant_t FieldInfo, _variant_t TextVisualLayout, _variant_t DecimalSeparator, _variant_t ThousandsSeparator);
		void _OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier);
		Excel::WorkbookX _OpenXML(wstring Filename, _variant_t Stylesheets);
		Excel::WorkbookX _OpenXML(wstring Filename);
		void __OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier, _variant_t ConsecutiveDelimiter, _variant_t Tab, _variant_t Semicolon, _variant_t Comma, _variant_t Space, _variant_t Other, _variant_t OtherChar, _variant_t FieldInfo, _variant_t TextVisualLayout);
		void __OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier);
	};

	//________________________________________________________PublishObject
	// {00024444-0000-0000-C000-000000000046}
	class PublishObject : public Com::Object
	{
	public:
		PublishObject();
		~PublishObject();
		PublishObject(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PublishObject& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoRepublish, put = put_AutoRepublish)) bool AutoRepublish;
		bool get_AutoRepublish();
		void put_AutoRepublish(bool AutoRepublish);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_DivID)) wstring DivID;
		wstring get_DivID();
		//
		__declspec(property(get = get_Filename, put = put_Filename)) wstring Filename;
		wstring get_Filename();
		void put_Filename(wstring Filename);
		//
		__declspec(property(get = get_HtmlType, put = put_HtmlType)) Excel::XlHtmlType HtmlType;
		Excel::XlHtmlType get_HtmlType();
		void put_HtmlType(Excel::XlHtmlType HtmlType);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Publish(_variant_t Create);
		void Publish();
		//
		__declspec(property(get = get_Sheet)) wstring Sheet;
		wstring get_Sheet();
		//
		__declspec(property(get = get_Source)) wstring Source;
		wstring get_Source();
		//
		__declspec(property(get = get_SourceType)) Excel::XlSourceType SourceType;
		Excel::XlSourceType get_SourceType();
		//
		__declspec(property(get = get_Title, put = put_Title)) wstring Title;
		wstring get_Title();
		void put_Title(wstring Title);
	};

	//________________________________________________________DefaultWebOptions
	// {00024448-0000-0000-C000-000000000046}
	class DefaultWebOptions : public Com::Object
	{
	public:
		DefaultWebOptions();
		~DefaultWebOptions();
		DefaultWebOptions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DefaultWebOptions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AllowPNG, put = put_AllowPNG)) bool AllowPNG;
		bool get_AllowPNG();
		void put_AllowPNG(bool AllowPNG);
		//
		__declspec(property(get = get_AlwaysSaveInDefaultEncoding, put = put_AlwaysSaveInDefaultEncoding)) bool AlwaysSaveInDefaultEncoding;
		bool get_AlwaysSaveInDefaultEncoding();
		void put_AlwaysSaveInDefaultEncoding(bool AlwaysSaveInDefaultEncoding);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CheckIfOfficeIsHTMLEditor, put = put_CheckIfOfficeIsHTMLEditor)) bool CheckIfOfficeIsHTMLEditor;
		bool get_CheckIfOfficeIsHTMLEditor();
		void put_CheckIfOfficeIsHTMLEditor(bool CheckIfOfficeIsHTMLEditor);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DownloadComponents, put = put_DownloadComponents)) bool DownloadComponents;
		bool get_DownloadComponents();
		void put_DownloadComponents(bool DownloadComponents);
		//
		__declspec(property(get = get_Encoding, put = put_Encoding)) /* MsoEncoding*/ short Encoding;
		/* MsoEncoding*/ short get_Encoding();
		void put_Encoding(/* MsoEncoding*/ short Encoding);
		//
		__declspec(property(get = get_FolderSuffix)) wstring FolderSuffix;
		wstring get_FolderSuffix();
		//
		__declspec(property(get = get_Fonts)) Com::Object Fonts;
		Com::Object get_Fonts();
		//
		__declspec(property(get = get_LoadPictures, put = put_LoadPictures)) bool LoadPictures;
		bool get_LoadPictures();
		void put_LoadPictures(bool LoadPictures);
		//
		__declspec(property(get = get_LocationOfComponents, put = put_LocationOfComponents)) wstring LocationOfComponents;
		wstring get_LocationOfComponents();
		void put_LocationOfComponents(wstring LocationOfComponents);
		//
		__declspec(property(get = get_OrganizeInFolder, put = put_OrganizeInFolder)) bool OrganizeInFolder;
		bool get_OrganizeInFolder();
		void put_OrganizeInFolder(bool OrganizeInFolder);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PixelsPerInch, put = put_PixelsPerInch)) long PixelsPerInch;
		long get_PixelsPerInch();
		void put_PixelsPerInch(long PixelsPerInch);
		//
		__declspec(property(get = get_RelyOnCSS, put = put_RelyOnCSS)) bool RelyOnCSS;
		bool get_RelyOnCSS();
		void put_RelyOnCSS(bool RelyOnCSS);
		//
		__declspec(property(get = get_RelyOnVML, put = put_RelyOnVML)) bool RelyOnVML;
		bool get_RelyOnVML();
		void put_RelyOnVML(bool RelyOnVML);
		//
		__declspec(property(get = get_SaveHiddenData, put = put_SaveHiddenData)) bool SaveHiddenData;
		bool get_SaveHiddenData();
		void put_SaveHiddenData(bool SaveHiddenData);
		//
		__declspec(property(get = get_SaveNewWebPagesAsWebArchives, put = put_SaveNewWebPagesAsWebArchives)) bool SaveNewWebPagesAsWebArchives;
		bool get_SaveNewWebPagesAsWebArchives();
		void put_SaveNewWebPagesAsWebArchives(bool SaveNewWebPagesAsWebArchives);
		//
		__declspec(property(get = get_ScreenSize, put = put_ScreenSize)) /* MsoScreenSize*/ short ScreenSize;
		/* MsoScreenSize*/ short get_ScreenSize();
		void put_ScreenSize(/* MsoScreenSize*/ short ScreenSize);
		//
		__declspec(property(get = get_TargetBrowser, put = put_TargetBrowser)) /* MsoTargetBrowser*/ short TargetBrowser;
		/* MsoTargetBrowser*/ short get_TargetBrowser();
		void put_TargetBrowser(/* MsoTargetBrowser*/ short TargetBrowser);
		//
		__declspec(property(get = get_UpdateLinksOnSave, put = put_UpdateLinksOnSave)) bool UpdateLinksOnSave;
		bool get_UpdateLinksOnSave();
		void put_UpdateLinksOnSave(bool UpdateLinksOnSave);
		//
		__declspec(property(get = get_UseLongFileNames, put = put_UseLongFileNames)) bool UseLongFileNames;
		bool get_UseLongFileNames();
		void put_UseLongFileNames(bool UseLongFileNames);
	};

	//________________________________________________________WebOptions
	// {00024449-0000-0000-C000-000000000046}
	class WebOptions : public Com::Object
	{
	public:
		WebOptions();
		~WebOptions();
		WebOptions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WebOptions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AllowPNG, put = put_AllowPNG)) bool AllowPNG;
		bool get_AllowPNG();
		void put_AllowPNG(bool AllowPNG);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DownloadComponents, put = put_DownloadComponents)) bool DownloadComponents;
		bool get_DownloadComponents();
		void put_DownloadComponents(bool DownloadComponents);
		//
		__declspec(property(get = get_Encoding, put = put_Encoding)) /* MsoEncoding*/ short Encoding;
		/* MsoEncoding*/ short get_Encoding();
		void put_Encoding(/* MsoEncoding*/ short Encoding);
		//
		__declspec(property(get = get_FolderSuffix)) wstring FolderSuffix;
		wstring get_FolderSuffix();
		//
		__declspec(property(get = get_LocationOfComponents, put = put_LocationOfComponents)) wstring LocationOfComponents;
		wstring get_LocationOfComponents();
		void put_LocationOfComponents(wstring LocationOfComponents);
		//
		__declspec(property(get = get_OrganizeInFolder, put = put_OrganizeInFolder)) bool OrganizeInFolder;
		bool get_OrganizeInFolder();
		void put_OrganizeInFolder(bool OrganizeInFolder);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PixelsPerInch, put = put_PixelsPerInch)) long PixelsPerInch;
		long get_PixelsPerInch();
		void put_PixelsPerInch(long PixelsPerInch);
		//
		__declspec(property(get = get_RelyOnCSS, put = put_RelyOnCSS)) bool RelyOnCSS;
		bool get_RelyOnCSS();
		void put_RelyOnCSS(bool RelyOnCSS);
		//
		__declspec(property(get = get_RelyOnVML, put = put_RelyOnVML)) bool RelyOnVML;
		bool get_RelyOnVML();
		void put_RelyOnVML(bool RelyOnVML);
		//
		__declspec(property(get = get_ScreenSize, put = put_ScreenSize)) /* MsoScreenSize*/ short ScreenSize;
		/* MsoScreenSize*/ short get_ScreenSize();
		void put_ScreenSize(/* MsoScreenSize*/ short ScreenSize);
		//
		__declspec(property(get = get_TargetBrowser, put = put_TargetBrowser)) /* MsoTargetBrowser*/ short TargetBrowser;
		/* MsoTargetBrowser*/ short get_TargetBrowser();
		void put_TargetBrowser(/* MsoTargetBrowser*/ short TargetBrowser);
		void UseDefaultFolderSuffix();
		//
		__declspec(property(get = get_UseLongFileNames, put = put_UseLongFileNames)) bool UseLongFileNames;
		bool get_UseLongFileNames();
		void put_UseLongFileNames(bool UseLongFileNames);
	};

	//________________________________________________________TreeviewControl
	// {0002444B-0000-0000-C000-000000000046}
	class TreeviewControl : public Com::Object
	{
	public:
		TreeviewControl();
		~TreeviewControl();
		TreeviewControl(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TreeviewControl& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Drilled, put = put_Drilled)) _variant_t Drilled;
		_variant_t get_Drilled();
		void put_Drilled(_variant_t Drilled);
		//
		__declspec(property(get = get_Hidden, put = put_Hidden)) _variant_t Hidden;
		_variant_t get_Hidden();
		void put_Hidden(_variant_t Hidden);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________CubeField
	// {0002444C-0000-0000-C000-000000000046}
	class CubeField : public Com::Object
	{
	public:
		CubeField();
		~CubeField();
		CubeField(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CubeField& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AddMemberPropertyField(wstring Property, _variant_t PropertyOrder, _variant_t PropertyDisplayedIn);
		void AddMemberPropertyField(wstring Property);
		//
		__declspec(property(get = get_AllItemsVisible)) bool AllItemsVisible;
		bool get_AllItemsVisible();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void AutoGroup(_variant_t Orientation, _variant_t Position);
		void AutoGroup();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		void ClearManualFilter();
		void CreatePivotFields();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CubeFieldSubType)) Excel::XlCubeFieldSubType CubeFieldSubType;
		Excel::XlCubeFieldSubType get_CubeFieldSubType();
		//
		__declspec(property(get = get_CubeFieldType)) Excel::XlCubeFieldType CubeFieldType;
		Excel::XlCubeFieldType get_CubeFieldType();
		//
		__declspec(property(get = get_CurrentPageName, put = put_CurrentPageName)) wstring CurrentPageName;
		wstring get_CurrentPageName();
		void put_CurrentPageName(wstring CurrentPageName);
		void Delete();
		//
		__declspec(property(get = get_DragToColumn, put = put_DragToColumn)) bool DragToColumn;
		bool get_DragToColumn();
		void put_DragToColumn(bool DragToColumn);
		//
		__declspec(property(get = get_DragToData, put = put_DragToData)) bool DragToData;
		bool get_DragToData();
		void put_DragToData(bool DragToData);
		//
		__declspec(property(get = get_DragToHide, put = put_DragToHide)) bool DragToHide;
		bool get_DragToHide();
		void put_DragToHide(bool DragToHide);
		//
		__declspec(property(get = get_DragToPage, put = put_DragToPage)) bool DragToPage;
		bool get_DragToPage();
		void put_DragToPage(bool DragToPage);
		//
		__declspec(property(get = get_DragToRow, put = put_DragToRow)) bool DragToRow;
		bool get_DragToRow();
		void put_DragToRow(bool DragToRow);
		//
		__declspec(property(get = get_EnableMultiplePageItems, put = put_EnableMultiplePageItems)) bool EnableMultiplePageItems;
		bool get_EnableMultiplePageItems();
		void put_EnableMultiplePageItems(bool EnableMultiplePageItems);
		//
		__declspec(property(get = get_FlattenHierarchies, put = put_FlattenHierarchies)) bool FlattenHierarchies;
		bool get_FlattenHierarchies();
		void put_FlattenHierarchies(bool FlattenHierarchies);
		//
		__declspec(property(get = get_HasMemberProperties)) bool HasMemberProperties;
		bool get_HasMemberProperties();
		//
		__declspec(property(get = get_HiddenLevels, put = put_HiddenLevels)) long HiddenLevels;
		long get_HiddenLevels();
		void put_HiddenLevels(long HiddenLevels);
		//
		__declspec(property(get = get_HierarchizeDistinct, put = put_HierarchizeDistinct)) bool HierarchizeDistinct;
		bool get_HierarchizeDistinct();
		void put_HierarchizeDistinct(bool HierarchizeDistinct);
		//
		__declspec(property(get = get_IncludeNewItemsInFilter, put = put_IncludeNewItemsInFilter)) bool IncludeNewItemsInFilter;
		bool get_IncludeNewItemsInFilter();
		void put_IncludeNewItemsInFilter(bool IncludeNewItemsInFilter);
		//
		__declspec(property(get = get_IsDate)) bool IsDate;
		bool get_IsDate();
		//
		__declspec(property(get = get_LayoutForm, put = put_LayoutForm)) Excel::XlLayoutFormType LayoutForm;
		Excel::XlLayoutFormType get_LayoutForm();
		void put_LayoutForm(Excel::XlLayoutFormType LayoutForm);
		//
		__declspec(property(get = get_LayoutSubtotalLocation, put = put_LayoutSubtotalLocation)) Excel::XlSubtototalLocationType LayoutSubtotalLocation;
		Excel::XlSubtototalLocationType get_LayoutSubtotalLocation();
		void put_LayoutSubtotalLocation(Excel::XlSubtototalLocationType LayoutSubtotalLocation);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) Excel::XlPivotFieldOrientation Orientation;
		Excel::XlPivotFieldOrientation get_Orientation();
		void put_Orientation(Excel::XlPivotFieldOrientation Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotFields)) Excel::PivotFields PivotFieldsX;
		Excel::PivotFields get_PivotFields();
		//
		__declspec(property(get = get_Position, put = put_Position)) long Position;
		long get_Position();
		void put_Position(long Position);
		//
		__declspec(property(get = get_ShowInFieldList, put = put_ShowInFieldList)) bool ShowInFieldList;
		bool get_ShowInFieldList();
		void put_ShowInFieldList(bool ShowInFieldList);
		//
		__declspec(property(get = get_TreeviewControl)) Excel::TreeviewControl TreeviewControlX;
		Excel::TreeviewControl get_TreeviewControl();
		//
		__declspec(property(get = get_Value)) wstring Value;
		wstring get_Value();
		void _AddMemberPropertyField(wstring Property, _variant_t PropertyOrder);
		void _AddMemberPropertyField(wstring Property);
		//
		__declspec(property(get = get__Caption)) wstring _Caption;
		wstring get__Caption();
	};

	//________________________________________________________CubeFields
	// {0002444D-0000-0000-C000-000000000046}
	class CubeFields : public Com::Object
	{
	public:
		CubeFields();
		~CubeFields();
		CubeFields(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CubeFields& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::CubeField AddSet(wstring Name, wstring Caption);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::CubeField GetMeasure(_variant_t AttributeHierarchy, Excel::XlConsolidationFunction Function, _variant_t Caption);
		Excel::CubeField GetMeasure(_variant_t AttributeHierarchy, Excel::XlConsolidationFunction Function);
		Excel::CubeField get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::CubeField get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Font
	// {0002084D-0000-0000-C000-000000000046}
	class Font : public Com::Object
	{
	public:
		Font();
		~Font();
		Font(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Font& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Background, put = put_Background)) _variant_t Background;
		_variant_t get_Background();
		void put_Background(_variant_t Background);
		//
		__declspec(property(get = get_Bold, put = put_Bold)) _variant_t Bold;
		_variant_t get_Bold();
		void put_Bold(_variant_t Bold);
		//
		__declspec(property(get = get_Color, put = put_Color)) _variant_t Color;
		_variant_t get_Color();
		void put_Color(_variant_t Color);
		//
		__declspec(property(get = get_ColorIndex, put = put_ColorIndex)) _variant_t ColorIndex;
		_variant_t get_ColorIndex();
		void put_ColorIndex(_variant_t ColorIndex);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_FontStyle, put = put_FontStyle)) _variant_t FontStyle;
		_variant_t get_FontStyle();
		void put_FontStyle(_variant_t FontStyle);
		//
		__declspec(property(get = get_Italic, put = put_Italic)) _variant_t Italic;
		_variant_t get_Italic();
		void put_Italic(_variant_t Italic);
		//
		__declspec(property(get = get_Name, put = put_Name)) _variant_t NameX;
		_variant_t get_Name();
		void put_Name(_variant_t Name);
		//
		__declspec(property(get = get_OutlineFont, put = put_OutlineFont)) _variant_t OutlineFont;
		_variant_t get_OutlineFont();
		void put_OutlineFont(_variant_t OutlineFont);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) _variant_t Shadow;
		_variant_t get_Shadow();
		void put_Shadow(_variant_t Shadow);
		//
		__declspec(property(get = get_Size, put = put_Size)) _variant_t Size;
		_variant_t get_Size();
		void put_Size(_variant_t Size);
		//
		__declspec(property(get = get_Strikethrough, put = put_Strikethrough)) _variant_t Strikethrough;
		_variant_t get_Strikethrough();
		void put_Strikethrough(_variant_t Strikethrough);
		//
		__declspec(property(get = get_Subscript, put = put_Subscript)) _variant_t Subscript;
		_variant_t get_Subscript();
		void put_Subscript(_variant_t Subscript);
		//
		__declspec(property(get = get_Superscript, put = put_Superscript)) _variant_t Superscript;
		_variant_t get_Superscript();
		void put_Superscript(_variant_t Superscript);
		//
		__declspec(property(get = get_ThemeColor, put = put_ThemeColor)) _variant_t ThemeColor;
		_variant_t get_ThemeColor();
		void put_ThemeColor(_variant_t ThemeColor);
		//
		__declspec(property(get = get_ThemeFont, put = put_ThemeFont)) Excel::XlThemeFont ThemeFont;
		Excel::XlThemeFont get_ThemeFont();
		void put_ThemeFont(Excel::XlThemeFont ThemeFont);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) _variant_t TintAndShade;
		_variant_t get_TintAndShade();
		void put_TintAndShade(_variant_t TintAndShade);
		//
		__declspec(property(get = get_Underline, put = put_Underline)) _variant_t Underline;
		_variant_t get_Underline();
		void put_Underline(_variant_t Underline);
	};

	//________________________________________________________Window
	// {00020893-0000-0000-C000-000000000046}
	class Window : public Com::Object
	{
	public:
		Window();
		~Window();
		Window(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Window& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		_variant_t Activate();
		_variant_t ActivateNext();
		_variant_t ActivatePrevious();
		//
		__declspec(property(get = get_ActiveCell)) Excel::Range ActiveCell;
		Excel::Range get_ActiveCell();
		//
		__declspec(property(get = get_ActiveChart)) Excel::ChartX ActiveChart;
		Excel::ChartX get_ActiveChart();
		//
		__declspec(property(get = get_ActivePane)) Excel::Pane ActivePane;
		Excel::Pane get_ActivePane();
		//
		__declspec(property(get = get_ActiveSheet)) Com::Object ActiveSheet;
		Com::Object get_ActiveSheet();
		//
		__declspec(property(get = get_ActiveSheetView)) Com::Object ActiveSheetView;
		Com::Object get_ActiveSheetView();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoFilterDateGrouping, put = put_AutoFilterDateGrouping)) bool AutoFilterDateGrouping;
		bool get_AutoFilterDateGrouping();
		void put_AutoFilterDateGrouping(bool AutoFilterDateGrouping);
		//
		__declspec(property(get = get_Caption, put = put_Caption)) _variant_t Caption;
		_variant_t get_Caption();
		void put_Caption(_variant_t Caption);
		bool Close(_variant_t SaveChanges, _variant_t Filename, _variant_t RouteWorkbook);
		bool Close();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DisplayFormulas, put = put_DisplayFormulas)) bool DisplayFormulas;
		bool get_DisplayFormulas();
		void put_DisplayFormulas(bool DisplayFormulas);
		//
		__declspec(property(get = get_DisplayGridlines, put = put_DisplayGridlines)) bool DisplayGridlines;
		bool get_DisplayGridlines();
		void put_DisplayGridlines(bool DisplayGridlines);
		//
		__declspec(property(get = get_DisplayHeadings, put = put_DisplayHeadings)) bool DisplayHeadings;
		bool get_DisplayHeadings();
		void put_DisplayHeadings(bool DisplayHeadings);
		//
		__declspec(property(get = get_DisplayHorizontalScrollBar, put = put_DisplayHorizontalScrollBar)) bool DisplayHorizontalScrollBar;
		bool get_DisplayHorizontalScrollBar();
		void put_DisplayHorizontalScrollBar(bool DisplayHorizontalScrollBar);
		//
		__declspec(property(get = get_DisplayOutline, put = put_DisplayOutline)) bool DisplayOutline;
		bool get_DisplayOutline();
		void put_DisplayOutline(bool DisplayOutline);
		//
		__declspec(property(get = get_DisplayRightToLeft, put = put_DisplayRightToLeft)) bool DisplayRightToLeft;
		bool get_DisplayRightToLeft();
		void put_DisplayRightToLeft(bool DisplayRightToLeft);
		//
		__declspec(property(get = get_DisplayRuler, put = put_DisplayRuler)) bool DisplayRuler;
		bool get_DisplayRuler();
		void put_DisplayRuler(bool DisplayRuler);
		//
		__declspec(property(get = get_DisplayVerticalScrollBar, put = put_DisplayVerticalScrollBar)) bool DisplayVerticalScrollBar;
		bool get_DisplayVerticalScrollBar();
		void put_DisplayVerticalScrollBar(bool DisplayVerticalScrollBar);
		//
		__declspec(property(get = get_DisplayWhitespace, put = put_DisplayWhitespace)) bool DisplayWhitespace;
		bool get_DisplayWhitespace();
		void put_DisplayWhitespace(bool DisplayWhitespace);
		//
		__declspec(property(get = get_DisplayWorkbookTabs, put = put_DisplayWorkbookTabs)) bool DisplayWorkbookTabs;
		bool get_DisplayWorkbookTabs();
		void put_DisplayWorkbookTabs(bool DisplayWorkbookTabs);
		//
		__declspec(property(get = get_DisplayZeros, put = put_DisplayZeros)) bool DisplayZeros;
		bool get_DisplayZeros();
		void put_DisplayZeros(bool DisplayZeros);
		//
		__declspec(property(get = get_EnableResize, put = put_EnableResize)) bool EnableResize;
		bool get_EnableResize();
		void put_EnableResize(bool EnableResize);
		//
		__declspec(property(get = get_FreezePanes, put = put_FreezePanes)) bool FreezePanes;
		bool get_FreezePanes();
		void put_FreezePanes(bool FreezePanes);
		//
		__declspec(property(get = get_GridlineColor, put = put_GridlineColor)) long GridlineColor;
		long get_GridlineColor();
		void put_GridlineColor(long GridlineColor);
		//
		__declspec(property(get = get_GridlineColorIndex, put = put_GridlineColorIndex)) Excel::XlColorIndex GridlineColorIndex;
		Excel::XlColorIndex get_GridlineColorIndex();
		void put_GridlineColorIndex(Excel::XlColorIndex GridlineColorIndex);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Hwnd)) long Hwnd;
		long get_Hwnd();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		_variant_t LargeScroll(_variant_t Down, _variant_t Up, _variant_t ToRight, _variant_t ToLeft);
		_variant_t LargeScroll();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		Excel::Window NewWindow();
		//
		__declspec(property(get = get_OnWindow, put = put_OnWindow)) wstring OnWindow;
		wstring get_OnWindow();
		void put_OnWindow(wstring OnWindow);
		//
		__declspec(property(get = get_Panes)) Excel::Panes PanesX;
		Excel::Panes get_Panes();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		long PointsToScreenPixelsX(long Points);
		long PointsToScreenPixelsY(long Points);
		_variant_t PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		_variant_t PrintOut();
		_variant_t PrintPreview(_variant_t EnableChanges);
		_variant_t PrintPreview();
		Com::Object RangeFromPoint(long x, long y);
		//
		__declspec(property(get = get_RangeSelection)) Excel::Range RangeSelection;
		Excel::Range get_RangeSelection();
		//
		__declspec(property(get = get_ScrollColumn, put = put_ScrollColumn)) long ScrollColumn;
		long get_ScrollColumn();
		void put_ScrollColumn(long ScrollColumn);
		void ScrollIntoView(long Left, long Top, long Width, long Height, _variant_t Start);
		void ScrollIntoView(long Left, long Top, long Width, long Height);
		//
		__declspec(property(get = get_ScrollRow, put = put_ScrollRow)) long ScrollRow;
		long get_ScrollRow();
		void put_ScrollRow(long ScrollRow);
		_variant_t ScrollWorkbookTabs(_variant_t Sheets, _variant_t Position);
		_variant_t ScrollWorkbookTabs();
		//
		__declspec(property(get = get_SelectedSheets)) Excel::Sheets SelectedSheets;
		Excel::Sheets get_SelectedSheets();
		//
		__declspec(property(get = get_Selection)) Com::Object Selection;
		Com::Object get_Selection();
		//
		__declspec(property(get = get_SheetViews)) Excel::SheetViews SheetViewsX;
		Excel::SheetViews get_SheetViews();
		_variant_t SmallScroll(_variant_t Down, _variant_t Up, _variant_t ToRight, _variant_t ToLeft);
		_variant_t SmallScroll();
		//
		__declspec(property(get = get_Split, put = put_Split)) bool Split;
		bool get_Split();
		void put_Split(bool Split);
		//
		__declspec(property(get = get_SplitColumn, put = put_SplitColumn)) long SplitColumn;
		long get_SplitColumn();
		void put_SplitColumn(long SplitColumn);
		//
		__declspec(property(get = get_SplitHorizontal, put = put_SplitHorizontal)) double SplitHorizontal;
		double get_SplitHorizontal();
		void put_SplitHorizontal(double SplitHorizontal);
		//
		__declspec(property(get = get_SplitRow, put = put_SplitRow)) long SplitRow;
		long get_SplitRow();
		void put_SplitRow(long SplitRow);
		//
		__declspec(property(get = get_SplitVertical, put = put_SplitVertical)) double SplitVertical;
		double get_SplitVertical();
		void put_SplitVertical(double SplitVertical);
		//
		__declspec(property(get = get_TabRatio, put = put_TabRatio)) double TabRatio;
		double get_TabRatio();
		void put_TabRatio(double TabRatio);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Type)) Excel::XlWindowType Type;
		Excel::XlWindowType get_Type();
		//
		__declspec(property(get = get_UsableHeight)) double UsableHeight;
		double get_UsableHeight();
		//
		__declspec(property(get = get_UsableWidth)) double UsableWidth;
		double get_UsableWidth();
		//
		__declspec(property(get = get_View, put = put_View)) Excel::XlWindowView View;
		Excel::XlWindowView get_View();
		void put_View(Excel::XlWindowView View);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_VisibleRange)) Excel::Range VisibleRange;
		Excel::Range get_VisibleRange();
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_WindowNumber)) long WindowNumber;
		long get_WindowNumber();
		//
		__declspec(property(get = get_WindowState, put = put_WindowState)) Excel::XlWindowState WindowState;
		Excel::XlWindowState get_WindowState();
		void put_WindowState(Excel::XlWindowState WindowState);
		//
		__declspec(property(get = get_Zoom, put = put_Zoom)) _variant_t Zoom;
		_variant_t get_Zoom();
		void put_Zoom(_variant_t Zoom);
		//
		__declspec(property(get = get__DisplayRightToLeft, put = put__DisplayRightToLeft)) bool _DisplayRightToLeft;
		bool get__DisplayRightToLeft();
		void put__DisplayRightToLeft(bool _DisplayRightToLeft);
		_variant_t _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		_variant_t _PrintOut();
	};

	//________________________________________________________Windows
	// {00020892-0000-0000-C000-000000000046}
	class Windows : public Com::Object
	{
	public:
		Windows();
		~Windows();
		Windows(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Windows& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t Arrange(Excel::XlArrangeStyle ArrangeStyle, _variant_t ActiveWorkbook, _variant_t SyncHorizontal, _variant_t SyncVertical);
		_variant_t Arrange(Excel::XlArrangeStyle ArrangeStyle);
		bool BreakSideBySide();
		bool CompareSideBySideWith(_variant_t WindowName);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Window get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void ResetPositionsSideBySide();
		//
		__declspec(property(get = get_SyncScrollingSideBySide, put = put_SyncScrollingSideBySide)) bool SyncScrollingSideBySide;
		bool get_SyncScrollingSideBySide();
		void put_SyncScrollingSideBySide(bool SyncScrollingSideBySide);
		Excel::Window get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________AppEvents
	// {00024413-0000-0000-C000-000000000046}
	class AppEvents : public Com::Object
	{
	public:
		AppEvents();
		~AppEvents();
		AppEvents(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AppEvents& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AfterCalculate();
		void NewWorkbook(Excel::WorkbookX& Wb);
		void ProtectedViewWindowActivate(Excel::ProtectedViewWindow& Pvw);
		void ProtectedViewWindowBeforeClose(Excel::ProtectedViewWindow& Pvw, Excel::XlProtectedViewCloseReason Reason, VARIANT_BOOL& Cancel);
		void ProtectedViewWindowBeforeEdit(Excel::ProtectedViewWindow& Pvw, VARIANT_BOOL& Cancel);
		void ProtectedViewWindowDeactivate(Excel::ProtectedViewWindow& Pvw);
		void ProtectedViewWindowOpen(Excel::ProtectedViewWindow& Pvw);
		void ProtectedViewWindowResize(Excel::ProtectedViewWindow& Pvw);
		void RemoteSheetBeforeDelete(Com::Object Sh);
		void RemoteSheetChange(Com::Object Sh, Excel::Range& Target);
		void RemoteSheetPivotTableUpdate(Com::Object Sh, Excel::PivotTable& Target);
		void RemoteWorkbookNewChart(Excel::WorkbookX& Wb, Excel::ChartX& Ch);
		void RemoteWorkbookNewSheet(Excel::WorkbookX& Wb, Com::Object Sh);
		void SheetActivate(Com::Object Sh);
		void SheetBeforeDelete(Com::Object Sh);
		void SheetBeforeDoubleClick(Com::Object Sh, Excel::Range& Target, VARIANT_BOOL& Cancel);
		void SheetBeforeRightClick(Com::Object Sh, Excel::Range& Target, VARIANT_BOOL& Cancel);
		void SheetCalculate(Com::Object Sh);
		void SheetChange(Com::Object Sh, Excel::Range& Target);
		void SheetDeactivate(Com::Object Sh);
		void SheetFollowHyperlink(Com::Object Sh, Excel::Hyperlink& Target);
		void SheetLensGalleryRenderComplete(Com::Object Sh);
		void SheetPivotTableAfterValueChange(Com::Object Sh, Excel::PivotTable& TargetPivotTable, Excel::Range& TargetRange);
		void SheetPivotTableBeforeAllocateChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel);
		void SheetPivotTableBeforeCommitChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel);
		void SheetPivotTableBeforeDiscardChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd);
		void SheetPivotTableUpdate(Com::Object Sh, Excel::PivotTable& Target);
		void SheetSelectionChange(Com::Object Sh, Excel::Range& Target);
		void SheetTableUpdate(Com::Object Sh, Excel::TableObject& Target);
		void WindowActivate(Excel::WorkbookX& Wb, Excel::Window& Wn);
		void WindowDeactivate(Excel::WorkbookX& Wb, Excel::Window& Wn);
		void WindowResize(Excel::WorkbookX& Wb, Excel::Window& Wn);
		void WorkbookActivate(Excel::WorkbookX& Wb);
		void WorkbookAddinInstall(Excel::WorkbookX& Wb);
		void WorkbookAddinUninstall(Excel::WorkbookX& Wb);
		void WorkbookAfterRemoteChange(Excel::WorkbookX& Wb);
		void WorkbookAfterSave(Excel::WorkbookX& Wb, bool Success);
		void WorkbookAfterXmlExport(Excel::WorkbookX& Wb, Excel::XmlMap& Map, wstring Url, Excel::XlXmlExportResult Result);
		void WorkbookAfterXmlImport(Excel::WorkbookX& Wb, Excel::XmlMap& Map, bool IsRefresh, Excel::XlXmlImportResult Result);
		void WorkbookBeforeClose(Excel::WorkbookX& Wb, VARIANT_BOOL& Cancel);
		void WorkbookBeforePrint(Excel::WorkbookX& Wb, VARIANT_BOOL& Cancel);
		void WorkbookBeforeRemoteChange(Excel::WorkbookX& Wb);
		void WorkbookBeforeSave(Excel::WorkbookX& Wb, bool SaveAsUI, VARIANT_BOOL& Cancel);
		void WorkbookBeforeXmlExport(Excel::WorkbookX& Wb, Excel::XmlMap& Map, wstring Url, VARIANT_BOOL& Cancel);
		void WorkbookBeforeXmlImport(Excel::WorkbookX& Wb, Excel::XmlMap& Map, wstring Url, bool IsRefresh, VARIANT_BOOL& Cancel);
		void WorkbookDeactivate(Excel::WorkbookX& Wb);
		void WorkbookModelChange(Excel::WorkbookX& Wb, Excel::ModelChanges& Changes);
		void WorkbookNewChart(Excel::WorkbookX& Wb, Excel::ChartX& Ch);
		void WorkbookNewSheet(Excel::WorkbookX& Wb, Com::Object Sh);
		void WorkbookOpen(Excel::WorkbookX& Wb);
		void WorkbookPivotTableCloseConnection(Excel::WorkbookX& Wb, Excel::PivotTable& Target);
		void WorkbookPivotTableOpenConnection(Excel::WorkbookX& Wb, Excel::PivotTable& Target);
		void WorkbookRowsetComplete(Excel::WorkbookX& Wb, wstring Description, wstring Sheet, bool Success);
		void WorkbookSync(Excel::WorkbookX& Wb, /* MsoSyncEventType*/ short SyncEventType);
	};

	//________________________________________________________WorksheetFunction
	// {00020845-0000-0000-C000-000000000046}
	class WorksheetFunction : public Com::Object
	{
	public:
		WorksheetFunction();
		~WorksheetFunction();
		WorksheetFunction(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WorksheetFunction& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		double AccrInt(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7);
		double AccrInt(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double AccrIntM(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double AccrIntM(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double Acos(double Arg1);
		double Acosh(double Arg1);
		double Acot(double Arg1);
		double Acoth(double Arg1);
		double Aggregate(double Arg1, double Arg2, Excel::Range& Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Aggregate(double Arg1, double Arg2, Excel::Range& Arg3);
		double AmorDegrc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7);
		double AmorDegrc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double AmorLinc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7);
		double AmorLinc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		bool And(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		bool And(_variant_t Arg1);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		double Arabic(wstring Arg1);
		wstring Asc(wstring Arg1);
		double Asin(double Arg1);
		double Asinh(double Arg1);
		double Atan2(double Arg1, double Arg2);
		double Atanh(double Arg1);
		double AveDev(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double AveDev(_variant_t Arg1);
		double Average(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Average(_variant_t Arg1);
		double AverageIf(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double AverageIf(Excel::Range& Arg1, _variant_t Arg2);
		double AverageIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29);
		double AverageIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3);
		wstring BahtText(double Arg1);
		wstring Base(double Arg1, double Arg2, _variant_t Arg3);
		wstring Base(double Arg1, double Arg2);
		double BesselI(_variant_t Arg1, _variant_t Arg2);
		double BesselJ(_variant_t Arg1, _variant_t Arg2);
		double BesselK(_variant_t Arg1, _variant_t Arg2);
		double BesselY(_variant_t Arg1, _variant_t Arg2);
		double BetaDist(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5);
		double BetaDist(double Arg1, double Arg2, double Arg3);
		double BetaInv(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5);
		double BetaInv(double Arg1, double Arg2, double Arg3);
		double Beta_Dist(double Arg1, double Arg2, double Arg3, bool Arg4, _variant_t Arg5, _variant_t Arg6);
		double Beta_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double Beta_Inv(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5);
		double Beta_Inv(double Arg1, double Arg2, double Arg3);
		wstring Bin2Dec(_variant_t Arg1);
		wstring Bin2Hex(_variant_t Arg1, _variant_t Arg2);
		wstring Bin2Hex(_variant_t Arg1);
		wstring Bin2Oct(_variant_t Arg1, _variant_t Arg2);
		wstring Bin2Oct(_variant_t Arg1);
		double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double Binom_Dist_Range(double Arg1, double Arg2, double Arg3, _variant_t Arg4);
		double Binom_Dist_Range(double Arg1, double Arg2, double Arg3);
		double Binom_Inv(double Arg1, double Arg2, double Arg3);
		double Bitand(double Arg1, double Arg2);
		double Bitlshift(double Arg1, double Arg2);
		double Bitor(double Arg1, double Arg2);
		double Bitrshift(double Arg1, double Arg2);
		double Bitxor(double Arg1, double Arg2);
		double Ceiling(double Arg1, double Arg2);
		double Ceiling_Math(double Arg1, _variant_t Arg2, _variant_t Arg3);
		double Ceiling_Math(double Arg1);
		double Ceiling_Precise(double Arg1, _variant_t Arg2);
		double Ceiling_Precise(double Arg1);
		double ChiDist(double Arg1, double Arg2);
		double ChiInv(double Arg1, double Arg2);
		double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);
		double ChiSq_Dist_RT(double Arg1, double Arg2);
		double ChiSq_Inv(double Arg1, double Arg2);
		double ChiSq_Inv_RT(double Arg1, double Arg2);
		double ChiSq_Test(_variant_t Arg1, _variant_t Arg2);
		double ChiTest(_variant_t Arg1, _variant_t Arg2);
		_variant_t Choose(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t Choose(_variant_t Arg1, _variant_t Arg2);
		wstring Clean(wstring Arg1);
		double Combin(double Arg1, double Arg2);
		double Combina(double Arg1, double Arg2);
		wstring Complex(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		wstring Complex(_variant_t Arg1, _variant_t Arg2);
		wstring Concat(_bstr_t& Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29);
		wstring Concat(_bstr_t& Arg1);
		double Confidence(double Arg1, double Arg2, double Arg3);
		double Confidence_Norm(double Arg1, double Arg2, double Arg3);
		double Confidence_T(double Arg1, double Arg2, double Arg3);
		double Convert(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double Correl(_variant_t Arg1, _variant_t Arg2);
		double Cosh(double Arg1);
		double Cot(double Arg1);
		double Coth(double Arg1);
		double Count(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Count(_variant_t Arg1);
		double CountA(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double CountA(_variant_t Arg1);
		double CountBlank(Excel::Range& Arg1);
		double CountIf(Excel::Range& Arg1, _variant_t Arg2);
		double CountIfs(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double CountIfs(Excel::Range& Arg1, _variant_t Arg2);
		double CoupDayBs(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double CoupDayBs(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double CoupDays(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double CoupDays(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double CoupDaysNc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double CoupDaysNc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double CoupNcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double CoupNcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double CoupNum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double CoupNum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double CoupPcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double CoupPcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double Covar(_variant_t Arg1, _variant_t Arg2);
		double Covariance_P(_variant_t Arg1, _variant_t Arg2);
		double Covariance_S(_variant_t Arg1, _variant_t Arg2);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		double CritBinom(double Arg1, double Arg2, double Arg3);
		double Csc(double Arg1);
		double Csch(double Arg1);
		double CumIPmt(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double CumPrinc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double DAverage(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DCount(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DCountA(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		_variant_t DGet(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DMax(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DMin(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DProduct(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DStDev(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DStDevP(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DSum(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DVar(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double DVarP(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double Days(_variant_t Arg1, _variant_t Arg2);
		double Days360(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double Days360(_variant_t Arg1, _variant_t Arg2);
		double Db(double Arg1, double Arg2, double Arg3, double Arg4, _variant_t Arg5);
		double Db(double Arg1, double Arg2, double Arg3, double Arg4);
		wstring Dbcs(wstring Arg1);
		double Ddb(double Arg1, double Arg2, double Arg3, double Arg4, _variant_t Arg5);
		double Ddb(double Arg1, double Arg2, double Arg3, double Arg4);
		wstring Dec2Bin(_variant_t Arg1, _variant_t Arg2);
		wstring Dec2Bin(_variant_t Arg1);
		wstring Dec2Hex(_variant_t Arg1, _variant_t Arg2);
		wstring Dec2Hex(_variant_t Arg1);
		wstring Dec2Oct(_variant_t Arg1, _variant_t Arg2);
		wstring Dec2Oct(_variant_t Arg1);
		double Decimal(wstring Arg1, double Arg2);
		double Degrees(double Arg1);
		double Delta(_variant_t Arg1, _variant_t Arg2);
		double Delta(_variant_t Arg1);
		double DevSq(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double DevSq(_variant_t Arg1);
		double Disc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double Disc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		wstring Dollar(double Arg1, _variant_t Arg2);
		wstring Dollar(double Arg1);
		double DollarDe(_variant_t Arg1, _variant_t Arg2);
		double DollarFr(_variant_t Arg1, _variant_t Arg2);
		_variant_t Dummy19(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t Dummy19(_variant_t Arg1);
		double Dummy21(double Arg1, double Arg2);
		double Duration(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double Duration(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double EDate(_variant_t Arg1, _variant_t Arg2);
		double Effect(_variant_t Arg1, _variant_t Arg2);
		_variant_t EncodeURL(wstring Arg1);
		double EoMonth(_variant_t Arg1, _variant_t Arg2);
		double Erf(_variant_t Arg1, _variant_t Arg2);
		double Erf(_variant_t Arg1);
		double ErfC(_variant_t Arg1);
		double ErfC_Precise(_variant_t Arg1);
		double Erf_Precise(_variant_t Arg1);
		double Even(double Arg1);
		double ExponDist(double Arg1, double Arg2, bool Arg3);
		double Expon_Dist(double Arg1, double Arg2, bool Arg3);
		double FDist(double Arg1, double Arg2, double Arg3);
		double FInv(double Arg1, double Arg2, double Arg3);
		double FTest(_variant_t Arg1, _variant_t Arg2);
		double FVSchedule(_variant_t Arg1, _variant_t Arg2);
		double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double F_Dist_RT(double Arg1, double Arg2, double Arg3);
		double F_Inv(double Arg1, double Arg2, double Arg3);
		double F_Inv_RT(double Arg1, double Arg2, double Arg3);
		double F_Test(_variant_t Arg1, _variant_t Arg2);
		double Fact(double Arg1);
		double FactDouble(_variant_t Arg1);
		_variant_t FilterXML(wstring Arg1, wstring Arg2);
		double Find(wstring Arg1, wstring Arg2, _variant_t Arg3);
		double Find(wstring Arg1, wstring Arg2);
		double FindB(wstring Arg1, wstring Arg2, _variant_t Arg3);
		double FindB(wstring Arg1, wstring Arg2);
		double Fisher(double Arg1);
		double FisherInv(double Arg1);
		wstring Fixed(double Arg1, _variant_t Arg2, _variant_t Arg3);
		wstring Fixed(double Arg1);
		double Floor(double Arg1, double Arg2);
		double Floor_Math(double Arg1, _variant_t Arg2, _variant_t Arg3);
		double Floor_Math(double Arg1);
		double Floor_Precise(double Arg1, _variant_t Arg2);
		double Floor_Precise(double Arg1);
		double Forecast(double Arg1, _variant_t Arg2, _variant_t Arg3);
		double Forecast_ETS(double Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double Forecast_ETS(double Arg1, _variant_t Arg2, _variant_t Arg3);
		double Forecast_ETS_ConfInt(double Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7);
		double Forecast_ETS_ConfInt(double Arg1, _variant_t Arg2, _variant_t Arg3);
		double Forecast_ETS_STAT(_variant_t Arg1, _variant_t Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double Forecast_ETS_STAT(_variant_t Arg1, _variant_t Arg2, double Arg3);
		double Forecast_ETS_Seasonality(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double Forecast_ETS_Seasonality(_variant_t Arg1, _variant_t Arg2);
		double Forecast_Linear(double Arg1, _variant_t Arg2, _variant_t Arg3);
		_variant_t Frequency(_variant_t Arg1, _variant_t Arg2);
		double Fv(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5);
		double Fv(double Arg1, double Arg2, double Arg3);
		double Gamma(double Arg1);
		double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double GammaInv(double Arg1, double Arg2, double Arg3);
		double GammaLn(double Arg1);
		double GammaLn_Precise(double Arg1);
		double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double Gamma_Inv(double Arg1, double Arg2, double Arg3);
		double Gauss(double Arg1);
		double Gcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Gcd(_variant_t Arg1);
		double GeStep(_variant_t Arg1, _variant_t Arg2);
		double GeStep(_variant_t Arg1);
		double GeoMean(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double GeoMean(_variant_t Arg1);
		_variant_t Growth(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t Growth(_variant_t Arg1);
		_variant_t HLookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t HLookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double HarMean(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double HarMean(_variant_t Arg1);
		wstring Hex2Bin(_variant_t Arg1, _variant_t Arg2);
		wstring Hex2Bin(_variant_t Arg1);
		wstring Hex2Dec(_variant_t Arg1);
		wstring Hex2Oct(_variant_t Arg1, _variant_t Arg2);
		wstring Hex2Oct(_variant_t Arg1);
		double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);
		double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);
		double ISO_Ceiling(double Arg1, _variant_t Arg2);
		double ISO_Ceiling(double Arg1);
		_variant_t IfError(_variant_t Arg1, _variant_t Arg2);
		_variant_t IfNa(_variant_t Arg1, _variant_t Arg2);
		wstring ImAbs(_variant_t Arg1);
		wstring ImArgument(_variant_t Arg1);
		wstring ImConjugate(_variant_t Arg1);
		wstring ImCos(_variant_t Arg1);
		wstring ImCosh(_variant_t Arg1);
		wstring ImCot(_variant_t Arg1);
		wstring ImCsc(_variant_t Arg1);
		wstring ImCsch(_variant_t Arg1);
		wstring ImDiv(_variant_t Arg1, _variant_t Arg2);
		wstring ImExp(_variant_t Arg1);
		wstring ImLn(_variant_t Arg1);
		wstring ImLog10(_variant_t Arg1);
		wstring ImLog2(_variant_t Arg1);
		wstring ImPower(_variant_t Arg1, _variant_t Arg2);
		wstring ImProduct(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		wstring ImProduct(_variant_t Arg1);
		double ImReal(_variant_t Arg1);
		wstring ImSec(_variant_t Arg1);
		wstring ImSech(_variant_t Arg1);
		wstring ImSin(_variant_t Arg1);
		wstring ImSinh(_variant_t Arg1);
		wstring ImSqrt(_variant_t Arg1);
		wstring ImSub(_variant_t Arg1, _variant_t Arg2);
		wstring ImSum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		wstring ImSum(_variant_t Arg1);
		wstring ImTan(_variant_t Arg1);
		double Imaginary(_variant_t Arg1);
		_variant_t Index(_variant_t Arg1, double Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t Index(_variant_t Arg1, double Arg2);
		double IntRate(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double IntRate(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double Intercept(_variant_t Arg1, _variant_t Arg2);
		double Ipmt(double Arg1, double Arg2, double Arg3, double Arg4, _variant_t Arg5, _variant_t Arg6);
		double Ipmt(double Arg1, double Arg2, double Arg3, double Arg4);
		double Irr(_variant_t Arg1, _variant_t Arg2);
		double Irr(_variant_t Arg1);
		bool IsErr(_variant_t Arg1);
		bool IsError(_variant_t Arg1);
		bool IsEven(_variant_t Arg1);
		bool IsFormula(Excel::Range& Arg1);
		bool IsLogical(_variant_t Arg1);
		bool IsNA(_variant_t Arg1);
		bool IsNonText(_variant_t Arg1);
		bool IsNumber(_variant_t Arg1);
		bool IsOdd(_variant_t Arg1);
		bool IsText(_variant_t Arg1);
		bool IsThaiDigit(wstring Arg1);
		double IsoWeekNum(double Arg1, _variant_t Arg2);
		double IsoWeekNum(double Arg1);
		double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);
		double Kurt(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Kurt(_variant_t Arg1);
		double Large(_variant_t Arg1, double Arg2);
		double Lcm(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Lcm(_variant_t Arg1);
		_variant_t LinEst(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t LinEst(_variant_t Arg1);
		double Ln(double Arg1);
		double Log(double Arg1, _variant_t Arg2);
		double Log(double Arg1);
		double Log10(double Arg1);
		_variant_t LogEst(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t LogEst(_variant_t Arg1);
		double LogInv(double Arg1, double Arg2, double Arg3);
		double LogNormDist(double Arg1, double Arg2, double Arg3);
		double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double LogNorm_Inv(double Arg1, double Arg2, double Arg3);
		_variant_t Lookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		_variant_t Lookup(_variant_t Arg1, _variant_t Arg2);
		double MDeterm(_variant_t Arg1);
		double MDuration(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double MDuration(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		_variant_t MInverse(_variant_t Arg1);
		double MIrr(_variant_t Arg1, double Arg2, double Arg3);
		_variant_t MMult(_variant_t Arg1, _variant_t Arg2);
		double MRound(_variant_t Arg1, _variant_t Arg2);
		double Match(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double Match(_variant_t Arg1, _variant_t Arg2);
		double Max(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Max(_variant_t Arg1);
		double MaxIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29);
		double MaxIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3);
		double Median(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Median(_variant_t Arg1);
		double Min(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Min(_variant_t Arg1);
		double MinIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29);
		double MinIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3);
		double Mode(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Mode(_variant_t Arg1);
		_variant_t Mode_Mult(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t Mode_Mult(_variant_t Arg1);
		double Mode_Sngl(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Mode_Sngl(_variant_t Arg1);
		double MultiNomial(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double MultiNomial(_variant_t Arg1);
		_variant_t Munit(double Arg1);
		double NPer(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5);
		double NPer(double Arg1, double Arg2, double Arg3);
		double NegBinomDist(double Arg1, double Arg2, double Arg3);
		double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double NetworkDays(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double NetworkDays(_variant_t Arg1, _variant_t Arg2);
		double NetworkDays_Intl(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double NetworkDays_Intl(_variant_t Arg1, _variant_t Arg2);
		double Nominal(_variant_t Arg1, _variant_t Arg2);
		double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double NormInv(double Arg1, double Arg2, double Arg3);
		double NormSDist(double Arg1);
		double NormSInv(double Arg1);
		double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double Norm_Inv(double Arg1, double Arg2, double Arg3);
		double Norm_S_Dist(double Arg1, bool Arg2);
		double Norm_S_Inv(double Arg1);
		double Npv(double Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Npv(double Arg1, _variant_t Arg2);
		double NumberValue(wstring Arg1, wstring Arg2, wstring Arg3);
		wstring Oct2Bin(_variant_t Arg1, _variant_t Arg2);
		wstring Oct2Bin(_variant_t Arg1);
		wstring Oct2Dec(_variant_t Arg1);
		wstring Oct2Hex(_variant_t Arg1, _variant_t Arg2);
		wstring Oct2Hex(_variant_t Arg1);
		double Odd(double Arg1);
		double OddFPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9);
		double OddFPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8);
		double OddFYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9);
		double OddFYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8);
		double OddLPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8);
		double OddLPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7);
		double OddLYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8);
		double OddLYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7);
		bool Or(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		bool Or(_variant_t Arg1);
		double PDuration(double Arg1, double Arg2, double Arg3);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		double Pearson(_variant_t Arg1, _variant_t Arg2);
		double PercentRank(_variant_t Arg1, double Arg2, _variant_t Arg3);
		double PercentRank(_variant_t Arg1, double Arg2);
		double PercentRank_Exc(_variant_t Arg1, double Arg2, _variant_t Arg3);
		double PercentRank_Exc(_variant_t Arg1, double Arg2);
		double PercentRank_Inc(_variant_t Arg1, double Arg2, _variant_t Arg3);
		double PercentRank_Inc(_variant_t Arg1, double Arg2);
		double Percentile(_variant_t Arg1, double Arg2);
		double Percentile_Exc(_variant_t Arg1, double Arg2);
		double Percentile_Inc(_variant_t Arg1, double Arg2);
		double Permut(double Arg1, double Arg2);
		double Permutationa(double Arg1, double Arg2);
		double Phi(double Arg1);
		wstring Phonetic(Excel::Range& Arg1);
		double Pi();
		double Pmt(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5);
		double Pmt(double Arg1, double Arg2, double Arg3);
		double Poisson(double Arg1, double Arg2, bool Arg3);
		double Poisson_Dist(double Arg1, double Arg2, bool Arg3);
		double Power(double Arg1, double Arg2);
		double Ppmt(double Arg1, double Arg2, double Arg3, double Arg4, _variant_t Arg5, _variant_t Arg6);
		double Ppmt(double Arg1, double Arg2, double Arg3, double Arg4);
		double Price(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7);
		double Price(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double PriceDisc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double PriceDisc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double PriceMat(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double PriceMat(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double Prob(_variant_t Arg1, _variant_t Arg2, double Arg3, _variant_t Arg4);
		double Prob(_variant_t Arg1, _variant_t Arg2, double Arg3);
		double Product(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Product(_variant_t Arg1);
		wstring Proper(wstring Arg1);
		double Pv(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5);
		double Pv(double Arg1, double Arg2, double Arg3);
		double Quartile(_variant_t Arg1, double Arg2);
		double Quartile_Exc(_variant_t Arg1, double Arg2);
		double Quartile_Inc(_variant_t Arg1, double Arg2);
		double Quotient(_variant_t Arg1, _variant_t Arg2);
		double RSq(_variant_t Arg1, _variant_t Arg2);
		_variant_t RTD(_variant_t progID, _variant_t server, _variant_t topic1, _variant_t topic2, _variant_t topic3, _variant_t topic4, _variant_t topic5, _variant_t topic6, _variant_t topic7, _variant_t topic8, _variant_t topic9, _variant_t topic10, _variant_t topic11, _variant_t topic12, _variant_t topic13, _variant_t topic14, _variant_t topic15, _variant_t topic16, _variant_t topic17, _variant_t topic18, _variant_t topic19, _variant_t topic20, _variant_t topic21, _variant_t topic22, _variant_t topic23, _variant_t topic24, _variant_t topic25, _variant_t topic26, _variant_t topic27, _variant_t topic28);
		_variant_t RTD(_variant_t progID, _variant_t server, _variant_t topic1);
		double Radians(double Arg1);
		double RandBetween(_variant_t Arg1, _variant_t Arg2);
		double Rank(double Arg1, Excel::Range& Arg2, _variant_t Arg3);
		double Rank(double Arg1, Excel::Range& Arg2);
		double Rank_Avg(double Arg1, Excel::Range& Arg2, _variant_t Arg3);
		double Rank_Avg(double Arg1, Excel::Range& Arg2);
		double Rank_Eq(double Arg1, Excel::Range& Arg2, _variant_t Arg3);
		double Rank_Eq(double Arg1, Excel::Range& Arg2);
		double Rate(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double Rate(double Arg1, double Arg2, double Arg3);
		double Received(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double Received(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		wstring Replace(wstring Arg1, double Arg2, double Arg3, wstring Arg4);
		wstring ReplaceB(wstring Arg1, double Arg2, double Arg3, wstring Arg4);
		wstring Rept(wstring Arg1, double Arg2);
		wstring Roman(double Arg1, _variant_t Arg2);
		wstring Roman(double Arg1);
		double Round(double Arg1, double Arg2);
		double RoundBahtDown(double Arg1);
		double RoundBahtUp(double Arg1);
		double RoundDown(double Arg1, double Arg2);
		double RoundUp(double Arg1, double Arg2);
		double Rri(double Arg1, double Arg2, double Arg3);
		double Search(wstring Arg1, wstring Arg2, _variant_t Arg3);
		double Search(wstring Arg1, wstring Arg2);
		double SearchB(wstring Arg1, wstring Arg2, _variant_t Arg3);
		double SearchB(wstring Arg1, wstring Arg2);
		double Sec(double Arg1);
		double Sech(double Arg1);
		double SeriesSum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double Sinh(double Arg1);
		double Skew(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Skew(_variant_t Arg1);
		double Skew_p(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Skew_p(_variant_t Arg1);
		double Sln(double Arg1, double Arg2, double Arg3);
		double Slope(_variant_t Arg1, _variant_t Arg2);
		double Small(_variant_t Arg1, double Arg2);
		double SqrtPi(_variant_t Arg1);
		double StDev(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double StDev(_variant_t Arg1);
		double StDevP(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double StDevP(_variant_t Arg1);
		double StDev_P(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double StDev_P(_variant_t Arg1);
		double StDev_S(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double StDev_S(_variant_t Arg1);
		double StEyx(_variant_t Arg1, _variant_t Arg2);
		double Standardize(double Arg1, double Arg2, double Arg3);
		wstring Substitute(wstring Arg1, wstring Arg2, wstring Arg3, _variant_t Arg4);
		wstring Substitute(wstring Arg1, wstring Arg2, wstring Arg3);
		double Subtotal(double Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Subtotal(double Arg1, Excel::Range& Arg2);
		double Sum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Sum(_variant_t Arg1);
		double SumIf(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3);
		double SumIf(Excel::Range& Arg1, _variant_t Arg2);
		double SumIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29);
		double SumIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3);
		double SumProduct(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double SumProduct(_variant_t Arg1);
		double SumSq(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double SumSq(_variant_t Arg1);
		double SumX2MY2(_variant_t Arg1, _variant_t Arg2);
		double SumX2PY2(_variant_t Arg1, _variant_t Arg2);
		double SumXMY2(_variant_t Arg1, _variant_t Arg2);
		double Syd(double Arg1, double Arg2, double Arg3, double Arg4);
		double TBillEq(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double TBillEq(_variant_t Arg1, _variant_t Arg2);
		double TBillPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double TBillPrice(_variant_t Arg1, _variant_t Arg2);
		double TBillYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double TBillYield(_variant_t Arg1, _variant_t Arg2);
		double TDist(double Arg1, double Arg2, double Arg3);
		double TInv(double Arg1, double Arg2);
		double TTest(_variant_t Arg1, _variant_t Arg2, double Arg3, double Arg4);
		double T_Dist(double Arg1, double Arg2, bool Arg3);
		double T_Dist_2T(double Arg1, double Arg2);
		double T_Dist_RT(double Arg1, double Arg2);
		double T_Inv(double Arg1, double Arg2);
		double T_Inv_2T(double Arg1, double Arg2);
		double T_Test(_variant_t Arg1, _variant_t Arg2, double Arg3, double Arg4);
		double Tanh(double Arg1);
		wstring Text(_variant_t Arg1, wstring Arg2);
		wstring TextJoin(_bstr_t& Arg1, bool Arg2, _bstr_t& Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29);
		wstring TextJoin(_bstr_t& Arg1, bool Arg2, _bstr_t& Arg3);
		wstring ThaiDayOfWeek(double Arg1);
		wstring ThaiDigit(wstring Arg1);
		wstring ThaiMonthOfYear(double Arg1);
		wstring ThaiNumSound(double Arg1);
		wstring ThaiNumString(double Arg1);
		double ThaiStringLength(wstring Arg1);
		double ThaiYear(double Arg1);
		_variant_t Transpose(_variant_t Arg1);
		_variant_t Trend(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t Trend(_variant_t Arg1);
		wstring Trim(wstring Arg1);
		double TrimMean(_variant_t Arg1, double Arg2);
		wstring USDollar(double Arg1, double Arg2);
		wstring Unichar(double Arg1);
		double Unicode(wstring Arg1);
		_variant_t VLookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t VLookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double Var(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Var(_variant_t Arg1);
		double VarP(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double VarP(_variant_t Arg1);
		double Var_P(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Var_P(_variant_t Arg1);
		double Var_S(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		double Var_S(_variant_t Arg1);
		double Vdb(double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, _variant_t Arg6, _variant_t Arg7);
		double Vdb(double Arg1, double Arg2, double Arg3, double Arg4, double Arg5);
		_variant_t WebService(wstring Arg1);
		double WeekNum(_variant_t Arg1, _variant_t Arg2);
		double WeekNum(_variant_t Arg1);
		double Weekday(_variant_t Arg1, _variant_t Arg2);
		double Weekday(_variant_t Arg1);
		double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);
		double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);
		double WorkDay(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double WorkDay(_variant_t Arg1, _variant_t Arg2);
		double WorkDay_Intl(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double WorkDay_Intl(_variant_t Arg1, _variant_t Arg2);
		double Xirr(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double Xirr(_variant_t Arg1, _variant_t Arg2);
		double Xnpv(_variant_t Arg1, _variant_t Arg2);
		bool Xor(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		bool Xor(_variant_t Arg1);
		double YearFrac(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3);
		double YearFrac(_variant_t Arg1, _variant_t Arg2);
		double YieldDisc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double YieldDisc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		double YieldMat(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6);
		double YieldMat(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5);
		double ZTest(_variant_t Arg1, double Arg2, _variant_t Arg3);
		double ZTest(_variant_t Arg1, double Arg2);
		double Z_Test(_variant_t Arg1, double Arg2, _variant_t Arg3);
		double Z_Test(_variant_t Arg1, double Arg2);
		_variant_t _WSFunction(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t _WSFunction();
	};

	//________________________________________________________Range
	// {00020846-0000-0000-C000-000000000046}
	class Range : public Com::Object
	{
	public:
		Range();
		~Range();
		Range(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Range& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		_variant_t Activate();
		Excel::Comment AddComment(_variant_t Text);
		Excel::Comment AddComment();
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) _variant_t AddIndent;
		_variant_t get_AddIndent();
		void put_AddIndent(_variant_t AddIndent);
		wstring get_Address(_variant_t RowAbsolute, _variant_t ColumnAbsolute, Excel::XlReferenceStyle ReferenceStyle, _variant_t External, _variant_t RelativeTo);
		wstring get_Address(_variant_t RowAbsolute, _variant_t ColumnAbsolute, Excel::XlReferenceStyle ReferenceStyle);
		wstring get_AddressLocal(_variant_t RowAbsolute, _variant_t ColumnAbsolute, Excel::XlReferenceStyle ReferenceStyle, _variant_t External, _variant_t RelativeTo);
		wstring get_AddressLocal(_variant_t RowAbsolute, _variant_t ColumnAbsolute, Excel::XlReferenceStyle ReferenceStyle);
		_variant_t AdvancedFilter(Excel::XlFilterAction Action, _variant_t CriteriaRange, _variant_t CopyToRange, _variant_t Unique);
		_variant_t AdvancedFilter(Excel::XlFilterAction Action);
		void AllocateChanges();
		//
		__declspec(property(get = get_AllowEdit)) bool AllowEdit;
		bool get_AllowEdit();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t ApplyNames(_variant_t Names, _variant_t IgnoreRelativeAbsolute, _variant_t UseRowColumnNames, _variant_t OmitColumn, _variant_t OmitRow, Excel::XlApplyNamesOrder Order, _variant_t AppendLast);
		_variant_t ApplyNames(_variant_t Names, _variant_t IgnoreRelativeAbsolute, _variant_t UseRowColumnNames, _variant_t OmitColumn, _variant_t OmitRow, Excel::XlApplyNamesOrder Order);
		_variant_t ApplyOutlineStyles();
		//
		__declspec(property(get = get_Areas)) Excel::Areas AreasX;
		Excel::Areas get_Areas();
		wstring AutoComplete(wstring String);
		_variant_t AutoFill(Excel::Range& Destination, Excel::XlAutoFillType Type);
		_variant_t AutoFilter(_variant_t Field, _variant_t Criteria1, Excel::XlAutoFilterOperator Operator, _variant_t Criteria2, _variant_t VisibleDropDown);
		_variant_t AutoFilter(_variant_t Field, _variant_t Criteria1, Excel::XlAutoFilterOperator Operator);
		_variant_t AutoFit();
		_variant_t AutoFormat(Excel::XlRangeAutoFormat Format, _variant_t Number, _variant_t Font, _variant_t Alignment, _variant_t Border, _variant_t Pattern, _variant_t Width);
		_variant_t AutoFormat(Excel::XlRangeAutoFormat Format);
		_variant_t AutoOutline();
		_variant_t BorderAround(_variant_t LineStyle, Excel::XlBorderWeight Weight, Excel::XlColorIndex ColorIndex, _variant_t Color, _variant_t ThemeColor);
		_variant_t BorderAround(_variant_t LineStyle, Excel::XlBorderWeight Weight, Excel::XlColorIndex ColorIndex);
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		_variant_t Calculate();
		_variant_t CalculateRowMajorOrder();
		//
		__declspec(property(get = get_Cells)) Excel::Range Cells;
		Excel::Range get_Cells();
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Clear();
		void ClearComments();
		_variant_t ClearContents();
		_variant_t ClearFormats();
		void ClearHyperlinks();
		_variant_t ClearNotes();
		_variant_t ClearOutline();
		//
		__declspec(property(get = get_Column)) long Column;
		long get_Column();
		Excel::Range ColumnDifferences(_variant_t Comparison);
		//
		__declspec(property(get = get_ColumnWidth, put = put_ColumnWidth)) _variant_t ColumnWidth;
		_variant_t get_ColumnWidth();
		void put_ColumnWidth(_variant_t ColumnWidth);
		//
		__declspec(property(get = get_Columns)) Excel::Range Columns;
		Excel::Range get_Columns();
		//
		__declspec(property(get = get_Comment)) Excel::Comment CommentX;
		Excel::Comment get_Comment();
		_variant_t Consolidate(_variant_t Sources, _variant_t Function, _variant_t TopRow, _variant_t LeftColumn, _variant_t CreateLinks);
		_variant_t Consolidate();
		_variant_t Copy(_variant_t Destination);
		_variant_t Copy();
		long CopyFromRecordset(IUnknownPtr Data, _variant_t MaxRows, _variant_t MaxColumns);
		long CopyFromRecordset(IUnknownPtr Data);
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_CountLarge)) _variant_t CountLarge;
		_variant_t get_CountLarge();
		_variant_t CreateNames(_variant_t Top, _variant_t Left, _variant_t Bottom, _variant_t Right);
		_variant_t CreateNames();
		_variant_t CreatePublisher(_variant_t Edition, Excel::XlPictureAppearance Appearance, _variant_t ContainsPICT, _variant_t ContainsBIFF, _variant_t ContainsRTF, _variant_t ContainsVALU);
		_variant_t CreatePublisher(_variant_t Edition, Excel::XlPictureAppearance Appearance);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CurrentArray)) Excel::Range CurrentArray;
		Excel::Range get_CurrentArray();
		//
		__declspec(property(get = get_CurrentRegion)) Excel::Range CurrentRegion;
		Excel::Range get_CurrentRegion();
		_variant_t Cut(_variant_t Destination);
		_variant_t Cut();
		_variant_t DataSeries(_variant_t Rowcol, Excel::XlDataSeriesType Type, Excel::XlDataSeriesDate Date, _variant_t Step, _variant_t Stop, _variant_t Trend);
		_variant_t DataSeries(_variant_t Rowcol, Excel::XlDataSeriesType Type, Excel::XlDataSeriesDate Date);
		_variant_t Delete(_variant_t Shift);
		_variant_t Delete();
		//
		__declspec(property(get = get_Dependents)) Excel::Range Dependents;
		Excel::Range get_Dependents();
		_variant_t DialogBox_();
		//
		__declspec(property(get = get_DirectDependents)) Excel::Range DirectDependents;
		Excel::Range get_DirectDependents();
		//
		__declspec(property(get = get_DirectPrecedents)) Excel::Range DirectPrecedents;
		Excel::Range get_DirectPrecedents();
		void Dirty();
		void DiscardChanges();
		//
		__declspec(property(get = get_DisplayFormat)) Excel::DisplayFormat DisplayFormatX;
		Excel::DisplayFormat get_DisplayFormat();
		//
		__declspec(property(get = get_Dummy28)) _variant_t Dummy28;
		_variant_t get_Dummy28();
		void Dummy29();
		_variant_t EditionOptions(Excel::XlEditionType Type, Excel::XlEditionOptionsOption Option, _variant_t Name, _variant_t Reference, Excel::XlPictureAppearance Appearance, Excel::XlPictureAppearance ChartSize, _variant_t Format);
		_variant_t EditionOptions(Excel::XlEditionType Type, Excel::XlEditionOptionsOption Option, _variant_t Name, _variant_t Reference, Excel::XlPictureAppearance Appearance, Excel::XlPictureAppearance ChartSize);
		Excel::Range get_End(Excel::XlDirection Direction);
		//
		__declspec(property(get = get_EntireColumn)) Excel::Range EntireColumn;
		Excel::Range get_EntireColumn();
		//
		__declspec(property(get = get_EntireRow)) Excel::Range EntireRow;
		Excel::Range get_EntireRow();
		//
		__declspec(property(get = get_Errors)) Excel::Errors ErrorsX;
		Excel::Errors get_Errors();
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity);
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		_variant_t FillDown();
		_variant_t FillLeft();
		_variant_t FillRight();
		_variant_t FillUp();
		Excel::Range Find(_variant_t What, _variant_t After, _variant_t LookIn, _variant_t LookAt, _variant_t SearchOrder, Excel::XlSearchDirection SearchDirection, _variant_t MatchCase, _variant_t MatchByte, _variant_t SearchFormat);
		Excel::Range Find(_variant_t What, _variant_t After, _variant_t LookIn, _variant_t LookAt, _variant_t SearchOrder, Excel::XlSearchDirection SearchDirection);
		Excel::Range FindNext(_variant_t After);
		Excel::Range FindNext();
		Excel::Range FindPrevious(_variant_t After);
		Excel::Range FindPrevious();
		void FlashFill();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_FormatConditions)) Excel::FormatConditions FormatConditionsX;
		Excel::FormatConditions get_FormatConditions();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) _variant_t Formula;
		_variant_t get_Formula();
		void put_Formula(_variant_t Formula);
		//
		__declspec(property(get = get_FormulaArray, put = put_FormulaArray)) _variant_t FormulaArray;
		_variant_t get_FormulaArray();
		void put_FormulaArray(_variant_t FormulaArray);
		//
		__declspec(property(get = get_FormulaHidden, put = put_FormulaHidden)) _variant_t FormulaHidden;
		_variant_t get_FormulaHidden();
		void put_FormulaHidden(_variant_t FormulaHidden);
		//
		__declspec(property(get = get_FormulaLabel, put = put_FormulaLabel)) Excel::XlFormulaLabel FormulaLabel;
		Excel::XlFormulaLabel get_FormulaLabel();
		void put_FormulaLabel(Excel::XlFormulaLabel FormulaLabel);
		//
		__declspec(property(get = get_FormulaLocal, put = put_FormulaLocal)) _variant_t FormulaLocal;
		_variant_t get_FormulaLocal();
		void put_FormulaLocal(_variant_t FormulaLocal);
		//
		__declspec(property(get = get_FormulaR1C1, put = put_FormulaR1C1)) _variant_t FormulaR1C1;
		_variant_t get_FormulaR1C1();
		void put_FormulaR1C1(_variant_t FormulaR1C1);
		//
		__declspec(property(get = get_FormulaR1C1Local, put = put_FormulaR1C1Local)) _variant_t FormulaR1C1Local;
		_variant_t get_FormulaR1C1Local();
		void put_FormulaR1C1Local(_variant_t FormulaR1C1Local);
		_variant_t FunctionWizard();
		bool GoalSeek(_variant_t Goal, Excel::Range& ChangingCell);
		_variant_t Group(_variant_t Start, _variant_t End, _variant_t By, _variant_t Periods);
		_variant_t Group();
		//
		__declspec(property(get = get_HasArray)) _variant_t HasArray;
		_variant_t get_HasArray();
		//
		__declspec(property(get = get_HasFormula)) _variant_t HasFormula;
		_variant_t get_HasFormula();
		//
		__declspec(property(get = get_Height)) _variant_t Height;
		_variant_t get_Height();
		//
		__declspec(property(get = get_Hidden, put = put_Hidden)) _variant_t Hidden;
		_variant_t get_Hidden();
		void put_Hidden(_variant_t Hidden);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Hyperlinks)) Excel::Hyperlinks HyperlinksX;
		Excel::Hyperlinks get_Hyperlinks();
		//
		__declspec(property(get = get_ID, put = put_ID)) wstring ID;
		wstring get_ID();
		void put_ID(wstring ID);
		//
		__declspec(property(get = get_IndentLevel, put = put_IndentLevel)) _variant_t IndentLevel;
		_variant_t get_IndentLevel();
		void put_IndentLevel(_variant_t IndentLevel);
		_variant_t Insert(_variant_t Shift, _variant_t CopyOrigin);
		_variant_t Insert();
		void InsertIndent(long InsertAmount);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		_variant_t get_Item(_variant_t RowIndex, _variant_t ColumnIndex);
		_variant_t get_Item(_variant_t RowIndex);
		void put_Item(_variant_t Item, _variant_t RowIndex, _variant_t ColumnIndex);
		void put_Item(_variant_t Item, _variant_t RowIndex);
		_variant_t Justify();
		//
		__declspec(property(get = get_Left)) _variant_t Left;
		_variant_t get_Left();
		//
		__declspec(property(get = get_ListHeaderRows)) long ListHeaderRows;
		long get_ListHeaderRows();
		_variant_t ListNames();
		//
		__declspec(property(get = get_ListObject)) Excel::ListObject ListObjectX;
		Excel::ListObject get_ListObject();
		//
		__declspec(property(get = get_LocationInTable)) Excel::XlLocationInTable LocationInTable;
		Excel::XlLocationInTable get_LocationInTable();
		//
		__declspec(property(get = get_Locked, put = put_Locked)) _variant_t Locked;
		_variant_t get_Locked();
		void put_Locked(_variant_t Locked);
		//
		__declspec(property(get = get_MDX)) wstring MDX;
		wstring get_MDX();
		void Merge(_variant_t Across);
		void Merge();
		//
		__declspec(property(get = get_MergeArea)) Excel::Range MergeArea;
		Excel::Range get_MergeArea();
		//
		__declspec(property(get = get_MergeCells, put = put_MergeCells)) _variant_t MergeCells;
		_variant_t get_MergeCells();
		void put_MergeCells(_variant_t MergeCells);
		//
		__declspec(property(get = get_Name, put = put_Name)) _variant_t NameX;
		_variant_t get_Name();
		void put_Name(_variant_t Name);
		_variant_t NavigateArrow(_variant_t TowardPrecedent, _variant_t ArrowNumber, _variant_t LinkNumber);
		_variant_t NavigateArrow();
		//
		__declspec(property(get = get_Next)) Excel::Range Next;
		Excel::Range get_Next();
		wstring NoteText(_variant_t Text, _variant_t Start, _variant_t Length);
		wstring NoteText();
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) _variant_t NumberFormat;
		_variant_t get_NumberFormat();
		void put_NumberFormat(_variant_t NumberFormat);
		//
		__declspec(property(get = get_NumberFormatLocal, put = put_NumberFormatLocal)) _variant_t NumberFormatLocal;
		_variant_t get_NumberFormatLocal();
		void put_NumberFormatLocal(_variant_t NumberFormatLocal);
		Excel::Range get_Offset(_variant_t RowOffset, _variant_t ColumnOffset);
		Excel::Range get_Offset();
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_OutlineLevel, put = put_OutlineLevel)) _variant_t OutlineLevel;
		_variant_t get_OutlineLevel();
		void put_OutlineLevel(_variant_t OutlineLevel);
		//
		__declspec(property(get = get_PageBreak, put = put_PageBreak)) long PageBreak;
		long get_PageBreak();
		void put_PageBreak(long PageBreak);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Parse(_variant_t ParseLine, _variant_t Destination);
		_variant_t Parse();
		_variant_t PasteSpecial(Excel::XlPasteType Paste, Excel::XlPasteSpecialOperation Operation, _variant_t SkipBlanks, _variant_t Transpose);
		_variant_t PasteSpecial(Excel::XlPasteType Paste, Excel::XlPasteSpecialOperation Operation);
		//
		__declspec(property(get = get_Phonetic)) Excel::Phonetic PhoneticX;
		Excel::Phonetic get_Phonetic();
		//
		__declspec(property(get = get_Phonetics)) Excel::Phonetics PhoneticsX;
		Excel::Phonetics get_Phonetics();
		//
		__declspec(property(get = get_PivotCell)) Excel::PivotCell PivotCellX;
		Excel::PivotCell get_PivotCell();
		//
		__declspec(property(get = get_PivotField)) Excel::PivotField PivotFieldX;
		Excel::PivotField get_PivotField();
		//
		__declspec(property(get = get_PivotItem)) Excel::PivotItem PivotItemX;
		Excel::PivotItem get_PivotItem();
		//
		__declspec(property(get = get_PivotTable)) Excel::PivotTable PivotTableX;
		Excel::PivotTable get_PivotTable();
		//
		__declspec(property(get = get_Precedents)) Excel::Range Precedents;
		Excel::Range get_Precedents();
		//
		__declspec(property(get = get_PrefixCharacter)) _variant_t PrefixCharacter;
		_variant_t get_PrefixCharacter();
		//
		__declspec(property(get = get_Previous)) Excel::Range Previous;
		Excel::Range get_Previous();
		_variant_t PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		_variant_t PrintOut();
		_variant_t PrintPreview(_variant_t EnableChanges);
		_variant_t PrintPreview();
		//
		__declspec(property(get = get_QueryTable)) Excel::QueryTableX QueryTable;
		Excel::QueryTableX get_QueryTable();
		Excel::Range get_Range(_variant_t Cell1, _variant_t Cell2);
		Excel::Range get_Range(_variant_t Cell1);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		void RemoveDuplicates(_variant_t Columns, Excel::XlYesNoGuess Header);
		_variant_t RemoveSubtotal();
		bool Replace(_variant_t What, _variant_t Replacement, _variant_t LookAt, _variant_t SearchOrder, _variant_t MatchCase, _variant_t MatchByte, _variant_t SearchFormat, _variant_t ReplaceFormat);
		bool Replace(_variant_t What, _variant_t Replacement);
		Excel::Range get_Resize(_variant_t RowSize, _variant_t ColumnSize);
		Excel::Range get_Resize();
		//
		__declspec(property(get = get_Row)) long Row;
		long get_Row();
		Excel::Range RowDifferences(_variant_t Comparison);
		//
		__declspec(property(get = get_RowHeight, put = put_RowHeight)) _variant_t RowHeight;
		_variant_t get_RowHeight();
		void put_RowHeight(_variant_t RowHeight);
		//
		__declspec(property(get = get_Rows)) Excel::Range Rows;
		Excel::Range get_Rows();
		_variant_t Run(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t Run();
		_variant_t Select();
		//
		__declspec(property(get = get_ServerActions)) Excel::Actions ServerActions;
		Excel::Actions get_ServerActions();
		void SetPhonetic();
		_variant_t Show();
		_variant_t ShowDependents(_variant_t Remove);
		_variant_t ShowDependents();
		//
		__declspec(property(get = get_ShowDetail, put = put_ShowDetail)) _variant_t ShowDetail;
		_variant_t get_ShowDetail();
		void put_ShowDetail(_variant_t ShowDetail);
		_variant_t ShowErrors();
		_variant_t ShowPrecedents(_variant_t Remove);
		_variant_t ShowPrecedents();
		//
		__declspec(property(get = get_ShrinkToFit, put = put_ShrinkToFit)) _variant_t ShrinkToFit;
		_variant_t get_ShrinkToFit();
		void put_ShrinkToFit(_variant_t ShrinkToFit);
		//
		__declspec(property(get = get_SmartTags)) Excel::SmartTags SmartTagsX;
		Excel::SmartTags get_SmartTags();
		_variant_t Sort(_variant_t Key1, Excel::XlSortOrder Order1, _variant_t Key2, _variant_t Type, Excel::XlSortOrder Order2, _variant_t Key3, Excel::XlSortOrder Order3, Excel::XlYesNoGuess Header, _variant_t OrderCustom, _variant_t MatchCase, Excel::XlSortOrientation Orientation, Excel::XlSortMethod SortMethod, Excel::XlSortDataOption DataOption1, Excel::XlSortDataOption DataOption2, Excel::XlSortDataOption DataOption3);
		_variant_t SortSpecial(Excel::XlSortMethod SortMethod, _variant_t Key1, Excel::XlSortOrder Order1, _variant_t Type, _variant_t Key2, Excel::XlSortOrder Order2, _variant_t Key3, Excel::XlSortOrder Order3, Excel::XlYesNoGuess Header, _variant_t OrderCustom, _variant_t MatchCase, Excel::XlSortOrientation Orientation, Excel::XlSortDataOption DataOption1, Excel::XlSortDataOption DataOption2, Excel::XlSortDataOption DataOption3);
		//
		__declspec(property(get = get_SoundNote)) Excel::SoundNote SoundNoteX;
		Excel::SoundNote get_SoundNote();
		//
		__declspec(property(get = get_SparklineGroups)) Excel::SparklineGroups SparklineGroupsX;
		Excel::SparklineGroups get_SparklineGroups();
		void Speak(_variant_t SpeakDirection, _variant_t SpeakFormulas);
		void Speak();
		Excel::Range SpecialCells(Excel::XlCellType Type, _variant_t Value);
		Excel::Range SpecialCells(Excel::XlCellType Type);
		//
		__declspec(property(get = get_Style, put = put_Style)) _variant_t StyleX;
		_variant_t get_Style();
		void put_Style(_variant_t Style);
		_variant_t SubscribeTo(wstring Edition, Excel::XlSubscribeToFormat Format);
		_variant_t Subtotal(long GroupBy, Excel::XlConsolidationFunction Function, _variant_t TotalList, _variant_t Replace, _variant_t PageBreaks, Excel::XlSummaryRow SummaryBelowData);
		//
		__declspec(property(get = get_Summary)) _variant_t Summary;
		_variant_t get_Summary();
		_variant_t Table(_variant_t RowInput, _variant_t ColumnInput);
		_variant_t Table();
		//
		__declspec(property(get = get_Text)) _variant_t Text;
		_variant_t get_Text();
		_variant_t TextToColumns(_variant_t Destination, Excel::XlTextParsingType DataType, Excel::XlTextQualifier TextQualifier, _variant_t ConsecutiveDelimiter, _variant_t Tab, _variant_t Semicolon, _variant_t Comma, _variant_t Space, _variant_t Other, _variant_t OtherChar, _variant_t FieldInfo, _variant_t DecimalSeparator, _variant_t ThousandsSeparator, _variant_t TrailingMinusNumbers);
		_variant_t TextToColumns(_variant_t Destination, Excel::XlTextParsingType DataType, Excel::XlTextQualifier TextQualifier);
		//
		__declspec(property(get = get_Top)) _variant_t Top;
		_variant_t get_Top();
		void UnMerge();
		_variant_t Ungroup();
		//
		__declspec(property(get = get_UseStandardHeight, put = put_UseStandardHeight)) _variant_t UseStandardHeight;
		_variant_t get_UseStandardHeight();
		void put_UseStandardHeight(_variant_t UseStandardHeight);
		//
		__declspec(property(get = get_UseStandardWidth, put = put_UseStandardWidth)) _variant_t UseStandardWidth;
		_variant_t get_UseStandardWidth();
		void put_UseStandardWidth(_variant_t UseStandardWidth);
		//
		__declspec(property(get = get_Validation)) Excel::Validation ValidationX;
		Excel::Validation get_Validation();
		_variant_t get_Value(_variant_t RangeValueDataType);
		_variant_t get_Value();
		void put_Value(_variant_t Value, _variant_t RangeValueDataType);
		void put_Value(_variant_t Value);
		//
		__declspec(property(get = get_Value2, put = put_Value2)) _variant_t Value2;
		_variant_t get_Value2();
		void put_Value2(_variant_t Value2);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Width)) _variant_t Width;
		_variant_t get_Width();
		//
		__declspec(property(get = get_Worksheet)) Excel::WorksheetX Worksheet;
		Excel::WorksheetX get_Worksheet();
		//
		__declspec(property(get = get_WrapText, put = put_WrapText)) _variant_t WrapText;
		_variant_t get_WrapText();
		void put_WrapText(_variant_t WrapText);
		//
		__declspec(property(get = get_XPath)) Excel::XPath XPathX;
		Excel::XPath get_XPath();
		_variant_t _BorderAround(_variant_t LineStyle, Excel::XlBorderWeight Weight, Excel::XlColorIndex ColorIndex, _variant_t Color);
		_variant_t _BorderAround(_variant_t LineStyle, Excel::XlBorderWeight Weight, Excel::XlColorIndex ColorIndex);
		_variant_t get__Default(_variant_t RowIndex, _variant_t ColumnIndex);
		_variant_t get__Default();
		void put__Default(_variant_t _Default, _variant_t RowIndex, _variant_t ColumnIndex);
		void put__Default(_variant_t _Default);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
		_variant_t _PasteSpecial(Excel::XlPasteType Paste, Excel::XlPasteSpecialOperation Operation, _variant_t SkipBlanks, _variant_t Transpose);
		_variant_t _PasteSpecial(Excel::XlPasteType Paste, Excel::XlPasteSpecialOperation Operation);
		_variant_t _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		_variant_t _PrintOut();
		_variant_t __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		_variant_t __PrintOut();
	};

	//________________________________________________________ChartEvents
	// {0002440F-0000-0000-C000-000000000046}
	class ChartEvents : public Com::Object
	{
	public:
		ChartEvents();
		~ChartEvents();
		ChartEvents(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartEvents& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		void BeforeDoubleClick(long ElementID, long Arg1, long Arg2, VARIANT_BOOL& Cancel);
		void BeforeRightClick(VARIANT_BOOL& Cancel);
		void Calculate();
		void Deactivate();
		void DragOver();
		void DragPlot();
		void MouseDown(long Button, long Shift, long x, long y);
		void MouseMove(long Button, long Shift, long x, long y);
		void MouseUp(long Button, long Shift, long x, long y);
		void RemoteResize();
		void RemoteSeriesChange(long SeriesIndex, long PointIndex);
		void Resize();
		void Select(long ElementID, long Arg1, long Arg2);
		void SeriesChange(long SeriesIndex, long PointIndex);
	};

	//________________________________________________________VPageBreak
	// {00024402-0000-0000-C000-000000000046}
	class VPageBreak : public Com::Object
	{
	public:
		VPageBreak();
		~VPageBreak();
		VPageBreak(const Com::Object& init) { Com::Object::Private_Copy(init); }
		VPageBreak& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		void DragOff(Excel::XlDirection Direction, long RegionIndex);
		//
		__declspec(property(get = get_Extent)) Excel::XlPageBreakExtent Extent;
		Excel::XlPageBreakExtent get_Extent();
		//
		__declspec(property(get = get_Location)) Excel::Range Location;
		Excel::Range get_Location();
		void put_Location(Excel::Range& Location);
		//
		__declspec(property(get = get_Parent)) Excel::WorksheetX Parent;
		Excel::WorksheetX get_Parent();
		//
		__declspec(property(get = get_Type, put = put_Type)) Excel::XlPageBreak Type;
		Excel::XlPageBreak get_Type();
		void put_Type(Excel::XlPageBreak Type);
	};

	//________________________________________________________HPageBreak
	// {00024401-0000-0000-C000-000000000046}
	class HPageBreak : public Com::Object
	{
	public:
		HPageBreak();
		~HPageBreak();
		HPageBreak(const Com::Object& init) { Com::Object::Private_Copy(init); }
		HPageBreak& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		void DragOff(Excel::XlDirection Direction, long RegionIndex);
		//
		__declspec(property(get = get_Extent)) Excel::XlPageBreakExtent Extent;
		Excel::XlPageBreakExtent get_Extent();
		//
		__declspec(property(get = get_Location)) Excel::Range Location;
		Excel::Range get_Location();
		void put_Location(Excel::Range& Location);
		//
		__declspec(property(get = get_Parent)) Excel::WorksheetX Parent;
		Excel::WorksheetX get_Parent();
		//
		__declspec(property(get = get_Type, put = put_Type)) Excel::XlPageBreak Type;
		Excel::XlPageBreak get_Type();
		void put_Type(Excel::XlPageBreak Type);
	};

	//________________________________________________________HPageBreaks
	// {00024404-0000-0000-C000-000000000046}
	class HPageBreaks : public Com::Object
	{
	public:
		HPageBreaks();
		~HPageBreaks();
		HPageBreaks(const Com::Object& init) { Com::Object::Private_Copy(init); }
		HPageBreaks& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::HPageBreak Add(Com::Object Before);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::HPageBreak get_Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::HPageBreak get__Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________VPageBreaks
	// {00024405-0000-0000-C000-000000000046}
	class VPageBreaks : public Com::Object
	{
	public:
		VPageBreaks();
		~VPageBreaks();
		VPageBreaks(const Com::Object& init) { Com::Object::Private_Copy(init); }
		VPageBreaks& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::VPageBreak Add(Com::Object Before);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::VPageBreak get_Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::VPageBreak get__Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________RecentFile
	// {00024407-0000-0000-C000-000000000046}
	class RecentFile : public Com::Object
	{
	public:
		RecentFile();
		~RecentFile();
		RecentFile(const Com::Object& init) { Com::Object::Private_Copy(init); }
		RecentFile& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		Excel::WorkbookX Open();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Path)) wstring Path;
		wstring get_Path();
	};

	//________________________________________________________RecentFiles
	// {00024406-0000-0000-C000-000000000046}
	class RecentFiles : public Com::Object
	{
	public:
		RecentFiles();
		~RecentFiles();
		RecentFiles(const Com::Object& init) { Com::Object::Private_Copy(init); }
		RecentFiles& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::RecentFile Add(wstring Name);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::RecentFile get_Item(long Index);
		//
		__declspec(property(get = get_Maximum, put = put_Maximum)) long Maximum;
		long get_Maximum();
		void put_Maximum(long Maximum);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::RecentFile get__Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________DocEvents
	// {00024411-0000-0000-C000-000000000046}
	class DocEvents : public Com::Object
	{
	public:
		DocEvents();
		~DocEvents();
		DocEvents(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DocEvents& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		void BeforeDelete();
		void BeforeDoubleClick(Excel::Range& Target, VARIANT_BOOL& Cancel);
		void BeforeRightClick(Excel::Range& Target, VARIANT_BOOL& Cancel);
		void Calculate();
		void Change(Excel::Range& Target);
		void Deactivate();
		void FollowHyperlink(Excel::Hyperlink& Target);
		void LensGalleryRenderComplete();
		void PivotTableAfterValueChange(Excel::PivotTable& TargetPivotTable, Excel::Range& TargetRange);
		void PivotTableBeforeAllocateChanges(Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel);
		void PivotTableBeforeCommitChanges(Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel);
		void PivotTableBeforeDiscardChanges(Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd);
		void PivotTableChangeSync(Excel::PivotTable& Target);
		void PivotTableUpdate(Excel::PivotTable& Target);
		void RemoteBeforeDelete();
		void RemoteChange(Excel::Range& Target);
		void RemotePivotTableChangeSync(Excel::PivotTable& Target);
		void RemotePivotTableUpdate(Excel::PivotTable& Target);
		void SelectionChange(Excel::Range& Target);
		void TableUpdate(Excel::TableObject& Target);
	};

	//________________________________________________________Style
	// {00020852-0000-0000-C000-000000000046}
	class Style : public Com::Object
	{
	public:
		Style();
		~Style();
		Style(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Style& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		//
		__declspec(property(get = get_BuiltIn)) bool BuiltIn;
		bool get_BuiltIn();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_FormulaHidden, put = put_FormulaHidden)) bool FormulaHidden;
		bool get_FormulaHidden();
		void put_FormulaHidden(bool FormulaHidden);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) Excel::XlHAlign HorizontalAlignment;
		Excel::XlHAlign get_HorizontalAlignment();
		void put_HorizontalAlignment(Excel::XlHAlign HorizontalAlignment);
		//
		__declspec(property(get = get_IncludeAlignment, put = put_IncludeAlignment)) bool IncludeAlignment;
		bool get_IncludeAlignment();
		void put_IncludeAlignment(bool IncludeAlignment);
		//
		__declspec(property(get = get_IncludeBorder, put = put_IncludeBorder)) bool IncludeBorder;
		bool get_IncludeBorder();
		void put_IncludeBorder(bool IncludeBorder);
		//
		__declspec(property(get = get_IncludeFont, put = put_IncludeFont)) bool IncludeFont;
		bool get_IncludeFont();
		void put_IncludeFont(bool IncludeFont);
		//
		__declspec(property(get = get_IncludeNumber, put = put_IncludeNumber)) bool IncludeNumber;
		bool get_IncludeNumber();
		void put_IncludeNumber(bool IncludeNumber);
		//
		__declspec(property(get = get_IncludePatterns, put = put_IncludePatterns)) bool IncludePatterns;
		bool get_IncludePatterns();
		void put_IncludePatterns(bool IncludePatterns);
		//
		__declspec(property(get = get_IncludeProtection, put = put_IncludeProtection)) bool IncludeProtection;
		bool get_IncludeProtection();
		void put_IncludeProtection(bool IncludeProtection);
		//
		__declspec(property(get = get_IndentLevel, put = put_IndentLevel)) long IndentLevel;
		long get_IndentLevel();
		void put_IndentLevel(long IndentLevel);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_MergeCells, put = put_MergeCells)) _variant_t MergeCells;
		_variant_t get_MergeCells();
		void put_MergeCells(_variant_t MergeCells);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_NameLocal)) wstring NameLocal;
		wstring get_NameLocal();
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) wstring NumberFormat;
		wstring get_NumberFormat();
		void put_NumberFormat(wstring NumberFormat);
		//
		__declspec(property(get = get_NumberFormatLocal, put = put_NumberFormatLocal)) wstring NumberFormatLocal;
		wstring get_NumberFormatLocal();
		void put_NumberFormatLocal(wstring NumberFormatLocal);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) Excel::XlOrientation Orientation;
		Excel::XlOrientation get_Orientation();
		void put_Orientation(Excel::XlOrientation Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		//
		__declspec(property(get = get_ShrinkToFit, put = put_ShrinkToFit)) bool ShrinkToFit;
		bool get_ShrinkToFit();
		void put_ShrinkToFit(bool ShrinkToFit);
		//
		__declspec(property(get = get_Value)) wstring Value;
		wstring get_Value();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) Excel::XlVAlign VerticalAlignment;
		Excel::XlVAlign get_VerticalAlignment();
		void put_VerticalAlignment(Excel::XlVAlign VerticalAlignment);
		//
		__declspec(property(get = get_WrapText, put = put_WrapText)) bool WrapText;
		bool get_WrapText();
		void put_WrapText(bool WrapText);
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________Styles
	// {00020853-0000-0000-C000-000000000046}
	class Styles : public Com::Object
	{
	public:
		Styles();
		~Styles();
		Styles(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Styles& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Style Add(wstring Name, _variant_t BasedOn);
		Excel::Style Add(wstring Name);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Style get_Item(_variant_t Index);
		_variant_t Merge(_variant_t Workbook);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Style get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Borders
	// {00020855-0000-0000-C000-000000000046}
	class Borders : public Com::Object
	{
	public:
		Borders();
		~Borders();
		Borders(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Borders& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Color, put = put_Color)) _variant_t Color;
		_variant_t get_Color();
		void put_Color(_variant_t Color);
		//
		__declspec(property(get = get_ColorIndex, put = put_ColorIndex)) _variant_t ColorIndex;
		_variant_t get_ColorIndex();
		void put_ColorIndex(_variant_t ColorIndex);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Border get_Item(Excel::XlBordersIndex Index);
		//
		__declspec(property(get = get_LineStyle, put = put_LineStyle)) _variant_t LineStyle;
		_variant_t get_LineStyle();
		void put_LineStyle(_variant_t LineStyle);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ThemeColor, put = put_ThemeColor)) _variant_t ThemeColor;
		_variant_t get_ThemeColor();
		void put_ThemeColor(_variant_t ThemeColor);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) _variant_t TintAndShade;
		_variant_t get_TintAndShade();
		void put_TintAndShade(_variant_t TintAndShade);
		//
		__declspec(property(get = get_Value, put = put_Value)) _variant_t Value;
		_variant_t get_Value();
		void put_Value(_variant_t Value);
		//
		__declspec(property(get = get_Weight, put = put_Weight)) _variant_t Weight;
		_variant_t get_Weight();
		void put_Weight(_variant_t Weight);
		Excel::Border get__Default(Excel::XlBordersIndex Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________AddIn
	// {00020857-0000-0000-C000-000000000046}
	class AddIn : public Com::Object
	{
	public:
		AddIn();
		~AddIn();
		AddIn(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AddIn& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Author)) wstring Author;
		wstring get_Author();
		//
		__declspec(property(get = get_CLSID)) wstring CLSID;
		wstring get_CLSID();
		//
		__declspec(property(get = get_Comments)) wstring CommentsX;
		wstring get_Comments();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_FullName)) wstring FullName;
		wstring get_FullName();
		//
		__declspec(property(get = get_Installed, put = put_Installed)) bool Installed;
		bool get_Installed();
		void put_Installed(bool Installed);
		//
		__declspec(property(get = get_IsOpen)) bool IsOpen;
		bool get_IsOpen();
		//
		__declspec(property(get = get_Keywords)) wstring Keywords;
		wstring get_Keywords();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Path)) wstring Path;
		wstring get_Path();
		//
		__declspec(property(get = get_Subject)) wstring Subject;
		wstring get_Subject();
		//
		__declspec(property(get = get_Title)) wstring Title;
		wstring get_Title();
		//
		__declspec(property(get = get_progID)) wstring progID;
		wstring get_progID();
	};

	//________________________________________________________AddIns
	// {00020858-0000-0000-C000-000000000046}
	class AddIns : public Com::Object
	{
	public:
		AddIns();
		~AddIns();
		AddIns(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AddIns& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::AddIn Add(wstring Filename, _variant_t CopyFile);
		Excel::AddIn Add(wstring Filename);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::AddIn get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::AddIn get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Toolbar
	// {0002085C-0000-0000-C000-000000000046}
	class Toolbar : public Com::Object
	{
	public:
		Toolbar();
		~Toolbar();
		Toolbar(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Toolbar& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BuiltIn)) bool BuiltIn;
		bool get_BuiltIn();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Height, put = put_Height)) long Height;
		long get_Height();
		void put_Height(long Height);
		//
		__declspec(property(get = get_Left, put = put_Left)) long Left;
		long get_Left();
		void put_Left(long Left);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) long Position;
		long get_Position();
		void put_Position(long Position);
		//
		__declspec(property(get = get_Protection, put = put_Protection)) Excel::XlToolbarProtection ProtectionX;
		Excel::XlToolbarProtection get_Protection();
		void put_Protection(Excel::XlToolbarProtection Protection);
		void Reset();
		//
		__declspec(property(get = get_ToolbarButtons)) Excel::ToolbarButtons ToolbarButtonsX;
		Excel::ToolbarButtons get_ToolbarButtons();
		//
		__declspec(property(get = get_Top, put = put_Top)) long Top;
		long get_Top();
		void put_Top(long Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) long Width;
		long get_Width();
		void put_Width(long Width);
	};

	//________________________________________________________Toolbars
	// {0002085D-0000-0000-C000-000000000046}
	class Toolbars : public Com::Object
	{
	public:
		Toolbars();
		~Toolbars();
		Toolbars(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Toolbars& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Toolbar Add(_variant_t Name);
		Excel::Toolbar Add();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Toolbar get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Toolbar get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ToolbarButton
	// {0002085E-0000-0000-C000-000000000046}
	class ToolbarButton : public Com::Object
	{
	public:
		ToolbarButton();
		~ToolbarButton();
		ToolbarButton(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ToolbarButton& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BuiltIn)) bool BuiltIn;
		bool get_BuiltIn();
		//
		__declspec(property(get = get_BuiltInFace, put = put_BuiltInFace)) bool BuiltInFace;
		bool get_BuiltInFace();
		void put_BuiltInFace(bool BuiltInFace);
		void Copy(Excel::Toolbar& Toolbar, long Before);
		void CopyFace();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		void Edit();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_HelpContextID, put = put_HelpContextID)) long HelpContextID;
		long get_HelpContextID();
		void put_HelpContextID(long HelpContextID);
		//
		__declspec(property(get = get_HelpFile, put = put_HelpFile)) wstring HelpFile;
		wstring get_HelpFile();
		void put_HelpFile(wstring HelpFile);
		//
		__declspec(property(get = get_ID)) long ID;
		long get_ID();
		//
		__declspec(property(get = get_IsGap)) bool IsGap;
		bool get_IsGap();
		void Move(Excel::Toolbar& Toolbar, long Before);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void PasteFace();
		//
		__declspec(property(get = get_Pushed, put = put_Pushed)) bool Pushed;
		bool get_Pushed();
		void put_Pushed(bool Pushed);
		void Reset();
		//
		__declspec(property(get = get_StatusBar, put = put_StatusBar)) wstring StatusBar;
		wstring get_StatusBar();
		void put_StatusBar(wstring StatusBar);
		//
		__declspec(property(get = get_Width, put = put_Width)) long Width;
		long get_Width();
		void put_Width(long Width);
	};

	//________________________________________________________ToolbarButtons
	// {0002085F-0000-0000-C000-000000000046}
	class ToolbarButtons : public Com::Object
	{
	public:
		ToolbarButtons();
		~ToolbarButtons();
		ToolbarButtons(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ToolbarButtons& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ToolbarButton Add(_variant_t Button, _variant_t Before, _variant_t OnAction, _variant_t Pushed, _variant_t Enabled, _variant_t StatusBar, _variant_t HelpFile, _variant_t HelpContextID);
		Excel::ToolbarButton Add();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ToolbarButton get_Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ToolbarButton get__Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Areas
	// {00020860-0000-0000-C000-000000000046}
	class Areas : public Com::Object
	{
	public:
		Areas();
		~Areas();
		Areas(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Areas& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Range get_Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Range get__Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________WorkbookEvents
	// {00024412-0000-0000-C000-000000000046}
	class WorkbookEvents : public Com::Object
	{
	public:
		WorkbookEvents();
		~WorkbookEvents();
		WorkbookEvents(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WorkbookEvents& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		void AddinInstall();
		void AddinUninstall();
		void AfterRemoteChange();
		void AfterSave(bool Success);
		void AfterXmlExport(Excel::XmlMap& Map, wstring Url, Excel::XlXmlExportResult Result);
		void AfterXmlImport(Excel::XmlMap& Map, bool IsRefresh, Excel::XlXmlImportResult Result);
		void BeforeClose(VARIANT_BOOL& Cancel);
		void BeforePrint(VARIANT_BOOL& Cancel);
		void BeforeRemoteChange();
		void BeforeSave(bool SaveAsUI, VARIANT_BOOL& Cancel);
		void BeforeXmlExport(Excel::XmlMap& Map, wstring Url, VARIANT_BOOL& Cancel);
		void BeforeXmlImport(Excel::XmlMap& Map, wstring Url, bool IsRefresh, VARIANT_BOOL& Cancel);
		void Deactivate();
		void ModelChange(Excel::ModelChanges& Changes);
		void NewChart(Excel::ChartX& Ch);
		void NewSheet(Com::Object Sh);
		void Open();
		void PivotTableCloseConnection(Excel::PivotTable& Target);
		void PivotTableOpenConnection(Excel::PivotTable& Target);
		void RemoteNewChart(Excel::ChartX& Ch);
		void RemoteNewSheet(Com::Object Sh);
		void RemoteSheetBeforeDelete(Com::Object Sh);
		void RemoteSheetChange(Com::Object Sh, Excel::Range& Target);
		void RemoteSheetPivotTableChangeSync(Com::Object Sh, Excel::PivotTable& Target);
		void RemoteSheetPivotTableUpdate(Com::Object Sh, Excel::PivotTable& Target);
		void RowsetComplete(wstring Description, wstring Sheet, bool Success);
		void SheetActivate(Com::Object Sh);
		void SheetBeforeDelete(Com::Object Sh);
		void SheetBeforeDoubleClick(Com::Object Sh, Excel::Range& Target, VARIANT_BOOL& Cancel);
		void SheetBeforeRightClick(Com::Object Sh, Excel::Range& Target, VARIANT_BOOL& Cancel);
		void SheetCalculate(Com::Object Sh);
		void SheetChange(Com::Object Sh, Excel::Range& Target);
		void SheetDeactivate(Com::Object Sh);
		void SheetFollowHyperlink(Com::Object Sh, Excel::Hyperlink& Target);
		void SheetLensGalleryRenderComplete(Com::Object Sh);
		void SheetPivotTableAfterValueChange(Com::Object Sh, Excel::PivotTable& TargetPivotTable, Excel::Range& TargetRange);
		void SheetPivotTableBeforeAllocateChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel);
		void SheetPivotTableBeforeCommitChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel);
		void SheetPivotTableBeforeDiscardChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd);
		void SheetPivotTableChangeSync(Com::Object Sh, Excel::PivotTable& Target);
		void SheetPivotTableUpdate(Com::Object Sh, Excel::PivotTable& Target);
		void SheetSelectionChange(Com::Object Sh, Excel::Range& Target);
		void SheetTableUpdate(Com::Object Sh, Excel::TableObject& Target);
		void Sync(/* MsoSyncEventType*/ short SyncEventType);
		void WindowActivate(Excel::Window& Wn);
		void WindowDeactivate(Excel::Window& Wn);
		void WindowResize(Excel::Window& Wn);
	};

	//________________________________________________________MenuBars
	// {00020863-0000-0000-C000-000000000046}
	class MenuBars : public Com::Object
	{
	public:
		MenuBars();
		~MenuBars();
		MenuBars(const Com::Object& init) { Com::Object::Private_Copy(init); }
		MenuBars& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::MenuBar Add(_variant_t Name);
		Excel::MenuBar Add();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::MenuBar get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::MenuBar get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________MenuBar
	// {00020864-0000-0000-C000-000000000046}
	class MenuBar : public Com::Object
	{
	public:
		MenuBar();
		~MenuBar();
		MenuBar(const Com::Object& init) { Com::Object::Private_Copy(init); }
		MenuBar& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BuiltIn)) bool BuiltIn;
		bool get_BuiltIn();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Menus)) Excel::Menus MenusX;
		Excel::Menus get_Menus();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Reset();
	};

	//________________________________________________________Menus
	// {00020865-0000-0000-C000-000000000046}
	class Menus : public Com::Object
	{
	public:
		Menus();
		~Menus();
		Menus(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Menus& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Menu Add(wstring Caption, _variant_t Before, _variant_t Restore);
		Excel::Menu Add(wstring Caption);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Menu get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Menu get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Menu
	// {00020866-0000-0000-C000-000000000046}
	class Menu : public Com::Object
	{
	public:
		Menu();
		~Menu();
		Menu(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Menu& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_MenuItems)) Excel::MenuItems MenuItemsX;
		Excel::MenuItems get_MenuItems();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________MenuItems
	// {00020867-0000-0000-C000-000000000046}
	class MenuItems : public Com::Object
	{
	public:
		MenuItems();
		~MenuItems();
		MenuItems(const Com::Object& init) { Com::Object::Private_Copy(init); }
		MenuItems& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::MenuItem Add(wstring Caption, _variant_t OnAction, _variant_t ShortcutKey, _variant_t Before, _variant_t Restore, _variant_t StatusBar, _variant_t HelpFile, _variant_t HelpContextID);
		Excel::MenuItem Add(wstring Caption);
		Excel::Menu AddMenu(wstring Caption, _variant_t Before, _variant_t Restore);
		Excel::Menu AddMenu(wstring Caption);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Com::Object get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Com::Object get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________MenuItem
	// {00020868-0000-0000-C000-000000000046}
	class MenuItem : public Com::Object
	{
	public:
		MenuItem();
		~MenuItem();
		MenuItem(const Com::Object& init) { Com::Object::Private_Copy(init); }
		MenuItem& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		//
		__declspec(property(get = get_Checked, put = put_Checked)) bool Checked;
		bool get_Checked();
		void put_Checked(bool Checked);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_HelpContextID, put = put_HelpContextID)) long HelpContextID;
		long get_HelpContextID();
		void put_HelpContextID(long HelpContextID);
		//
		__declspec(property(get = get_HelpFile, put = put_HelpFile)) wstring HelpFile;
		wstring get_HelpFile();
		void put_HelpFile(wstring HelpFile);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_StatusBar, put = put_StatusBar)) wstring StatusBar;
		wstring get_StatusBar();
		void put_StatusBar(wstring StatusBar);
	};

	//________________________________________________________Charts
	// {0002086D-0000-0000-C000-000000000046}
	class Charts : public Com::Object
	{
	public:
		Charts();
		~Charts();
		Charts(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Charts& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ChartX Add(_variant_t Before, _variant_t After, _variant_t Count);
		Excel::ChartX Add();
		Excel::ChartX Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout);
		Excel::ChartX Add2();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_HPageBreaks)) Excel::HPageBreaks HPageBreaksX;
		Excel::HPageBreaks get_HPageBreaks();
		Com::Object get_Item(_variant_t Index);
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void PrintOut();
		void PrintPreview(_variant_t EnableChanges);
		void PrintPreview();
		void Select(_variant_t Replace);
		void Select();
		//
		__declspec(property(get = get_VPageBreaks)) Excel::VPageBreaks VPageBreaksX;
		Excel::VPageBreaks get_VPageBreaks();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) _variant_t Visible;
		_variant_t get_Visible();
		void put_Visible(_variant_t Visible);
		Com::Object get__Default(_variant_t Index);
		void _Dummy7();
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
	};

	//________________________________________________________DrawingObjects
	// {0002086F-0000-0000-C000-000000000046}
	class DrawingObjects : public Com::Object
	{
	public:
		DrawingObjects();
		~DrawingObjects();
		DrawingObjects(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DrawingObjects& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		_variant_t AddItem(_variant_t Text, _variant_t Index);
		_variant_t AddItem(_variant_t Text);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ArrowHeadLength, put = put_ArrowHeadLength)) _variant_t ArrowHeadLength;
		_variant_t get_ArrowHeadLength();
		void put_ArrowHeadLength(_variant_t ArrowHeadLength);
		//
		__declspec(property(get = get_ArrowHeadStyle, put = put_ArrowHeadStyle)) _variant_t ArrowHeadStyle;
		_variant_t get_ArrowHeadStyle();
		void put_ArrowHeadStyle(_variant_t ArrowHeadStyle);
		//
		__declspec(property(get = get_ArrowHeadWidth, put = put_ArrowHeadWidth)) _variant_t ArrowHeadWidth;
		_variant_t get_ArrowHeadWidth();
		void put_ArrowHeadWidth(_variant_t ArrowHeadWidth);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_CancelButton, put = put_CancelButton)) bool CancelButton;
		bool get_CancelButton();
		void put_CancelButton(bool CancelButton);
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		//
		__declspec(property(get = get_DefaultButton, put = put_DefaultButton)) bool DefaultButton;
		bool get_DefaultButton();
		void put_DefaultButton(bool DefaultButton);
		_variant_t Delete();
		//
		__declspec(property(get = get_DismissButton, put = put_DismissButton)) bool DismissButton;
		bool get_DismissButton();
		void put_DismissButton(bool DismissButton);
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		//
		__declspec(property(get = get_DisplayVerticalScrollBar, put = put_DisplayVerticalScrollBar)) bool DisplayVerticalScrollBar;
		bool get_DisplayVerticalScrollBar();
		void put_DisplayVerticalScrollBar(bool DisplayVerticalScrollBar);
		//
		__declspec(property(get = get_DropDownLines, put = put_DropDownLines)) long DropDownLines;
		long get_DropDownLines();
		void put_DropDownLines(long DropDownLines);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HelpButton, put = put_HelpButton)) bool HelpButton;
		bool get_HelpButton();
		void put_HelpButton(bool HelpButton);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_InputType, put = put_InputType)) long InputType;
		long get_InputType();
		void put_InputType(long InputType);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_LargeChange, put = put_LargeChange)) long LargeChange;
		long get_LargeChange();
		void put_LargeChange(long LargeChange);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		_variant_t LinkCombo(_variant_t Link);
		_variant_t LinkCombo();
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		_variant_t List(_variant_t Index);
		_variant_t List();
		//
		__declspec(property(get = get_ListFillRange, put = put_ListFillRange)) wstring ListFillRange;
		wstring get_ListFillRange();
		void put_ListFillRange(wstring ListFillRange);
		//
		__declspec(property(get = get_ListIndex, put = put_ListIndex)) long ListIndex;
		long get_ListIndex();
		void put_ListIndex(long ListIndex);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Max, put = put_Max)) long Max;
		long get_Max();
		void put_Max(long Max);
		//
		__declspec(property(get = get_Min, put = put_Min)) long Min;
		long get_Min();
		void put_Min(long Min);
		//
		__declspec(property(get = get_MultiLine, put = put_MultiLine)) bool MultiLine;
		bool get_MultiLine();
		void put_MultiLine(bool MultiLine);
		//
		__declspec(property(get = get_MultiSelect, put = put_MultiSelect)) bool MultiSelect;
		bool get_MultiSelect();
		void put_MultiSelect(bool MultiSelect);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t RemoveAllItems();
		_variant_t RemoveItem(long Index, _variant_t Count);
		_variant_t RemoveItem(long Index);
		_variant_t Reshape(long Vertex, _variant_t Insert, _variant_t Left, _variant_t Top);
		_variant_t Reshape(long Vertex, _variant_t Insert);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t Selected(_variant_t Index);
		_variant_t Selected();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_SmallChange, put = put_SmallChange)) long SmallChange;
		long get_SmallChange();
		void put_SmallChange(long SmallChange);
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		Com::Object Ungroup();
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		_variant_t Vertices(_variant_t Index1, _variant_t Index2);
		_variant_t Vertices();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy28();
		void _Dummy3();
		void _Dummy47();
		void _Dummy54();
		void _Dummy56();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________PivotCache
	// {0002441C-0000-0000-C000-000000000046}
	class PivotCache : public Com::Object
	{
	public:
		PivotCache();
		~PivotCache();
		PivotCache(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotCache& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_ADOConnection)) Com::Object ADOConnection;
		Com::Object get_ADOConnection();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BackgroundQuery, put = put_BackgroundQuery)) bool BackgroundQuery;
		bool get_BackgroundQuery();
		void put_BackgroundQuery(bool BackgroundQuery);
		//
		__declspec(property(get = get_CommandText, put = put_CommandText)) _variant_t CommandText;
		_variant_t get_CommandText();
		void put_CommandText(_variant_t CommandText);
		//
		__declspec(property(get = get_CommandType, put = put_CommandType)) Excel::XlCmdType CommandType;
		Excel::XlCmdType get_CommandType();
		void put_CommandType(Excel::XlCmdType CommandType);
		//
		__declspec(property(get = get_Connection, put = put_Connection)) _variant_t Connection;
		_variant_t get_Connection();
		void put_Connection(_variant_t Connection);
		Excel::Shape CreatePivotChart(_variant_t ChartDestination, _variant_t XlChartType, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height);
		Excel::Shape CreatePivotChart(_variant_t ChartDestination);
		Excel::PivotTable CreatePivotTable(_variant_t TableDestination, _variant_t TableName, _variant_t ReadData, _variant_t DefaultVersion);
		Excel::PivotTable CreatePivotTable(_variant_t TableDestination);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_EnableRefresh, put = put_EnableRefresh)) bool EnableRefresh;
		bool get_EnableRefresh();
		void put_EnableRefresh(bool EnableRefresh);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_IsConnected)) bool IsConnected;
		bool get_IsConnected();
		//
		__declspec(property(get = get_LocalConnection, put = put_LocalConnection)) _variant_t LocalConnection;
		_variant_t get_LocalConnection();
		void put_LocalConnection(_variant_t LocalConnection);
		//
		__declspec(property(get = get_MaintainConnection, put = put_MaintainConnection)) bool MaintainConnection;
		bool get_MaintainConnection();
		void put_MaintainConnection(bool MaintainConnection);
		void MakeConnection();
		//
		__declspec(property(get = get_MemoryUsed)) long MemoryUsed;
		long get_MemoryUsed();
		//
		__declspec(property(get = get_MissingItemsLimit, put = put_MissingItemsLimit)) Excel::XlPivotTableMissingItems MissingItemsLimit;
		Excel::XlPivotTableMissingItems get_MissingItemsLimit();
		void put_MissingItemsLimit(Excel::XlPivotTableMissingItems MissingItemsLimit);
		//
		__declspec(property(get = get_OLAP)) bool OLAP;
		bool get_OLAP();
		//
		__declspec(property(get = get_OptimizeCache, put = put_OptimizeCache)) bool OptimizeCache;
		bool get_OptimizeCache();
		void put_OptimizeCache(bool OptimizeCache);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_QueryType)) Excel::XlQueryType QueryType;
		Excel::XlQueryType get_QueryType();
		//
		__declspec(property(get = get_RecordCount)) long RecordCount;
		long get_RecordCount();
		//
		__declspec(property(get = get_Recordset)) Com::Object Recordset;
		Com::Object get_Recordset();
		void put_Recordset(Com::Object Recordset);
		void Refresh();
		//
		__declspec(property(get = get_RefreshDate)) Sys::Time RefreshDate;
		Sys::Time get_RefreshDate();
		//
		__declspec(property(get = get_RefreshName)) wstring RefreshName;
		wstring get_RefreshName();
		//
		__declspec(property(get = get_RefreshOnFileOpen, put = put_RefreshOnFileOpen)) bool RefreshOnFileOpen;
		bool get_RefreshOnFileOpen();
		void put_RefreshOnFileOpen(bool RefreshOnFileOpen);
		//
		__declspec(property(get = get_RefreshPeriod, put = put_RefreshPeriod)) long RefreshPeriod;
		long get_RefreshPeriod();
		void put_RefreshPeriod(long RefreshPeriod);
		void ResetTimer();
		//
		__declspec(property(get = get_RobustConnect, put = put_RobustConnect)) Excel::XlRobustConnect RobustConnect;
		Excel::XlRobustConnect get_RobustConnect();
		void put_RobustConnect(Excel::XlRobustConnect RobustConnect);
		void SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords);
		void SaveAsODC(wstring ODCFileName);
		//
		__declspec(property(get = get_SavePassword, put = put_SavePassword)) bool SavePassword;
		bool get_SavePassword();
		void put_SavePassword(bool SavePassword);
		//
		__declspec(property(get = get_SourceConnectionFile, put = put_SourceConnectionFile)) wstring SourceConnectionFile;
		wstring get_SourceConnectionFile();
		void put_SourceConnectionFile(wstring SourceConnectionFile);
		//
		__declspec(property(get = get_SourceData, put = put_SourceData)) _variant_t SourceData;
		_variant_t get_SourceData();
		void put_SourceData(_variant_t SourceData);
		//
		__declspec(property(get = get_SourceDataFile)) wstring SourceDataFile;
		wstring get_SourceDataFile();
		//
		__declspec(property(get = get_SourceType)) Excel::XlPivotTableSourceType SourceType;
		Excel::XlPivotTableSourceType get_SourceType();
		//
		__declspec(property(get = get_Sql, put = put_Sql)) _variant_t Sql;
		_variant_t get_Sql();
		void put_Sql(_variant_t Sql);
		//
		__declspec(property(get = get_UpgradeOnRefresh, put = put_UpgradeOnRefresh)) bool UpgradeOnRefresh;
		bool get_UpgradeOnRefresh();
		void put_UpgradeOnRefresh(bool UpgradeOnRefresh);
		//
		__declspec(property(get = get_UseLocalConnection, put = put_UseLocalConnection)) bool UseLocalConnection;
		bool get_UseLocalConnection();
		void put_UseLocalConnection(bool UseLocalConnection);
		//
		__declspec(property(get = get_Version)) Excel::XlPivotTableVersionList Version;
		Excel::XlPivotTableVersionList get_Version();
		//
		__declspec(property(get = get_WorkbookConnection)) Excel::WorkbookConnection WorkbookConnectionX;
		Excel::WorkbookConnection get_WorkbookConnection();
	};

	//________________________________________________________PivotCaches
	// {0002441D-0000-0000-C000-000000000046}
	class PivotCaches : public Com::Object
	{
	public:
		PivotCaches();
		~PivotCaches();
		PivotCaches(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotCaches& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::PivotCache Add(Excel::XlPivotTableSourceType SourceType, _variant_t SourceData);
		Excel::PivotCache Add(Excel::XlPivotTableSourceType SourceType);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		Excel::PivotCache Create(Excel::XlPivotTableSourceType SourceType, _variant_t SourceData, _variant_t Version);
		Excel::PivotCache Create(Excel::XlPivotTableSourceType SourceType);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotCache Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotCache get__Default(_variant_t Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________PivotFormula
	// {0002441E-0000-0000-C000-000000000046}
	class PivotFormula : public Com::Object
	{
	public:
		PivotFormula();
		~PivotFormula();
		PivotFormula(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotFormula& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Index, put = put_Index)) long Index;
		long get_Index();
		void put_Index(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_StandardFormula, put = put_StandardFormula)) wstring StandardFormula;
		wstring get_StandardFormula();
		void put_StandardFormula(wstring StandardFormula);
		//
		__declspec(property(get = get_Value, put = put_Value)) wstring Value;
		wstring get_Value();
		void put_Value(wstring Value);
		//
		__declspec(property(get = get__Default, put = put__Default)) wstring _Default;
		wstring get__Default();
		void put__Default(wstring _Default);
	};

	//________________________________________________________PivotFormulas
	// {0002441F-0000-0000-C000-000000000046}
	class PivotFormulas : public Com::Object
	{
	public:
		PivotFormulas();
		~PivotFormulas();
		PivotFormulas(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotFormulas& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::PivotFormula Add(wstring Formula, _variant_t UseStandardFormula);
		Excel::PivotFormula Add(wstring Formula);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotFormula Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotFormula _Add(wstring Formula);
		Excel::PivotFormula get__Default(_variant_t Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________PivotTable
	// {00020872-0000-0000-C000-000000000046}
	class PivotTable : public Com::Object
	{
	public:
		PivotTable();
		~PivotTable();
		PivotTable(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotTable& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_ActiveFilters)) Excel::PivotFilters ActiveFilters;
		Excel::PivotFilters get_ActiveFilters();
		Excel::PivotField AddDataField(Com::Object Field, _variant_t Caption, _variant_t Function);
		Excel::PivotField AddDataField(Com::Object Field);
		_variant_t AddFields(_variant_t RowFields, _variant_t ColumnFields, _variant_t PageFields, _variant_t AddToTable);
		_variant_t AddFields();
		void AllocateChanges();
		//
		__declspec(property(get = get_Allocation, put = put_Allocation)) Excel::XlAllocation Allocation;
		Excel::XlAllocation get_Allocation();
		void put_Allocation(Excel::XlAllocation Allocation);
		//
		__declspec(property(get = get_AllocationMethod, put = put_AllocationMethod)) Excel::XlAllocationMethod AllocationMethod;
		Excel::XlAllocationMethod get_AllocationMethod();
		void put_AllocationMethod(Excel::XlAllocationMethod AllocationMethod);
		//
		__declspec(property(get = get_AllocationValue, put = put_AllocationValue)) Excel::XlAllocationValue AllocationValue;
		Excel::XlAllocationValue get_AllocationValue();
		void put_AllocationValue(Excel::XlAllocationValue AllocationValue);
		//
		__declspec(property(get = get_AllocationWeightExpression, put = put_AllocationWeightExpression)) wstring AllocationWeightExpression;
		wstring get_AllocationWeightExpression();
		void put_AllocationWeightExpression(wstring AllocationWeightExpression);
		//
		__declspec(property(get = get_AllowMultipleFilters, put = put_AllowMultipleFilters)) bool AllowMultipleFilters;
		bool get_AllowMultipleFilters();
		void put_AllowMultipleFilters(bool AllowMultipleFilters);
		//
		__declspec(property(get = get_AlternativeText, put = put_AlternativeText)) wstring AlternativeText;
		wstring get_AlternativeText();
		void put_AlternativeText(wstring AlternativeText);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void ApplyLayout();
		//
		__declspec(property(get = get_CacheIndex, put = put_CacheIndex)) long CacheIndex;
		long get_CacheIndex();
		void put_CacheIndex(long CacheIndex);
		Excel::CalculatedFields CalculatedFields();
		//
		__declspec(property(get = get_CalculatedMembers)) Excel::CalculatedMembers CalculatedMembersX;
		Excel::CalculatedMembers get_CalculatedMembers();
		//
		__declspec(property(get = get_CalculatedMembersInFilters, put = put_CalculatedMembersInFilters)) bool CalculatedMembersInFilters;
		bool get_CalculatedMembersInFilters();
		void put_CalculatedMembersInFilters(bool CalculatedMembersInFilters);
		void ChangeConnection(Excel::WorkbookConnection& conn);
		//
		__declspec(property(get = get_ChangeList)) Excel::PivotTableChangeList ChangeList;
		Excel::PivotTableChangeList get_ChangeList();
		void ChangePivotCache(_variant_t PivotCache);
		void ClearAllFilters();
		void ClearTable();
		Com::Object get_ColumnFields(_variant_t Index);
		Com::Object get_ColumnFields();
		//
		__declspec(property(get = get_ColumnGrand, put = put_ColumnGrand)) bool ColumnGrand;
		bool get_ColumnGrand();
		void put_ColumnGrand(bool ColumnGrand);
		//
		__declspec(property(get = get_ColumnRange)) Excel::Range ColumnRange;
		Excel::Range get_ColumnRange();
		void CommitChanges();
		//
		__declspec(property(get = get_CompactLayoutColumnHeader, put = put_CompactLayoutColumnHeader)) wstring CompactLayoutColumnHeader;
		wstring get_CompactLayoutColumnHeader();
		void put_CompactLayoutColumnHeader(wstring CompactLayoutColumnHeader);
		//
		__declspec(property(get = get_CompactLayoutRowHeader, put = put_CompactLayoutRowHeader)) wstring CompactLayoutRowHeader;
		wstring get_CompactLayoutRowHeader();
		void put_CompactLayoutRowHeader(wstring CompactLayoutRowHeader);
		//
		__declspec(property(get = get_CompactRowIndent, put = put_CompactRowIndent)) long CompactRowIndent;
		long get_CompactRowIndent();
		void put_CompactRowIndent(long CompactRowIndent);
		void ConvertToFormulas(bool ConvertFilters);
		wstring CreateCubeFile(wstring File, _variant_t Measures, _variant_t Levels, _variant_t Members, _variant_t Properties);
		wstring CreateCubeFile(wstring File);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CubeFields)) Excel::CubeFields CubeFieldsX;
		Excel::CubeFields get_CubeFields();
		//
		__declspec(property(get = get_DataBodyRange)) Excel::Range DataBodyRange;
		Excel::Range get_DataBodyRange();
		Com::Object get_DataFields(_variant_t Index);
		Com::Object get_DataFields();
		//
		__declspec(property(get = get_DataLabelRange)) Excel::Range DataLabelRange;
		Excel::Range get_DataLabelRange();
		//
		__declspec(property(get = get_DataPivotField)) Excel::PivotField DataPivotField;
		Excel::PivotField get_DataPivotField();
		void DiscardChanges();
		//
		__declspec(property(get = get_DisplayContextTooltips, put = put_DisplayContextTooltips)) bool DisplayContextTooltips;
		bool get_DisplayContextTooltips();
		void put_DisplayContextTooltips(bool DisplayContextTooltips);
		//
		__declspec(property(get = get_DisplayEmptyColumn, put = put_DisplayEmptyColumn)) bool DisplayEmptyColumn;
		bool get_DisplayEmptyColumn();
		void put_DisplayEmptyColumn(bool DisplayEmptyColumn);
		//
		__declspec(property(get = get_DisplayEmptyRow, put = put_DisplayEmptyRow)) bool DisplayEmptyRow;
		bool get_DisplayEmptyRow();
		void put_DisplayEmptyRow(bool DisplayEmptyRow);
		//
		__declspec(property(get = get_DisplayErrorString, put = put_DisplayErrorString)) bool DisplayErrorString;
		bool get_DisplayErrorString();
		void put_DisplayErrorString(bool DisplayErrorString);
		//
		__declspec(property(get = get_DisplayFieldCaptions, put = put_DisplayFieldCaptions)) bool DisplayFieldCaptions;
		bool get_DisplayFieldCaptions();
		void put_DisplayFieldCaptions(bool DisplayFieldCaptions);
		//
		__declspec(property(get = get_DisplayImmediateItems, put = put_DisplayImmediateItems)) bool DisplayImmediateItems;
		bool get_DisplayImmediateItems();
		void put_DisplayImmediateItems(bool DisplayImmediateItems);
		//
		__declspec(property(get = get_DisplayMemberPropertyTooltips, put = put_DisplayMemberPropertyTooltips)) bool DisplayMemberPropertyTooltips;
		bool get_DisplayMemberPropertyTooltips();
		void put_DisplayMemberPropertyTooltips(bool DisplayMemberPropertyTooltips);
		//
		__declspec(property(get = get_DisplayNullString, put = put_DisplayNullString)) bool DisplayNullString;
		bool get_DisplayNullString();
		void put_DisplayNullString(bool DisplayNullString);
		void DrillDown(Excel::PivotItem& PivotItem, _variant_t PivotLine);
		void DrillDown(Excel::PivotItem& PivotItem);
		void DrillTo(Excel::PivotItem& PivotItem, Excel::CubeField& CubeField, _variant_t PivotLine);
		void DrillTo(Excel::PivotItem& PivotItem, Excel::CubeField& CubeField);
		void DrillUp(Excel::PivotItem& PivotItem, _variant_t PivotLine, _variant_t LevelUniqueName);
		void DrillUp(Excel::PivotItem& PivotItem);
		_variant_t Dummy15(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		_variant_t Dummy15(_variant_t Arg1);
		_variant_t Dummy2(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4);
		_variant_t Dummy2(_variant_t Arg1);
		//
		__declspec(property(get = get_EnableDataValueEditing, put = put_EnableDataValueEditing)) bool EnableDataValueEditing;
		bool get_EnableDataValueEditing();
		void put_EnableDataValueEditing(bool EnableDataValueEditing);
		//
		__declspec(property(get = get_EnableDrilldown, put = put_EnableDrilldown)) bool EnableDrilldown;
		bool get_EnableDrilldown();
		void put_EnableDrilldown(bool EnableDrilldown);
		//
		__declspec(property(get = get_EnableFieldDialog, put = put_EnableFieldDialog)) bool EnableFieldDialog;
		bool get_EnableFieldDialog();
		void put_EnableFieldDialog(bool EnableFieldDialog);
		//
		__declspec(property(get = get_EnableFieldList, put = put_EnableFieldList)) bool EnableFieldList;
		bool get_EnableFieldList();
		void put_EnableFieldList(bool EnableFieldList);
		//
		__declspec(property(get = get_EnableWizard, put = put_EnableWizard)) bool EnableWizard;
		bool get_EnableWizard();
		void put_EnableWizard(bool EnableWizard);
		//
		__declspec(property(get = get_EnableWriteback, put = put_EnableWriteback)) bool EnableWriteback;
		bool get_EnableWriteback();
		void put_EnableWriteback(bool EnableWriteback);
		//
		__declspec(property(get = get_ErrorString, put = put_ErrorString)) wstring ErrorString;
		wstring get_ErrorString();
		void put_ErrorString(wstring ErrorString);
		//
		__declspec(property(get = get_FieldListSortAscending, put = put_FieldListSortAscending)) bool FieldListSortAscending;
		bool get_FieldListSortAscending();
		void put_FieldListSortAscending(bool FieldListSortAscending);
		void Format(Excel::XlPivotFormatType Format);
		double GetData(wstring Name);
		Excel::Range GetPivotData(_variant_t DataField, _variant_t Field1, _variant_t Item1, _variant_t Field2, _variant_t Item2, _variant_t Field3, _variant_t Item3, _variant_t Field4, _variant_t Item4, _variant_t Field5, _variant_t Item5, _variant_t Field6, _variant_t Item6, _variant_t Field7, _variant_t Item7, _variant_t Field8, _variant_t Item8, _variant_t Field9, _variant_t Item9, _variant_t Field10, _variant_t Item10, _variant_t Field11, _variant_t Item11, _variant_t Field12, _variant_t Item12, _variant_t Field13, _variant_t Item13, _variant_t Field14, _variant_t Item14);
		Excel::Range GetPivotData();
		//
		__declspec(property(get = get_GrandTotalName, put = put_GrandTotalName)) wstring GrandTotalName;
		wstring get_GrandTotalName();
		void put_GrandTotalName(wstring GrandTotalName);
		//
		__declspec(property(get = get_HasAutoFormat, put = put_HasAutoFormat)) bool HasAutoFormat;
		bool get_HasAutoFormat();
		void put_HasAutoFormat(bool HasAutoFormat);
		//
		__declspec(property(get = get_Hidden)) bool Hidden;
		bool get_Hidden();
		Com::Object get_HiddenFields(_variant_t Index);
		Com::Object get_HiddenFields();
		//
		__declspec(property(get = get_InGridDropZones, put = put_InGridDropZones)) bool InGridDropZones;
		bool get_InGridDropZones();
		void put_InGridDropZones(bool InGridDropZones);
		//
		__declspec(property(get = get_InnerDetail, put = put_InnerDetail)) wstring InnerDetail;
		wstring get_InnerDetail();
		void put_InnerDetail(wstring InnerDetail);
		//
		__declspec(property(get = get_LayoutRowDefault, put = put_LayoutRowDefault)) Excel::XlLayoutRowType LayoutRowDefault;
		Excel::XlLayoutRowType get_LayoutRowDefault();
		void put_LayoutRowDefault(Excel::XlLayoutRowType LayoutRowDefault);
		void ListFormulas();
		//
		__declspec(property(get = get_Location, put = put_Location)) wstring Location;
		wstring get_Location();
		void put_Location(wstring Location);
		//
		__declspec(property(get = get_MDX)) wstring MDX;
		wstring get_MDX();
		//
		__declspec(property(get = get_ManualUpdate, put = put_ManualUpdate)) bool ManualUpdate;
		bool get_ManualUpdate();
		void put_ManualUpdate(bool ManualUpdate);
		//
		__declspec(property(get = get_MergeLabels, put = put_MergeLabels)) bool MergeLabels;
		bool get_MergeLabels();
		void put_MergeLabels(bool MergeLabels);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_NullString, put = put_NullString)) wstring NullString;
		wstring get_NullString();
		void put_NullString(wstring NullString);
		//
		__declspec(property(get = get_PageFieldOrder, put = put_PageFieldOrder)) long PageFieldOrder;
		long get_PageFieldOrder();
		void put_PageFieldOrder(long PageFieldOrder);
		//
		__declspec(property(get = get_PageFieldStyle, put = put_PageFieldStyle)) wstring PageFieldStyle;
		wstring get_PageFieldStyle();
		void put_PageFieldStyle(wstring PageFieldStyle);
		//
		__declspec(property(get = get_PageFieldWrapCount, put = put_PageFieldWrapCount)) long PageFieldWrapCount;
		long get_PageFieldWrapCount();
		void put_PageFieldWrapCount(long PageFieldWrapCount);
		Com::Object get_PageFields(_variant_t Index);
		Com::Object get_PageFields();
		//
		__declspec(property(get = get_PageRange)) Excel::Range PageRange;
		Excel::Range get_PageRange();
		//
		__declspec(property(get = get_PageRangeCells)) Excel::Range PageRangeCells;
		Excel::Range get_PageRangeCells();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotCache PivotCache();
		//
		__declspec(property(get = get_PivotChart)) Excel::Shape PivotChart;
		Excel::Shape get_PivotChart();
		//
		__declspec(property(get = get_PivotColumnAxis)) Excel::PivotAxis PivotColumnAxis;
		Excel::PivotAxis get_PivotColumnAxis();
		Com::Object PivotFields(_variant_t Index);
		Com::Object PivotFields();
		//
		__declspec(property(get = get_PivotFormulas)) Excel::PivotFormulas PivotFormulasX;
		Excel::PivotFormulas get_PivotFormulas();
		//
		__declspec(property(get = get_PivotRowAxis)) Excel::PivotAxis PivotRowAxis;
		Excel::PivotAxis get_PivotRowAxis();
		void PivotSelect(wstring Name, Excel::XlPTSelectionMode Mode, _variant_t UseStandardName);
		void PivotSelect(wstring Name, Excel::XlPTSelectionMode Mode);
		//
		__declspec(property(get = get_PivotSelection, put = put_PivotSelection)) wstring PivotSelection;
		wstring get_PivotSelection();
		void put_PivotSelection(wstring PivotSelection);
		//
		__declspec(property(get = get_PivotSelectionStandard, put = put_PivotSelectionStandard)) wstring PivotSelectionStandard;
		wstring get_PivotSelectionStandard();
		void put_PivotSelectionStandard(wstring PivotSelectionStandard);
		void PivotTableWizard(_variant_t SourceType, _variant_t SourceData, _variant_t TableDestination, _variant_t TableName, _variant_t RowGrand, _variant_t ColumnGrand, _variant_t SaveData, _variant_t HasAutoFormat, _variant_t AutoPage, _variant_t Reserved, _variant_t BackgroundQuery, _variant_t OptimizeCache, _variant_t PageFieldOrder, _variant_t PageFieldWrapCount, _variant_t ReadData, _variant_t Connection);
		void PivotTableWizard();
		Excel::PivotValueCell PivotValueCell(_variant_t rowline, _variant_t columnline);
		Excel::PivotValueCell PivotValueCell();
		//
		__declspec(property(get = get_PreserveFormatting, put = put_PreserveFormatting)) bool PreserveFormatting;
		bool get_PreserveFormatting();
		void put_PreserveFormatting(bool PreserveFormatting);
		//
		__declspec(property(get = get_PrintDrillIndicators, put = put_PrintDrillIndicators)) bool PrintDrillIndicators;
		bool get_PrintDrillIndicators();
		void put_PrintDrillIndicators(bool PrintDrillIndicators);
		//
		__declspec(property(get = get_PrintTitles, put = put_PrintTitles)) bool PrintTitles;
		bool get_PrintTitles();
		void put_PrintTitles(bool PrintTitles);
		void RefreshDataSourceValues();
		//
		__declspec(property(get = get_RefreshDate)) Sys::Time RefreshDate;
		Sys::Time get_RefreshDate();
		//
		__declspec(property(get = get_RefreshName)) wstring RefreshName;
		wstring get_RefreshName();
		bool RefreshTable();
		void RepeatAllLabels(Excel::XlPivotFieldRepeatLabels Repeat);
		//
		__declspec(property(get = get_RepeatItemsOnEachPrintedPage, put = put_RepeatItemsOnEachPrintedPage)) bool RepeatItemsOnEachPrintedPage;
		bool get_RepeatItemsOnEachPrintedPage();
		void put_RepeatItemsOnEachPrintedPage(bool RepeatItemsOnEachPrintedPage);
		void RowAxisLayout(Excel::XlLayoutRowType RowLayout);
		Com::Object get_RowFields(_variant_t Index);
		Com::Object get_RowFields();
		//
		__declspec(property(get = get_RowGrand, put = put_RowGrand)) bool RowGrand;
		bool get_RowGrand();
		void put_RowGrand(bool RowGrand);
		//
		__declspec(property(get = get_RowRange)) Excel::Range RowRange;
		Excel::Range get_RowRange();
		//
		__declspec(property(get = get_SaveData, put = put_SaveData)) bool SaveData;
		bool get_SaveData();
		void put_SaveData(bool SaveData);
		//
		__declspec(property(get = get_SelectionMode, put = put_SelectionMode)) Excel::XlPTSelectionMode SelectionMode;
		Excel::XlPTSelectionMode get_SelectionMode();
		void put_SelectionMode(Excel::XlPTSelectionMode SelectionMode);
		//
		__declspec(property(get = get_ShowCellBackgroundFromOLAP, put = put_ShowCellBackgroundFromOLAP)) bool ShowCellBackgroundFromOLAP;
		bool get_ShowCellBackgroundFromOLAP();
		void put_ShowCellBackgroundFromOLAP(bool ShowCellBackgroundFromOLAP);
		//
		__declspec(property(get = get_ShowDrillIndicators, put = put_ShowDrillIndicators)) bool ShowDrillIndicators;
		bool get_ShowDrillIndicators();
		void put_ShowDrillIndicators(bool ShowDrillIndicators);
		//
		__declspec(property(get = get_ShowPageMultipleItemLabel, put = put_ShowPageMultipleItemLabel)) bool ShowPageMultipleItemLabel;
		bool get_ShowPageMultipleItemLabel();
		void put_ShowPageMultipleItemLabel(bool ShowPageMultipleItemLabel);
		_variant_t ShowPages(_variant_t PageField);
		_variant_t ShowPages();
		//
		__declspec(property(get = get_ShowTableStyleColumnHeaders, put = put_ShowTableStyleColumnHeaders)) bool ShowTableStyleColumnHeaders;
		bool get_ShowTableStyleColumnHeaders();
		void put_ShowTableStyleColumnHeaders(bool ShowTableStyleColumnHeaders);
		//
		__declspec(property(get = get_ShowTableStyleColumnStripes, put = put_ShowTableStyleColumnStripes)) bool ShowTableStyleColumnStripes;
		bool get_ShowTableStyleColumnStripes();
		void put_ShowTableStyleColumnStripes(bool ShowTableStyleColumnStripes);
		//
		__declspec(property(get = get_ShowTableStyleLastColumn, put = put_ShowTableStyleLastColumn)) bool ShowTableStyleLastColumn;
		bool get_ShowTableStyleLastColumn();
		void put_ShowTableStyleLastColumn(bool ShowTableStyleLastColumn);
		//
		__declspec(property(get = get_ShowTableStyleRowHeaders, put = put_ShowTableStyleRowHeaders)) bool ShowTableStyleRowHeaders;
		bool get_ShowTableStyleRowHeaders();
		void put_ShowTableStyleRowHeaders(bool ShowTableStyleRowHeaders);
		//
		__declspec(property(get = get_ShowTableStyleRowStripes, put = put_ShowTableStyleRowStripes)) bool ShowTableStyleRowStripes;
		bool get_ShowTableStyleRowStripes();
		void put_ShowTableStyleRowStripes(bool ShowTableStyleRowStripes);
		//
		__declspec(property(get = get_ShowValuesRow, put = put_ShowValuesRow)) bool ShowValuesRow;
		bool get_ShowValuesRow();
		void put_ShowValuesRow(bool ShowValuesRow);
		//
		__declspec(property(get = get_Slicers)) Excel::Slicers SlicersX;
		Excel::Slicers get_Slicers();
		//
		__declspec(property(get = get_SmallGrid, put = put_SmallGrid)) bool SmallGrid;
		bool get_SmallGrid();
		void put_SmallGrid(bool SmallGrid);
		//
		__declspec(property(get = get_SortUsingCustomLists, put = put_SortUsingCustomLists)) bool SortUsingCustomLists;
		bool get_SortUsingCustomLists();
		void put_SortUsingCustomLists(bool SortUsingCustomLists);
		//
		__declspec(property(get = get_SourceData, put = put_SourceData)) _variant_t SourceData;
		_variant_t get_SourceData();
		void put_SourceData(_variant_t SourceData);
		//
		__declspec(property(get = get_SubtotalHiddenPageItems, put = put_SubtotalHiddenPageItems)) bool SubtotalHiddenPageItems;
		bool get_SubtotalHiddenPageItems();
		void put_SubtotalHiddenPageItems(bool SubtotalHiddenPageItems);
		void SubtotalLocation(Excel::XlSubtototalLocationType Location);
		//
		__declspec(property(get = get_Summary, put = put_Summary)) wstring Summary;
		wstring get_Summary();
		void put_Summary(wstring Summary);
		//
		__declspec(property(get = get_TableRange1)) Excel::Range TableRange1;
		Excel::Range get_TableRange1();
		//
		__declspec(property(get = get_TableRange2)) Excel::Range TableRange2;
		Excel::Range get_TableRange2();
		//
		__declspec(property(get = get_TableStyle, put = put_TableStyle)) wstring TableStyleX;
		wstring get_TableStyle();
		void put_TableStyle(wstring TableStyle);
		//
		__declspec(property(get = get_TableStyle2, put = put_TableStyle2)) _variant_t TableStyle2;
		_variant_t get_TableStyle2();
		void put_TableStyle2(_variant_t TableStyle2);
		//
		__declspec(property(get = get_Tag, put = put_Tag)) wstring Tag;
		wstring get_Tag();
		void put_Tag(wstring Tag);
		//
		__declspec(property(get = get_TotalsAnnotation, put = put_TotalsAnnotation)) bool TotalsAnnotation;
		bool get_TotalsAnnotation();
		void put_TotalsAnnotation(bool TotalsAnnotation);
		void Update();
		//
		__declspec(property(get = get_VacatedStyle, put = put_VacatedStyle)) wstring VacatedStyle;
		wstring get_VacatedStyle();
		void put_VacatedStyle(wstring VacatedStyle);
		//
		__declspec(property(get = get_Value, put = put_Value)) wstring Value;
		wstring get_Value();
		void put_Value(wstring Value);
		//
		__declspec(property(get = get_Version)) Excel::XlPivotTableVersionList Version;
		Excel::XlPivotTableVersionList get_Version();
		//
		__declspec(property(get = get_ViewCalculatedMembers, put = put_ViewCalculatedMembers)) bool ViewCalculatedMembers;
		bool get_ViewCalculatedMembers();
		void put_ViewCalculatedMembers(bool ViewCalculatedMembers);
		Com::Object get_VisibleFields(_variant_t Index);
		Com::Object get_VisibleFields();
		//
		__declspec(property(get = get_VisualTotals, put = put_VisualTotals)) bool VisualTotals;
		bool get_VisualTotals();
		void put_VisualTotals(bool VisualTotals);
		//
		__declspec(property(get = get_VisualTotalsForSets, put = put_VisualTotalsForSets)) bool VisualTotalsForSets;
		bool get_VisualTotalsForSets();
		void put_VisualTotalsForSets(bool VisualTotalsForSets);
		//
		__declspec(property(get = get__Default, put = put__Default)) wstring _Default;
		wstring get__Default();
		void put__Default(wstring _Default);
		void _PivotSelect(wstring Name, Excel::XlPTSelectionMode Mode);
	};

	//________________________________________________________PivotTables
	// {00020873-0000-0000-C000-000000000046}
	class PivotTables : public Com::Object
	{
	public:
		PivotTables();
		~PivotTables();
		PivotTables(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotTables& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::PivotTable Add(Excel::PivotCache& PivotCache, _variant_t TableDestination, _variant_t TableName, _variant_t ReadData, _variant_t DefaultVersion);
		Excel::PivotTable Add(Excel::PivotCache& PivotCache, _variant_t TableDestination);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotTable Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________PivotField
	// {00020874-0000-0000-C000-000000000046}
	class PivotField : public Com::Object
	{
	public:
		PivotField();
		~PivotField();
		PivotField(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotField& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AddPageItem(wstring Item, _variant_t ClearList);
		void AddPageItem(wstring Item);
		//
		__declspec(property(get = get_AllItemsVisible)) bool AllItemsVisible;
		bool get_AllItemsVisible();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void AutoGroup();
		void AutoShow(long Type, long Range, long Count, wstring Field);
		//
		__declspec(property(get = get_AutoShowCount)) long AutoShowCount;
		long get_AutoShowCount();
		//
		__declspec(property(get = get_AutoShowField)) wstring AutoShowField;
		wstring get_AutoShowField();
		//
		__declspec(property(get = get_AutoShowRange)) long AutoShowRange;
		long get_AutoShowRange();
		//
		__declspec(property(get = get_AutoShowType)) long AutoShowType;
		long get_AutoShowType();
		void AutoSort(long Order, wstring Field, _variant_t PivotLine, _variant_t CustomSubtotal);
		void AutoSort(long Order, wstring Field);
		//
		__declspec(property(get = get_AutoSortCustomSubtotal)) long AutoSortCustomSubtotal;
		long get_AutoSortCustomSubtotal();
		//
		__declspec(property(get = get_AutoSortField)) wstring AutoSortField;
		wstring get_AutoSortField();
		//
		__declspec(property(get = get_AutoSortOrder)) long AutoSortOrder;
		long get_AutoSortOrder();
		//
		__declspec(property(get = get_AutoSortPivotLine)) Excel::PivotLine AutoSortPivotLine;
		Excel::PivotLine get_AutoSortPivotLine();
		//
		__declspec(property(get = get_BaseField, put = put_BaseField)) _variant_t BaseField;
		_variant_t get_BaseField();
		void put_BaseField(_variant_t BaseField);
		//
		__declspec(property(get = get_BaseItem, put = put_BaseItem)) _variant_t BaseItem;
		_variant_t get_BaseItem();
		void put_BaseItem(_variant_t BaseItem);
		Excel::CalculatedItems CalculatedItems();
		//
		__declspec(property(get = get_Calculation, put = put_Calculation)) Excel::XlPivotFieldCalculation Calculation;
		Excel::XlPivotFieldCalculation get_Calculation();
		void put_Calculation(Excel::XlPivotFieldCalculation Calculation);
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		//
		__declspec(property(get = get_ChildField)) Excel::PivotField ChildField;
		Excel::PivotField get_ChildField();
		_variant_t get_ChildItems(_variant_t Index);
		_variant_t get_ChildItems();
		void ClearAllFilters();
		void ClearLabelFilters();
		void ClearManualFilter();
		void ClearValueFilters();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CubeField)) Excel::CubeField CubeFieldX;
		Excel::CubeField get_CubeField();
		//
		__declspec(property(get = get_CurrentPage, put = put_CurrentPage)) _variant_t CurrentPage;
		_variant_t get_CurrentPage();
		void put_CurrentPage(_variant_t CurrentPage);
		//
		__declspec(property(get = get_CurrentPageList, put = put_CurrentPageList)) _variant_t CurrentPageList;
		_variant_t get_CurrentPageList();
		void put_CurrentPageList(_variant_t CurrentPageList);
		//
		__declspec(property(get = get_CurrentPageName, put = put_CurrentPageName)) wstring CurrentPageName;
		wstring get_CurrentPageName();
		void put_CurrentPageName(wstring CurrentPageName);
		//
		__declspec(property(get = get_DataRange)) Excel::Range DataRange;
		Excel::Range get_DataRange();
		//
		__declspec(property(get = get_DataType)) Excel::XlPivotFieldDataType DataType;
		Excel::XlPivotFieldDataType get_DataType();
		//
		__declspec(property(get = get_DatabaseSort, put = put_DatabaseSort)) bool DatabaseSort;
		bool get_DatabaseSort();
		void put_DatabaseSort(bool DatabaseSort);
		void Delete();
		//
		__declspec(property(get = get_DisplayAsCaption)) bool DisplayAsCaption;
		bool get_DisplayAsCaption();
		//
		__declspec(property(get = get_DisplayAsTooltip, put = put_DisplayAsTooltip)) bool DisplayAsTooltip;
		bool get_DisplayAsTooltip();
		void put_DisplayAsTooltip(bool DisplayAsTooltip);
		//
		__declspec(property(get = get_DisplayInReport, put = put_DisplayInReport)) bool DisplayInReport;
		bool get_DisplayInReport();
		void put_DisplayInReport(bool DisplayInReport);
		//
		__declspec(property(get = get_DragToColumn, put = put_DragToColumn)) bool DragToColumn;
		bool get_DragToColumn();
		void put_DragToColumn(bool DragToColumn);
		//
		__declspec(property(get = get_DragToData, put = put_DragToData)) bool DragToData;
		bool get_DragToData();
		void put_DragToData(bool DragToData);
		//
		__declspec(property(get = get_DragToHide, put = put_DragToHide)) bool DragToHide;
		bool get_DragToHide();
		void put_DragToHide(bool DragToHide);
		//
		__declspec(property(get = get_DragToPage, put = put_DragToPage)) bool DragToPage;
		bool get_DragToPage();
		void put_DragToPage(bool DragToPage);
		//
		__declspec(property(get = get_DragToRow, put = put_DragToRow)) bool DragToRow;
		bool get_DragToRow();
		void put_DragToRow(bool DragToRow);
		void DrillTo(wstring Field);
		//
		__declspec(property(get = get_DrilledDown, put = put_DrilledDown)) bool DrilledDown;
		bool get_DrilledDown();
		void put_DrilledDown(bool DrilledDown);
		//
		__declspec(property(get = get_EnableItemSelection, put = put_EnableItemSelection)) bool EnableItemSelection;
		bool get_EnableItemSelection();
		void put_EnableItemSelection(bool EnableItemSelection);
		//
		__declspec(property(get = get_EnableMultiplePageItems, put = put_EnableMultiplePageItems)) bool EnableMultiplePageItems;
		bool get_EnableMultiplePageItems();
		void put_EnableMultiplePageItems(bool EnableMultiplePageItems);
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Function, put = put_Function)) Excel::XlConsolidationFunction Function;
		Excel::XlConsolidationFunction get_Function();
		void put_Function(Excel::XlConsolidationFunction Function);
		//
		__declspec(property(get = get_GroupLevel)) _variant_t GroupLevel;
		_variant_t get_GroupLevel();
		//
		__declspec(property(get = get_Hidden, put = put_Hidden)) bool Hidden;
		bool get_Hidden();
		void put_Hidden(bool Hidden);
		_variant_t get_HiddenItems(_variant_t Index);
		_variant_t get_HiddenItems();
		//
		__declspec(property(get = get_HiddenItemsList, put = put_HiddenItemsList)) _variant_t HiddenItemsList;
		_variant_t get_HiddenItemsList();
		void put_HiddenItemsList(_variant_t HiddenItemsList);
		//
		__declspec(property(get = get_IncludeNewItemsInFilter, put = put_IncludeNewItemsInFilter)) bool IncludeNewItemsInFilter;
		bool get_IncludeNewItemsInFilter();
		void put_IncludeNewItemsInFilter(bool IncludeNewItemsInFilter);
		//
		__declspec(property(get = get_IsCalculated)) bool IsCalculated;
		bool get_IsCalculated();
		//
		__declspec(property(get = get_IsMemberProperty)) bool IsMemberProperty;
		bool get_IsMemberProperty();
		//
		__declspec(property(get = get_LabelRange)) Excel::Range LabelRange;
		Excel::Range get_LabelRange();
		//
		__declspec(property(get = get_LayoutBlankLine, put = put_LayoutBlankLine)) bool LayoutBlankLine;
		bool get_LayoutBlankLine();
		void put_LayoutBlankLine(bool LayoutBlankLine);
		//
		__declspec(property(get = get_LayoutCompactRow, put = put_LayoutCompactRow)) bool LayoutCompactRow;
		bool get_LayoutCompactRow();
		void put_LayoutCompactRow(bool LayoutCompactRow);
		//
		__declspec(property(get = get_LayoutForm, put = put_LayoutForm)) Excel::XlLayoutFormType LayoutForm;
		Excel::XlLayoutFormType get_LayoutForm();
		void put_LayoutForm(Excel::XlLayoutFormType LayoutForm);
		//
		__declspec(property(get = get_LayoutPageBreak, put = put_LayoutPageBreak)) bool LayoutPageBreak;
		bool get_LayoutPageBreak();
		void put_LayoutPageBreak(bool LayoutPageBreak);
		//
		__declspec(property(get = get_LayoutSubtotalLocation, put = put_LayoutSubtotalLocation)) Excel::XlSubtototalLocationType LayoutSubtotalLocation;
		Excel::XlSubtototalLocationType get_LayoutSubtotalLocation();
		void put_LayoutSubtotalLocation(Excel::XlSubtototalLocationType LayoutSubtotalLocation);
		//
		__declspec(property(get = get_MemberPropertyCaption, put = put_MemberPropertyCaption)) wstring MemberPropertyCaption;
		wstring get_MemberPropertyCaption();
		void put_MemberPropertyCaption(wstring MemberPropertyCaption);
		//
		__declspec(property(get = get_MemoryUsed)) long MemoryUsed;
		long get_MemoryUsed();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) wstring NumberFormat;
		wstring get_NumberFormat();
		void put_NumberFormat(wstring NumberFormat);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) Excel::XlPivotFieldOrientation Orientation;
		Excel::XlPivotFieldOrientation get_Orientation();
		void put_Orientation(Excel::XlPivotFieldOrientation Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ParentField)) Excel::PivotField ParentField;
		Excel::PivotField get_ParentField();
		_variant_t get_ParentItems(_variant_t Index);
		_variant_t get_ParentItems();
		//
		__declspec(property(get = get_PivotFilters)) Excel::PivotFilters PivotFiltersX;
		Excel::PivotFilters get_PivotFilters();
		_variant_t PivotItems(_variant_t Index);
		_variant_t PivotItems();
		//
		__declspec(property(get = get_Position, put = put_Position)) _variant_t Position;
		_variant_t get_Position();
		void put_Position(_variant_t Position);
		//
		__declspec(property(get = get_PropertyOrder, put = put_PropertyOrder)) long PropertyOrder;
		long get_PropertyOrder();
		void put_PropertyOrder(long PropertyOrder);
		//
		__declspec(property(get = get_PropertyParentField)) Excel::PivotField PropertyParentField;
		Excel::PivotField get_PropertyParentField();
		//
		__declspec(property(get = get_RepeatLabels, put = put_RepeatLabels)) bool RepeatLabels;
		bool get_RepeatLabels();
		void put_RepeatLabels(bool RepeatLabels);
		//
		__declspec(property(get = get_ServerBased, put = put_ServerBased)) bool ServerBased;
		bool get_ServerBased();
		void put_ServerBased(bool ServerBased);
		//
		__declspec(property(get = get_ShowAllItems, put = put_ShowAllItems)) bool ShowAllItems;
		bool get_ShowAllItems();
		void put_ShowAllItems(bool ShowAllItems);
		//
		__declspec(property(get = get_ShowDetail, put = put_ShowDetail)) bool ShowDetail;
		bool get_ShowDetail();
		void put_ShowDetail(bool ShowDetail);
		//
		__declspec(property(get = get_ShowingInAxis)) bool ShowingInAxis;
		bool get_ShowingInAxis();
		//
		__declspec(property(get = get_SourceCaption)) wstring SourceCaption;
		wstring get_SourceCaption();
		//
		__declspec(property(get = get_SourceName)) wstring SourceName;
		wstring get_SourceName();
		//
		__declspec(property(get = get_StandardFormula, put = put_StandardFormula)) wstring StandardFormula;
		wstring get_StandardFormula();
		void put_StandardFormula(wstring StandardFormula);
		//
		__declspec(property(get = get_SubtotalName, put = put_SubtotalName)) wstring SubtotalName;
		wstring get_SubtotalName();
		void put_SubtotalName(wstring SubtotalName);
		_variant_t get_Subtotals(_variant_t Index);
		_variant_t get_Subtotals();
		void put_Subtotals(_variant_t Subtotals, _variant_t Index);
		void put_Subtotals(_variant_t Subtotals);
		//
		__declspec(property(get = get_TotalLevels)) _variant_t TotalLevels;
		_variant_t get_TotalLevels();
		//
		__declspec(property(get = get_UseMemberPropertyAsCaption, put = put_UseMemberPropertyAsCaption)) bool UseMemberPropertyAsCaption;
		bool get_UseMemberPropertyAsCaption();
		void put_UseMemberPropertyAsCaption(bool UseMemberPropertyAsCaption);
		//
		__declspec(property(get = get_Value, put = put_Value)) wstring Value;
		wstring get_Value();
		void put_Value(wstring Value);
		_variant_t get_VisibleItems(_variant_t Index);
		_variant_t get_VisibleItems();
		//
		__declspec(property(get = get_VisibleItemsList, put = put_VisibleItemsList)) _variant_t VisibleItemsList;
		_variant_t get_VisibleItemsList();
		void put_VisibleItemsList(_variant_t VisibleItemsList);
		void _AutoSort(long Order, wstring Field);
		//
		__declspec(property(get = get__Default, put = put__Default)) wstring _Default;
		wstring get__Default();
		void put__Default(wstring _Default);
	};

	//________________________________________________________PivotFields
	// {00020875-0000-0000-C000-000000000046}
	class PivotFields : public Com::Object
	{
	public:
		PivotFields();
		~PivotFields();
		PivotFields(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotFields& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Excel::PivotTable Parent;
		Excel::PivotTable get_Parent();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________CalculatedFields
	// {00024420-0000-0000-C000-000000000046}
	class CalculatedFields : public Com::Object
	{
	public:
		CalculatedFields();
		~CalculatedFields();
		CalculatedFields(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CalculatedFields& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::PivotField Add(wstring Name, wstring Formula, _variant_t UseStandardFormula);
		Excel::PivotField Add(wstring Name, wstring Formula);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotField Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotField _Add(wstring Name, wstring Formula);
		Excel::PivotField get__Default(_variant_t Field);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________PivotItem
	// {00020876-0000-0000-C000-000000000046}
	class PivotItem : public Com::Object
	{
	public:
		PivotItem();
		~PivotItem();
		PivotItem(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotItem& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		_variant_t get_ChildItems(_variant_t Index);
		_variant_t get_ChildItems();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataRange)) Excel::Range DataRange;
		Excel::Range get_DataRange();
		void Delete();
		void DrillTo(wstring Field);
		//
		__declspec(property(get = get_DrilledDown, put = put_DrilledDown)) bool DrilledDown;
		bool get_DrilledDown();
		void put_DrilledDown(bool DrilledDown);
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_IsCalculated)) bool IsCalculated;
		bool get_IsCalculated();
		//
		__declspec(property(get = get_LabelRange)) Excel::Range LabelRange;
		Excel::Range get_LabelRange();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Excel::PivotField Parent;
		Excel::PivotField get_Parent();
		//
		__declspec(property(get = get_ParentItem)) Excel::PivotItem ParentItem;
		Excel::PivotItem get_ParentItem();
		//
		__declspec(property(get = get_ParentShowDetail)) bool ParentShowDetail;
		bool get_ParentShowDetail();
		//
		__declspec(property(get = get_Position, put = put_Position)) long Position;
		long get_Position();
		void put_Position(long Position);
		//
		__declspec(property(get = get_RecordCount)) long RecordCount;
		long get_RecordCount();
		//
		__declspec(property(get = get_ShowDetail, put = put_ShowDetail)) bool ShowDetail;
		bool get_ShowDetail();
		void put_ShowDetail(bool ShowDetail);
		//
		__declspec(property(get = get_SourceName)) _variant_t SourceName;
		_variant_t get_SourceName();
		//
		__declspec(property(get = get_SourceNameStandard)) wstring SourceNameStandard;
		wstring get_SourceNameStandard();
		//
		__declspec(property(get = get_StandardFormula, put = put_StandardFormula)) wstring StandardFormula;
		wstring get_StandardFormula();
		void put_StandardFormula(wstring StandardFormula);
		//
		__declspec(property(get = get_Value, put = put_Value)) wstring Value;
		wstring get_Value();
		void put_Value(wstring Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get__Default, put = put__Default)) wstring _Default;
		wstring get__Default();
		void put__Default(wstring _Default);
	};

	//________________________________________________________PivotItems
	// {00020877-0000-0000-C000-000000000046}
	class PivotItems : public Com::Object
	{
	public:
		PivotItems();
		~PivotItems();
		PivotItems(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotItems& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Add(wstring Name);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Excel::PivotField Parent;
		Excel::PivotField get_Parent();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________CalculatedItems
	// {00024421-0000-0000-C000-000000000046}
	class CalculatedItems : public Com::Object
	{
	public:
		CalculatedItems();
		~CalculatedItems();
		CalculatedItems(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CalculatedItems& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::PivotItem Add(wstring Name, wstring Formula, _variant_t UseStandardFormula);
		Excel::PivotItem Add(wstring Name, wstring Formula);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotItem Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotItem _Add(wstring Name, wstring Formula);
		Excel::PivotItem get__Default(_variant_t Field);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Characters
	// {00020878-0000-0000-C000-000000000046}
	class Characters : public Com::Object
	{
	public:
		Characters();
		~Characters();
		Characters(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Characters& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		_variant_t Insert(wstring String);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticCharacters, put = put_PhoneticCharacters)) wstring PhoneticCharacters;
		wstring get_PhoneticCharacters();
		void put_PhoneticCharacters(wstring PhoneticCharacters);
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
	};

	//________________________________________________________Dialogs
	// {00020879-0000-0000-C000-000000000046}
	class Dialogs : public Com::Object
	{
	public:
		Dialogs();
		~Dialogs();
		Dialogs(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Dialogs& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Dialog get_Item(Excel::XlBuiltInDialog Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Dialog get__Default(Excel::XlBuiltInDialog Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Dialog
	// {0002087A-0000-0000-C000-000000000046}
	class Dialog : public Com::Object
	{
	public:
		Dialog();
		~Dialog();
		Dialog(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Dialog& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		bool Show(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30);
		bool Show();
	};

	//________________________________________________________SoundNote
	// {0002087B-0000-0000-C000-000000000046}
	class SoundNote : public Com::Object
	{
	public:
		SoundNote();
		~SoundNote();
		SoundNote(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SoundNote& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		_variant_t Import(wstring Filename);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Play();
		_variant_t Record();
	};

	//________________________________________________________Button
	// {0002087D-0000-0000-C000-000000000046}
	class Button : public Com::Object
	{
	public:
		Button();
		~Button();
		Button(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Button& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_CancelButton, put = put_CancelButton)) bool CancelButton;
		bool get_CancelButton();
		void put_CancelButton(bool CancelButton);
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		//
		__declspec(property(get = get_DefaultButton, put = put_DefaultButton)) bool DefaultButton;
		bool get_DefaultButton();
		void put_DefaultButton(bool DefaultButton);
		_variant_t Delete();
		//
		__declspec(property(get = get_DismissButton, put = put_DismissButton)) bool DismissButton;
		bool get_DismissButton();
		void put_DismissButton(bool DismissButton);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HelpButton, put = put_HelpButton)) bool HelpButton;
		bool get_HelpButton();
		void put_HelpButton(bool HelpButton);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________Buttons
	// {0002087E-0000-0000-C000-000000000046}
	class Buttons : public Com::Object
	{
	public:
		Buttons();
		~Buttons();
		Buttons(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Buttons& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		Excel::Button Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		_variant_t BringToFront();
		//
		__declspec(property(get = get_CancelButton, put = put_CancelButton)) bool CancelButton;
		bool get_CancelButton();
		void put_CancelButton(bool CancelButton);
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		//
		__declspec(property(get = get_DefaultButton, put = put_DefaultButton)) bool DefaultButton;
		bool get_DefaultButton();
		void put_DefaultButton(bool DefaultButton);
		_variant_t Delete();
		//
		__declspec(property(get = get_DismissButton, put = put_DismissButton)) bool DismissButton;
		bool get_DismissButton();
		void put_DismissButton(bool DismissButton);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HelpButton, put = put_HelpButton)) bool HelpButton;
		bool get_HelpButton();
		void put_HelpButton(bool HelpButton);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________CheckBox
	// {0002087F-0000-0000-C000-000000000046}
	class CheckBox : public Com::Object
	{
	public:
		CheckBox();
		~CheckBox();
		CheckBox(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CheckBox& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Value, put = put_Value)) _variant_t Value;
		_variant_t get_Value();
		void put_Value(_variant_t Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
	};

	//________________________________________________________CheckBoxes
	// {00020880-0000-0000-C000-000000000046}
	class CheckBoxes : public Com::Object
	{
	public:
		CheckBoxes();
		~CheckBoxes();
		CheckBoxes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CheckBoxes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		Excel::CheckBox Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Value, put = put_Value)) _variant_t Value;
		_variant_t get_Value();
		void put_Value(_variant_t Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________OptionButton
	// {00020881-0000-0000-C000-000000000046}
	class OptionButton : public Com::Object
	{
	public:
		OptionButton();
		~OptionButton();
		OptionButton(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OptionButton& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_GroupBox)) Excel::GroupBox GroupBoxX;
		Excel::GroupBox get_GroupBox();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Value, put = put_Value)) _variant_t Value;
		_variant_t get_Value();
		void put_Value(_variant_t Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
	};

	//________________________________________________________OptionButtons
	// {00020882-0000-0000-C000-000000000046}
	class OptionButtons : public Com::Object
	{
	public:
		OptionButtons();
		~OptionButtons();
		OptionButtons(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OptionButtons& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		Excel::OptionButton Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_GroupBox)) Excel::GroupBox GroupBoxX;
		Excel::GroupBox get_GroupBox();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Value, put = put_Value)) _variant_t Value;
		_variant_t get_Value();
		void put_Value(_variant_t Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________EditBox
	// {00020883-0000-0000-C000-000000000046}
	class EditBox : public Com::Object
	{
	public:
		EditBox();
		~EditBox();
		EditBox(const Com::Object& init) { Com::Object::Private_Copy(init); }
		EditBox& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_DisplayVerticalScrollBar, put = put_DisplayVerticalScrollBar)) bool DisplayVerticalScrollBar;
		bool get_DisplayVerticalScrollBar();
		void put_DisplayVerticalScrollBar(bool DisplayVerticalScrollBar);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_InputType, put = put_InputType)) long InputType;
		long get_InputType();
		void put_InputType(long InputType);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedObject)) wstring LinkedObject;
		wstring get_LinkedObject();
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_MultiLine, put = put_MultiLine)) bool MultiLine;
		bool get_MultiLine();
		void put_MultiLine(bool MultiLine);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PasswordEdit, put = put_PasswordEdit)) bool PasswordEdit;
		bool get_PasswordEdit();
		void put_PasswordEdit(bool PasswordEdit);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________EditBoxes
	// {00020884-0000-0000-C000-000000000046}
	class EditBoxes : public Com::Object
	{
	public:
		EditBoxes();
		~EditBoxes();
		EditBoxes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		EditBoxes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::EditBox Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_DisplayVerticalScrollBar, put = put_DisplayVerticalScrollBar)) bool DisplayVerticalScrollBar;
		bool get_DisplayVerticalScrollBar();
		void put_DisplayVerticalScrollBar(bool DisplayVerticalScrollBar);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_InputType, put = put_InputType)) long InputType;
		long get_InputType();
		void put_InputType(long InputType);
		_variant_t Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_MultiLine, put = put_MultiLine)) bool MultiLine;
		bool get_MultiLine();
		void put_MultiLine(bool MultiLine);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PasswordEdit, put = put_PasswordEdit)) bool PasswordEdit;
		bool get_PasswordEdit();
		void put_PasswordEdit(bool PasswordEdit);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		void _Dummy34();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________ScrollBar
	// {00020885-0000-0000-C000-000000000046}
	class ScrollBar : public Com::Object
	{
	public:
		ScrollBar();
		~ScrollBar();
		ScrollBar(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ScrollBar& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_LargeChange, put = put_LargeChange)) long LargeChange;
		long get_LargeChange();
		void put_LargeChange(long LargeChange);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Max, put = put_Max)) long Max;
		long get_Max();
		void put_Max(long Max);
		//
		__declspec(property(get = get_Min, put = put_Min)) long Min;
		long get_Min();
		void put_Min(long Min);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_SmallChange, put = put_SmallChange)) long SmallChange;
		long get_SmallChange();
		void put_SmallChange(long SmallChange);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
	};

	//________________________________________________________ScrollBars
	// {00020886-0000-0000-C000-000000000046}
	class ScrollBars : public Com::Object
	{
	public:
		ScrollBars();
		~ScrollBars();
		ScrollBars(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ScrollBars& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ScrollBar Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_LargeChange, put = put_LargeChange)) long LargeChange;
		long get_LargeChange();
		void put_LargeChange(long LargeChange);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Max, put = put_Max)) long Max;
		long get_Max();
		void put_Max(long Max);
		//
		__declspec(property(get = get_Min, put = put_Min)) long Min;
		long get_Min();
		void put_Min(long Min);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_SmallChange, put = put_SmallChange)) long SmallChange;
		long get_SmallChange();
		void put_SmallChange(long SmallChange);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________ListBox
	// {00020887-0000-0000-C000-000000000046}
	class ListBox : public Com::Object
	{
	public:
		ListBox();
		~ListBox();
		ListBox(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListBox& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		_variant_t AddItem(_variant_t Text, _variant_t Index);
		_variant_t AddItem(_variant_t Text);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_LinkedObject)) _variant_t LinkedObject;
		_variant_t get_LinkedObject();
		_variant_t get_List(_variant_t Index);
		_variant_t get_List();
		void put_List(_variant_t List, _variant_t Index);
		void put_List(_variant_t List);
		//
		__declspec(property(get = get_ListCount)) long ListCount;
		long get_ListCount();
		//
		__declspec(property(get = get_ListFillRange, put = put_ListFillRange)) wstring ListFillRange;
		wstring get_ListFillRange();
		void put_ListFillRange(wstring ListFillRange);
		//
		__declspec(property(get = get_ListIndex, put = put_ListIndex)) long ListIndex;
		long get_ListIndex();
		void put_ListIndex(long ListIndex);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_MultiSelect, put = put_MultiSelect)) long MultiSelect;
		long get_MultiSelect();
		void put_MultiSelect(long MultiSelect);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t RemoveAllItems();
		_variant_t RemoveItem(long Index, _variant_t Count);
		_variant_t RemoveItem(long Index);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t get_Selected(_variant_t Index);
		_variant_t get_Selected();
		void put_Selected(_variant_t Selected, _variant_t Index);
		void put_Selected(_variant_t Selected);
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
	};

	//________________________________________________________ListBoxes
	// {00020888-0000-0000-C000-000000000046}
	class ListBoxes : public Com::Object
	{
	public:
		ListBoxes();
		~ListBoxes();
		ListBoxes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListBoxes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ListBox Add(double Left, double Top, double Width, double Height);
		_variant_t AddItem(_variant_t Text, _variant_t Index);
		_variant_t AddItem(_variant_t Text);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		_variant_t get_List(_variant_t Index);
		_variant_t get_List();
		void put_List(_variant_t List, _variant_t Index);
		void put_List(_variant_t List);
		//
		__declspec(property(get = get_ListFillRange, put = put_ListFillRange)) wstring ListFillRange;
		wstring get_ListFillRange();
		void put_ListFillRange(wstring ListFillRange);
		//
		__declspec(property(get = get_ListIndex, put = put_ListIndex)) long ListIndex;
		long get_ListIndex();
		void put_ListIndex(long ListIndex);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_MultiSelect, put = put_MultiSelect)) long MultiSelect;
		long get_MultiSelect();
		void put_MultiSelect(long MultiSelect);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t RemoveAllItems();
		_variant_t RemoveItem(long Index, _variant_t Count);
		_variant_t RemoveItem(long Index);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t get_Selected(_variant_t Index);
		_variant_t get_Selected();
		void put_Selected(_variant_t Selected, _variant_t Index);
		void put_Selected(_variant_t Selected);
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		void _Dummy31();
		void _Dummy33();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________GroupBox
	// {00020889-0000-0000-C000-000000000046}
	class GroupBox : public Com::Object
	{
	public:
		GroupBox();
		~GroupBox();
		GroupBox(const Com::Object& init) { Com::Object::Private_Copy(init); }
		GroupBox& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________GroupBoxes
	// {0002088A-0000-0000-C000-000000000046}
	class GroupBoxes : public Com::Object
	{
	public:
		GroupBoxes();
		~GroupBoxes();
		GroupBoxes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		GroupBoxes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		Excel::GroupBox Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________DropDown
	// {0002088B-0000-0000-C000-000000000046}
	class DropDown : public Com::Object
	{
	public:
		DropDown();
		~DropDown();
		DropDown(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DropDown& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		_variant_t AddItem(_variant_t Text, _variant_t Index);
		_variant_t AddItem(_variant_t Text);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		//
		__declspec(property(get = get_DropDownLines, put = put_DropDownLines)) long DropDownLines;
		long get_DropDownLines();
		void put_DropDownLines(long DropDownLines);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_LinkedObject)) _variant_t LinkedObject;
		_variant_t get_LinkedObject();
		_variant_t get_List(_variant_t Index);
		_variant_t get_List();
		void put_List(_variant_t List, _variant_t Index);
		void put_List(_variant_t List);
		//
		__declspec(property(get = get_ListCount)) long ListCount;
		long get_ListCount();
		//
		__declspec(property(get = get_ListFillRange, put = put_ListFillRange)) wstring ListFillRange;
		wstring get_ListFillRange();
		void put_ListFillRange(wstring ListFillRange);
		//
		__declspec(property(get = get_ListIndex, put = put_ListIndex)) long ListIndex;
		long get_ListIndex();
		void put_ListIndex(long ListIndex);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t RemoveAllItems();
		_variant_t RemoveItem(long Index, _variant_t Count);
		_variant_t RemoveItem(long Index);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t get_Selected(_variant_t Index);
		_variant_t get_Selected();
		void put_Selected(_variant_t Selected, _variant_t Index);
		void put_Selected(_variant_t Selected);
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy36();
	};

	//________________________________________________________DropDowns
	// {0002088C-0000-0000-C000-000000000046}
	class DropDowns : public Com::Object
	{
	public:
		DropDowns();
		~DropDowns();
		DropDowns(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DropDowns& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::DropDown Add(double Left, double Top, double Width, double Height, _variant_t Editable);
		Excel::DropDown Add(double Left, double Top, double Width, double Height);
		_variant_t AddItem(_variant_t Text, _variant_t Index);
		_variant_t AddItem(_variant_t Text);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		//
		__declspec(property(get = get_DropDownLines, put = put_DropDownLines)) long DropDownLines;
		long get_DropDownLines();
		void put_DropDownLines(long DropDownLines);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		_variant_t get_List(_variant_t Index);
		_variant_t get_List();
		void put_List(_variant_t List, _variant_t Index);
		void put_List(_variant_t List);
		//
		__declspec(property(get = get_ListFillRange, put = put_ListFillRange)) wstring ListFillRange;
		wstring get_ListFillRange();
		void put_ListFillRange(wstring ListFillRange);
		//
		__declspec(property(get = get_ListIndex, put = put_ListIndex)) long ListIndex;
		long get_ListIndex();
		void put_ListIndex(long ListIndex);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t RemoveAllItems();
		_variant_t RemoveItem(long Index, _variant_t Count);
		_variant_t RemoveItem(long Index);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t get_Selected(_variant_t Index);
		_variant_t get_Selected();
		void put_Selected(_variant_t Selected, _variant_t Index);
		void put_Selected(_variant_t Selected);
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		void _Dummy31();
		void _Dummy33();
		void _Dummy36();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Spinner
	// {0002088D-0000-0000-C000-000000000046}
	class Spinner : public Com::Object
	{
	public:
		Spinner();
		~Spinner();
		Spinner(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Spinner& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Max, put = put_Max)) long Max;
		long get_Max();
		void put_Max(long Max);
		//
		__declspec(property(get = get_Min, put = put_Min)) long Min;
		long get_Min();
		void put_Min(long Min);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_SmallChange, put = put_SmallChange)) long SmallChange;
		long get_SmallChange();
		void put_SmallChange(long SmallChange);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
	};

	//________________________________________________________Spinners
	// {0002088E-0000-0000-C000-000000000046}
	class Spinners : public Com::Object
	{
	public:
		Spinners();
		~Spinners();
		Spinners(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Spinners& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Spinner Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		//
		__declspec(property(get = get_Display3DShading, put = put_Display3DShading)) bool Display3DShading;
		bool get_Display3DShading();
		void put_Display3DShading(bool Display3DShading);
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Max, put = put_Max)) long Max;
		long get_Max();
		void put_Max(long Max);
		//
		__declspec(property(get = get_Min, put = put_Min)) long Min;
		long get_Min();
		void put_Min(long Min);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_SmallChange, put = put_SmallChange)) long SmallChange;
		long get_SmallChange();
		void put_SmallChange(long SmallChange);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________DialogFrame
	// {0002088F-0000-0000-C000-000000000046}
	class DialogFrame : public Com::Object
	{
	public:
		DialogFrame();
		~DialogFrame();
		DialogFrame(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DialogFrame& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		void _Dummy10();
		void _Dummy12();
		void _Dummy17();
		void _Dummy18();
		void _Dummy20();
		void _Dummy22();
		void _Dummy23();
		void _Dummy25();
		void _Dummy3();
		void _Dummy4();
		void _Dummy5();
		void _Dummy7();
		void _Dummy8();
		void _Dummy9();
	};

	//________________________________________________________Label
	// {00020890-0000-0000-C000-000000000046}
	class Label : public Com::Object
	{
	public:
		Label();
		~Label();
		Label(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Label& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy33();
	};

	//________________________________________________________Labels
	// {00020891-0000-0000-C000-000000000046}
	class Labels : public Com::Object
	{
	public:
		Labels();
		~Labels();
		Labels(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Labels& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Accelerator, put = put_Accelerator)) _variant_t Accelerator;
		_variant_t get_Accelerator();
		void put_Accelerator(_variant_t Accelerator);
		Excel::Label Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PhoneticAccelerator, put = put_PhoneticAccelerator)) _variant_t PhoneticAccelerator;
		_variant_t get_PhoneticAccelerator();
		void put_PhoneticAccelerator(_variant_t PhoneticAccelerator);
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		void _Dummy33();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Panes
	// {00020894-0000-0000-C000-000000000046}
	class Panes : public Com::Object
	{
	public:
		Panes();
		~Panes();
		Panes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Panes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Pane get_Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Pane get__Default(long Index);
	};

	//________________________________________________________Pane
	// {00020895-0000-0000-C000-000000000046}
	class Pane : public Com::Object
	{
	public:
		Pane();
		~Pane();
		Pane(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Pane& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		bool Activate();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		_variant_t LargeScroll(_variant_t Down, _variant_t Up, _variant_t ToRight, _variant_t ToLeft);
		_variant_t LargeScroll();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		long PointsToScreenPixelsX(long Points);
		long PointsToScreenPixelsY(long Points);
		//
		__declspec(property(get = get_ScrollColumn, put = put_ScrollColumn)) long ScrollColumn;
		long get_ScrollColumn();
		void put_ScrollColumn(long ScrollColumn);
		void ScrollIntoView(long Left, long Top, long Width, long Height, _variant_t Start);
		void ScrollIntoView(long Left, long Top, long Width, long Height);
		//
		__declspec(property(get = get_ScrollRow, put = put_ScrollRow)) long ScrollRow;
		long get_ScrollRow();
		void put_ScrollRow(long ScrollRow);
		_variant_t SmallScroll(_variant_t Down, _variant_t Up, _variant_t ToRight, _variant_t ToLeft);
		_variant_t SmallScroll();
		//
		__declspec(property(get = get_VisibleRange)) Excel::Range VisibleRange;
		Excel::Range get_VisibleRange();
	};

	//________________________________________________________Scenarios
	// {00020896-0000-0000-C000-000000000046}
	class Scenarios : public Com::Object
	{
	public:
		Scenarios();
		~Scenarios();
		Scenarios(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Scenarios& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Scenario Add(wstring Name, _variant_t ChangingCells, _variant_t Values, _variant_t Comment, _variant_t Locked, _variant_t Hidden);
		Excel::Scenario Add(wstring Name, _variant_t ChangingCells);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		_variant_t CreateSummary(Excel::XlSummaryReportType ReportType, _variant_t ResultCells);
		_variant_t CreateSummary(Excel::XlSummaryReportType ReportType);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Scenario Item(_variant_t Index);
		_variant_t Merge(_variant_t Source);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Scenario
	// {00020897-0000-0000-C000-000000000046}
	class Scenario : public Com::Object
	{
	public:
		Scenario();
		~Scenario();
		Scenario(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Scenario& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t ChangeScenario(_variant_t ChangingCells, _variant_t Values);
		_variant_t ChangeScenario(_variant_t ChangingCells);
		//
		__declspec(property(get = get_ChangingCells)) Excel::Range ChangingCells;
		Excel::Range get_ChangingCells();
		//
		__declspec(property(get = get_Comment, put = put_Comment)) wstring CommentX;
		wstring get_Comment();
		void put_Comment(wstring Comment);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Hidden, put = put_Hidden)) bool Hidden;
		bool get_Hidden();
		void put_Hidden(bool Hidden);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Show();
		_variant_t get_Values(_variant_t Index);
		_variant_t get_Values();
	};

	//________________________________________________________GroupObject
	// {00020898-0000-0000-C000-000000000046}
	class GroupObject : public Com::Object
	{
	public:
		GroupObject();
		~GroupObject();
		GroupObject(const Com::Object& init) { Com::Object::Private_Copy(init); }
		GroupObject& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ArrowHeadLength, put = put_ArrowHeadLength)) _variant_t ArrowHeadLength;
		_variant_t get_ArrowHeadLength();
		void put_ArrowHeadLength(_variant_t ArrowHeadLength);
		//
		__declspec(property(get = get_ArrowHeadStyle, put = put_ArrowHeadStyle)) _variant_t ArrowHeadStyle;
		_variant_t get_ArrowHeadStyle();
		void put_ArrowHeadStyle(_variant_t ArrowHeadStyle);
		//
		__declspec(property(get = get_ArrowHeadWidth, put = put_ArrowHeadWidth)) _variant_t ArrowHeadWidth;
		_variant_t get_ArrowHeadWidth();
		void put_ArrowHeadWidth(_variant_t ArrowHeadWidth);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		Com::Object Ungroup();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy27();
		void _Dummy28();
		void _Dummy30();
		void _Dummy36();
		void _Dummy37();
		void _Dummy38();
		void _Dummy41();
		void _Dummy42();
		void _Dummy43();
		void _Dummy44();
		void _Dummy45();
		void _Dummy47();
		void _Dummy48();
		void _Dummy50();
		void _Dummy52();
		void _Dummy53();
		void _Dummy54();
		void _Dummy55();
		void _Dummy56();
		void _Dummy57();
		void _Dummy58();
		void _Dummy59();
		void _Dummy60();
		void _Dummy61();
		void _Dummy62();
		void _Dummy63();
		void _Dummy65();
		void _Dummy66();
		void _Dummy67();
		void _Dummy68();
		void _Dummy70();
		void _Dummy72();
		void _Dummy73();
		void _Dummy75();
		void _Dummy77();
	};

	//________________________________________________________GroupObjects
	// {00020899-0000-0000-C000-000000000046}
	class GroupObjects : public Com::Object
	{
	public:
		GroupObjects();
		~GroupObjects();
		GroupObjects(const Com::Object& init) { Com::Object::Private_Copy(init); }
		GroupObjects& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ArrowHeadLength, put = put_ArrowHeadLength)) _variant_t ArrowHeadLength;
		_variant_t get_ArrowHeadLength();
		void put_ArrowHeadLength(_variant_t ArrowHeadLength);
		//
		__declspec(property(get = get_ArrowHeadStyle, put = put_ArrowHeadStyle)) _variant_t ArrowHeadStyle;
		_variant_t get_ArrowHeadStyle();
		void put_ArrowHeadStyle(_variant_t ArrowHeadStyle);
		//
		__declspec(property(get = get_ArrowHeadWidth, put = put_ArrowHeadWidth)) _variant_t ArrowHeadWidth;
		_variant_t get_ArrowHeadWidth();
		void put_ArrowHeadWidth(_variant_t ArrowHeadWidth);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		Com::Object Ungroup();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy27();
		void _Dummy28();
		void _Dummy3();
		void _Dummy30();
		void _Dummy36();
		void _Dummy37();
		void _Dummy38();
		void _Dummy41();
		void _Dummy42();
		void _Dummy43();
		void _Dummy44();
		void _Dummy45();
		void _Dummy47();
		void _Dummy48();
		void _Dummy50();
		void _Dummy52();
		void _Dummy53();
		void _Dummy54();
		void _Dummy55();
		void _Dummy56();
		void _Dummy57();
		void _Dummy58();
		void _Dummy59();
		void _Dummy60();
		void _Dummy61();
		void _Dummy62();
		void _Dummy63();
		void _Dummy65();
		void _Dummy66();
		void _Dummy67();
		void _Dummy68();
		void _Dummy70();
		void _Dummy72();
		void _Dummy73();
		void _Dummy75();
		void _Dummy77();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Line
	// {0002089A-0000-0000-C000-000000000046}
	class Line : public Com::Object
	{
	public:
		Line();
		~Line();
		Line(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Line& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ArrowHeadLength, put = put_ArrowHeadLength)) _variant_t ArrowHeadLength;
		_variant_t get_ArrowHeadLength();
		void put_ArrowHeadLength(_variant_t ArrowHeadLength);
		//
		__declspec(property(get = get_ArrowHeadStyle, put = put_ArrowHeadStyle)) _variant_t ArrowHeadStyle;
		_variant_t get_ArrowHeadStyle();
		void put_ArrowHeadStyle(_variant_t ArrowHeadStyle);
		//
		__declspec(property(get = get_ArrowHeadWidth, put = put_ArrowHeadWidth)) _variant_t ArrowHeadWidth;
		_variant_t get_ArrowHeadWidth();
		void put_ArrowHeadWidth(_variant_t ArrowHeadWidth);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________Lines
	// {0002089B-0000-0000-C000-000000000046}
	class Lines : public Com::Object
	{
	public:
		Lines();
		~Lines();
		Lines(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Lines& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Line Add(double X1, double Y1, double X2, double Y2);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ArrowHeadLength, put = put_ArrowHeadLength)) _variant_t ArrowHeadLength;
		_variant_t get_ArrowHeadLength();
		void put_ArrowHeadLength(_variant_t ArrowHeadLength);
		//
		__declspec(property(get = get_ArrowHeadStyle, put = put_ArrowHeadStyle)) _variant_t ArrowHeadStyle;
		_variant_t get_ArrowHeadStyle();
		void put_ArrowHeadStyle(_variant_t ArrowHeadStyle);
		//
		__declspec(property(get = get_ArrowHeadWidth, put = put_ArrowHeadWidth)) _variant_t ArrowHeadWidth;
		_variant_t get_ArrowHeadWidth();
		void put_ArrowHeadWidth(_variant_t ArrowHeadWidth);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Rectangle
	// {0002089C-0000-0000-C000-000000000046}
	class Rectangle : public Com::Object
	{
	public:
		Rectangle();
		~Rectangle();
		Rectangle(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Rectangle& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________Rectangles
	// {0002089D-0000-0000-C000-000000000046}
	class Rectangles : public Com::Object
	{
	public:
		Rectangles();
		~Rectangles();
		Rectangles(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Rectangles& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Rectangle Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Oval
	// {0002089E-0000-0000-C000-000000000046}
	class Oval : public Com::Object
	{
	public:
		Oval();
		~Oval();
		Oval(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Oval& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________Ovals
	// {0002089F-0000-0000-C000-000000000046}
	class Ovals : public Com::Object
	{
	public:
		Ovals();
		~Ovals();
		Ovals(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Ovals& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Oval Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Arc
	// {000208A0-0000-0000-C000-000000000046}
	class Arc : public Com::Object
	{
	public:
		Arc();
		~Arc();
		Arc(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Arc& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy43();
	};

	//________________________________________________________Arcs
	// {000208A1-0000-0000-C000-000000000046}
	class Arcs : public Com::Object
	{
	public:
		Arcs();
		~Arcs();
		Arcs(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Arcs& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Arc Add(double X1, double Y1, double X2, double Y2);
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		void _Dummy43();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________OLEObjectEvents
	// {00024410-0000-0000-C000-000000000046}
	class OLEObjectEvents : public Com::Object
	{
	public:
		OLEObjectEvents();
		~OLEObjectEvents();
		OLEObjectEvents(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OLEObjectEvents& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void GotFocus();
		void LostFocus();
	};

	//_________________________________________________________OLEObject
	// {000208A2-0000-0000-C000-000000000046}
	class OLEObjectX : public Com::Object
	{
	public:
		OLEObjectX();
		~OLEObjectX();
		OLEObjectX(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OLEObjectX& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		_variant_t Activate();
		//
		__declspec(property(get = get_AltHTML, put = put_AltHTML)) wstring AltHTML;
		wstring get_AltHTML();
		void put_AltHTML(wstring AltHTML);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoLoad, put = put_AutoLoad)) bool AutoLoad;
		bool get_AutoLoad();
		void put_AutoLoad(bool AutoLoad);
		//
		__declspec(property(get = get_AutoUpdate, put = put_AutoUpdate)) bool AutoUpdate;
		bool get_AutoUpdate();
		void put_AutoUpdate(bool AutoUpdate);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		//
		__declspec(property(get = get_ListFillRange, put = put_ListFillRange)) wstring ListFillRange;
		wstring get_ListFillRange();
		void put_ListFillRange(wstring ListFillRange);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OLEType)) _variant_t OLEType;
		_variant_t get_OLEType();
		//
		__declspec(property(get = get_Object)) Com::Object Object;
		Com::Object get_Object();
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_SourceName, put = put_SourceName)) wstring SourceName;
		wstring get_SourceName();
		void put_SourceName(wstring SourceName);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		_variant_t Update();
		_variant_t Verb(Excel::XlOLEVerb Verb);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		//
		__declspec(property(get = get_progID)) wstring progID;
		wstring get_progID();
	};

	//________________________________________________________OLEObjects
	// {000208A3-0000-0000-C000-000000000046}
	class OLEObjects : public Com::Object
	{
	public:
		OLEObjects();
		~OLEObjects();
		OLEObjects(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OLEObjects& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::OLEObjectX Add(_variant_t ClassType, _variant_t Filename, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height);
		Excel::OLEObjectX Add();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoLoad, put = put_AutoLoad)) bool AutoLoad;
		bool get_AutoLoad();
		void put_AutoLoad(bool AutoLoad);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_SourceName, put = put_SourceName)) wstring SourceName;
		wstring get_SourceName();
		void put_SourceName(wstring SourceName);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		void _Dummy30();
		void _Dummy32();
		void _Dummy33();
		void _Dummy34();
		void _Dummy36();
		void _Dummy37();
		void _Dummy38();
		void _Dummy39();
		void _Dummy40();
		void _Dummy41();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________TextBox
	// {000208A4-0000-0000-C000-000000000046}
	class TextBox : public Com::Object
	{
	public:
		TextBox();
		~TextBox();
		TextBox(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TextBox& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________TextBoxes
	// {000208A5-0000-0000-C000-000000000046}
	class TextBoxes : public Com::Object
	{
	public:
		TextBoxes();
		~TextBoxes();
		TextBoxes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TextBoxes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::TextBox Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Picture
	// {000208A6-0000-0000-C000-000000000046}
	class Picture : public Com::Object
	{
	public:
		Picture();
		~Picture();
		Picture(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Picture& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________Pictures
	// {000208A7-0000-0000-C000-000000000046}
	class Pictures : public Com::Object
	{
	public:
		Pictures();
		~Pictures();
		Pictures(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Pictures& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Picture Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		Excel::Picture Insert(wstring Filename, _variant_t Converter);
		Excel::Picture Insert(wstring Filename);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Picture Paste(_variant_t Link);
		Excel::Picture Paste();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Drawing
	// {000208A8-0000-0000-C000-000000000046}
	class Drawing : public Com::Object
	{
	public:
		Drawing();
		~Drawing();
		Drawing(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Drawing& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		_variant_t AddVertex(double Left, double Top);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Reshape(long Vertex, bool Insert, _variant_t Left, _variant_t Top);
		_variant_t Reshape(long Vertex, bool Insert);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		_variant_t get_Vertices(_variant_t Index1, _variant_t Index2);
		_variant_t get_Vertices();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
	};

	//________________________________________________________Drawings
	// {000208A9-0000-0000-C000-000000000046}
	class Drawings : public Com::Object
	{
	public:
		Drawings();
		~Drawings();
		Drawings(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Drawings& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Drawing Add(double X1, double Y1, double X2, double Y2, bool Closed);
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) bool AddIndent;
		bool get_AddIndent();
		void put_AddIndent(bool AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		_variant_t CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		_variant_t CheckSpelling();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Reshape(long Vertex, bool Insert, _variant_t Left, _variant_t Top);
		_variant_t Reshape(long Vertex, bool Insert);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy3();
		void _Dummy44();
		void _Dummy46();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________RoutingSlip
	// {000208AA-0000-0000-C000-000000000046}
	class RoutingSlip : public Com::Object
	{
	public:
		RoutingSlip();
		~RoutingSlip();
		RoutingSlip(const Com::Object& init) { Com::Object::Private_Copy(init); }
		RoutingSlip& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Delivery, put = put_Delivery)) Excel::XlRoutingSlipDelivery Delivery;
		Excel::XlRoutingSlipDelivery get_Delivery();
		void put_Delivery(Excel::XlRoutingSlipDelivery Delivery);
		//
		__declspec(property(get = get_Message, put = put_Message)) _variant_t Message;
		_variant_t get_Message();
		void put_Message(_variant_t Message);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t get_Recipients(_variant_t Index);
		_variant_t get_Recipients();
		void put_Recipients(_variant_t Recipients, _variant_t Index);
		void put_Recipients(_variant_t Recipients);
		_variant_t Reset();
		//
		__declspec(property(get = get_ReturnWhenDone, put = put_ReturnWhenDone)) bool ReturnWhenDone;
		bool get_ReturnWhenDone();
		void put_ReturnWhenDone(bool ReturnWhenDone);
		//
		__declspec(property(get = get_Status)) Excel::XlRoutingSlipStatus Status;
		Excel::XlRoutingSlipStatus get_Status();
		//
		__declspec(property(get = get_Subject, put = put_Subject)) _variant_t Subject;
		_variant_t get_Subject();
		void put_Subject(_variant_t Subject);
		//
		__declspec(property(get = get_TrackStatus, put = put_TrackStatus)) bool TrackStatus;
		bool get_TrackStatus();
		void put_TrackStatus(bool TrackStatus);
	};

	//________________________________________________________Outline
	// {000208AB-0000-0000-C000-000000000046}
	class Outline : public Com::Object
	{
	public:
		Outline();
		~Outline();
		Outline(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Outline& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutomaticStyles, put = put_AutomaticStyles)) bool AutomaticStyles;
		bool get_AutomaticStyles();
		void put_AutomaticStyles(bool AutomaticStyles);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t ShowLevels(_variant_t RowLevels, _variant_t ColumnLevels);
		_variant_t ShowLevels();
		//
		__declspec(property(get = get_SummaryColumn, put = put_SummaryColumn)) Excel::XlSummaryColumn SummaryColumn;
		Excel::XlSummaryColumn get_SummaryColumn();
		void put_SummaryColumn(Excel::XlSummaryColumn SummaryColumn);
		//
		__declspec(property(get = get_SummaryRow, put = put_SummaryRow)) Excel::XlSummaryRow SummaryRow;
		Excel::XlSummaryRow get_SummaryRow();
		void put_SummaryRow(Excel::XlSummaryRow SummaryRow);
	};

	//________________________________________________________Module
	// {000208AD-0000-0000-C000-000000000046}
	class Module : public Com::Object
	{
	public:
		Module();
		~Module();
		Module(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Module& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CodeName)) wstring CodeName;
		wstring get_CodeName();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		_variant_t InsertFile(_variant_t Filename, _variant_t Merge);
		_variant_t InsertFile(_variant_t Filename);
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Next)) Com::Object Next;
		Com::Object get_Next();
		//
		__declspec(property(get = get_OnDoubleClick, put = put_OnDoubleClick)) wstring OnDoubleClick;
		wstring get_OnDoubleClick();
		void put_OnDoubleClick(wstring OnDoubleClick);
		//
		__declspec(property(get = get_OnSheetActivate, put = put_OnSheetActivate)) wstring OnSheetActivate;
		wstring get_OnSheetActivate();
		void put_OnSheetActivate(wstring OnSheetActivate);
		//
		__declspec(property(get = get_OnSheetDeactivate, put = put_OnSheetDeactivate)) wstring OnSheetDeactivate;
		wstring get_OnSheetDeactivate();
		void put_OnSheetDeactivate(wstring OnSheetDeactivate);
		//
		__declspec(property(get = get_PageSetup)) Excel::PageSetup PageSetupX;
		Excel::PageSetup get_PageSetup();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Previous)) Com::Object Previous;
		Com::Object get_Previous();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void PrintOut();
		void Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly);
		void Protect();
		//
		__declspec(property(get = get_ProtectContents)) bool ProtectContents;
		bool get_ProtectContents();
		//
		__declspec(property(get = get_ProtectionMode)) bool ProtectionMode;
		bool get_ProtectionMode();
		void SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout);
		void SaveAs(wstring Filename);
		void Select(_variant_t Replace);
		void Select();
		//
		__declspec(property(get = get_Shapes)) Excel::Shapes ShapesX;
		Excel::Shapes get_Shapes();
		void Unprotect(_variant_t Password);
		void Unprotect();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) Excel::XlSheetVisibility Visible;
		Excel::XlSheetVisibility get_Visible();
		void put_Visible(Excel::XlSheetVisibility Visible);
		//
		__declspec(property(get = get__CodeName, put = put__CodeName)) wstring _CodeName;
		wstring get__CodeName();
		void put__CodeName(wstring _CodeName);
		void _Dummy18();
		void _Dummy21();
		void _Dummy23();
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void _PrintOut();
		void _Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly);
		void _Protect();
		void _SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout);
		void _SaveAs(wstring Filename);
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
		void __SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout);
		void __SaveAs(wstring Filename);
	};

	//________________________________________________________Modules
	// {000208AE-0000-0000-C000-000000000046}
	class Modules : public Com::Object
	{
	public:
		Modules();
		~Modules();
		Modules(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Modules& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Module Add(_variant_t Before, _variant_t After, _variant_t Count);
		Excel::Module Add();
		Com::Object Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout);
		Com::Object Add2();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_HPageBreaks)) Excel::HPageBreaks HPageBreaksX;
		Excel::HPageBreaks get_HPageBreaks();
		Com::Object get_Item(_variant_t Index);
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas);
		void PrintOut();
		void Select(_variant_t Replace);
		void Select();
		//
		__declspec(property(get = get_VPageBreaks)) Excel::VPageBreaks VPageBreaksX;
		Excel::VPageBreaks get_VPageBreaks();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) _variant_t Visible;
		_variant_t get_Visible();
		void put_Visible(_variant_t Visible);
		Com::Object get__Default(_variant_t Index);
		void _Dummy12();
		void _Dummy7();
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
	};

	//________________________________________________________DialogSheet
	// {000208AF-0000-0000-C000-000000000046}
	class DialogSheet : public Com::Object
	{
	public:
		DialogSheet();
		~DialogSheet();
		DialogSheet(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DialogSheet& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		Com::Object Arcs(_variant_t Index);
		Com::Object Arcs();
		//
		__declspec(property(get = get_AutoFilter)) Excel::AutoFilter AutoFilterX;
		Excel::AutoFilter get_AutoFilter();
		Com::Object Buttons(_variant_t Index);
		Com::Object Buttons();
		Com::Object ChartObjects(_variant_t Index);
		Com::Object ChartObjects();
		Com::Object CheckBoxes(_variant_t Index);
		Com::Object CheckBoxes();
		void CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang);
		void CheckSpelling();
		void CircleInvalid();
		void ClearCircles();
		//
		__declspec(property(get = get_CodeName)) wstring CodeName;
		wstring get_CodeName();
		//
		__declspec(property(get = get_Comments)) Excel::Comments CommentsX;
		Excel::Comments get_Comments();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CustomProperties)) Excel::CustomProperties CustomPropertiesX;
		Excel::CustomProperties get_CustomProperties();
		//
		__declspec(property(get = get_DefaultButton, put = put_DefaultButton)) _variant_t DefaultButton;
		_variant_t get_DefaultButton();
		void put_DefaultButton(_variant_t DefaultButton);
		void Delete();
		//
		__declspec(property(get = get_DialogFrame)) Excel::DialogFrame DialogFrameX;
		Excel::DialogFrame get_DialogFrame();
		//
		__declspec(property(get = get_DisplayAutomaticPageBreaks, put = put_DisplayAutomaticPageBreaks)) bool DisplayAutomaticPageBreaks;
		bool get_DisplayAutomaticPageBreaks();
		void put_DisplayAutomaticPageBreaks(bool DisplayAutomaticPageBreaks);
		//
		__declspec(property(get = get_DisplayPageBreaks, put = put_DisplayPageBreaks)) bool DisplayPageBreaks;
		bool get_DisplayPageBreaks();
		void put_DisplayPageBreaks(bool DisplayPageBreaks);
		//
		__declspec(property(get = get_DisplayRightToLeft, put = put_DisplayRightToLeft)) bool DisplayRightToLeft;
		bool get_DisplayRightToLeft();
		void put_DisplayRightToLeft(bool DisplayRightToLeft);
		Com::Object DrawingObjects(_variant_t Index);
		Com::Object DrawingObjects();
		Com::Object Drawings(_variant_t Index);
		Com::Object Drawings();
		Com::Object DropDowns(_variant_t Index);
		Com::Object DropDowns();
		Com::Object EditBoxes(_variant_t Index);
		Com::Object EditBoxes();
		//
		__declspec(property(get = get_EnableAutoFilter, put = put_EnableAutoFilter)) bool EnableAutoFilter;
		bool get_EnableAutoFilter();
		void put_EnableAutoFilter(bool EnableAutoFilter);
		//
		__declspec(property(get = get_EnableCalculation, put = put_EnableCalculation)) bool EnableCalculation;
		bool get_EnableCalculation();
		void put_EnableCalculation(bool EnableCalculation);
		//
		__declspec(property(get = get_EnableFormatConditionsCalculation, put = put_EnableFormatConditionsCalculation)) bool EnableFormatConditionsCalculation;
		bool get_EnableFormatConditionsCalculation();
		void put_EnableFormatConditionsCalculation(bool EnableFormatConditionsCalculation);
		//
		__declspec(property(get = get_EnableOutlining, put = put_EnableOutlining)) bool EnableOutlining;
		bool get_EnableOutlining();
		void put_EnableOutlining(bool EnableOutlining);
		//
		__declspec(property(get = get_EnablePivotTable, put = put_EnablePivotTable)) bool EnablePivotTable;
		bool get_EnablePivotTable();
		void put_EnablePivotTable(bool EnablePivotTable);
		//
		__declspec(property(get = get_EnableSelection, put = put_EnableSelection)) Excel::XlEnableSelection EnableSelection;
		Excel::XlEnableSelection get_EnableSelection();
		void put_EnableSelection(Excel::XlEnableSelection EnableSelection);
		_variant_t Evaluate(_variant_t Name);
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity);
		void ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		//
		__declspec(property(get = get_Focus, put = put_Focus)) _variant_t Focus;
		_variant_t get_Focus();
		void put_Focus(_variant_t Focus);
		Com::Object GroupBoxes(_variant_t Index);
		Com::Object GroupBoxes();
		Com::Object GroupObjects(_variant_t Index);
		Com::Object GroupObjects();
		//
		__declspec(property(get = get_HPageBreaks)) Excel::HPageBreaks HPageBreaksX;
		Excel::HPageBreaks get_HPageBreaks();
		bool Hide(_variant_t Cancel);
		bool Hide();
		//
		__declspec(property(get = get_Hyperlinks)) Excel::Hyperlinks HyperlinksX;
		Excel::Hyperlinks get_Hyperlinks();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		Com::Object Labels(_variant_t Index);
		Com::Object Labels();
		Com::Object Lines(_variant_t Index);
		Com::Object Lines();
		Com::Object ListBoxes(_variant_t Index);
		Com::Object ListBoxes();
		//
		__declspec(property(get = get_MailEnvelope)) Com::Object MailEnvelope;
		Com::Object get_MailEnvelope();
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Names)) Excel::Names NamesX;
		Excel::Names get_Names();
		//
		__declspec(property(get = get_Next)) Com::Object Next;
		Com::Object get_Next();
		Com::Object OLEObjects(_variant_t Index);
		Com::Object OLEObjects();
		//
		__declspec(property(get = get_OnDoubleClick, put = put_OnDoubleClick)) wstring OnDoubleClick;
		wstring get_OnDoubleClick();
		void put_OnDoubleClick(wstring OnDoubleClick);
		//
		__declspec(property(get = get_OnSheetActivate, put = put_OnSheetActivate)) wstring OnSheetActivate;
		wstring get_OnSheetActivate();
		void put_OnSheetActivate(wstring OnSheetActivate);
		//
		__declspec(property(get = get_OnSheetDeactivate, put = put_OnSheetDeactivate)) wstring OnSheetDeactivate;
		wstring get_OnSheetDeactivate();
		void put_OnSheetDeactivate(wstring OnSheetDeactivate);
		Com::Object OptionButtons(_variant_t Index);
		Com::Object OptionButtons();
		Com::Object Ovals(_variant_t Index);
		Com::Object Ovals();
		//
		__declspec(property(get = get_PageSetup)) Excel::PageSetup PageSetupX;
		Excel::PageSetup get_PageSetup();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Paste(_variant_t Destination, _variant_t Link);
		void Paste();
		void PasteSpecial(_variant_t Format, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel, _variant_t NoHTMLFormatting);
		void PasteSpecial();
		Com::Object Pictures(_variant_t Index);
		Com::Object Pictures();
		//
		__declspec(property(get = get_Previous)) Com::Object Previous;
		Com::Object get_Previous();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void PrintOut();
		void PrintPreview(_variant_t EnableChanges);
		void PrintPreview();
		//
		__declspec(property(get = get_PrintedCommentPages)) long PrintedCommentPages;
		long get_PrintedCommentPages();
		void Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly, _variant_t AllowFormattingCells, _variant_t AllowFormattingColumns, _variant_t AllowFormattingRows, _variant_t AllowInsertingColumns, _variant_t AllowInsertingRows, _variant_t AllowInsertingHyperlinks, _variant_t AllowDeletingColumns, _variant_t AllowDeletingRows, _variant_t AllowSorting, _variant_t AllowFiltering, _variant_t AllowUsingPivotTables);
		void Protect();
		//
		__declspec(property(get = get_ProtectContents)) bool ProtectContents;
		bool get_ProtectContents();
		//
		__declspec(property(get = get_ProtectDrawingObjects)) bool ProtectDrawingObjects;
		bool get_ProtectDrawingObjects();
		//
		__declspec(property(get = get_ProtectScenarios)) bool ProtectScenarios;
		bool get_ProtectScenarios();
		//
		__declspec(property(get = get_Protection)) Excel::Protection ProtectionX;
		Excel::Protection get_Protection();
		//
		__declspec(property(get = get_ProtectionMode)) bool ProtectionMode;
		bool get_ProtectionMode();
		//
		__declspec(property(get = get_QueryTables)) Excel::QueryTables QueryTablesX;
		Excel::QueryTables get_QueryTables();
		Com::Object Rectangles(_variant_t Index);
		Com::Object Rectangles();
		void ResetAllPageBreaks();
		void SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local);
		void SaveAs(wstring Filename);
		//
		__declspec(property(get = get_Scripts)) Com::Object Scripts;
		Com::Object get_Scripts();
		//
		__declspec(property(get = get_ScrollArea, put = put_ScrollArea)) wstring ScrollArea;
		wstring get_ScrollArea();
		void put_ScrollArea(wstring ScrollArea);
		Com::Object ScrollBars(_variant_t Index);
		Com::Object ScrollBars();
		void Select(_variant_t Replace);
		void Select();
		//
		__declspec(property(get = get_Shapes)) Excel::Shapes ShapesX;
		Excel::Shapes get_Shapes();
		bool Show();
		//
		__declspec(property(get = get_SmartTags)) Excel::SmartTags SmartTagsX;
		Excel::SmartTags get_SmartTags();
		//
		__declspec(property(get = get_Sort)) Excel::Sort SortX;
		Excel::Sort get_Sort();
		Com::Object Spinners(_variant_t Index);
		Com::Object Spinners();
		//
		__declspec(property(get = get_Tab)) Excel::Tab TabX;
		Excel::Tab get_Tab();
		Com::Object TextBoxes(_variant_t Index);
		Com::Object TextBoxes();
		void Unprotect(_variant_t Password);
		void Unprotect();
		//
		__declspec(property(get = get_VPageBreaks)) Excel::VPageBreaks VPageBreaksX;
		Excel::VPageBreaks get_VPageBreaks();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) Excel::XlSheetVisibility Visible;
		Excel::XlSheetVisibility get_Visible();
		void put_Visible(Excel::XlSheetVisibility Visible);
		void _CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang, _variant_t IgnoreFinalYaa, _variant_t SpellScript);
		void _CheckSpelling();
		//
		__declspec(property(get = get__CodeName, put = put__CodeName)) wstring _CodeName;
		wstring get__CodeName();
		void put__CodeName(wstring _CodeName);
		//
		__declspec(property(get = get__DisplayRightToLeft, put = put__DisplayRightToLeft)) long _DisplayRightToLeft;
		long get__DisplayRightToLeft();
		void put__DisplayRightToLeft(long _DisplayRightToLeft);
		void _Dummy113();
		void _Dummy114();
		void _Dummy115();
		void _Dummy29();
		void _Dummy31();
		void _Dummy32();
		void _Dummy34();
		void _Dummy36();
		void _Dummy40();
		void _Dummy41();
		void _Dummy42();
		void _Dummy43();
		void _Dummy44();
		void _Dummy45();
		void _Dummy56();
		void _Dummy65();
		void _Dummy66();
		void _Dummy67();
		void _Dummy69();
		void _Dummy74();
		void _Dummy75();
		void _Dummy76();
		void _Dummy78();
		void _Dummy79();
		void _Dummy82();
		void _Dummy83();
		void _Dummy85();
		void _Dummy86();
		void _Dummy88();
		void _Dummy89();
		void _Dummy90();
		_variant_t _Evaluate(_variant_t Name);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr);
		void _ExportAsFixedFormat(Excel::XlFixedFormatType Type);
		void _PasteSpecial(_variant_t Format, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel);
		void _PasteSpecial();
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void _Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly);
		void _Protect();
		void _SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local);
		void _SaveAs(wstring Filename);
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
		void __SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout);
		void __SaveAs(wstring Filename);
	};

	//________________________________________________________DialogSheets
	// {000208B0-0000-0000-C000-000000000046}
	class DialogSheets : public Com::Object
	{
	public:
		DialogSheets();
		~DialogSheets();
		DialogSheets(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DialogSheets& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::DialogSheet Add(_variant_t Before, _variant_t After, _variant_t Count);
		Excel::DialogSheet Add();
		Com::Object Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout);
		Com::Object Add2();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_HPageBreaks)) Excel::HPageBreaks HPageBreaksX;
		Excel::HPageBreaks get_HPageBreaks();
		Com::Object get_Item(_variant_t Index);
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void PrintOut();
		void PrintPreview(_variant_t EnableChanges);
		void PrintPreview();
		void Select(_variant_t Replace);
		void Select();
		//
		__declspec(property(get = get_VPageBreaks)) Excel::VPageBreaks VPageBreaksX;
		Excel::VPageBreaks get_VPageBreaks();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) _variant_t Visible;
		_variant_t get_Visible();
		void put_Visible(_variant_t Visible);
		Com::Object get__Default(_variant_t Index);
		void _Dummy7();
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
	};

	//________________________________________________________Worksheets
	// {000208B1-0000-0000-C000-000000000046}
	class Worksheets : public Com::Object
	{
	public:
		Worksheets();
		~Worksheets();
		Worksheets(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Worksheets& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Com::Object Add(_variant_t Before, _variant_t After, _variant_t Count, _variant_t Type);
		Com::Object Add();
		Com::Object Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout);
		Com::Object Add2();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Copy(_variant_t Before, _variant_t After);
		void Copy();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		void FillAcrossSheets(Excel::Range& Range, Excel::XlFillWith Type);
		//
		__declspec(property(get = get_HPageBreaks)) Excel::HPageBreaks HPageBreaksX;
		Excel::HPageBreaks get_HPageBreaks();
		Com::Object get_Item(_variant_t Index);
		void Move(_variant_t Before, _variant_t After);
		void Move();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas);
		void PrintOut();
		void PrintPreview(_variant_t EnableChanges);
		void PrintPreview();
		void Select(_variant_t Replace);
		void Select();
		//
		__declspec(property(get = get_VPageBreaks)) Excel::VPageBreaks VPageBreaksX;
		Excel::VPageBreaks get_VPageBreaks();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) _variant_t Visible;
		_variant_t get_Visible();
		void put_Visible(_variant_t Visible);
		Com::Object get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
		void _PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName);
		void _PrintOut();
		void __PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate);
		void __PrintOut();
	};

	//________________________________________________________PageSetup
	// {000208B4-0000-0000-C000-000000000046}
	class PageSetup : public Com::Object
	{
	public:
		PageSetup();
		~PageSetup();
		PageSetup(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PageSetup& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AlignMarginsHeaderFooter, put = put_AlignMarginsHeaderFooter)) bool AlignMarginsHeaderFooter;
		bool get_AlignMarginsHeaderFooter();
		void put_AlignMarginsHeaderFooter(bool AlignMarginsHeaderFooter);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BlackAndWhite, put = put_BlackAndWhite)) bool BlackAndWhite;
		bool get_BlackAndWhite();
		void put_BlackAndWhite(bool BlackAndWhite);
		//
		__declspec(property(get = get_BottomMargin, put = put_BottomMargin)) double BottomMargin;
		double get_BottomMargin();
		void put_BottomMargin(double BottomMargin);
		//
		__declspec(property(get = get_CenterFooter, put = put_CenterFooter)) wstring CenterFooter;
		wstring get_CenterFooter();
		void put_CenterFooter(wstring CenterFooter);
		//
		__declspec(property(get = get_CenterFooterPicture)) Excel::Graphic CenterFooterPicture;
		Excel::Graphic get_CenterFooterPicture();
		//
		__declspec(property(get = get_CenterHeader, put = put_CenterHeader)) wstring CenterHeader;
		wstring get_CenterHeader();
		void put_CenterHeader(wstring CenterHeader);
		//
		__declspec(property(get = get_CenterHeaderPicture)) Excel::Graphic CenterHeaderPicture;
		Excel::Graphic get_CenterHeaderPicture();
		//
		__declspec(property(get = get_CenterHorizontally, put = put_CenterHorizontally)) bool CenterHorizontally;
		bool get_CenterHorizontally();
		void put_CenterHorizontally(bool CenterHorizontally);
		//
		__declspec(property(get = get_CenterVertically, put = put_CenterVertically)) bool CenterVertically;
		bool get_CenterVertically();
		void put_CenterVertically(bool CenterVertically);
		//
		__declspec(property(get = get_ChartSize, put = put_ChartSize)) Excel::XlObjectSize ChartSize;
		Excel::XlObjectSize get_ChartSize();
		void put_ChartSize(Excel::XlObjectSize ChartSize);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DifferentFirstPageHeaderFooter, put = put_DifferentFirstPageHeaderFooter)) bool DifferentFirstPageHeaderFooter;
		bool get_DifferentFirstPageHeaderFooter();
		void put_DifferentFirstPageHeaderFooter(bool DifferentFirstPageHeaderFooter);
		//
		__declspec(property(get = get_Draft, put = put_Draft)) bool Draft;
		bool get_Draft();
		void put_Draft(bool Draft);
		//
		__declspec(property(get = get_EvenPage)) Excel::Page EvenPage;
		Excel::Page get_EvenPage();
		//
		__declspec(property(get = get_FirstPage)) Excel::Page FirstPage;
		Excel::Page get_FirstPage();
		//
		__declspec(property(get = get_FirstPageNumber, put = put_FirstPageNumber)) long FirstPageNumber;
		long get_FirstPageNumber();
		void put_FirstPageNumber(long FirstPageNumber);
		//
		__declspec(property(get = get_FitToPagesTall, put = put_FitToPagesTall)) _variant_t FitToPagesTall;
		_variant_t get_FitToPagesTall();
		void put_FitToPagesTall(_variant_t FitToPagesTall);
		//
		__declspec(property(get = get_FitToPagesWide, put = put_FitToPagesWide)) _variant_t FitToPagesWide;
		_variant_t get_FitToPagesWide();
		void put_FitToPagesWide(_variant_t FitToPagesWide);
		//
		__declspec(property(get = get_FooterMargin, put = put_FooterMargin)) double FooterMargin;
		double get_FooterMargin();
		void put_FooterMargin(double FooterMargin);
		//
		__declspec(property(get = get_HeaderMargin, put = put_HeaderMargin)) double HeaderMargin;
		double get_HeaderMargin();
		void put_HeaderMargin(double HeaderMargin);
		//
		__declspec(property(get = get_LeftFooter, put = put_LeftFooter)) wstring LeftFooter;
		wstring get_LeftFooter();
		void put_LeftFooter(wstring LeftFooter);
		//
		__declspec(property(get = get_LeftFooterPicture)) Excel::Graphic LeftFooterPicture;
		Excel::Graphic get_LeftFooterPicture();
		//
		__declspec(property(get = get_LeftHeader, put = put_LeftHeader)) wstring LeftHeader;
		wstring get_LeftHeader();
		void put_LeftHeader(wstring LeftHeader);
		//
		__declspec(property(get = get_LeftHeaderPicture)) Excel::Graphic LeftHeaderPicture;
		Excel::Graphic get_LeftHeaderPicture();
		//
		__declspec(property(get = get_LeftMargin, put = put_LeftMargin)) double LeftMargin;
		double get_LeftMargin();
		void put_LeftMargin(double LeftMargin);
		//
		__declspec(property(get = get_OddAndEvenPagesHeaderFooter, put = put_OddAndEvenPagesHeaderFooter)) bool OddAndEvenPagesHeaderFooter;
		bool get_OddAndEvenPagesHeaderFooter();
		void put_OddAndEvenPagesHeaderFooter(bool OddAndEvenPagesHeaderFooter);
		//
		__declspec(property(get = get_Order, put = put_Order)) Excel::XlOrder Order;
		Excel::XlOrder get_Order();
		void put_Order(Excel::XlOrder Order);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) Excel::XlPageOrientation Orientation;
		Excel::XlPageOrientation get_Orientation();
		void put_Orientation(Excel::XlPageOrientation Orientation);
		//
		__declspec(property(get = get_Pages)) Excel::Pages PagesX;
		Excel::Pages get_Pages();
		//
		__declspec(property(get = get_PaperSize, put = put_PaperSize)) Excel::XlPaperSize PaperSize;
		Excel::XlPaperSize get_PaperSize();
		void put_PaperSize(Excel::XlPaperSize PaperSize);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PrintArea, put = put_PrintArea)) wstring PrintArea;
		wstring get_PrintArea();
		void put_PrintArea(wstring PrintArea);
		//
		__declspec(property(get = get_PrintComments, put = put_PrintComments)) Excel::XlPrintLocation PrintComments;
		Excel::XlPrintLocation get_PrintComments();
		void put_PrintComments(Excel::XlPrintLocation PrintComments);
		//
		__declspec(property(get = get_PrintErrors, put = put_PrintErrors)) Excel::XlPrintErrors PrintErrors;
		Excel::XlPrintErrors get_PrintErrors();
		void put_PrintErrors(Excel::XlPrintErrors PrintErrors);
		//
		__declspec(property(get = get_PrintGridlines, put = put_PrintGridlines)) bool PrintGridlines;
		bool get_PrintGridlines();
		void put_PrintGridlines(bool PrintGridlines);
		//
		__declspec(property(get = get_PrintHeadings, put = put_PrintHeadings)) bool PrintHeadings;
		bool get_PrintHeadings();
		void put_PrintHeadings(bool PrintHeadings);
		//
		__declspec(property(get = get_PrintNotes, put = put_PrintNotes)) bool PrintNotes;
		bool get_PrintNotes();
		void put_PrintNotes(bool PrintNotes);
		_variant_t get_PrintQuality(_variant_t Index);
		_variant_t get_PrintQuality();
		void put_PrintQuality(_variant_t PrintQuality, _variant_t Index);
		void put_PrintQuality(_variant_t PrintQuality);
		//
		__declspec(property(get = get_PrintTitleColumns, put = put_PrintTitleColumns)) wstring PrintTitleColumns;
		wstring get_PrintTitleColumns();
		void put_PrintTitleColumns(wstring PrintTitleColumns);
		//
		__declspec(property(get = get_PrintTitleRows, put = put_PrintTitleRows)) wstring PrintTitleRows;
		wstring get_PrintTitleRows();
		void put_PrintTitleRows(wstring PrintTitleRows);
		//
		__declspec(property(get = get_RightFooter, put = put_RightFooter)) wstring RightFooter;
		wstring get_RightFooter();
		void put_RightFooter(wstring RightFooter);
		//
		__declspec(property(get = get_RightFooterPicture)) Excel::Graphic RightFooterPicture;
		Excel::Graphic get_RightFooterPicture();
		//
		__declspec(property(get = get_RightHeader, put = put_RightHeader)) wstring RightHeader;
		wstring get_RightHeader();
		void put_RightHeader(wstring RightHeader);
		//
		__declspec(property(get = get_RightHeaderPicture)) Excel::Graphic RightHeaderPicture;
		Excel::Graphic get_RightHeaderPicture();
		//
		__declspec(property(get = get_RightMargin, put = put_RightMargin)) double RightMargin;
		double get_RightMargin();
		void put_RightMargin(double RightMargin);
		//
		__declspec(property(get = get_ScaleWithDocHeaderFooter, put = put_ScaleWithDocHeaderFooter)) bool ScaleWithDocHeaderFooter;
		bool get_ScaleWithDocHeaderFooter();
		void put_ScaleWithDocHeaderFooter(bool ScaleWithDocHeaderFooter);
		//
		__declspec(property(get = get_TopMargin, put = put_TopMargin)) double TopMargin;
		double get_TopMargin();
		void put_TopMargin(double TopMargin);
		//
		__declspec(property(get = get_Zoom, put = put_Zoom)) _variant_t Zoom;
		_variant_t get_Zoom();
		void put_Zoom(_variant_t Zoom);
	};

	//________________________________________________________Names
	// {000208B8-0000-0000-C000-000000000046}
	class Names : public Com::Object
	{
	public:
		Names();
		~Names();
		Names(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Names& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Name Add(_variant_t Name, _variant_t RefersTo, _variant_t Visible, _variant_t MacroType, _variant_t ShortcutKey, _variant_t Category, _variant_t NameLocal, _variant_t RefersToLocal, _variant_t CategoryLocal, _variant_t RefersToR1C1, _variant_t RefersToR1C1Local);
		Excel::Name Add();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Name Item(_variant_t Index, _variant_t IndexLocal, _variant_t RefersTo);
		Excel::Name Item();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Name _Default(_variant_t Index, _variant_t IndexLocal, _variant_t RefersTo);
		Excel::Name _Default();
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Name
	// {000208B9-0000-0000-C000-000000000046}
	class Name : public Com::Object
	{
	public:
		Name();
		~Name();
		Name(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Name& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Category, put = put_Category)) wstring Category;
		wstring get_Category();
		void put_Category(wstring Category);
		//
		__declspec(property(get = get_CategoryLocal, put = put_CategoryLocal)) wstring CategoryLocal;
		wstring get_CategoryLocal();
		void put_CategoryLocal(wstring CategoryLocal);
		//
		__declspec(property(get = get_Comment, put = put_Comment)) wstring CommentX;
		wstring get_Comment();
		void put_Comment(wstring Comment);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_MacroType, put = put_MacroType)) Excel::XlXLMMacroType MacroType;
		Excel::XlXLMMacroType get_MacroType();
		void put_MacroType(Excel::XlXLMMacroType MacroType);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_NameLocal, put = put_NameLocal)) wstring NameLocal;
		wstring get_NameLocal();
		void put_NameLocal(wstring NameLocal);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RefersTo, put = put_RefersTo)) _variant_t RefersTo;
		_variant_t get_RefersTo();
		void put_RefersTo(_variant_t RefersTo);
		//
		__declspec(property(get = get_RefersToLocal, put = put_RefersToLocal)) _variant_t RefersToLocal;
		_variant_t get_RefersToLocal();
		void put_RefersToLocal(_variant_t RefersToLocal);
		//
		__declspec(property(get = get_RefersToR1C1, put = put_RefersToR1C1)) _variant_t RefersToR1C1;
		_variant_t get_RefersToR1C1();
		void put_RefersToR1C1(_variant_t RefersToR1C1);
		//
		__declspec(property(get = get_RefersToR1C1Local, put = put_RefersToR1C1Local)) _variant_t RefersToR1C1Local;
		_variant_t get_RefersToR1C1Local();
		void put_RefersToR1C1Local(_variant_t RefersToR1C1Local);
		//
		__declspec(property(get = get_RefersToRange)) Excel::Range RefersToRange;
		Excel::Range get_RefersToRange();
		//
		__declspec(property(get = get_ShortcutKey, put = put_ShortcutKey)) wstring ShortcutKey;
		wstring get_ShortcutKey();
		void put_ShortcutKey(wstring ShortcutKey);
		//
		__declspec(property(get = get_ValidWorkbookParameter)) bool ValidWorkbookParameter;
		bool get_ValidWorkbookParameter();
		//
		__declspec(property(get = get_Value, put = put_Value)) wstring Value;
		wstring get_Value();
		void put_Value(wstring Value);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_WorkbookParameter, put = put_WorkbookParameter)) bool WorkbookParameter;
		bool get_WorkbookParameter();
		void put_WorkbookParameter(bool WorkbookParameter);
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________ChartObject
	// {000208CF-0000-0000-C000-000000000046}
	class ChartObject : public Com::Object
	{
	public:
		ChartObject();
		~ChartObject();
		ChartObject(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartObject& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		_variant_t Activate();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		_variant_t BringToFront();
		//
		__declspec(property(get = get_Chart)) Excel::ChartX Chart;
		Excel::ChartX get_Chart();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ProtectChartObject, put = put_ProtectChartObject)) bool ProtectChartObject;
		bool get_ProtectChartObject();
		void put_ProtectChartObject(bool ProtectChartObject);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_ZOrder)) long ZOrder;
		long get_ZOrder();
		_variant_t _Copy();
	};

	//________________________________________________________ChartObjects
	// {000208D0-0000-0000-C000-000000000046}
	class ChartObjects : public Com::Object
	{
	public:
		ChartObjects();
		~ChartObjects();
		ChartObjects(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartObjects& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ChartObject Add(double Left, double Top, double Width, double Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t BringToFront();
		_variant_t Copy();
		_variant_t CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Cut();
		_variant_t Delete();
		Com::Object Duplicate();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		Excel::GroupObject Group();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) _variant_t Placement;
		_variant_t get_Placement();
		void put_Placement(_variant_t Placement);
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		//
		__declspec(property(get = get_ProtectChartObject, put = put_ProtectChartObject)) bool ProtectChartObject;
		bool get_ProtectChartObject();
		void put_ProtectChartObject(bool ProtectChartObject);
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select(_variant_t Replace);
		_variant_t Select();
		_variant_t SendToBack();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShapeRange)) Excel::ShapeRange ShapeRangeX;
		Excel::ShapeRange get_ShapeRange();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		_variant_t _Copy();
		Com::Object _Default(_variant_t Index);
		void _Dummy12();
		void _Dummy15();
		void _Dummy22();
		void _Dummy25();
		void _Dummy27();
		void _Dummy28();
		void _Dummy3();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Mailer
	// {000208D1-0000-0000-C000-000000000046}
	class Mailer : public Com::Object
	{
	public:
		Mailer();
		~Mailer();
		Mailer(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Mailer& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BCCRecipients, put = put_BCCRecipients)) _variant_t BCCRecipients;
		_variant_t get_BCCRecipients();
		void put_BCCRecipients(_variant_t BCCRecipients);
		//
		__declspec(property(get = get_CCRecipients, put = put_CCRecipients)) _variant_t CCRecipients;
		_variant_t get_CCRecipients();
		void put_CCRecipients(_variant_t CCRecipients);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Enclosures, put = put_Enclosures)) _variant_t Enclosures;
		_variant_t get_Enclosures();
		void put_Enclosures(_variant_t Enclosures);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Received)) bool Received;
		bool get_Received();
		//
		__declspec(property(get = get_SendDateTime)) Sys::Time SendDateTime;
		Sys::Time get_SendDateTime();
		//
		__declspec(property(get = get_Sender)) wstring Sender;
		wstring get_Sender();
		//
		__declspec(property(get = get_Subject, put = put_Subject)) wstring Subject;
		wstring get_Subject();
		void put_Subject(wstring Subject);
		//
		__declspec(property(get = get_ToRecipients, put = put_ToRecipients)) _variant_t ToRecipients;
		_variant_t get_ToRecipients();
		void put_ToRecipients(_variant_t ToRecipients);
		//
		__declspec(property(get = get_WhichAddress, put = put_WhichAddress)) _variant_t WhichAddress;
		_variant_t get_WhichAddress();
		void put_WhichAddress(_variant_t WhichAddress);
	};

	//________________________________________________________CustomViews
	// {00024422-0000-0000-C000-000000000046}
	class CustomViews : public Com::Object
	{
	public:
		CustomViews();
		~CustomViews();
		CustomViews(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CustomViews& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::CustomView Add(wstring ViewName, _variant_t PrintSettings, _variant_t RowColSettings);
		Excel::CustomView Add(wstring ViewName);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::CustomView Item(_variant_t ViewName);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::CustomView get__Default(_variant_t ViewName);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________CustomView
	// {00024423-0000-0000-C000-000000000046}
	class CustomView : public Com::Object
	{
	public:
		CustomView();
		~CustomView();
		CustomView(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CustomView& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PrintSettings)) bool PrintSettings;
		bool get_PrintSettings();
		//
		__declspec(property(get = get_RowColSettings)) bool RowColSettings;
		bool get_RowColSettings();
		void Show();
	};

	//________________________________________________________FormatConditions
	// {00024424-0000-0000-C000-000000000046}
	class FormatConditions : public Com::Object
	{
	public:
		FormatConditions();
		~FormatConditions();
		FormatConditions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		FormatConditions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Com::Object Add(Excel::XlFormatConditionType Type, _variant_t Operator, _variant_t Formula1, _variant_t Formula2, _variant_t String, _variant_t TextOperator, _variant_t DateOperator, _variant_t ScopeType);
		Com::Object Add(Excel::XlFormatConditionType Type);
		Com::Object AddAboveAverage();
		Com::Object AddColorScale(long ColorScaleType);
		Com::Object AddDatabar();
		Com::Object AddIconSetCondition();
		Com::Object AddTop10();
		Com::Object AddUniqueValues();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Com::Object get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________FormatCondition
	// {00024425-0000-0000-C000-000000000046}
	class FormatCondition : public Com::Object
	{
	public:
		FormatCondition();
		~FormatCondition();
		FormatCondition(const Com::Object& init) { Com::Object::Private_Copy(init); }
		FormatCondition& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AppliesTo)) Excel::Range AppliesTo;
		Excel::Range get_AppliesTo();
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DateOperator, put = put_DateOperator)) Excel::XlTimePeriods DateOperator;
		Excel::XlTimePeriods get_DateOperator();
		void put_DateOperator(Excel::XlTimePeriods DateOperator);
		void Delete();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Formula1)) wstring Formula1;
		wstring get_Formula1();
		//
		__declspec(property(get = get_Formula2)) wstring Formula2;
		wstring get_Formula2();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		void Modify(Excel::XlFormatConditionType Type, _variant_t Operator, _variant_t Formula1, _variant_t Formula2, _variant_t String, _variant_t Operator2);
		void Modify(Excel::XlFormatConditionType Type);
		void ModifyAppliesToRange(Excel::Range& Range);
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) _variant_t NumberFormat;
		_variant_t get_NumberFormat();
		void put_NumberFormat(_variant_t NumberFormat);
		//
		__declspec(property(get = get_Operator)) long Operator;
		long get_Operator();
		//
		__declspec(property(get = get_PTCondition)) bool PTCondition;
		bool get_PTCondition();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Priority, put = put_Priority)) long Priority;
		long get_Priority();
		void put_Priority(long Priority);
		//
		__declspec(property(get = get_ScopeType, put = put_ScopeType)) Excel::XlPivotConditionScope ScopeType;
		Excel::XlPivotConditionScope get_ScopeType();
		void put_ScopeType(Excel::XlPivotConditionScope ScopeType);
		void SetFirstPriority();
		void SetLastPriority();
		//
		__declspec(property(get = get_StopIfTrue, put = put_StopIfTrue)) bool StopIfTrue;
		bool get_StopIfTrue();
		void put_StopIfTrue(bool StopIfTrue);
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_TextOperator, put = put_TextOperator)) Excel::XlContainsOperator TextOperator;
		Excel::XlContainsOperator get_TextOperator();
		void put_TextOperator(Excel::XlContainsOperator TextOperator);
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
		void _Modify(Excel::XlFormatConditionType Type, _variant_t Operator, _variant_t Formula1, _variant_t Formula2);
		void _Modify(Excel::XlFormatConditionType Type);
	};

	//________________________________________________________Comments
	// {00024426-0000-0000-C000-000000000046}
	class Comments : public Com::Object
	{
	public:
		Comments();
		~Comments();
		Comments(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Comments& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Comment Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Comment get__Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Comment
	// {00024427-0000-0000-C000-000000000046}
	class Comment : public Com::Object
	{
	public:
		Comment();
		~Comment();
		Comment(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Comment& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Author)) wstring Author;
		wstring get_Author();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		Excel::Comment Next();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Comment Previous();
		//
		__declspec(property(get = get_Shape)) Excel::Shape ShapeX;
		Excel::Shape get_Shape();
		wstring Text(_variant_t Text, _variant_t Start, _variant_t Overwrite);
		wstring Text();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
	};

	//________________________________________________________RefreshEvents
	// {0002441B-0000-0000-C000-000000000046}
	class RefreshEvents : public Com::Object
	{
	public:
		RefreshEvents();
		~RefreshEvents();
		RefreshEvents(const Com::Object& init) { Com::Object::Private_Copy(init); }
		RefreshEvents& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AfterRefresh(bool Success);
		void BeforeRefresh(VARIANT_BOOL& Cancel);
	};

	//_________________________________________________________QueryTable
	// {00024428-0000-0000-C000-000000000046}
	class QueryTableX : public Com::Object
	{
	public:
		QueryTableX();
		~QueryTableX();
		QueryTableX(const Com::Object& init) { Com::Object::Private_Copy(init); }
		QueryTableX& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AdjustColumnWidth, put = put_AdjustColumnWidth)) bool AdjustColumnWidth;
		bool get_AdjustColumnWidth();
		void put_AdjustColumnWidth(bool AdjustColumnWidth);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BackgroundQuery, put = put_BackgroundQuery)) bool BackgroundQuery;
		bool get_BackgroundQuery();
		void put_BackgroundQuery(bool BackgroundQuery);
		void CancelRefresh();
		//
		__declspec(property(get = get_CommandText, put = put_CommandText)) _variant_t CommandText;
		_variant_t get_CommandText();
		void put_CommandText(_variant_t CommandText);
		//
		__declspec(property(get = get_CommandType, put = put_CommandType)) Excel::XlCmdType CommandType;
		Excel::XlCmdType get_CommandType();
		void put_CommandType(Excel::XlCmdType CommandType);
		//
		__declspec(property(get = get_Connection, put = put_Connection)) _variant_t Connection;
		_variant_t get_Connection();
		void put_Connection(_variant_t Connection);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Destination)) Excel::Range Destination;
		Excel::Range get_Destination();
		//
		__declspec(property(get = get_EditWebPage, put = put_EditWebPage)) _variant_t EditWebPage;
		_variant_t get_EditWebPage();
		void put_EditWebPage(_variant_t EditWebPage);
		//
		__declspec(property(get = get_EnableEditing, put = put_EnableEditing)) bool EnableEditing;
		bool get_EnableEditing();
		void put_EnableEditing(bool EnableEditing);
		//
		__declspec(property(get = get_EnableRefresh, put = put_EnableRefresh)) bool EnableRefresh;
		bool get_EnableRefresh();
		void put_EnableRefresh(bool EnableRefresh);
		//
		__declspec(property(get = get_FetchedRowOverflow)) bool FetchedRowOverflow;
		bool get_FetchedRowOverflow();
		//
		__declspec(property(get = get_FieldNames, put = put_FieldNames)) bool FieldNames;
		bool get_FieldNames();
		void put_FieldNames(bool FieldNames);
		//
		__declspec(property(get = get_FillAdjacentFormulas, put = put_FillAdjacentFormulas)) bool FillAdjacentFormulas;
		bool get_FillAdjacentFormulas();
		void put_FillAdjacentFormulas(bool FillAdjacentFormulas);
		//
		__declspec(property(get = get_HasAutoFormat, put = put_HasAutoFormat)) bool HasAutoFormat;
		bool get_HasAutoFormat();
		void put_HasAutoFormat(bool HasAutoFormat);
		//
		__declspec(property(get = get_ListObject)) Excel::ListObject ListObjectX;
		Excel::ListObject get_ListObject();
		//
		__declspec(property(get = get_MaintainConnection, put = put_MaintainConnection)) bool MaintainConnection;
		bool get_MaintainConnection();
		void put_MaintainConnection(bool MaintainConnection);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parameters)) Excel::Parameters ParametersX;
		Excel::Parameters get_Parameters();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PostText, put = put_PostText)) wstring PostText;
		wstring get_PostText();
		void put_PostText(wstring PostText);
		//
		__declspec(property(get = get_PreserveColumnInfo, put = put_PreserveColumnInfo)) bool PreserveColumnInfo;
		bool get_PreserveColumnInfo();
		void put_PreserveColumnInfo(bool PreserveColumnInfo);
		//
		__declspec(property(get = get_PreserveFormatting, put = put_PreserveFormatting)) bool PreserveFormatting;
		bool get_PreserveFormatting();
		void put_PreserveFormatting(bool PreserveFormatting);
		//
		__declspec(property(get = get_QueryType)) Excel::XlQueryType QueryType;
		Excel::XlQueryType get_QueryType();
		//
		__declspec(property(get = get_Recordset)) Com::Object Recordset;
		Com::Object get_Recordset();
		void put_Recordset(Com::Object Recordset);
		bool Refresh(_variant_t BackgroundQuery);
		bool Refresh();
		//
		__declspec(property(get = get_RefreshOnFileOpen, put = put_RefreshOnFileOpen)) bool RefreshOnFileOpen;
		bool get_RefreshOnFileOpen();
		void put_RefreshOnFileOpen(bool RefreshOnFileOpen);
		//
		__declspec(property(get = get_RefreshPeriod, put = put_RefreshPeriod)) long RefreshPeriod;
		long get_RefreshPeriod();
		void put_RefreshPeriod(long RefreshPeriod);
		//
		__declspec(property(get = get_RefreshStyle, put = put_RefreshStyle)) Excel::XlCellInsertionMode RefreshStyle;
		Excel::XlCellInsertionMode get_RefreshStyle();
		void put_RefreshStyle(Excel::XlCellInsertionMode RefreshStyle);
		//
		__declspec(property(get = get_Refreshing)) bool Refreshing;
		bool get_Refreshing();
		void ResetTimer();
		//
		__declspec(property(get = get_ResultRange)) Excel::Range ResultRange;
		Excel::Range get_ResultRange();
		//
		__declspec(property(get = get_RobustConnect, put = put_RobustConnect)) Excel::XlRobustConnect RobustConnect;
		Excel::XlRobustConnect get_RobustConnect();
		void put_RobustConnect(Excel::XlRobustConnect RobustConnect);
		//
		__declspec(property(get = get_RowNumbers, put = put_RowNumbers)) bool RowNumbers;
		bool get_RowNumbers();
		void put_RowNumbers(bool RowNumbers);
		void SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords);
		void SaveAsODC(wstring ODCFileName);
		//
		__declspec(property(get = get_SaveData, put = put_SaveData)) bool SaveData;
		bool get_SaveData();
		void put_SaveData(bool SaveData);
		//
		__declspec(property(get = get_SavePassword, put = put_SavePassword)) bool SavePassword;
		bool get_SavePassword();
		void put_SavePassword(bool SavePassword);
		//
		__declspec(property(get = get_Sort)) Excel::Sort SortX;
		Excel::Sort get_Sort();
		//
		__declspec(property(get = get_SourceConnectionFile, put = put_SourceConnectionFile)) wstring SourceConnectionFile;
		wstring get_SourceConnectionFile();
		void put_SourceConnectionFile(wstring SourceConnectionFile);
		//
		__declspec(property(get = get_SourceDataFile, put = put_SourceDataFile)) wstring SourceDataFile;
		wstring get_SourceDataFile();
		void put_SourceDataFile(wstring SourceDataFile);
		//
		__declspec(property(get = get_Sql, put = put_Sql)) _variant_t Sql;
		_variant_t get_Sql();
		void put_Sql(_variant_t Sql);
		//
		__declspec(property(get = get_TablesOnlyFromHTML, put = put_TablesOnlyFromHTML)) bool TablesOnlyFromHTML;
		bool get_TablesOnlyFromHTML();
		void put_TablesOnlyFromHTML(bool TablesOnlyFromHTML);
		//
		__declspec(property(get = get_TextFileColumnDataTypes, put = put_TextFileColumnDataTypes)) _variant_t TextFileColumnDataTypes;
		_variant_t get_TextFileColumnDataTypes();
		void put_TextFileColumnDataTypes(_variant_t TextFileColumnDataTypes);
		//
		__declspec(property(get = get_TextFileCommaDelimiter, put = put_TextFileCommaDelimiter)) bool TextFileCommaDelimiter;
		bool get_TextFileCommaDelimiter();
		void put_TextFileCommaDelimiter(bool TextFileCommaDelimiter);
		//
		__declspec(property(get = get_TextFileConsecutiveDelimiter, put = put_TextFileConsecutiveDelimiter)) bool TextFileConsecutiveDelimiter;
		bool get_TextFileConsecutiveDelimiter();
		void put_TextFileConsecutiveDelimiter(bool TextFileConsecutiveDelimiter);
		//
		__declspec(property(get = get_TextFileDecimalSeparator, put = put_TextFileDecimalSeparator)) wstring TextFileDecimalSeparator;
		wstring get_TextFileDecimalSeparator();
		void put_TextFileDecimalSeparator(wstring TextFileDecimalSeparator);
		//
		__declspec(property(get = get_TextFileFixedColumnWidths, put = put_TextFileFixedColumnWidths)) _variant_t TextFileFixedColumnWidths;
		_variant_t get_TextFileFixedColumnWidths();
		void put_TextFileFixedColumnWidths(_variant_t TextFileFixedColumnWidths);
		//
		__declspec(property(get = get_TextFileOtherDelimiter, put = put_TextFileOtherDelimiter)) wstring TextFileOtherDelimiter;
		wstring get_TextFileOtherDelimiter();
		void put_TextFileOtherDelimiter(wstring TextFileOtherDelimiter);
		//
		__declspec(property(get = get_TextFileParseType, put = put_TextFileParseType)) Excel::XlTextParsingType TextFileParseType;
		Excel::XlTextParsingType get_TextFileParseType();
		void put_TextFileParseType(Excel::XlTextParsingType TextFileParseType);
		//
		__declspec(property(get = get_TextFilePlatform, put = put_TextFilePlatform)) long TextFilePlatform;
		long get_TextFilePlatform();
		void put_TextFilePlatform(long TextFilePlatform);
		//
		__declspec(property(get = get_TextFilePromptOnRefresh, put = put_TextFilePromptOnRefresh)) bool TextFilePromptOnRefresh;
		bool get_TextFilePromptOnRefresh();
		void put_TextFilePromptOnRefresh(bool TextFilePromptOnRefresh);
		//
		__declspec(property(get = get_TextFileSemicolonDelimiter, put = put_TextFileSemicolonDelimiter)) bool TextFileSemicolonDelimiter;
		bool get_TextFileSemicolonDelimiter();
		void put_TextFileSemicolonDelimiter(bool TextFileSemicolonDelimiter);
		//
		__declspec(property(get = get_TextFileSpaceDelimiter, put = put_TextFileSpaceDelimiter)) bool TextFileSpaceDelimiter;
		bool get_TextFileSpaceDelimiter();
		void put_TextFileSpaceDelimiter(bool TextFileSpaceDelimiter);
		//
		__declspec(property(get = get_TextFileStartRow, put = put_TextFileStartRow)) long TextFileStartRow;
		long get_TextFileStartRow();
		void put_TextFileStartRow(long TextFileStartRow);
		//
		__declspec(property(get = get_TextFileTabDelimiter, put = put_TextFileTabDelimiter)) bool TextFileTabDelimiter;
		bool get_TextFileTabDelimiter();
		void put_TextFileTabDelimiter(bool TextFileTabDelimiter);
		//
		__declspec(property(get = get_TextFileTextQualifier, put = put_TextFileTextQualifier)) Excel::XlTextQualifier TextFileTextQualifier;
		Excel::XlTextQualifier get_TextFileTextQualifier();
		void put_TextFileTextQualifier(Excel::XlTextQualifier TextFileTextQualifier);
		//
		__declspec(property(get = get_TextFileThousandsSeparator, put = put_TextFileThousandsSeparator)) wstring TextFileThousandsSeparator;
		wstring get_TextFileThousandsSeparator();
		void put_TextFileThousandsSeparator(wstring TextFileThousandsSeparator);
		//
		__declspec(property(get = get_TextFileTrailingMinusNumbers, put = put_TextFileTrailingMinusNumbers)) bool TextFileTrailingMinusNumbers;
		bool get_TextFileTrailingMinusNumbers();
		void put_TextFileTrailingMinusNumbers(bool TextFileTrailingMinusNumbers);
		//
		__declspec(property(get = get_TextFileVisualLayout, put = put_TextFileVisualLayout)) Excel::XlTextVisualLayoutType TextFileVisualLayout;
		Excel::XlTextVisualLayoutType get_TextFileVisualLayout();
		void put_TextFileVisualLayout(Excel::XlTextVisualLayoutType TextFileVisualLayout);
		//
		__declspec(property(get = get_WebConsecutiveDelimitersAsOne, put = put_WebConsecutiveDelimitersAsOne)) bool WebConsecutiveDelimitersAsOne;
		bool get_WebConsecutiveDelimitersAsOne();
		void put_WebConsecutiveDelimitersAsOne(bool WebConsecutiveDelimitersAsOne);
		//
		__declspec(property(get = get_WebDisableDateRecognition, put = put_WebDisableDateRecognition)) bool WebDisableDateRecognition;
		bool get_WebDisableDateRecognition();
		void put_WebDisableDateRecognition(bool WebDisableDateRecognition);
		//
		__declspec(property(get = get_WebDisableRedirections, put = put_WebDisableRedirections)) bool WebDisableRedirections;
		bool get_WebDisableRedirections();
		void put_WebDisableRedirections(bool WebDisableRedirections);
		//
		__declspec(property(get = get_WebFormatting, put = put_WebFormatting)) Excel::XlWebFormatting WebFormatting;
		Excel::XlWebFormatting get_WebFormatting();
		void put_WebFormatting(Excel::XlWebFormatting WebFormatting);
		//
		__declspec(property(get = get_WebPreFormattedTextToColumns, put = put_WebPreFormattedTextToColumns)) bool WebPreFormattedTextToColumns;
		bool get_WebPreFormattedTextToColumns();
		void put_WebPreFormattedTextToColumns(bool WebPreFormattedTextToColumns);
		//
		__declspec(property(get = get_WebSelectionType, put = put_WebSelectionType)) Excel::XlWebSelectionType WebSelectionType;
		Excel::XlWebSelectionType get_WebSelectionType();
		void put_WebSelectionType(Excel::XlWebSelectionType WebSelectionType);
		//
		__declspec(property(get = get_WebSingleBlockTextImport, put = put_WebSingleBlockTextImport)) bool WebSingleBlockTextImport;
		bool get_WebSingleBlockTextImport();
		void put_WebSingleBlockTextImport(bool WebSingleBlockTextImport);
		//
		__declspec(property(get = get_WebTables, put = put_WebTables)) wstring WebTables;
		wstring get_WebTables();
		void put_WebTables(wstring WebTables);
		//
		__declspec(property(get = get_WorkbookConnection)) Excel::WorkbookConnection WorkbookConnectionX;
		Excel::WorkbookConnection get_WorkbookConnection();
	};

	//________________________________________________________QueryTables
	// {00024429-0000-0000-C000-000000000046}
	class QueryTables : public Com::Object
	{
	public:
		QueryTables();
		~QueryTables();
		QueryTables(const Com::Object& init) { Com::Object::Private_Copy(init); }
		QueryTables& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::QueryTableX Add(_variant_t Connection, Excel::Range& Destination, _variant_t Sql);
		Excel::QueryTableX Add(_variant_t Connection, Excel::Range& Destination);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::QueryTableX Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::QueryTableX get__Default(_variant_t Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Parameter
	// {0002442A-0000-0000-C000-000000000046}
	class Parameter : public Com::Object
	{
	public:
		Parameter();
		~Parameter();
		Parameter(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Parameter& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataType, put = put_DataType)) Excel::XlParameterDataType DataType;
		Excel::XlParameterDataType get_DataType();
		void put_DataType(Excel::XlParameterDataType DataType);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PromptString)) wstring PromptString;
		wstring get_PromptString();
		//
		__declspec(property(get = get_RefreshOnChange, put = put_RefreshOnChange)) bool RefreshOnChange;
		bool get_RefreshOnChange();
		void put_RefreshOnChange(bool RefreshOnChange);
		void SetParam(Excel::XlParameterType Type, _variant_t Value);
		//
		__declspec(property(get = get_SourceRange)) Excel::Range SourceRange;
		Excel::Range get_SourceRange();
		//
		__declspec(property(get = get_Type)) Excel::XlParameterType Type;
		Excel::XlParameterType get_Type();
		//
		__declspec(property(get = get_Value)) _variant_t Value;
		_variant_t get_Value();
	};

	//________________________________________________________Parameters
	// {0002442B-0000-0000-C000-000000000046}
	class Parameters : public Com::Object
	{
	public:
		Parameters();
		~Parameters();
		Parameters(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Parameters& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Parameter Add(wstring Name, _variant_t iDataType);
		Excel::Parameter Add(wstring Name);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		Excel::Parameter Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Parameter get__Default(_variant_t Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________ODBCError
	// {0002442C-0000-0000-C000-000000000046}
	class ODBCError : public Com::Object
	{
	public:
		ODBCError();
		~ODBCError();
		ODBCError(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ODBCError& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_ErrorString)) wstring ErrorString;
		wstring get_ErrorString();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_SqlState)) wstring SqlState;
		wstring get_SqlState();
	};

	//________________________________________________________ODBCErrors
	// {0002442D-0000-0000-C000-000000000046}
	class ODBCErrors : public Com::Object
	{
	public:
		ODBCErrors();
		~ODBCErrors();
		ODBCErrors(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ODBCErrors& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ODBCError Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ODBCError get__Default(long Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Validation
	// {0002442F-0000-0000-C000-000000000046}
	class Validation : public Com::Object
	{
	public:
		Validation();
		~Validation();
		Validation(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Validation& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Add(Excel::XlDVType Type, _variant_t AlertStyle, _variant_t Operator, _variant_t Formula1, _variant_t Formula2);
		void Add(Excel::XlDVType Type);
		//
		__declspec(property(get = get_AlertStyle)) long AlertStyle;
		long get_AlertStyle();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_ErrorMessage, put = put_ErrorMessage)) wstring ErrorMessage;
		wstring get_ErrorMessage();
		void put_ErrorMessage(wstring ErrorMessage);
		//
		__declspec(property(get = get_ErrorTitle, put = put_ErrorTitle)) wstring ErrorTitle;
		wstring get_ErrorTitle();
		void put_ErrorTitle(wstring ErrorTitle);
		//
		__declspec(property(get = get_Formula1)) wstring Formula1;
		wstring get_Formula1();
		//
		__declspec(property(get = get_Formula2)) wstring Formula2;
		wstring get_Formula2();
		//
		__declspec(property(get = get_IMEMode, put = put_IMEMode)) long IMEMode;
		long get_IMEMode();
		void put_IMEMode(long IMEMode);
		//
		__declspec(property(get = get_IgnoreBlank, put = put_IgnoreBlank)) bool IgnoreBlank;
		bool get_IgnoreBlank();
		void put_IgnoreBlank(bool IgnoreBlank);
		//
		__declspec(property(get = get_InCellDropdown, put = put_InCellDropdown)) bool InCellDropdown;
		bool get_InCellDropdown();
		void put_InCellDropdown(bool InCellDropdown);
		//
		__declspec(property(get = get_InputMessage, put = put_InputMessage)) wstring InputMessage;
		wstring get_InputMessage();
		void put_InputMessage(wstring InputMessage);
		//
		__declspec(property(get = get_InputTitle, put = put_InputTitle)) wstring InputTitle;
		wstring get_InputTitle();
		void put_InputTitle(wstring InputTitle);
		void Modify(_variant_t Type, _variant_t AlertStyle, _variant_t Operator, _variant_t Formula1, _variant_t Formula2);
		void Modify();
		//
		__declspec(property(get = get_Operator)) long Operator;
		long get_Operator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ShowError, put = put_ShowError)) bool ShowError;
		bool get_ShowError();
		void put_ShowError(bool ShowError);
		//
		__declspec(property(get = get_ShowInput, put = put_ShowInput)) bool ShowInput;
		bool get_ShowInput();
		void put_ShowInput(bool ShowInput);
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
		//
		__declspec(property(get = get_Value)) bool Value;
		bool get_Value();
	};

	//________________________________________________________Hyperlinks
	// {00024430-0000-0000-C000-000000000046}
	class Hyperlinks : public Com::Object
	{
	public:
		Hyperlinks();
		~Hyperlinks();
		Hyperlinks(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Hyperlinks& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Com::Object Add(Com::Object Anchor, wstring Address, _variant_t SubAddress, _variant_t ScreenTip, _variant_t TextToDisplay);
		Com::Object Add(Com::Object Anchor, wstring Address);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		Excel::Hyperlink get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Hyperlink get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Hyperlink
	// {00024431-0000-0000-C000-000000000046}
	class Hyperlink : public Com::Object
	{
	public:
		Hyperlink();
		~Hyperlink();
		Hyperlink(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Hyperlink& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AddToFavorites();
		//
		__declspec(property(get = get_Address, put = put_Address)) wstring Address;
		wstring get_Address();
		void put_Address(wstring Address);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void CreateNewDocument(wstring Filename, bool EditNow, bool Overwrite);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_EmailSubject, put = put_EmailSubject)) wstring EmailSubject;
		wstring get_EmailSubject();
		void put_EmailSubject(wstring EmailSubject);
		void Follow(_variant_t NewWindow, _variant_t AddHistory, _variant_t ExtraInfo, _variant_t Method, _variant_t HeaderInfo);
		void Follow();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Range)) Excel::Range RangeX;
		Excel::Range get_Range();
		//
		__declspec(property(get = get_ScreenTip, put = put_ScreenTip)) wstring ScreenTip;
		wstring get_ScreenTip();
		void put_ScreenTip(wstring ScreenTip);
		//
		__declspec(property(get = get_Shape)) Excel::Shape ShapeX;
		Excel::Shape get_Shape();
		//
		__declspec(property(get = get_SubAddress, put = put_SubAddress)) wstring SubAddress;
		wstring get_SubAddress();
		void put_SubAddress(wstring SubAddress);
		//
		__declspec(property(get = get_TextToDisplay, put = put_TextToDisplay)) wstring TextToDisplay;
		wstring get_TextToDisplay();
		void put_TextToDisplay(wstring TextToDisplay);
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
	};

	//________________________________________________________AutoFilter
	// {00024432-0000-0000-C000-000000000046}
	class AutoFilter : public Com::Object
	{
	public:
		AutoFilter();
		~AutoFilter();
		AutoFilter(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AutoFilter& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void ApplyFilter();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_FilterMode)) bool FilterMode;
		bool get_FilterMode();
		//
		__declspec(property(get = get_Filters)) Excel::Filters FiltersX;
		Excel::Filters get_Filters();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Range)) Excel::Range RangeX;
		Excel::Range get_Range();
		void ShowAllData();
		//
		__declspec(property(get = get_Sort)) Excel::Sort SortX;
		Excel::Sort get_Sort();
	};

	//________________________________________________________Filters
	// {00024433-0000-0000-C000-000000000046}
	class Filters : public Com::Object
	{
	public:
		Filters();
		~Filters();
		Filters(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Filters& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Filter get_Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Filter get__Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Filter
	// {00024434-0000-0000-C000-000000000046}
	class Filter : public Com::Object
	{
	public:
		Filter();
		~Filter();
		Filter(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Filter& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Criteria1)) _variant_t Criteria1;
		_variant_t get_Criteria1();
		//
		__declspec(property(get = get_Criteria2)) _variant_t Criteria2;
		_variant_t get_Criteria2();
		//
		__declspec(property(get = get_On)) bool On;
		bool get_On();
		//
		__declspec(property(get = get_Operator, put = put_Operator)) Excel::XlAutoFilterOperator Operator;
		Excel::XlAutoFilterOperator get_Operator();
		void put_Operator(Excel::XlAutoFilterOperator Operator);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get__Operator)) Excel::XlAutoFilterOperator _Operator;
		Excel::XlAutoFilterOperator get__Operator();
	};

	//________________________________________________________AutoCorrect
	// {000208D4-0000-0000-C000-000000000046}
	class AutoCorrect : public Com::Object
	{
	public:
		AutoCorrect();
		~AutoCorrect();
		AutoCorrect(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AutoCorrect& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		_variant_t AddReplacement(wstring What, wstring Replacement);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoExpandListRange, put = put_AutoExpandListRange)) bool AutoExpandListRange;
		bool get_AutoExpandListRange();
		void put_AutoExpandListRange(bool AutoExpandListRange);
		//
		__declspec(property(get = get_AutoFillFormulasInLists, put = put_AutoFillFormulasInLists)) bool AutoFillFormulasInLists;
		bool get_AutoFillFormulasInLists();
		void put_AutoFillFormulasInLists(bool AutoFillFormulasInLists);
		//
		__declspec(property(get = get_CapitalizeNamesOfDays, put = put_CapitalizeNamesOfDays)) bool CapitalizeNamesOfDays;
		bool get_CapitalizeNamesOfDays();
		void put_CapitalizeNamesOfDays(bool CapitalizeNamesOfDays);
		//
		__declspec(property(get = get_CorrectCapsLock, put = put_CorrectCapsLock)) bool CorrectCapsLock;
		bool get_CorrectCapsLock();
		void put_CorrectCapsLock(bool CorrectCapsLock);
		//
		__declspec(property(get = get_CorrectSentenceCap, put = put_CorrectSentenceCap)) bool CorrectSentenceCap;
		bool get_CorrectSentenceCap();
		void put_CorrectSentenceCap(bool CorrectSentenceCap);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t DeleteReplacement(wstring What);
		//
		__declspec(property(get = get_DisplayAutoCorrectOptions, put = put_DisplayAutoCorrectOptions)) bool DisplayAutoCorrectOptions;
		bool get_DisplayAutoCorrectOptions();
		void put_DisplayAutoCorrectOptions(bool DisplayAutoCorrectOptions);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ReplaceText, put = put_ReplaceText)) bool ReplaceText;
		bool get_ReplaceText();
		void put_ReplaceText(bool ReplaceText);
		_variant_t get_ReplacementList(_variant_t Index);
		_variant_t get_ReplacementList();
		void put_ReplacementList(_variant_t ReplacementList, _variant_t Index);
		void put_ReplacementList(_variant_t ReplacementList);
		//
		__declspec(property(get = get_TwoInitialCapitals, put = put_TwoInitialCapitals)) bool TwoInitialCapitals;
		bool get_TwoInitialCapitals();
		void put_TwoInitialCapitals(bool TwoInitialCapitals);
	};

	//________________________________________________________Border
	// {00020854-0000-0000-C000-000000000046}
	class Border : public Com::Object
	{
	public:
		Border();
		~Border();
		Border(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Border& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Color, put = put_Color)) _variant_t Color;
		_variant_t get_Color();
		void put_Color(_variant_t Color);
		//
		__declspec(property(get = get_ColorIndex, put = put_ColorIndex)) _variant_t ColorIndex;
		_variant_t get_ColorIndex();
		void put_ColorIndex(_variant_t ColorIndex);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_LineStyle, put = put_LineStyle)) _variant_t LineStyle;
		_variant_t get_LineStyle();
		void put_LineStyle(_variant_t LineStyle);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ThemeColor, put = put_ThemeColor)) _variant_t ThemeColor;
		_variant_t get_ThemeColor();
		void put_ThemeColor(_variant_t ThemeColor);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) _variant_t TintAndShade;
		_variant_t get_TintAndShade();
		void put_TintAndShade(_variant_t TintAndShade);
		//
		__declspec(property(get = get_Weight, put = put_Weight)) _variant_t Weight;
		_variant_t get_Weight();
		void put_Weight(_variant_t Weight);
	};

	//________________________________________________________Interior
	// {00020870-0000-0000-C000-000000000046}
	class Interior : public Com::Object
	{
	public:
		Interior();
		~Interior();
		Interior(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Interior& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Color, put = put_Color)) _variant_t Color;
		_variant_t get_Color();
		void put_Color(_variant_t Color);
		//
		__declspec(property(get = get_ColorIndex, put = put_ColorIndex)) _variant_t ColorIndex;
		_variant_t get_ColorIndex();
		void put_ColorIndex(_variant_t ColorIndex);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Gradient)) Com::Object Gradient;
		Com::Object get_Gradient();
		//
		__declspec(property(get = get_InvertIfNegative, put = put_InvertIfNegative)) _variant_t InvertIfNegative;
		_variant_t get_InvertIfNegative();
		void put_InvertIfNegative(_variant_t InvertIfNegative);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Pattern, put = put_Pattern)) _variant_t Pattern;
		_variant_t get_Pattern();
		void put_Pattern(_variant_t Pattern);
		//
		__declspec(property(get = get_PatternColor, put = put_PatternColor)) _variant_t PatternColor;
		_variant_t get_PatternColor();
		void put_PatternColor(_variant_t PatternColor);
		//
		__declspec(property(get = get_PatternColorIndex, put = put_PatternColorIndex)) _variant_t PatternColorIndex;
		_variant_t get_PatternColorIndex();
		void put_PatternColorIndex(_variant_t PatternColorIndex);
		//
		__declspec(property(get = get_PatternThemeColor, put = put_PatternThemeColor)) _variant_t PatternThemeColor;
		_variant_t get_PatternThemeColor();
		void put_PatternThemeColor(_variant_t PatternThemeColor);
		//
		__declspec(property(get = get_PatternTintAndShade, put = put_PatternTintAndShade)) _variant_t PatternTintAndShade;
		_variant_t get_PatternTintAndShade();
		void put_PatternTintAndShade(_variant_t PatternTintAndShade);
		//
		__declspec(property(get = get_ThemeColor, put = put_ThemeColor)) _variant_t ThemeColor;
		_variant_t get_ThemeColor();
		void put_ThemeColor(_variant_t ThemeColor);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) _variant_t TintAndShade;
		_variant_t get_TintAndShade();
		void put_TintAndShade(_variant_t TintAndShade);
	};

	//________________________________________________________ChartFillFormat
	// {00024435-0000-0000-C000-000000000046}
	class ChartFillFormat : public Com::Object
	{
	public:
		ChartFillFormat();
		~ChartFillFormat();
		ChartFillFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartFillFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BackColor)) Excel::ChartColorFormat BackColor;
		Excel::ChartColorFormat get_BackColor();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_ForeColor)) Excel::ChartColorFormat ForeColor;
		Excel::ChartColorFormat get_ForeColor();
		//
		__declspec(property(get = get_GradientColorType)) /* MsoGradientColorType*/ short GradientColorType;
		/* MsoGradientColorType*/ short get_GradientColorType();
		//
		__declspec(property(get = get_GradientDegree)) float GradientDegree;
		float get_GradientDegree();
		//
		__declspec(property(get = get_GradientStyle)) /* MsoGradientStyle*/ short GradientStyle;
		/* MsoGradientStyle*/ short get_GradientStyle();
		//
		__declspec(property(get = get_GradientVariant)) long GradientVariant;
		long get_GradientVariant();
		void OneColorGradient(/* MsoGradientStyle*/ short Style, long Variant, float Degree);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Pattern)) /* MsoPatternType*/ short Pattern;
		/* MsoPatternType*/ short get_Pattern();
		void Patterned(/* MsoPatternType*/ short Pattern);
		void PresetGradient(/* MsoGradientStyle*/ short Style, long Variant, /* MsoPresetGradientType*/ short PresetGradientType);
		//
		__declspec(property(get = get_PresetGradientType)) /* MsoPresetGradientType*/ short PresetGradientType;
		/* MsoPresetGradientType*/ short get_PresetGradientType();
		//
		__declspec(property(get = get_PresetTexture)) /* MsoPresetTexture*/ short PresetTexture;
		/* MsoPresetTexture*/ short get_PresetTexture();
		void PresetTextured(/* MsoPresetTexture*/ short PresetTexture);
		void Solid();
		//
		__declspec(property(get = get_TextureName)) wstring TextureName;
		wstring get_TextureName();
		//
		__declspec(property(get = get_TextureType)) /* MsoTextureType*/ short TextureType;
		/* MsoTextureType*/ short get_TextureType();
		void TwoColorGradient(/* MsoGradientStyle*/ short Style, long Variant);
		//
		__declspec(property(get = get_Type)) /* MsoFillType*/ short Type;
		/* MsoFillType*/ short get_Type();
		void UserPicture(_variant_t PictureFile, _variant_t PictureFormat, _variant_t PictureStackUnit, _variant_t PicturePlacement);
		void UserPicture();
		void UserTextured(wstring TextureFile);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) /* MsoTriState*/ short Visible;
		/* MsoTriState*/ short get_Visible();
		void put_Visible(/* MsoTriState*/ short Visible);
	};

	//________________________________________________________ChartColorFormat
	// {00024436-0000-0000-C000-000000000046}
	class ChartColorFormat : public Com::Object
	{
	public:
		ChartColorFormat();
		~ChartColorFormat();
		ChartColorFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartColorFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RGB)) long RGB;
		long get_RGB();
		//
		__declspec(property(get = get_SchemeColor, put = put_SchemeColor)) long SchemeColor;
		long get_SchemeColor();
		void put_SchemeColor(long SchemeColor);
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
		//
		__declspec(property(get = get__Default)) long _Default;
		long get__Default();
	};

	//________________________________________________________Axis
	// {00020848-0000-0000-C000-000000000046}
	class Axis : public Com::Object
	{
	public:
		Axis();
		~Axis();
		Axis(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Axis& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AxisBetweenCategories, put = put_AxisBetweenCategories)) bool AxisBetweenCategories;
		bool get_AxisBetweenCategories();
		void put_AxisBetweenCategories(bool AxisBetweenCategories);
		//
		__declspec(property(get = get_AxisGroup)) Excel::XlAxisGroup AxisGroup;
		Excel::XlAxisGroup get_AxisGroup();
		//
		__declspec(property(get = get_AxisTitle)) Excel::AxisTitle AxisTitleX;
		Excel::AxisTitle get_AxisTitle();
		//
		__declspec(property(get = get_BaseUnit, put = put_BaseUnit)) Excel::XlTimeUnit BaseUnit;
		Excel::XlTimeUnit get_BaseUnit();
		void put_BaseUnit(Excel::XlTimeUnit BaseUnit);
		//
		__declspec(property(get = get_BaseUnitIsAuto, put = put_BaseUnitIsAuto)) bool BaseUnitIsAuto;
		bool get_BaseUnitIsAuto();
		void put_BaseUnitIsAuto(bool BaseUnitIsAuto);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_CategoryNames, put = put_CategoryNames)) _variant_t CategoryNames;
		_variant_t get_CategoryNames();
		void put_CategoryNames(_variant_t CategoryNames);
		//
		__declspec(property(get = get_CategorySortOrder, put = put_CategorySortOrder)) Excel::XlCategorySortOrder CategorySortOrder;
		Excel::XlCategorySortOrder get_CategorySortOrder();
		void put_CategorySortOrder(Excel::XlCategorySortOrder CategorySortOrder);
		//
		__declspec(property(get = get_CategoryType, put = put_CategoryType)) Excel::XlCategoryType CategoryType;
		Excel::XlCategoryType get_CategoryType();
		void put_CategoryType(Excel::XlCategoryType CategoryType);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Crosses, put = put_Crosses)) Excel::XlAxisCrosses Crosses;
		Excel::XlAxisCrosses get_Crosses();
		void put_Crosses(Excel::XlAxisCrosses Crosses);
		//
		__declspec(property(get = get_CrossesAt, put = put_CrossesAt)) double CrossesAt;
		double get_CrossesAt();
		void put_CrossesAt(double CrossesAt);
		_variant_t Delete();
		//
		__declspec(property(get = get_DisplayUnit, put = put_DisplayUnit)) Excel::XlDisplayUnit DisplayUnit;
		Excel::XlDisplayUnit get_DisplayUnit();
		void put_DisplayUnit(Excel::XlDisplayUnit DisplayUnit);
		//
		__declspec(property(get = get_DisplayUnitCustom, put = put_DisplayUnitCustom)) double DisplayUnitCustom;
		double get_DisplayUnitCustom();
		void put_DisplayUnitCustom(double DisplayUnitCustom);
		//
		__declspec(property(get = get_DisplayUnitLabel)) Excel::DisplayUnitLabel DisplayUnitLabelX;
		Excel::DisplayUnitLabel get_DisplayUnitLabel();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_HasDisplayUnitLabel, put = put_HasDisplayUnitLabel)) bool HasDisplayUnitLabel;
		bool get_HasDisplayUnitLabel();
		void put_HasDisplayUnitLabel(bool HasDisplayUnitLabel);
		//
		__declspec(property(get = get_HasMajorGridlines, put = put_HasMajorGridlines)) bool HasMajorGridlines;
		bool get_HasMajorGridlines();
		void put_HasMajorGridlines(bool HasMajorGridlines);
		//
		__declspec(property(get = get_HasMinorGridlines, put = put_HasMinorGridlines)) bool HasMinorGridlines;
		bool get_HasMinorGridlines();
		void put_HasMinorGridlines(bool HasMinorGridlines);
		//
		__declspec(property(get = get_HasTitle, put = put_HasTitle)) bool HasTitle;
		bool get_HasTitle();
		void put_HasTitle(bool HasTitle);
		//
		__declspec(property(get = get_Height)) double Height;
		double get_Height();
		//
		__declspec(property(get = get_Left)) double Left;
		double get_Left();
		//
		__declspec(property(get = get_LogBase, put = put_LogBase)) double LogBase;
		double get_LogBase();
		void put_LogBase(double LogBase);
		//
		__declspec(property(get = get_MajorGridlines)) Excel::Gridlines MajorGridlines;
		Excel::Gridlines get_MajorGridlines();
		//
		__declspec(property(get = get_MajorTickMark, put = put_MajorTickMark)) Excel::XlTickMark MajorTickMark;
		Excel::XlTickMark get_MajorTickMark();
		void put_MajorTickMark(Excel::XlTickMark MajorTickMark);
		//
		__declspec(property(get = get_MajorUnit, put = put_MajorUnit)) double MajorUnit;
		double get_MajorUnit();
		void put_MajorUnit(double MajorUnit);
		//
		__declspec(property(get = get_MajorUnitIsAuto, put = put_MajorUnitIsAuto)) bool MajorUnitIsAuto;
		bool get_MajorUnitIsAuto();
		void put_MajorUnitIsAuto(bool MajorUnitIsAuto);
		//
		__declspec(property(get = get_MajorUnitScale, put = put_MajorUnitScale)) Excel::XlTimeUnit MajorUnitScale;
		Excel::XlTimeUnit get_MajorUnitScale();
		void put_MajorUnitScale(Excel::XlTimeUnit MajorUnitScale);
		//
		__declspec(property(get = get_MaximumScale, put = put_MaximumScale)) double MaximumScale;
		double get_MaximumScale();
		void put_MaximumScale(double MaximumScale);
		//
		__declspec(property(get = get_MaximumScaleIsAuto, put = put_MaximumScaleIsAuto)) bool MaximumScaleIsAuto;
		bool get_MaximumScaleIsAuto();
		void put_MaximumScaleIsAuto(bool MaximumScaleIsAuto);
		//
		__declspec(property(get = get_MinimumScale, put = put_MinimumScale)) double MinimumScale;
		double get_MinimumScale();
		void put_MinimumScale(double MinimumScale);
		//
		__declspec(property(get = get_MinimumScaleIsAuto, put = put_MinimumScaleIsAuto)) bool MinimumScaleIsAuto;
		bool get_MinimumScaleIsAuto();
		void put_MinimumScaleIsAuto(bool MinimumScaleIsAuto);
		//
		__declspec(property(get = get_MinorGridlines)) Excel::Gridlines MinorGridlines;
		Excel::Gridlines get_MinorGridlines();
		//
		__declspec(property(get = get_MinorTickMark, put = put_MinorTickMark)) Excel::XlTickMark MinorTickMark;
		Excel::XlTickMark get_MinorTickMark();
		void put_MinorTickMark(Excel::XlTickMark MinorTickMark);
		//
		__declspec(property(get = get_MinorUnit, put = put_MinorUnit)) double MinorUnit;
		double get_MinorUnit();
		void put_MinorUnit(double MinorUnit);
		//
		__declspec(property(get = get_MinorUnitIsAuto, put = put_MinorUnitIsAuto)) bool MinorUnitIsAuto;
		bool get_MinorUnitIsAuto();
		void put_MinorUnitIsAuto(bool MinorUnitIsAuto);
		//
		__declspec(property(get = get_MinorUnitScale, put = put_MinorUnitScale)) Excel::XlTimeUnit MinorUnitScale;
		Excel::XlTimeUnit get_MinorUnitScale();
		void put_MinorUnitScale(Excel::XlTimeUnit MinorUnitScale);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ReversePlotOrder, put = put_ReversePlotOrder)) bool ReversePlotOrder;
		bool get_ReversePlotOrder();
		void put_ReversePlotOrder(bool ReversePlotOrder);
		//
		__declspec(property(get = get_ScaleType, put = put_ScaleType)) Excel::XlScaleType ScaleType;
		Excel::XlScaleType get_ScaleType();
		void put_ScaleType(Excel::XlScaleType ScaleType);
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_TickLabelPosition, put = put_TickLabelPosition)) Excel::XlTickLabelPosition TickLabelPosition;
		Excel::XlTickLabelPosition get_TickLabelPosition();
		void put_TickLabelPosition(Excel::XlTickLabelPosition TickLabelPosition);
		//
		__declspec(property(get = get_TickLabelSpacing, put = put_TickLabelSpacing)) long TickLabelSpacing;
		long get_TickLabelSpacing();
		void put_TickLabelSpacing(long TickLabelSpacing);
		//
		__declspec(property(get = get_TickLabelSpacingIsAuto, put = put_TickLabelSpacingIsAuto)) bool TickLabelSpacingIsAuto;
		bool get_TickLabelSpacingIsAuto();
		void put_TickLabelSpacingIsAuto(bool TickLabelSpacingIsAuto);
		//
		__declspec(property(get = get_TickLabels)) Excel::TickLabels TickLabelsX;
		Excel::TickLabels get_TickLabels();
		//
		__declspec(property(get = get_TickMarkSpacing, put = put_TickMarkSpacing)) long TickMarkSpacing;
		long get_TickMarkSpacing();
		void put_TickMarkSpacing(long TickMarkSpacing);
		//
		__declspec(property(get = get_Top)) double Top;
		double get_Top();
		//
		__declspec(property(get = get_Type, put = put_Type)) Excel::XlAxisType Type;
		Excel::XlAxisType get_Type();
		void put_Type(Excel::XlAxisType Type);
		//
		__declspec(property(get = get_Width)) double Width;
		double get_Width();
	};

	//________________________________________________________ChartTitle
	// {00020849-0000-0000-C000-000000000046}
	class ChartTitle : public Com::Object
	{
	public:
		ChartTitle();
		~ChartTitle();
		ChartTitle(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartTitle& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_FormulaLocal, put = put_FormulaLocal)) wstring FormulaLocal;
		wstring get_FormulaLocal();
		void put_FormulaLocal(wstring FormulaLocal);
		//
		__declspec(property(get = get_FormulaR1C1, put = put_FormulaR1C1)) wstring FormulaR1C1;
		wstring get_FormulaR1C1();
		void put_FormulaR1C1(wstring FormulaR1C1);
		//
		__declspec(property(get = get_FormulaR1C1Local, put = put_FormulaR1C1Local)) wstring FormulaR1C1Local;
		wstring get_FormulaR1C1Local();
		void put_FormulaR1C1Local(wstring FormulaR1C1Local);
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Height)) double Height;
		double get_Height();
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_IncludeInLayout, put = put_IncludeInLayout)) bool IncludeInLayout;
		bool get_IncludeInLayout();
		void put_IncludeInLayout(bool IncludeInLayout);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) Excel::XlChartElementPosition Position;
		Excel::XlChartElementPosition get_Position();
		void put_Position(Excel::XlChartElementPosition Position);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Width)) double Width;
		double get_Width();
	};

	//________________________________________________________AxisTitle
	// {0002084A-0000-0000-C000-000000000046}
	class AxisTitle : public Com::Object
	{
	public:
		AxisTitle();
		~AxisTitle();
		AxisTitle(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AxisTitle& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_FormulaLocal, put = put_FormulaLocal)) wstring FormulaLocal;
		wstring get_FormulaLocal();
		void put_FormulaLocal(wstring FormulaLocal);
		//
		__declspec(property(get = get_FormulaR1C1, put = put_FormulaR1C1)) wstring FormulaR1C1;
		wstring get_FormulaR1C1();
		void put_FormulaR1C1(wstring FormulaR1C1);
		//
		__declspec(property(get = get_FormulaR1C1Local, put = put_FormulaR1C1Local)) wstring FormulaR1C1Local;
		wstring get_FormulaR1C1Local();
		void put_FormulaR1C1Local(wstring FormulaR1C1Local);
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Height)) double Height;
		double get_Height();
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_IncludeInLayout, put = put_IncludeInLayout)) bool IncludeInLayout;
		bool get_IncludeInLayout();
		void put_IncludeInLayout(bool IncludeInLayout);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) Excel::XlChartElementPosition Position;
		Excel::XlChartElementPosition get_Position();
		void put_Position(Excel::XlChartElementPosition Position);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Width)) double Width;
		double get_Width();
	};

	//________________________________________________________ChartGroup
	// {00020859-0000-0000-C000-000000000046}
	class ChartGroup : public Com::Object
	{
	public:
		ChartGroup();
		~ChartGroup();
		ChartGroup(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartGroup& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AxisGroup, put = put_AxisGroup)) Excel::XlAxisGroup AxisGroup;
		Excel::XlAxisGroup get_AxisGroup();
		void put_AxisGroup(Excel::XlAxisGroup AxisGroup);
		//
		__declspec(property(get = get_BinWidthValue, put = put_BinWidthValue)) double BinWidthValue;
		double get_BinWidthValue();
		void put_BinWidthValue(double BinWidthValue);
		//
		__declspec(property(get = get_BinsCountValue, put = put_BinsCountValue)) long BinsCountValue;
		long get_BinsCountValue();
		void put_BinsCountValue(long BinsCountValue);
		//
		__declspec(property(get = get_BinsOverflowEnabled, put = put_BinsOverflowEnabled)) bool BinsOverflowEnabled;
		bool get_BinsOverflowEnabled();
		void put_BinsOverflowEnabled(bool BinsOverflowEnabled);
		//
		__declspec(property(get = get_BinsOverflowValue, put = put_BinsOverflowValue)) double BinsOverflowValue;
		double get_BinsOverflowValue();
		void put_BinsOverflowValue(double BinsOverflowValue);
		//
		__declspec(property(get = get_BinsType, put = put_BinsType)) Excel::XlBinsType BinsType;
		Excel::XlBinsType get_BinsType();
		void put_BinsType(Excel::XlBinsType BinsType);
		//
		__declspec(property(get = get_BinsUnderflowEnabled, put = put_BinsUnderflowEnabled)) bool BinsUnderflowEnabled;
		bool get_BinsUnderflowEnabled();
		void put_BinsUnderflowEnabled(bool BinsUnderflowEnabled);
		//
		__declspec(property(get = get_BinsUnderflowValue, put = put_BinsUnderflowValue)) double BinsUnderflowValue;
		double get_BinsUnderflowValue();
		void put_BinsUnderflowValue(double BinsUnderflowValue);
		//
		__declspec(property(get = get_BubbleScale, put = put_BubbleScale)) long BubbleScale;
		long get_BubbleScale();
		void put_BubbleScale(long BubbleScale);
		Com::Object CategoryCollection(_variant_t Index);
		Com::Object CategoryCollection();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DoughnutHoleSize, put = put_DoughnutHoleSize)) long DoughnutHoleSize;
		long get_DoughnutHoleSize();
		void put_DoughnutHoleSize(long DoughnutHoleSize);
		//
		__declspec(property(get = get_DownBars)) Excel::DownBars DownBarsX;
		Excel::DownBars get_DownBars();
		//
		__declspec(property(get = get_DropLines)) Excel::DropLines DropLinesX;
		Excel::DropLines get_DropLines();
		//
		__declspec(property(get = get_FirstSliceAngle, put = put_FirstSliceAngle)) long FirstSliceAngle;
		long get_FirstSliceAngle();
		void put_FirstSliceAngle(long FirstSliceAngle);
		Com::Object FullCategoryCollection(_variant_t Index);
		Com::Object FullCategoryCollection();
		//
		__declspec(property(get = get_GapWidth, put = put_GapWidth)) long GapWidth;
		long get_GapWidth();
		void put_GapWidth(long GapWidth);
		//
		__declspec(property(get = get_Has3DShading, put = put_Has3DShading)) bool Has3DShading;
		bool get_Has3DShading();
		void put_Has3DShading(bool Has3DShading);
		//
		__declspec(property(get = get_HasDropLines, put = put_HasDropLines)) bool HasDropLines;
		bool get_HasDropLines();
		void put_HasDropLines(bool HasDropLines);
		//
		__declspec(property(get = get_HasHiLoLines, put = put_HasHiLoLines)) bool HasHiLoLines;
		bool get_HasHiLoLines();
		void put_HasHiLoLines(bool HasHiLoLines);
		//
		__declspec(property(get = get_HasRadarAxisLabels, put = put_HasRadarAxisLabels)) bool HasRadarAxisLabels;
		bool get_HasRadarAxisLabels();
		void put_HasRadarAxisLabels(bool HasRadarAxisLabels);
		//
		__declspec(property(get = get_HasSeriesLines, put = put_HasSeriesLines)) bool HasSeriesLines;
		bool get_HasSeriesLines();
		void put_HasSeriesLines(bool HasSeriesLines);
		//
		__declspec(property(get = get_HasUpDownBars, put = put_HasUpDownBars)) bool HasUpDownBars;
		bool get_HasUpDownBars();
		void put_HasUpDownBars(bool HasUpDownBars);
		//
		__declspec(property(get = get_HiLoLines)) Excel::HiLoLines HiLoLinesX;
		Excel::HiLoLines get_HiLoLines();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Overlap, put = put_Overlap)) long Overlap;
		long get_Overlap();
		void put_Overlap(long Overlap);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RadarAxisLabels)) Excel::TickLabels RadarAxisLabels;
		Excel::TickLabels get_RadarAxisLabels();
		//
		__declspec(property(get = get_SecondPlotSize, put = put_SecondPlotSize)) long SecondPlotSize;
		long get_SecondPlotSize();
		void put_SecondPlotSize(long SecondPlotSize);
		Com::Object SeriesCollection(_variant_t Index);
		Com::Object SeriesCollection();
		//
		__declspec(property(get = get_SeriesLines)) Excel::SeriesLines SeriesLinesX;
		Excel::SeriesLines get_SeriesLines();
		//
		__declspec(property(get = get_ShowNegativeBubbles, put = put_ShowNegativeBubbles)) bool ShowNegativeBubbles;
		bool get_ShowNegativeBubbles();
		void put_ShowNegativeBubbles(bool ShowNegativeBubbles);
		//
		__declspec(property(get = get_SizeRepresents, put = put_SizeRepresents)) Excel::XlSizeRepresents SizeRepresents;
		Excel::XlSizeRepresents get_SizeRepresents();
		void put_SizeRepresents(Excel::XlSizeRepresents SizeRepresents);
		//
		__declspec(property(get = get_SplitType, put = put_SplitType)) Excel::XlChartSplitType SplitType;
		Excel::XlChartSplitType get_SplitType();
		void put_SplitType(Excel::XlChartSplitType SplitType);
		//
		__declspec(property(get = get_SplitValue, put = put_SplitValue)) _variant_t SplitValue;
		_variant_t get_SplitValue();
		void put_SplitValue(_variant_t SplitValue);
		//
		__declspec(property(get = get_SubType, put = put_SubType)) long SubType;
		long get_SubType();
		void put_SubType(long SubType);
		//
		__declspec(property(get = get_Type, put = put_Type)) long Type;
		long get_Type();
		void put_Type(long Type);
		//
		__declspec(property(get = get_UpBars)) Excel::UpBars UpBarsX;
		Excel::UpBars get_UpBars();
		//
		__declspec(property(get = get_VaryByCategories, put = put_VaryByCategories)) bool VaryByCategories;
		bool get_VaryByCategories();
		void put_VaryByCategories(bool VaryByCategories);
	};

	//________________________________________________________ChartGroups
	// {0002085A-0000-0000-C000-000000000046}
	class ChartGroups : public Com::Object
	{
	public:
		ChartGroups();
		~ChartGroups();
		ChartGroups(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartGroups& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ChartGroup Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Axes
	// {0002085B-0000-0000-C000-000000000046}
	class Axes : public Com::Object
	{
	public:
		Axes();
		~Axes();
		Axes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Axes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Axis Item(Excel::XlAxisType Type, Excel::XlAxisGroup AxisGroup);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Axis _Default(Excel::XlAxisType Type, Excel::XlAxisGroup AxisGroup);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Points
	// {00020869-0000-0000-C000-000000000046}
	class Points : public Com::Object
	{
	public:
		Points();
		~Points();
		Points(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Points& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Point Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Point _Default(long Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Point
	// {0002086A-0000-0000-C000-000000000046}
	class Point : public Com::Object
	{
	public:
		Point();
		~Point();
		Point(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Point& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		_variant_t ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines, _variant_t ShowSeriesName, _variant_t ShowCategoryName, _variant_t ShowValue, _variant_t ShowPercentage, _variant_t ShowBubbleSize, _variant_t Separator);
		_variant_t ApplyDataLabels(Excel::XlDataLabelsType Type);
		//
		__declspec(property(get = get_ApplyPictToEnd, put = put_ApplyPictToEnd)) bool ApplyPictToEnd;
		bool get_ApplyPictToEnd();
		void put_ApplyPictToEnd(bool ApplyPictToEnd);
		//
		__declspec(property(get = get_ApplyPictToFront, put = put_ApplyPictToFront)) bool ApplyPictToFront;
		bool get_ApplyPictToFront();
		void put_ApplyPictToFront(bool ApplyPictToFront);
		//
		__declspec(property(get = get_ApplyPictToSides, put = put_ApplyPictToSides)) bool ApplyPictToSides;
		bool get_ApplyPictToSides();
		void put_ApplyPictToSides(bool ApplyPictToSides);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t ClearFormats();
		_variant_t Copy();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataLabel)) Excel::DataLabel DataLabelX;
		Excel::DataLabel get_DataLabel();
		_variant_t Delete();
		//
		__declspec(property(get = get_Explosion, put = put_Explosion)) long Explosion;
		long get_Explosion();
		void put_Explosion(long Explosion);
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Has3DEffect, put = put_Has3DEffect)) bool Has3DEffect;
		bool get_Has3DEffect();
		void put_Has3DEffect(bool Has3DEffect);
		//
		__declspec(property(get = get_HasDataLabel, put = put_HasDataLabel)) bool HasDataLabel;
		bool get_HasDataLabel();
		void put_HasDataLabel(bool HasDataLabel);
		//
		__declspec(property(get = get_Height)) double Height;
		double get_Height();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_InvertIfNegative, put = put_InvertIfNegative)) bool InvertIfNegative;
		bool get_InvertIfNegative();
		void put_InvertIfNegative(bool InvertIfNegative);
		//
		__declspec(property(get = get_IsTotal, put = put_IsTotal)) bool IsTotal;
		bool get_IsTotal();
		void put_IsTotal(bool IsTotal);
		//
		__declspec(property(get = get_Left)) double Left;
		double get_Left();
		//
		__declspec(property(get = get_MarkerBackgroundColor, put = put_MarkerBackgroundColor)) long MarkerBackgroundColor;
		long get_MarkerBackgroundColor();
		void put_MarkerBackgroundColor(long MarkerBackgroundColor);
		//
		__declspec(property(get = get_MarkerBackgroundColorIndex, put = put_MarkerBackgroundColorIndex)) Excel::XlColorIndex MarkerBackgroundColorIndex;
		Excel::XlColorIndex get_MarkerBackgroundColorIndex();
		void put_MarkerBackgroundColorIndex(Excel::XlColorIndex MarkerBackgroundColorIndex);
		//
		__declspec(property(get = get_MarkerForegroundColor, put = put_MarkerForegroundColor)) long MarkerForegroundColor;
		long get_MarkerForegroundColor();
		void put_MarkerForegroundColor(long MarkerForegroundColor);
		//
		__declspec(property(get = get_MarkerForegroundColorIndex, put = put_MarkerForegroundColorIndex)) Excel::XlColorIndex MarkerForegroundColorIndex;
		Excel::XlColorIndex get_MarkerForegroundColorIndex();
		void put_MarkerForegroundColorIndex(Excel::XlColorIndex MarkerForegroundColorIndex);
		//
		__declspec(property(get = get_MarkerSize, put = put_MarkerSize)) long MarkerSize;
		long get_MarkerSize();
		void put_MarkerSize(long MarkerSize);
		//
		__declspec(property(get = get_MarkerStyle, put = put_MarkerStyle)) Excel::XlMarkerStyle MarkerStyle;
		Excel::XlMarkerStyle get_MarkerStyle();
		void put_MarkerStyle(Excel::XlMarkerStyle MarkerStyle);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Paste();
		//
		__declspec(property(get = get_PictureType, put = put_PictureType)) Excel::XlChartPictureType PictureType;
		Excel::XlChartPictureType get_PictureType();
		void put_PictureType(Excel::XlChartPictureType PictureType);
		//
		__declspec(property(get = get_PictureUnit, put = put_PictureUnit)) long PictureUnit;
		long get_PictureUnit();
		void put_PictureUnit(long PictureUnit);
		//
		__declspec(property(get = get_PictureUnit2, put = put_PictureUnit2)) double PictureUnit2;
		double get_PictureUnit2();
		void put_PictureUnit2(double PictureUnit2);
		double PieSliceLocation(Excel::XlPieSliceLocation loc, Excel::XlPieSliceIndex Index);
		//
		__declspec(property(get = get_SecondaryPlot, put = put_SecondaryPlot)) bool SecondaryPlot;
		bool get_SecondaryPlot();
		void put_SecondaryPlot(bool SecondaryPlot);
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_Top)) double Top;
		double get_Top();
		//
		__declspec(property(get = get_Width)) double Width;
		double get_Width();
		_variant_t _ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines);
		_variant_t _ApplyDataLabels(Excel::XlDataLabelsType Type);
	};

	//________________________________________________________Series
	// {0002086B-0000-0000-C000-000000000046}
	class Series : public Com::Object
	{
	public:
		Series();
		~Series();
		Series(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Series& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void ApplyCustomType(Excel::XlChartType ChartType);
		_variant_t ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines, _variant_t ShowSeriesName, _variant_t ShowCategoryName, _variant_t ShowValue, _variant_t ShowPercentage, _variant_t ShowBubbleSize, _variant_t Separator);
		_variant_t ApplyDataLabels(Excel::XlDataLabelsType Type);
		//
		__declspec(property(get = get_ApplyPictToEnd, put = put_ApplyPictToEnd)) bool ApplyPictToEnd;
		bool get_ApplyPictToEnd();
		void put_ApplyPictToEnd(bool ApplyPictToEnd);
		//
		__declspec(property(get = get_ApplyPictToFront, put = put_ApplyPictToFront)) bool ApplyPictToFront;
		bool get_ApplyPictToFront();
		void put_ApplyPictToFront(bool ApplyPictToFront);
		//
		__declspec(property(get = get_ApplyPictToSides, put = put_ApplyPictToSides)) bool ApplyPictToSides;
		bool get_ApplyPictToSides();
		void put_ApplyPictToSides(bool ApplyPictToSides);
		//
		__declspec(property(get = get_AxisGroup, put = put_AxisGroup)) Excel::XlAxisGroup AxisGroup;
		Excel::XlAxisGroup get_AxisGroup();
		void put_AxisGroup(Excel::XlAxisGroup AxisGroup);
		//
		__declspec(property(get = get_BarShape, put = put_BarShape)) Excel::XlBarShape BarShape;
		Excel::XlBarShape get_BarShape();
		void put_BarShape(Excel::XlBarShape BarShape);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_BubbleSizes, put = put_BubbleSizes)) _variant_t BubbleSizes;
		_variant_t get_BubbleSizes();
		void put_BubbleSizes(_variant_t BubbleSizes);
		//
		__declspec(property(get = get_ChartType, put = put_ChartType)) Excel::XlChartType ChartType;
		Excel::XlChartType get_ChartType();
		void put_ChartType(Excel::XlChartType ChartType);
		_variant_t ClearFormats();
		_variant_t Copy();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Com::Object DataLabels(_variant_t Index);
		Com::Object DataLabels();
		_variant_t Delete();
		_variant_t ErrorBar(Excel::XlErrorBarDirection Direction, Excel::XlErrorBarInclude Include, Excel::XlErrorBarType Type, _variant_t Amount, _variant_t MinusValues);
		_variant_t ErrorBar(Excel::XlErrorBarDirection Direction, Excel::XlErrorBarInclude Include, Excel::XlErrorBarType Type);
		//
		__declspec(property(get = get_ErrorBars)) Excel::ErrorBars ErrorBarsX;
		Excel::ErrorBars get_ErrorBars();
		//
		__declspec(property(get = get_Explosion, put = put_Explosion)) long Explosion;
		long get_Explosion();
		void put_Explosion(long Explosion);
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_FormulaLocal, put = put_FormulaLocal)) wstring FormulaLocal;
		wstring get_FormulaLocal();
		void put_FormulaLocal(wstring FormulaLocal);
		//
		__declspec(property(get = get_FormulaR1C1, put = put_FormulaR1C1)) wstring FormulaR1C1;
		wstring get_FormulaR1C1();
		void put_FormulaR1C1(wstring FormulaR1C1);
		//
		__declspec(property(get = get_FormulaR1C1Local, put = put_FormulaR1C1Local)) wstring FormulaR1C1Local;
		wstring get_FormulaR1C1Local();
		void put_FormulaR1C1Local(wstring FormulaR1C1Local);
		//
		__declspec(property(get = get_GeoMappingLevel, put = put_GeoMappingLevel)) Excel::XlGeoMappingLevel GeoMappingLevel;
		Excel::XlGeoMappingLevel get_GeoMappingLevel();
		void put_GeoMappingLevel(Excel::XlGeoMappingLevel GeoMappingLevel);
		//
		__declspec(property(get = get_GeoProjectionType, put = put_GeoProjectionType)) Excel::XlGeoProjectionType GeoProjectionType;
		Excel::XlGeoProjectionType get_GeoProjectionType();
		void put_GeoProjectionType(Excel::XlGeoProjectionType GeoProjectionType);
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Has3DEffect, put = put_Has3DEffect)) bool Has3DEffect;
		bool get_Has3DEffect();
		void put_Has3DEffect(bool Has3DEffect);
		//
		__declspec(property(get = get_HasDataLabels, put = put_HasDataLabels)) bool HasDataLabels;
		bool get_HasDataLabels();
		void put_HasDataLabels(bool HasDataLabels);
		//
		__declspec(property(get = get_HasErrorBars, put = put_HasErrorBars)) bool HasErrorBars;
		bool get_HasErrorBars();
		void put_HasErrorBars(bool HasErrorBars);
		//
		__declspec(property(get = get_HasLeaderLines, put = put_HasLeaderLines)) bool HasLeaderLines;
		bool get_HasLeaderLines();
		void put_HasLeaderLines(bool HasLeaderLines);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_InvertColor, put = put_InvertColor)) long InvertColor;
		long get_InvertColor();
		void put_InvertColor(long InvertColor);
		//
		__declspec(property(get = get_InvertColorIndex, put = put_InvertColorIndex)) long InvertColorIndex;
		long get_InvertColorIndex();
		void put_InvertColorIndex(long InvertColorIndex);
		//
		__declspec(property(get = get_InvertIfNegative, put = put_InvertIfNegative)) bool InvertIfNegative;
		bool get_InvertIfNegative();
		void put_InvertIfNegative(bool InvertIfNegative);
		//
		__declspec(property(get = get_IsFiltered, put = put_IsFiltered)) bool IsFiltered;
		bool get_IsFiltered();
		void put_IsFiltered(bool IsFiltered);
		//
		__declspec(property(get = get_LeaderLines)) Excel::LeaderLines LeaderLinesX;
		Excel::LeaderLines get_LeaderLines();
		//
		__declspec(property(get = get_MarkerBackgroundColor, put = put_MarkerBackgroundColor)) long MarkerBackgroundColor;
		long get_MarkerBackgroundColor();
		void put_MarkerBackgroundColor(long MarkerBackgroundColor);
		//
		__declspec(property(get = get_MarkerBackgroundColorIndex, put = put_MarkerBackgroundColorIndex)) Excel::XlColorIndex MarkerBackgroundColorIndex;
		Excel::XlColorIndex get_MarkerBackgroundColorIndex();
		void put_MarkerBackgroundColorIndex(Excel::XlColorIndex MarkerBackgroundColorIndex);
		//
		__declspec(property(get = get_MarkerForegroundColor, put = put_MarkerForegroundColor)) long MarkerForegroundColor;
		long get_MarkerForegroundColor();
		void put_MarkerForegroundColor(long MarkerForegroundColor);
		//
		__declspec(property(get = get_MarkerForegroundColorIndex, put = put_MarkerForegroundColorIndex)) Excel::XlColorIndex MarkerForegroundColorIndex;
		Excel::XlColorIndex get_MarkerForegroundColorIndex();
		void put_MarkerForegroundColorIndex(Excel::XlColorIndex MarkerForegroundColorIndex);
		//
		__declspec(property(get = get_MarkerSize, put = put_MarkerSize)) long MarkerSize;
		long get_MarkerSize();
		void put_MarkerSize(long MarkerSize);
		//
		__declspec(property(get = get_MarkerStyle, put = put_MarkerStyle)) Excel::XlMarkerStyle MarkerStyle;
		Excel::XlMarkerStyle get_MarkerStyle();
		void put_MarkerStyle(Excel::XlMarkerStyle MarkerStyle);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ParentDataLabelOption, put = put_ParentDataLabelOption)) Excel::XlParentDataLabelOptions ParentDataLabelOption;
		Excel::XlParentDataLabelOptions get_ParentDataLabelOption();
		void put_ParentDataLabelOption(Excel::XlParentDataLabelOptions ParentDataLabelOption);
		_variant_t Paste();
		//
		__declspec(property(get = get_PictureType, put = put_PictureType)) Excel::XlChartPictureType PictureType;
		Excel::XlChartPictureType get_PictureType();
		void put_PictureType(Excel::XlChartPictureType PictureType);
		//
		__declspec(property(get = get_PictureUnit, put = put_PictureUnit)) long PictureUnit;
		long get_PictureUnit();
		void put_PictureUnit(long PictureUnit);
		//
		__declspec(property(get = get_PictureUnit2, put = put_PictureUnit2)) double PictureUnit2;
		double get_PictureUnit2();
		void put_PictureUnit2(double PictureUnit2);
		//
		__declspec(property(get = get_PlotColorIndex)) long PlotColorIndex;
		long get_PlotColorIndex();
		//
		__declspec(property(get = get_PlotOrder, put = put_PlotOrder)) long PlotOrder;
		long get_PlotOrder();
		void put_PlotOrder(long PlotOrder);
		Com::Object Points(_variant_t Index);
		Com::Object Points();
		//
		__declspec(property(get = get_QuartileCalculationInclusiveMedian, put = put_QuartileCalculationInclusiveMedian)) bool QuartileCalculationInclusiveMedian;
		bool get_QuartileCalculationInclusiveMedian();
		void put_QuartileCalculationInclusiveMedian(bool QuartileCalculationInclusiveMedian);
		//
		__declspec(property(get = get_RegionLabelOption, put = put_RegionLabelOption)) Excel::XlRegionLabelOptions RegionLabelOption;
		Excel::XlRegionLabelOptions get_RegionLabelOption();
		void put_RegionLabelOption(Excel::XlRegionLabelOptions RegionLabelOption);
		_variant_t Select();
		//
		__declspec(property(get = get_SeriesColorGradientStyle, put = put_SeriesColorGradientStyle)) Excel::XlSeriesColorGradientStyle SeriesColorGradientStyle;
		Excel::XlSeriesColorGradientStyle get_SeriesColorGradientStyle();
		void put_SeriesColorGradientStyle(Excel::XlSeriesColorGradientStyle SeriesColorGradientStyle);
		//
		__declspec(property(get = get_SeriesColorMaxGradientStop)) Excel::ChartSeriesGradientStopData SeriesColorMaxGradientStop;
		Excel::ChartSeriesGradientStopData get_SeriesColorMaxGradientStop();
		//
		__declspec(property(get = get_SeriesColorMidGradientStop)) Excel::ChartSeriesGradientStopData SeriesColorMidGradientStop;
		Excel::ChartSeriesGradientStopData get_SeriesColorMidGradientStop();
		//
		__declspec(property(get = get_SeriesColorMinGradientStop)) Excel::ChartSeriesGradientStopData SeriesColorMinGradientStop;
		Excel::ChartSeriesGradientStopData get_SeriesColorMinGradientStop();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_Smooth, put = put_Smooth)) bool Smooth;
		bool get_Smooth();
		void put_Smooth(bool Smooth);
		Com::Object Trendlines(_variant_t Index);
		Com::Object Trendlines();
		//
		__declspec(property(get = get_Type, put = put_Type)) long Type;
		long get_Type();
		void put_Type(long Type);
		//
		__declspec(property(get = get_ValueSortOrder, put = put_ValueSortOrder)) Excel::XlValueSortOrder ValueSortOrder;
		Excel::XlValueSortOrder get_ValueSortOrder();
		void put_ValueSortOrder(Excel::XlValueSortOrder ValueSortOrder);
		//
		__declspec(property(get = get_Values, put = put_Values)) _variant_t Values;
		_variant_t get_Values();
		void put_Values(_variant_t Values);
		//
		__declspec(property(get = get_XValues, put = put_XValues)) _variant_t XValues;
		_variant_t get_XValues();
		void put_XValues(_variant_t XValues);
		_variant_t _ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines);
		_variant_t _ApplyDataLabels(Excel::XlDataLabelsType Type);
	};

	//________________________________________________________SeriesCollection
	// {0002086C-0000-0000-C000-000000000046}
	class SeriesCollection : public Com::Object
	{
	public:
		SeriesCollection();
		~SeriesCollection();
		SeriesCollection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SeriesCollection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Series Add(_variant_t Source, Excel::XlRowCol Rowcol, _variant_t SeriesLabels, _variant_t CategoryLabels, _variant_t Replace);
		Excel::Series Add(_variant_t Source, Excel::XlRowCol Rowcol);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Extend(_variant_t Source, _variant_t Rowcol, _variant_t CategoryLabels);
		_variant_t Extend(_variant_t Source);
		Excel::Series Item(_variant_t Index);
		Excel::Series NewSeries();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Paste(Excel::XlRowCol Rowcol, _variant_t SeriesLabels, _variant_t CategoryLabels, _variant_t Replace, _variant_t NewSeries);
		_variant_t Paste(Excel::XlRowCol Rowcol);
		Excel::Series _Default(_variant_t Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________DataLabel
	// {000208B2-0000-0000-C000-000000000046}
	class DataLabel : public Com::Object
	{
	public:
		DataLabel();
		~DataLabel();
		DataLabel(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DataLabel& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoText, put = put_AutoText)) bool AutoText;
		bool get_AutoText();
		void put_AutoText(bool AutoText);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_FormulaLocal, put = put_FormulaLocal)) wstring FormulaLocal;
		wstring get_FormulaLocal();
		void put_FormulaLocal(wstring FormulaLocal);
		//
		__declspec(property(get = get_FormulaR1C1, put = put_FormulaR1C1)) wstring FormulaR1C1;
		wstring get_FormulaR1C1();
		void put_FormulaR1C1(wstring FormulaR1C1);
		//
		__declspec(property(get = get_FormulaR1C1Local, put = put_FormulaR1C1Local)) wstring FormulaR1C1Local;
		wstring get_FormulaR1C1Local();
		void put_FormulaR1C1Local(wstring FormulaR1C1Local);
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) wstring NumberFormat;
		wstring get_NumberFormat();
		void put_NumberFormat(wstring NumberFormat);
		//
		__declspec(property(get = get_NumberFormatLinked, put = put_NumberFormatLinked)) bool NumberFormatLinked;
		bool get_NumberFormatLinked();
		void put_NumberFormatLinked(bool NumberFormatLinked);
		//
		__declspec(property(get = get_NumberFormatLocal, put = put_NumberFormatLocal)) _variant_t NumberFormatLocal;
		_variant_t get_NumberFormatLocal();
		void put_NumberFormatLocal(_variant_t NumberFormatLocal);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) Excel::XlDataLabelPosition Position;
		Excel::XlDataLabelPosition get_Position();
		void put_Position(Excel::XlDataLabelPosition Position);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select();
		//
		__declspec(property(get = get_Separator, put = put_Separator)) _variant_t Separator;
		_variant_t get_Separator();
		void put_Separator(_variant_t Separator);
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShowBubbleSize, put = put_ShowBubbleSize)) bool ShowBubbleSize;
		bool get_ShowBubbleSize();
		void put_ShowBubbleSize(bool ShowBubbleSize);
		//
		__declspec(property(get = get_ShowCategoryName, put = put_ShowCategoryName)) bool ShowCategoryName;
		bool get_ShowCategoryName();
		void put_ShowCategoryName(bool ShowCategoryName);
		//
		__declspec(property(get = get_ShowLegendKey, put = put_ShowLegendKey)) bool ShowLegendKey;
		bool get_ShowLegendKey();
		void put_ShowLegendKey(bool ShowLegendKey);
		//
		__declspec(property(get = get_ShowPercentage, put = put_ShowPercentage)) bool ShowPercentage;
		bool get_ShowPercentage();
		void put_ShowPercentage(bool ShowPercentage);
		//
		__declspec(property(get = get_ShowRange, put = put_ShowRange)) bool ShowRange;
		bool get_ShowRange();
		void put_ShowRange(bool ShowRange);
		//
		__declspec(property(get = get_ShowSeriesName, put = put_ShowSeriesName)) bool ShowSeriesName;
		bool get_ShowSeriesName();
		void put_ShowSeriesName(bool ShowSeriesName);
		//
		__declspec(property(get = get_ShowValue, put = put_ShowValue)) bool ShowValue;
		bool get_ShowValue();
		void put_ShowValue(bool ShowValue);
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Type, put = put_Type)) _variant_t Type;
		_variant_t get_Type();
		void put_Type(_variant_t Type);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get__Height)) double _Height;
		double get__Height();
		//
		__declspec(property(get = get__Width)) double _Width;
		double get__Width();
	};

	//________________________________________________________DataLabels
	// {000208B3-0000-0000-C000-000000000046}
	class DataLabels : public Com::Object
	{
	public:
		DataLabels();
		~DataLabels();
		DataLabels(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DataLabels& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_AutoText, put = put_AutoText)) bool AutoText;
		bool get_AutoText();
		void put_AutoText(bool AutoText);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		Excel::DataLabel Item(_variant_t Index);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) wstring NumberFormat;
		wstring get_NumberFormat();
		void put_NumberFormat(wstring NumberFormat);
		//
		__declspec(property(get = get_NumberFormatLinked, put = put_NumberFormatLinked)) bool NumberFormatLinked;
		bool get_NumberFormatLinked();
		void put_NumberFormatLinked(bool NumberFormatLinked);
		//
		__declspec(property(get = get_NumberFormatLocal, put = put_NumberFormatLocal)) _variant_t NumberFormatLocal;
		_variant_t get_NumberFormatLocal();
		void put_NumberFormatLocal(_variant_t NumberFormatLocal);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) Excel::XlDataLabelPosition Position;
		Excel::XlDataLabelPosition get_Position();
		void put_Position(Excel::XlDataLabelPosition Position);
		void Propagate(_variant_t Index);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select();
		//
		__declspec(property(get = get_Separator, put = put_Separator)) _variant_t Separator;
		_variant_t get_Separator();
		void put_Separator(_variant_t Separator);
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_ShowBubbleSize, put = put_ShowBubbleSize)) bool ShowBubbleSize;
		bool get_ShowBubbleSize();
		void put_ShowBubbleSize(bool ShowBubbleSize);
		//
		__declspec(property(get = get_ShowCategoryName, put = put_ShowCategoryName)) bool ShowCategoryName;
		bool get_ShowCategoryName();
		void put_ShowCategoryName(bool ShowCategoryName);
		//
		__declspec(property(get = get_ShowLegendKey, put = put_ShowLegendKey)) bool ShowLegendKey;
		bool get_ShowLegendKey();
		void put_ShowLegendKey(bool ShowLegendKey);
		//
		__declspec(property(get = get_ShowPercentage, put = put_ShowPercentage)) bool ShowPercentage;
		bool get_ShowPercentage();
		void put_ShowPercentage(bool ShowPercentage);
		//
		__declspec(property(get = get_ShowRange, put = put_ShowRange)) bool ShowRange;
		bool get_ShowRange();
		void put_ShowRange(bool ShowRange);
		//
		__declspec(property(get = get_ShowSeriesName, put = put_ShowSeriesName)) bool ShowSeriesName;
		bool get_ShowSeriesName();
		void put_ShowSeriesName(bool ShowSeriesName);
		//
		__declspec(property(get = get_ShowValue, put = put_ShowValue)) bool ShowValue;
		bool get_ShowValue();
		void put_ShowValue(bool ShowValue);
		//
		__declspec(property(get = get_Type, put = put_Type)) _variant_t Type;
		_variant_t get_Type();
		void put_Type(_variant_t Type);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		Excel::DataLabel _Default(_variant_t Index);
		void _Dummy10();
		void _Dummy13();
		void _Dummy16();
		void _Dummy17();
		void _Dummy9();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________LegendEntry
	// {000208BA-0000-0000-C000-000000000046}
	class LegendEntry : public Com::Object
	{
	public:
		LegendEntry();
		~LegendEntry();
		LegendEntry(const Com::Object& init) { Com::Object::Private_Copy(init); }
		LegendEntry& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Height)) double Height;
		double get_Height();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Left)) double Left;
		double get_Left();
		//
		__declspec(property(get = get_LegendKey)) Excel::LegendKey LegendKeyX;
		Excel::LegendKey get_LegendKey();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
		//
		__declspec(property(get = get_Top)) double Top;
		double get_Top();
		//
		__declspec(property(get = get_Width)) double Width;
		double get_Width();
	};

	//________________________________________________________LegendEntries
	// {000208BB-0000-0000-C000-000000000046}
	class LegendEntries : public Com::Object
	{
	public:
		LegendEntries();
		~LegendEntries();
		LegendEntries(const Com::Object& init) { Com::Object::Private_Copy(init); }
		LegendEntries& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::LegendEntry Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::LegendEntry _Default(_variant_t Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________LegendKey
	// {000208BC-0000-0000-C000-000000000046}
	class LegendKey : public Com::Object
	{
	public:
		LegendKey();
		~LegendKey();
		LegendKey(const Com::Object& init) { Com::Object::Private_Copy(init); }
		LegendKey& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t ClearFormats();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Height)) double Height;
		double get_Height();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_InvertIfNegative, put = put_InvertIfNegative)) bool InvertIfNegative;
		bool get_InvertIfNegative();
		void put_InvertIfNegative(bool InvertIfNegative);
		//
		__declspec(property(get = get_Left)) double Left;
		double get_Left();
		//
		__declspec(property(get = get_MarkerBackgroundColor, put = put_MarkerBackgroundColor)) long MarkerBackgroundColor;
		long get_MarkerBackgroundColor();
		void put_MarkerBackgroundColor(long MarkerBackgroundColor);
		//
		__declspec(property(get = get_MarkerBackgroundColorIndex, put = put_MarkerBackgroundColorIndex)) Excel::XlColorIndex MarkerBackgroundColorIndex;
		Excel::XlColorIndex get_MarkerBackgroundColorIndex();
		void put_MarkerBackgroundColorIndex(Excel::XlColorIndex MarkerBackgroundColorIndex);
		//
		__declspec(property(get = get_MarkerForegroundColor, put = put_MarkerForegroundColor)) long MarkerForegroundColor;
		long get_MarkerForegroundColor();
		void put_MarkerForegroundColor(long MarkerForegroundColor);
		//
		__declspec(property(get = get_MarkerForegroundColorIndex, put = put_MarkerForegroundColorIndex)) Excel::XlColorIndex MarkerForegroundColorIndex;
		Excel::XlColorIndex get_MarkerForegroundColorIndex();
		void put_MarkerForegroundColorIndex(Excel::XlColorIndex MarkerForegroundColorIndex);
		//
		__declspec(property(get = get_MarkerSize, put = put_MarkerSize)) long MarkerSize;
		long get_MarkerSize();
		void put_MarkerSize(long MarkerSize);
		//
		__declspec(property(get = get_MarkerStyle, put = put_MarkerStyle)) Excel::XlMarkerStyle MarkerStyle;
		Excel::XlMarkerStyle get_MarkerStyle();
		void put_MarkerStyle(Excel::XlMarkerStyle MarkerStyle);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PictureType, put = put_PictureType)) long PictureType;
		long get_PictureType();
		void put_PictureType(long PictureType);
		//
		__declspec(property(get = get_PictureUnit, put = put_PictureUnit)) long PictureUnit;
		long get_PictureUnit();
		void put_PictureUnit(long PictureUnit);
		//
		__declspec(property(get = get_PictureUnit2, put = put_PictureUnit2)) double PictureUnit2;
		double get_PictureUnit2();
		void put_PictureUnit2(double PictureUnit2);
		_variant_t Select();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_Smooth, put = put_Smooth)) bool Smooth;
		bool get_Smooth();
		void put_Smooth(bool Smooth);
		//
		__declspec(property(get = get_Top)) double Top;
		double get_Top();
		//
		__declspec(property(get = get_Width)) double Width;
		double get_Width();
	};

	//________________________________________________________Trendlines
	// {000208BD-0000-0000-C000-000000000046}
	class Trendlines : public Com::Object
	{
	public:
		Trendlines();
		~Trendlines();
		Trendlines(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Trendlines& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Trendline Add(Excel::XlTrendlineType Type, _variant_t Order, _variant_t Period, _variant_t Forward, _variant_t Backward, _variant_t Intercept, _variant_t DisplayEquation, _variant_t DisplayRSquared, _variant_t Name);
		Excel::Trendline Add(Excel::XlTrendlineType Type);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Trendline Item(_variant_t Index);
		Excel::Trendline Item();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Trendline _Default(_variant_t Index);
		Excel::Trendline _Default();
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Trendline
	// {000208BE-0000-0000-C000-000000000046}
	class Trendline : public Com::Object
	{
	public:
		Trendline();
		~Trendline();
		Trendline(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Trendline& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Backward, put = put_Backward)) long Backward;
		long get_Backward();
		void put_Backward(long Backward);
		//
		__declspec(property(get = get_Backward2, put = put_Backward2)) double Backward2;
		double get_Backward2();
		void put_Backward2(double Backward2);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t ClearFormats();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataLabel)) Excel::DataLabel DataLabelX;
		Excel::DataLabel get_DataLabel();
		_variant_t Delete();
		//
		__declspec(property(get = get_DisplayEquation, put = put_DisplayEquation)) bool DisplayEquation;
		bool get_DisplayEquation();
		void put_DisplayEquation(bool DisplayEquation);
		//
		__declspec(property(get = get_DisplayRSquared, put = put_DisplayRSquared)) bool DisplayRSquared;
		bool get_DisplayRSquared();
		void put_DisplayRSquared(bool DisplayRSquared);
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Forward, put = put_Forward)) long Forward;
		long get_Forward();
		void put_Forward(long Forward);
		//
		__declspec(property(get = get_Forward2, put = put_Forward2)) double Forward2;
		double get_Forward2();
		void put_Forward2(double Forward2);
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Intercept, put = put_Intercept)) double Intercept;
		double get_Intercept();
		void put_Intercept(double Intercept);
		//
		__declspec(property(get = get_InterceptIsAuto, put = put_InterceptIsAuto)) bool InterceptIsAuto;
		bool get_InterceptIsAuto();
		void put_InterceptIsAuto(bool InterceptIsAuto);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_NameIsAuto, put = put_NameIsAuto)) bool NameIsAuto;
		bool get_NameIsAuto();
		void put_NameIsAuto(bool NameIsAuto);
		//
		__declspec(property(get = get_Order, put = put_Order)) long Order;
		long get_Order();
		void put_Order(long Order);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Period, put = put_Period)) long Period;
		long get_Period();
		void put_Period(long Period);
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Type, put = put_Type)) Excel::XlTrendlineType Type;
		Excel::XlTrendlineType get_Type();
		void put_Type(Excel::XlTrendlineType Type);
	};

	//________________________________________________________Corners
	// {000208C0-0000-0000-C000-000000000046}
	class Corners : public Com::Object
	{
	public:
		Corners();
		~Corners();
		Corners(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Corners& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
	};

	//________________________________________________________SeriesLines
	// {000208C1-0000-0000-C000-000000000046}
	class SeriesLines : public Com::Object
	{
	public:
		SeriesLines();
		~SeriesLines();
		SeriesLines(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SeriesLines& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
	};

	//________________________________________________________HiLoLines
	// {000208C2-0000-0000-C000-000000000046}
	class HiLoLines : public Com::Object
	{
	public:
		HiLoLines();
		~HiLoLines();
		HiLoLines(const Com::Object& init) { Com::Object::Private_Copy(init); }
		HiLoLines& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
	};

	//________________________________________________________Gridlines
	// {000208C3-0000-0000-C000-000000000046}
	class Gridlines : public Com::Object
	{
	public:
		Gridlines();
		~Gridlines();
		Gridlines(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Gridlines& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
	};

	//________________________________________________________DropLines
	// {000208C4-0000-0000-C000-000000000046}
	class DropLines : public Com::Object
	{
	public:
		DropLines();
		~DropLines();
		DropLines(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DropLines& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
	};

	//________________________________________________________LeaderLines
	// {00024437-0000-0000-C000-000000000046}
	class LeaderLines : public Com::Object
	{
	public:
		LeaderLines();
		~LeaderLines();
		LeaderLines(const Com::Object& init) { Com::Object::Private_Copy(init); }
		LeaderLines& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Select();
	};

	//________________________________________________________UpBars
	// {000208C5-0000-0000-C000-000000000046}
	class UpBars : public Com::Object
	{
	public:
		UpBars();
		~UpBars();
		UpBars(const Com::Object& init) { Com::Object::Private_Copy(init); }
		UpBars& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
	};

	//________________________________________________________DownBars
	// {000208C6-0000-0000-C000-000000000046}
	class DownBars : public Com::Object
	{
	public:
		DownBars();
		~DownBars();
		DownBars(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DownBars& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
	};

	//________________________________________________________Floor
	// {000208C7-0000-0000-C000-000000000046}
	class Floor : public Com::Object
	{
	public:
		Floor();
		~Floor();
		Floor(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Floor& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t ClearFormats();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Paste();
		//
		__declspec(property(get = get_PictureType, put = put_PictureType)) _variant_t PictureType;
		_variant_t get_PictureType();
		void put_PictureType(_variant_t PictureType);
		_variant_t Select();
		//
		__declspec(property(get = get_Thickness, put = put_Thickness)) long Thickness;
		long get_Thickness();
		void put_Thickness(long Thickness);
	};

	//________________________________________________________Walls
	// {000208C8-0000-0000-C000-000000000046}
	class Walls : public Com::Object
	{
	public:
		Walls();
		~Walls();
		Walls(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Walls& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t ClearFormats();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Paste();
		//
		__declspec(property(get = get_PictureType, put = put_PictureType)) _variant_t PictureType;
		_variant_t get_PictureType();
		void put_PictureType(_variant_t PictureType);
		//
		__declspec(property(get = get_PictureUnit, put = put_PictureUnit)) _variant_t PictureUnit;
		_variant_t get_PictureUnit();
		void put_PictureUnit(_variant_t PictureUnit);
		_variant_t Select();
		//
		__declspec(property(get = get_Thickness, put = put_Thickness)) long Thickness;
		long get_Thickness();
		void put_Thickness(long Thickness);
	};

	//________________________________________________________TickLabels
	// {000208C9-0000-0000-C000-000000000046}
	class TickLabels : public Com::Object
	{
	public:
		TickLabels();
		~TickLabels();
		TickLabels(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TickLabels& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Alignment, put = put_Alignment)) long Alignment;
		long get_Alignment();
		void put_Alignment(long Alignment);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Depth)) long Depth;
		long get_Depth();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_MultiLevel, put = put_MultiLevel)) bool MultiLevel;
		bool get_MultiLevel();
		void put_MultiLevel(bool MultiLevel);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) wstring NumberFormat;
		wstring get_NumberFormat();
		void put_NumberFormat(wstring NumberFormat);
		//
		__declspec(property(get = get_NumberFormatLinked, put = put_NumberFormatLinked)) bool NumberFormatLinked;
		bool get_NumberFormatLinked();
		void put_NumberFormatLinked(bool NumberFormatLinked);
		//
		__declspec(property(get = get_NumberFormatLocal, put = put_NumberFormatLocal)) _variant_t NumberFormatLocal;
		_variant_t get_NumberFormatLocal();
		void put_NumberFormatLocal(_variant_t NumberFormatLocal);
		//
		__declspec(property(get = get_Offset, put = put_Offset)) long Offset;
		long get_Offset();
		void put_Offset(long Offset);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) Excel::XlTickLabelOrientation Orientation;
		Excel::XlTickLabelOrientation get_Orientation();
		void put_Orientation(Excel::XlTickLabelOrientation Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select();
	};

	//________________________________________________________PlotArea
	// {000208CB-0000-0000-C000-000000000046}
	class PlotArea : public Com::Object
	{
	public:
		PlotArea();
		~PlotArea();
		PlotArea(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PlotArea& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t ClearFormats();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_InsideHeight, put = put_InsideHeight)) double InsideHeight;
		double get_InsideHeight();
		void put_InsideHeight(double InsideHeight);
		//
		__declspec(property(get = get_InsideLeft, put = put_InsideLeft)) double InsideLeft;
		double get_InsideLeft();
		void put_InsideLeft(double InsideLeft);
		//
		__declspec(property(get = get_InsideTop, put = put_InsideTop)) double InsideTop;
		double get_InsideTop();
		void put_InsideTop(double InsideTop);
		//
		__declspec(property(get = get_InsideWidth, put = put_InsideWidth)) double InsideWidth;
		double get_InsideWidth();
		void put_InsideWidth(double InsideWidth);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) Excel::XlChartElementPosition Position;
		Excel::XlChartElementPosition get_Position();
		void put_Position(Excel::XlChartElementPosition Position);
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get__InsideHeight)) double _InsideHeight;
		double get__InsideHeight();
		//
		__declspec(property(get = get__InsideLeft)) double _InsideLeft;
		double get__InsideLeft();
		//
		__declspec(property(get = get__InsideTop)) double _InsideTop;
		double get__InsideTop();
		//
		__declspec(property(get = get__InsideWidth)) double _InsideWidth;
		double get__InsideWidth();
	};

	//________________________________________________________ChartArea
	// {000208CC-0000-0000-C000-000000000046}
	class ChartArea : public Com::Object
	{
	public:
		ChartArea();
		~ChartArea();
		ChartArea(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartArea& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t Clear();
		_variant_t ClearContents();
		_variant_t ClearFormats();
		_variant_t Copy();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RoundedCorners, put = put_RoundedCorners)) bool RoundedCorners;
		bool get_RoundedCorners();
		void put_RoundedCorners(bool RoundedCorners);
		_variant_t Select();
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
	};

	//________________________________________________________Legend
	// {000208CD-0000-0000-C000-000000000046}
	class Legend : public Com::Object
	{
	public:
		Legend();
		~Legend();
		Legend(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Legend& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t Clear();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_IncludeInLayout, put = put_IncludeInLayout)) bool IncludeInLayout;
		bool get_IncludeInLayout();
		void put_IncludeInLayout(bool IncludeInLayout);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		Com::Object LegendEntries(_variant_t Index);
		Com::Object LegendEntries();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) Excel::XlLegendPosition Position;
		Excel::XlLegendPosition get_Position();
		void put_Position(Excel::XlLegendPosition Position);
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
	};

	//________________________________________________________ErrorBars
	// {000208CE-0000-0000-C000-000000000046}
	class ErrorBars : public Com::Object
	{
	public:
		ErrorBars();
		~ErrorBars();
		ErrorBars(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ErrorBars& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		_variant_t ClearFormats();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_EndStyle, put = put_EndStyle)) Excel::XlEndStyleCap EndStyle;
		Excel::XlEndStyleCap get_EndStyle();
		void put_EndStyle(Excel::XlEndStyleCap EndStyle);
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
	};

	//________________________________________________________DataTable
	// {00020843-0000-0000-C000-000000000046}
	class DataTable : public Com::Object
	{
	public:
		DataTable();
		~DataTable();
		DataTable(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DataTable& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_HasBorderHorizontal, put = put_HasBorderHorizontal)) bool HasBorderHorizontal;
		bool get_HasBorderHorizontal();
		void put_HasBorderHorizontal(bool HasBorderHorizontal);
		//
		__declspec(property(get = get_HasBorderOutline, put = put_HasBorderOutline)) bool HasBorderOutline;
		bool get_HasBorderOutline();
		void put_HasBorderOutline(bool HasBorderOutline);
		//
		__declspec(property(get = get_HasBorderVertical, put = put_HasBorderVertical)) bool HasBorderVertical;
		bool get_HasBorderVertical();
		void put_HasBorderVertical(bool HasBorderVertical);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Select();
		//
		__declspec(property(get = get_ShowLegendKey, put = put_ShowLegendKey)) bool ShowLegendKey;
		bool get_ShowLegendKey();
		void put_ShowLegendKey(bool ShowLegendKey);
	};

	//________________________________________________________Phonetic
	// {00024438-0000-0000-C000-000000000046}
	class Phonetic : public Com::Object
	{
	public:
		Phonetic();
		~Phonetic();
		Phonetic(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Phonetic& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Alignment, put = put_Alignment)) long Alignment;
		long get_Alignment();
		void put_Alignment(long Alignment);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CharacterType, put = put_CharacterType)) long CharacterType;
		long get_CharacterType();
		void put_CharacterType(long CharacterType);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
	};

	//________________________________________________________Shape
	// {00024439-0000-0000-C000-000000000046}
	class Shape : public Com::Object
	{
	public:
		Shape();
		~Shape();
		Shape(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Shape& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Adjustments)) Excel::Adjustments AdjustmentsX;
		Excel::Adjustments get_Adjustments();
		//
		__declspec(property(get = get_AlternativeText, put = put_AlternativeText)) wstring AlternativeText;
		wstring get_AlternativeText();
		void put_AlternativeText(wstring AlternativeText);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Apply();
		//
		__declspec(property(get = get_AutoShapeType, put = put_AutoShapeType)) /* MsoAutoShapeType*/ short AutoShapeType;
		/* MsoAutoShapeType*/ short get_AutoShapeType();
		void put_AutoShapeType(/* MsoAutoShapeType*/ short AutoShapeType);
		//
		__declspec(property(get = get_BackgroundStyle, put = put_BackgroundStyle)) /* MsoBackgroundStyleIndex*/ short BackgroundStyle;
		/* MsoBackgroundStyleIndex*/ short get_BackgroundStyle();
		void put_BackgroundStyle(/* MsoBackgroundStyleIndex*/ short BackgroundStyle);
		//
		__declspec(property(get = get_BlackWhiteMode, put = put_BlackWhiteMode)) /* MsoBlackWhiteMode*/ short BlackWhiteMode;
		/* MsoBlackWhiteMode*/ short get_BlackWhiteMode();
		void put_BlackWhiteMode(/* MsoBlackWhiteMode*/ short BlackWhiteMode);
		//
		__declspec(property(get = get_BottomRightCell)) Excel::Range BottomRightCell;
		Excel::Range get_BottomRightCell();
		//
		__declspec(property(get = get_Callout)) Excel::CalloutFormat Callout;
		Excel::CalloutFormat get_Callout();
		void CanvasCropBottom(float Increment);
		void CanvasCropLeft(float Increment);
		void CanvasCropRight(float Increment);
		void CanvasCropTop(float Increment);
		//
		__declspec(property(get = get_CanvasItems)) Com::Object CanvasItems;
		Com::Object get_CanvasItems();
		//
		__declspec(property(get = get_Chart)) Excel::ChartX Chart;
		Excel::ChartX get_Chart();
		//
		__declspec(property(get = get_Child)) /* MsoTriState*/ short Child;
		/* MsoTriState*/ short get_Child();
		//
		__declspec(property(get = get_ConnectionSiteCount)) long ConnectionSiteCount;
		long get_ConnectionSiteCount();
		//
		__declspec(property(get = get_Connector)) /* MsoTriState*/ short Connector;
		/* MsoTriState*/ short get_Connector();
		//
		__declspec(property(get = get_ConnectorFormat)) Excel::ConnectorFormat ConnectorFormatX;
		Excel::ConnectorFormat get_ConnectorFormat();
		//
		__declspec(property(get = get_ControlFormat)) Excel::ControlFormat ControlFormatX;
		Excel::ControlFormat get_ControlFormat();
		void Copy();
		void CopyPicture(_variant_t Appearance, _variant_t Format);
		void CopyPicture();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Cut();
		void Delete();
		//
		__declspec(property(get = get_Diagram)) Excel::Diagram DiagramX;
		Excel::Diagram get_Diagram();
		//
		__declspec(property(get = get_DiagramNode)) Excel::DiagramNode DiagramNodeX;
		Excel::DiagramNode get_DiagramNode();
		//
		__declspec(property(get = get_DrawingObject)) Com::Object DrawingObject;
		Com::Object get_DrawingObject();
		Excel::Shape Duplicate();
		//
		__declspec(property(get = get_Fill)) Excel::FillFormat Fill;
		Excel::FillFormat get_Fill();
		void Flip(/* MsoFlipCmd*/ short FlipCmd);
		//
		__declspec(property(get = get_FormControlType)) Excel::XlFormControl FormControlType;
		Excel::XlFormControl get_FormControlType();
		//
		__declspec(property(get = get_Glow)) Com::Object Glow;
		Com::Object get_Glow();
		//
		__declspec(property(get = get_GraphicStyle, put = put_GraphicStyle)) /* MsoGraphicStyleIndex*/ short GraphicStyle;
		/* MsoGraphicStyleIndex*/ short get_GraphicStyle();
		void put_GraphicStyle(/* MsoGraphicStyleIndex*/ short GraphicStyle);
		//
		__declspec(property(get = get_GroupItems)) Excel::GroupShapes GroupItems;
		Excel::GroupShapes get_GroupItems();
		//
		__declspec(property(get = get_HasChart)) /* MsoTriState*/ short HasChart;
		/* MsoTriState*/ short get_HasChart();
		//
		__declspec(property(get = get_HasDiagram)) /* MsoTriState*/ short HasDiagram;
		/* MsoTriState*/ short get_HasDiagram();
		//
		__declspec(property(get = get_HasDiagramNode)) /* MsoTriState*/ short HasDiagramNode;
		/* MsoTriState*/ short get_HasDiagramNode();
		//
		__declspec(property(get = get_HasSmartArt)) /* MsoTriState*/ short HasSmartArt;
		/* MsoTriState*/ short get_HasSmartArt();
		//
		__declspec(property(get = get_Height, put = put_Height)) float Height;
		float get_Height();
		void put_Height(float Height);
		//
		__declspec(property(get = get_HorizontalFlip)) /* MsoTriState*/ short HorizontalFlip;
		/* MsoTriState*/ short get_HorizontalFlip();
		//
		__declspec(property(get = get_Hyperlink)) Excel::Hyperlink HyperlinkX;
		Excel::Hyperlink get_Hyperlink();
		//
		__declspec(property(get = get_ID)) long ID;
		long get_ID();
		void IncrementLeft(float Increment);
		void IncrementRotation(float Increment);
		void IncrementTop(float Increment);
		//
		__declspec(property(get = get_Left, put = put_Left)) float Left;
		float get_Left();
		void put_Left(float Left);
		//
		__declspec(property(get = get_Line)) Excel::LineFormat LineX;
		Excel::LineFormat get_Line();
		//
		__declspec(property(get = get_LinkFormat)) Excel::LinkFormat LinkFormatX;
		Excel::LinkFormat get_LinkFormat();
		//
		__declspec(property(get = get_LockAspectRatio, put = put_LockAspectRatio)) /* MsoTriState*/ short LockAspectRatio;
		/* MsoTriState*/ short get_LockAspectRatio();
		void put_LockAspectRatio(/* MsoTriState*/ short LockAspectRatio);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Model3D)) Excel::Model3DFormat Model3D;
		Excel::Model3DFormat get_Model3D();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Nodes)) Excel::ShapeNodes Nodes;
		Excel::ShapeNodes get_Nodes();
		//
		__declspec(property(get = get_OLEFormat)) Excel::OLEFormat OLEFormatX;
		Excel::OLEFormat get_OLEFormat();
		//
		__declspec(property(get = get_OnAction, put = put_OnAction)) wstring OnAction;
		wstring get_OnAction();
		void put_OnAction(wstring OnAction);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ParentGroup)) Excel::Shape ParentGroup;
		Excel::Shape get_ParentGroup();
		void PickUp();
		//
		__declspec(property(get = get_PictureFormat)) Excel::PictureFormat PictureFormatX;
		Excel::PictureFormat get_PictureFormat();
		//
		__declspec(property(get = get_Placement, put = put_Placement)) Excel::XlPlacement Placement;
		Excel::XlPlacement get_Placement();
		void put_Placement(Excel::XlPlacement Placement);
		//
		__declspec(property(get = get_Reflection)) Com::Object Reflection;
		Com::Object get_Reflection();
		void RerouteConnections();
		//
		__declspec(property(get = get_Rotation, put = put_Rotation)) float Rotation;
		float get_Rotation();
		void put_Rotation(float Rotation);
		void ScaleHeight(float Factor, /* MsoTriState*/ short RelativeToOriginalSize, _variant_t Scale);
		void ScaleHeight(float Factor, /* MsoTriState*/ short RelativeToOriginalSize);
		void ScaleWidth(float Factor, /* MsoTriState*/ short RelativeToOriginalSize, _variant_t Scale);
		void ScaleWidth(float Factor, /* MsoTriState*/ short RelativeToOriginalSize);
		//
		__declspec(property(get = get_Script)) Com::Object Script;
		Com::Object get_Script();
		void Select(_variant_t Replace);
		void Select();
		void SetShapesDefaultProperties();
		//
		__declspec(property(get = get_Shadow)) Excel::ShadowFormat Shadow;
		Excel::ShadowFormat get_Shadow();
		//
		__declspec(property(get = get_ShapeStyle, put = put_ShapeStyle)) /* MsoShapeStyleIndex*/ short ShapeStyle;
		/* MsoShapeStyleIndex*/ short get_ShapeStyle();
		void put_ShapeStyle(/* MsoShapeStyleIndex*/ short ShapeStyle);
		//
		__declspec(property(get = get_SmartArt)) Com::Object SmartArt;
		Com::Object get_SmartArt();
		//
		__declspec(property(get = get_SoftEdge)) Com::Object SoftEdge;
		Com::Object get_SoftEdge();
		//
		__declspec(property(get = get_TextEffect)) Excel::TextEffectFormat TextEffect;
		Excel::TextEffectFormat get_TextEffect();
		//
		__declspec(property(get = get_TextFrame)) Excel::TextFrame TextFrameX;
		Excel::TextFrame get_TextFrame();
		//
		__declspec(property(get = get_TextFrame2)) Excel::TextFrame2 TextFrame2X;
		Excel::TextFrame2 get_TextFrame2();
		//
		__declspec(property(get = get_ThreeD)) Excel::ThreeDFormat ThreeD;
		Excel::ThreeDFormat get_ThreeD();
		//
		__declspec(property(get = get_Title, put = put_Title)) wstring Title;
		wstring get_Title();
		void put_Title(wstring Title);
		//
		__declspec(property(get = get_Top, put = put_Top)) float Top;
		float get_Top();
		void put_Top(float Top);
		//
		__declspec(property(get = get_TopLeftCell)) Excel::Range TopLeftCell;
		Excel::Range get_TopLeftCell();
		//
		__declspec(property(get = get_Type)) /* MsoShapeType*/ short Type;
		/* MsoShapeType*/ short get_Type();
		Excel::ShapeRange Ungroup();
		//
		__declspec(property(get = get_VerticalFlip)) /* MsoTriState*/ short VerticalFlip;
		/* MsoTriState*/ short get_VerticalFlip();
		//
		__declspec(property(get = get_Vertices)) _variant_t Vertices;
		_variant_t get_Vertices();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) /* MsoTriState*/ short Visible;
		/* MsoTriState*/ short get_Visible();
		void put_Visible(/* MsoTriState*/ short Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) float Width;
		float get_Width();
		void put_Width(float Width);
		void ZOrder(/* MsoZOrderCmd*/ short ZOrderCmd);
		//
		__declspec(property(get = get_ZOrderPosition)) long ZOrderPosition;
		long get_ZOrderPosition();
	};

	//________________________________________________________Shapes
	// {0002443A-0000-0000-C000-000000000046}
	class Shapes : public Com::Object
	{
	public:
		Shapes();
		~Shapes();
		Shapes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Shapes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Shape Add3DModel(wstring Filename, _variant_t LinkToFile, _variant_t SaveWithDocument, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height);
		Excel::Shape Add3DModel(wstring Filename);
		Excel::Shape AddCallout(/* MsoCalloutType*/ short Type, float Left, float Top, float Width, float Height);
		Excel::Shape AddCanvas(float Left, float Top, float Width, float Height);
		Excel::Shape AddChart(_variant_t XlChartType, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height);
		Excel::Shape AddChart();
		Excel::Shape AddChart2(_variant_t Style, _variant_t XlChartType, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height, _variant_t NewLayout);
		Excel::Shape AddChart2();
		Excel::Shape AddConnector(/* MsoConnectorType*/ short Type, float BeginX, float BeginY, float EndX, float EndY);
		Excel::Shape AddCurve(_variant_t SafeArrayOfPoints);
		Excel::Shape AddDiagram(/* MsoDiagramType*/ short Type, float Left, float Top, float Width, float Height);
		Excel::Shape AddFormControl(Excel::XlFormControl Type, long Left, long Top, long Width, long Height);
		Excel::Shape AddLabel(/* MsoTextOrientation*/ short Orientation, float Left, float Top, float Width, float Height);
		Excel::Shape AddLine(float BeginX, float BeginY, float EndX, float EndY);
		Excel::Shape AddOLEObject(_variant_t ClassType, _variant_t Filename, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height);
		Excel::Shape AddOLEObject();
		Excel::Shape AddPicture(wstring Filename, /* MsoTriState*/ short LinkToFile, /* MsoTriState*/ short SaveWithDocument, float Left, float Top, float Width, float Height);
		Excel::Shape AddPicture2(wstring Filename, /* MsoTriState*/ short LinkToFile, /* MsoTriState*/ short SaveWithDocument, float Left, float Top, float Width, float Height, /* MsoPictureCompress*/ short Compress);
		Excel::Shape AddPolyline(_variant_t SafeArrayOfPoints);
		Excel::Shape AddShape(/* MsoAutoShapeType*/ short Type, float Left, float Top, float Width, float Height);
		Excel::Shape AddSmartArt(Com::Object Layout, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height);
		Excel::Shape AddSmartArt(Com::Object Layout);
		Excel::Shape AddTextEffect(/* MsoPresetTextEffect*/ short PresetTextEffect, wstring Text, wstring FontName, float FontSize, /* MsoTriState*/ short FontBold, /* MsoTriState*/ short FontItalic, float Left, float Top);
		Excel::Shape AddTextbox(/* MsoTextOrientation*/ short Orientation, float Left, float Top, float Width, float Height);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		Excel::FreeformBuilder BuildFreeform(/* MsoEditingType*/ short EditingType, float X1, float Y1);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Shape Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ShapeRange get_Range(_variant_t Index);
		void SelectAll();
		Excel::Shape _Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ShapeRange
	// {0002443B-0000-0000-C000-000000000046}
	class ShapeRange : public Com::Object
	{
	public:
		ShapeRange();
		~ShapeRange();
		ShapeRange(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ShapeRange& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Adjustments)) Excel::Adjustments AdjustmentsX;
		Excel::Adjustments get_Adjustments();
		void Align(/* MsoAlignCmd*/ short AlignCmd, /* MsoTriState*/ short RelativeTo);
		//
		__declspec(property(get = get_AlternativeText, put = put_AlternativeText)) wstring AlternativeText;
		wstring get_AlternativeText();
		void put_AlternativeText(wstring AlternativeText);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Apply();
		//
		__declspec(property(get = get_AutoShapeType, put = put_AutoShapeType)) /* MsoAutoShapeType*/ short AutoShapeType;
		/* MsoAutoShapeType*/ short get_AutoShapeType();
		void put_AutoShapeType(/* MsoAutoShapeType*/ short AutoShapeType);
		//
		__declspec(property(get = get_BackgroundStyle, put = put_BackgroundStyle)) /* MsoBackgroundStyleIndex*/ short BackgroundStyle;
		/* MsoBackgroundStyleIndex*/ short get_BackgroundStyle();
		void put_BackgroundStyle(/* MsoBackgroundStyleIndex*/ short BackgroundStyle);
		//
		__declspec(property(get = get_BlackWhiteMode, put = put_BlackWhiteMode)) /* MsoBlackWhiteMode*/ short BlackWhiteMode;
		/* MsoBlackWhiteMode*/ short get_BlackWhiteMode();
		void put_BlackWhiteMode(/* MsoBlackWhiteMode*/ short BlackWhiteMode);
		//
		__declspec(property(get = get_Callout)) Excel::CalloutFormat Callout;
		Excel::CalloutFormat get_Callout();
		void CanvasCropBottom(float Increment);
		void CanvasCropLeft(float Increment);
		void CanvasCropRight(float Increment);
		void CanvasCropTop(float Increment);
		//
		__declspec(property(get = get_CanvasItems)) Com::Object CanvasItems;
		Com::Object get_CanvasItems();
		//
		__declspec(property(get = get_Chart)) Excel::ChartX Chart;
		Excel::ChartX get_Chart();
		//
		__declspec(property(get = get_Child)) /* MsoTriState*/ short Child;
		/* MsoTriState*/ short get_Child();
		//
		__declspec(property(get = get_ConnectionSiteCount)) long ConnectionSiteCount;
		long get_ConnectionSiteCount();
		//
		__declspec(property(get = get_Connector)) /* MsoTriState*/ short Connector;
		/* MsoTriState*/ short get_Connector();
		//
		__declspec(property(get = get_ConnectorFormat)) Excel::ConnectorFormat ConnectorFormatX;
		Excel::ConnectorFormat get_ConnectorFormat();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Diagram)) Excel::Diagram DiagramX;
		Excel::Diagram get_Diagram();
		//
		__declspec(property(get = get_DiagramNode)) Excel::DiagramNode DiagramNodeX;
		Excel::DiagramNode get_DiagramNode();
		void Distribute(/* MsoDistributeCmd*/ short DistributeCmd, /* MsoTriState*/ short RelativeTo);
		Excel::ShapeRange Duplicate();
		//
		__declspec(property(get = get_Fill)) Excel::FillFormat Fill;
		Excel::FillFormat get_Fill();
		void Flip(/* MsoFlipCmd*/ short FlipCmd);
		//
		__declspec(property(get = get_Glow)) Com::Object Glow;
		Com::Object get_Glow();
		//
		__declspec(property(get = get_GraphicStyle, put = put_GraphicStyle)) /* MsoGraphicStyleIndex*/ short GraphicStyle;
		/* MsoGraphicStyleIndex*/ short get_GraphicStyle();
		void put_GraphicStyle(/* MsoGraphicStyleIndex*/ short GraphicStyle);
		Excel::Shape Group();
		//
		__declspec(property(get = get_GroupItems)) Excel::GroupShapes GroupItems;
		Excel::GroupShapes get_GroupItems();
		//
		__declspec(property(get = get_HasChart)) /* MsoTriState*/ short HasChart;
		/* MsoTriState*/ short get_HasChart();
		//
		__declspec(property(get = get_HasDiagram)) /* MsoTriState*/ short HasDiagram;
		/* MsoTriState*/ short get_HasDiagram();
		//
		__declspec(property(get = get_HasDiagramNode)) /* MsoTriState*/ short HasDiagramNode;
		/* MsoTriState*/ short get_HasDiagramNode();
		//
		__declspec(property(get = get_Height, put = put_Height)) float Height;
		float get_Height();
		void put_Height(float Height);
		//
		__declspec(property(get = get_HorizontalFlip)) /* MsoTriState*/ short HorizontalFlip;
		/* MsoTriState*/ short get_HorizontalFlip();
		//
		__declspec(property(get = get_ID)) long ID;
		long get_ID();
		void IncrementLeft(float Increment);
		void IncrementRotation(float Increment);
		void IncrementTop(float Increment);
		Excel::Shape Item(_variant_t Index);
		//
		__declspec(property(get = get_Left, put = put_Left)) float Left;
		float get_Left();
		void put_Left(float Left);
		//
		__declspec(property(get = get_Line)) Excel::LineFormat LineX;
		Excel::LineFormat get_Line();
		//
		__declspec(property(get = get_LockAspectRatio, put = put_LockAspectRatio)) /* MsoTriState*/ short LockAspectRatio;
		/* MsoTriState*/ short get_LockAspectRatio();
		void put_LockAspectRatio(/* MsoTriState*/ short LockAspectRatio);
		//
		__declspec(property(get = get_Model3D)) Excel::Model3DFormat Model3D;
		Excel::Model3DFormat get_Model3D();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Nodes)) Excel::ShapeNodes Nodes;
		Excel::ShapeNodes get_Nodes();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ParentGroup)) Excel::Shape ParentGroup;
		Excel::Shape get_ParentGroup();
		void PickUp();
		//
		__declspec(property(get = get_PictureFormat)) Excel::PictureFormat PictureFormatX;
		Excel::PictureFormat get_PictureFormat();
		//
		__declspec(property(get = get_Reflection)) Com::Object Reflection;
		Com::Object get_Reflection();
		Excel::Shape Regroup();
		void RerouteConnections();
		//
		__declspec(property(get = get_Rotation, put = put_Rotation)) float Rotation;
		float get_Rotation();
		void put_Rotation(float Rotation);
		void ScaleHeight(float Factor, /* MsoTriState*/ short RelativeToOriginalSize, _variant_t Scale);
		void ScaleHeight(float Factor, /* MsoTriState*/ short RelativeToOriginalSize);
		void ScaleWidth(float Factor, /* MsoTriState*/ short RelativeToOriginalSize, _variant_t Scale);
		void ScaleWidth(float Factor, /* MsoTriState*/ short RelativeToOriginalSize);
		void Select(_variant_t Replace);
		void Select();
		void SetShapesDefaultProperties();
		//
		__declspec(property(get = get_Shadow)) Excel::ShadowFormat Shadow;
		Excel::ShadowFormat get_Shadow();
		//
		__declspec(property(get = get_ShapeStyle, put = put_ShapeStyle)) /* MsoShapeStyleIndex*/ short ShapeStyle;
		/* MsoShapeStyleIndex*/ short get_ShapeStyle();
		void put_ShapeStyle(/* MsoShapeStyleIndex*/ short ShapeStyle);
		//
		__declspec(property(get = get_SoftEdge)) Com::Object SoftEdge;
		Com::Object get_SoftEdge();
		//
		__declspec(property(get = get_TextEffect)) Excel::TextEffectFormat TextEffect;
		Excel::TextEffectFormat get_TextEffect();
		//
		__declspec(property(get = get_TextFrame)) Excel::TextFrame TextFrameX;
		Excel::TextFrame get_TextFrame();
		//
		__declspec(property(get = get_TextFrame2)) Excel::TextFrame2 TextFrame2X;
		Excel::TextFrame2 get_TextFrame2();
		//
		__declspec(property(get = get_ThreeD)) Excel::ThreeDFormat ThreeD;
		Excel::ThreeDFormat get_ThreeD();
		//
		__declspec(property(get = get_Title, put = put_Title)) wstring Title;
		wstring get_Title();
		void put_Title(wstring Title);
		//
		__declspec(property(get = get_Top, put = put_Top)) float Top;
		float get_Top();
		void put_Top(float Top);
		//
		__declspec(property(get = get_Type)) /* MsoShapeType*/ short Type;
		/* MsoShapeType*/ short get_Type();
		Excel::ShapeRange Ungroup();
		//
		__declspec(property(get = get_VerticalFlip)) /* MsoTriState*/ short VerticalFlip;
		/* MsoTriState*/ short get_VerticalFlip();
		//
		__declspec(property(get = get_Vertices)) _variant_t Vertices;
		_variant_t get_Vertices();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) /* MsoTriState*/ short Visible;
		/* MsoTriState*/ short get_Visible();
		void put_Visible(/* MsoTriState*/ short Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) float Width;
		float get_Width();
		void put_Width(float Width);
		void ZOrder(/* MsoZOrderCmd*/ short ZOrderCmd);
		//
		__declspec(property(get = get_ZOrderPosition)) long ZOrderPosition;
		long get_ZOrderPosition();
		Excel::Shape _Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________GroupShapes
	// {0002443C-0000-0000-C000-000000000046}
	class GroupShapes : public Com::Object
	{
	public:
		GroupShapes();
		~GroupShapes();
		GroupShapes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		GroupShapes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Shape Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ShapeRange get_Range(_variant_t Index);
		Excel::Shape _Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________TextFrame
	// {0002443D-0000-0000-C000-000000000046}
	class TextFrame : public Com::Object
	{
	public:
		TextFrame();
		~TextFrame();
		TextFrame(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TextFrame& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoMargins, put = put_AutoMargins)) bool AutoMargins;
		bool get_AutoMargins();
		void put_AutoMargins(bool AutoMargins);
		//
		__declspec(property(get = get_AutoSize, put = put_AutoSize)) bool AutoSize;
		bool get_AutoSize();
		void put_AutoSize(bool AutoSize);
		Excel::Characters Characters(_variant_t Start, _variant_t Length);
		Excel::Characters Characters();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) Excel::XlHAlign HorizontalAlignment;
		Excel::XlHAlign get_HorizontalAlignment();
		void put_HorizontalAlignment(Excel::XlHAlign HorizontalAlignment);
		//
		__declspec(property(get = get_HorizontalOverflow, put = put_HorizontalOverflow)) Excel::XlOartHorizontalOverflow HorizontalOverflow;
		Excel::XlOartHorizontalOverflow get_HorizontalOverflow();
		void put_HorizontalOverflow(Excel::XlOartHorizontalOverflow HorizontalOverflow);
		//
		__declspec(property(get = get_MarginBottom, put = put_MarginBottom)) float MarginBottom;
		float get_MarginBottom();
		void put_MarginBottom(float MarginBottom);
		//
		__declspec(property(get = get_MarginLeft, put = put_MarginLeft)) float MarginLeft;
		float get_MarginLeft();
		void put_MarginLeft(float MarginLeft);
		//
		__declspec(property(get = get_MarginRight, put = put_MarginRight)) float MarginRight;
		float get_MarginRight();
		void put_MarginRight(float MarginRight);
		//
		__declspec(property(get = get_MarginTop, put = put_MarginTop)) float MarginTop;
		float get_MarginTop();
		void put_MarginTop(float MarginTop);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) /* MsoTextOrientation*/ short Orientation;
		/* MsoTextOrientation*/ short get_Orientation();
		void put_Orientation(/* MsoTextOrientation*/ short Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) Excel::XlVAlign VerticalAlignment;
		Excel::XlVAlign get_VerticalAlignment();
		void put_VerticalAlignment(Excel::XlVAlign VerticalAlignment);
		//
		__declspec(property(get = get_VerticalOverflow, put = put_VerticalOverflow)) Excel::XlOartVerticalOverflow VerticalOverflow;
		Excel::XlOartVerticalOverflow get_VerticalOverflow();
		void put_VerticalOverflow(Excel::XlOartVerticalOverflow VerticalOverflow);
	};

	//________________________________________________________ConnectorFormat
	// {0002443E-0000-0000-C000-000000000046}
	class ConnectorFormat : public Com::Object
	{
	public:
		ConnectorFormat();
		~ConnectorFormat();
		ConnectorFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ConnectorFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void BeginConnect(Excel::Shape& ConnectedShape, long ConnectionSite);
		//
		__declspec(property(get = get_BeginConnected)) /* MsoTriState*/ short BeginConnected;
		/* MsoTriState*/ short get_BeginConnected();
		//
		__declspec(property(get = get_BeginConnectedShape)) Excel::Shape BeginConnectedShape;
		Excel::Shape get_BeginConnectedShape();
		//
		__declspec(property(get = get_BeginConnectionSite)) long BeginConnectionSite;
		long get_BeginConnectionSite();
		void BeginDisconnect();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void EndConnect(Excel::Shape& ConnectedShape, long ConnectionSite);
		//
		__declspec(property(get = get_EndConnected)) /* MsoTriState*/ short EndConnected;
		/* MsoTriState*/ short get_EndConnected();
		//
		__declspec(property(get = get_EndConnectedShape)) Excel::Shape EndConnectedShape;
		Excel::Shape get_EndConnectedShape();
		//
		__declspec(property(get = get_EndConnectionSite)) long EndConnectionSite;
		long get_EndConnectionSite();
		void EndDisconnect();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Type, put = put_Type)) /* MsoConnectorType*/ short Type;
		/* MsoConnectorType*/ short get_Type();
		void put_Type(/* MsoConnectorType*/ short Type);
	};

	//________________________________________________________FreeformBuilder
	// {0002443F-0000-0000-C000-000000000046}
	class FreeformBuilder : public Com::Object
	{
	public:
		FreeformBuilder();
		~FreeformBuilder();
		FreeformBuilder(const Com::Object& init) { Com::Object::Private_Copy(init); }
		FreeformBuilder& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AddNodes(/* MsoSegmentType*/ short SegmentType, /* MsoEditingType*/ short EditingType, float X1, float Y1, _variant_t X2, _variant_t Y2, _variant_t X3, _variant_t Y3);
		void AddNodes(/* MsoSegmentType*/ short SegmentType, /* MsoEditingType*/ short EditingType, float X1, float Y1);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		Excel::Shape ConvertToShape();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________ControlFormat
	// {00024440-0000-0000-C000-000000000046}
	class ControlFormat : public Com::Object
	{
	public:
		ControlFormat();
		~ControlFormat();
		ControlFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ControlFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AddItem(wstring Text, _variant_t Index);
		void AddItem(wstring Text);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DropDownLines, put = put_DropDownLines)) long DropDownLines;
		long get_DropDownLines();
		void put_DropDownLines(long DropDownLines);
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_LargeChange, put = put_LargeChange)) long LargeChange;
		long get_LargeChange();
		void put_LargeChange(long LargeChange);
		//
		__declspec(property(get = get_LinkedCell, put = put_LinkedCell)) wstring LinkedCell;
		wstring get_LinkedCell();
		void put_LinkedCell(wstring LinkedCell);
		_variant_t List(_variant_t Index);
		_variant_t List();
		//
		__declspec(property(get = get_ListCount, put = put_ListCount)) long ListCount;
		long get_ListCount();
		void put_ListCount(long ListCount);
		//
		__declspec(property(get = get_ListFillRange, put = put_ListFillRange)) wstring ListFillRange;
		wstring get_ListFillRange();
		void put_ListFillRange(wstring ListFillRange);
		//
		__declspec(property(get = get_ListIndex, put = put_ListIndex)) long ListIndex;
		long get_ListIndex();
		void put_ListIndex(long ListIndex);
		//
		__declspec(property(get = get_LockedText, put = put_LockedText)) bool LockedText;
		bool get_LockedText();
		void put_LockedText(bool LockedText);
		//
		__declspec(property(get = get_Max, put = put_Max)) long Max;
		long get_Max();
		void put_Max(long Max);
		//
		__declspec(property(get = get_Min, put = put_Min)) long Min;
		long get_Min();
		void put_Min(long Min);
		//
		__declspec(property(get = get_MultiSelect, put = put_MultiSelect)) long MultiSelect;
		long get_MultiSelect();
		void put_MultiSelect(long MultiSelect);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PrintObject, put = put_PrintObject)) bool PrintObject;
		bool get_PrintObject();
		void put_PrintObject(bool PrintObject);
		void RemoveAllItems();
		void RemoveItem(long Index, _variant_t Count);
		void RemoveItem(long Index);
		//
		__declspec(property(get = get_SmallChange, put = put_SmallChange)) long SmallChange;
		long get_SmallChange();
		void put_SmallChange(long SmallChange);
		//
		__declspec(property(get = get_Value, put = put_Value)) long Value;
		long get_Value();
		void put_Value(long Value);
		//
		__declspec(property(get = get__Default, put = put__Default)) long _Default;
		long get__Default();
		void put__Default(long _Default);
	};

	//________________________________________________________OLEFormat
	// {00024441-0000-0000-C000-000000000046}
	class OLEFormat : public Com::Object
	{
	public:
		OLEFormat();
		~OLEFormat();
		OLEFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OLEFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Object)) Com::Object Object;
		Com::Object get_Object();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Verb(_variant_t Verb);
		void Verb();
		//
		__declspec(property(get = get_progID)) wstring progID;
		wstring get_progID();
	};

	//________________________________________________________LinkFormat
	// {00024442-0000-0000-C000-000000000046}
	class LinkFormat : public Com::Object
	{
	public:
		LinkFormat();
		~LinkFormat();
		LinkFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		LinkFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoUpdate, put = put_AutoUpdate)) bool AutoUpdate;
		bool get_AutoUpdate();
		void put_AutoUpdate(bool AutoUpdate);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Update();
	};

	//________________________________________________________PublishObjects
	// {00024443-0000-0000-C000-000000000046}
	class PublishObjects : public Com::Object
	{
	public:
		PublishObjects();
		~PublishObjects();
		PublishObjects(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PublishObjects& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::PublishObject Add(Excel::XlSourceType SourceType, wstring Filename, _variant_t Sheet, _variant_t Source, _variant_t HtmlType, _variant_t DivID, _variant_t Title);
		Excel::PublishObject Add(Excel::XlSourceType SourceType, wstring Filename);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		Excel::PublishObject get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Publish();
		Excel::PublishObject get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________OLEDBError
	// {00024445-0000-0000-C000-000000000046}
	class OLEDBError : public Com::Object
	{
	public:
		OLEDBError();
		~OLEDBError();
		OLEDBError(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OLEDBError& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_ErrorString)) wstring ErrorString;
		wstring get_ErrorString();
		//
		__declspec(property(get = get_Native)) long Native;
		long get_Native();
		//
		__declspec(property(get = get_Number)) long Number;
		long get_Number();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_SqlState)) wstring SqlState;
		wstring get_SqlState();
		//
		__declspec(property(get = get_Stage)) long Stage;
		long get_Stage();
	};

	//________________________________________________________OLEDBErrors
	// {00024446-0000-0000-C000-000000000046}
	class OLEDBErrors : public Com::Object
	{
	public:
		OLEDBErrors();
		~OLEDBErrors();
		OLEDBErrors(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OLEDBErrors& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::OLEDBError Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::OLEDBError get__Default(long Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Phonetics
	// {00024447-0000-0000-C000-000000000046}
	class Phonetics : public Com::Object
	{
	public:
		Phonetics();
		~Phonetics();
		Phonetics(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Phonetics& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Add(long Start, long Length, wstring Text);
		//
		__declspec(property(get = get_Alignment, put = put_Alignment)) long Alignment;
		long get_Alignment();
		void put_Alignment(long Alignment);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CharacterType, put = put_CharacterType)) long CharacterType;
		long get_CharacterType();
		void put_CharacterType(long CharacterType);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		Com::Object get_Item(long Index);
		//
		__declspec(property(get = get_Length)) long Length;
		long get_Length();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Start)) long Start;
		long get_Start();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		Com::Object get__Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________PivotLayout
	// {0002444A-0000-0000-C000-000000000046}
	class PivotLayout : public Com::Object
	{
	public:
		PivotLayout();
		~PivotLayout();
		PivotLayout(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotLayout& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AddFields(_variant_t RowFields, _variant_t ColumnFields, _variant_t PageFields, _variant_t AppendField);
		void AddFields();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		Com::Object get_ColumnFields(_variant_t Index);
		Com::Object get_ColumnFields();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CubeFields)) Excel::CubeFields CubeFieldsX;
		Excel::CubeFields get_CubeFields();
		Com::Object get_DataFields(_variant_t Index);
		Com::Object get_DataFields();
		Com::Object get_HiddenFields(_variant_t Index);
		Com::Object get_HiddenFields();
		//
		__declspec(property(get = get_InnerDetail, put = put_InnerDetail)) wstring InnerDetail;
		wstring get_InnerDetail();
		void put_InnerDetail(wstring InnerDetail);
		Com::Object get_PageFields(_variant_t Index);
		Com::Object get_PageFields();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotCache)) Excel::PivotCache PivotCacheX;
		Excel::PivotCache get_PivotCache();
		Com::Object get_PivotFields(_variant_t Index);
		Com::Object get_PivotFields();
		//
		__declspec(property(get = get_PivotTable)) Excel::PivotTable PivotTableX;
		Excel::PivotTable get_PivotTable();
		Com::Object get_RowFields(_variant_t Index);
		Com::Object get_RowFields();
		Com::Object get_VisibleFields(_variant_t Index);
		Com::Object get_VisibleFields();
	};

	//________________________________________________________DisplayUnitLabel
	// {0002084C-0000-0000-C000-000000000046}
	class DisplayUnitLabel : public Com::Object
	{
	public:
		DisplayUnitLabel();
		~DisplayUnitLabel();
		DisplayUnitLabel(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DisplayUnitLabel& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoScaleFont, put = put_AutoScaleFont)) _variant_t AutoScaleFont;
		_variant_t get_AutoScaleFont();
		void put_AutoScaleFont(_variant_t AutoScaleFont);
		//
		__declspec(property(get = get_Border)) Excel::Border BorderX;
		Excel::Border get_Border();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		_variant_t Delete();
		//
		__declspec(property(get = get_Fill)) Excel::ChartFillFormat Fill;
		Excel::ChartFillFormat get_Fill();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Format)) Excel::ChartFormat Format;
		Excel::ChartFormat get_Format();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_FormulaLocal, put = put_FormulaLocal)) wstring FormulaLocal;
		wstring get_FormulaLocal();
		void put_FormulaLocal(wstring FormulaLocal);
		//
		__declspec(property(get = get_FormulaR1C1, put = put_FormulaR1C1)) wstring FormulaR1C1;
		wstring get_FormulaR1C1();
		void put_FormulaR1C1(wstring FormulaR1C1);
		//
		__declspec(property(get = get_FormulaR1C1Local, put = put_FormulaR1C1Local)) wstring FormulaR1C1Local;
		wstring get_FormulaR1C1Local();
		void put_FormulaR1C1Local(wstring FormulaR1C1Local);
		_variant_t GetProperty(wstring ID);
		//
		__declspec(property(get = get_Height)) double Height;
		double get_Height();
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) Excel::XlChartElementPosition Position;
		Excel::XlChartElementPosition get_Position();
		void put_Position(Excel::XlChartElementPosition Position);
		//
		__declspec(property(get = get_ReadingOrder, put = put_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		void put_ReadingOrder(long ReadingOrder);
		_variant_t Select();
		void SetProperty(wstring ID, _variant_t Value);
		//
		__declspec(property(get = get_Shadow, put = put_Shadow)) bool Shadow;
		bool get_Shadow();
		void put_Shadow(bool Shadow);
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_Width)) double Width;
		double get_Width();
		void _Dummy21();
	};

	//________________________________________________________CellFormat
	// {00024450-0000-0000-C000-000000000046}
	class CellFormat : public Com::Object
	{
	public:
		CellFormat();
		~CellFormat();
		CellFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CellFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent, put = put_AddIndent)) _variant_t AddIndent;
		_variant_t get_AddIndent();
		void put_AddIndent(_variant_t AddIndent);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		void put_Borders(Excel::Borders& Borders);
		void Clear();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		void put_Font(Excel::Font& Font);
		//
		__declspec(property(get = get_FormulaHidden, put = put_FormulaHidden)) _variant_t FormulaHidden;
		_variant_t get_FormulaHidden();
		void put_FormulaHidden(_variant_t FormulaHidden);
		//
		__declspec(property(get = get_HorizontalAlignment, put = put_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		void put_HorizontalAlignment(_variant_t HorizontalAlignment);
		//
		__declspec(property(get = get_IndentLevel, put = put_IndentLevel)) _variant_t IndentLevel;
		_variant_t get_IndentLevel();
		void put_IndentLevel(_variant_t IndentLevel);
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		void put_Interior(Excel::Interior& Interior);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) _variant_t Locked;
		_variant_t get_Locked();
		void put_Locked(_variant_t Locked);
		//
		__declspec(property(get = get_MergeCells, put = put_MergeCells)) _variant_t MergeCells;
		_variant_t get_MergeCells();
		void put_MergeCells(_variant_t MergeCells);
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) _variant_t NumberFormat;
		_variant_t get_NumberFormat();
		void put_NumberFormat(_variant_t NumberFormat);
		//
		__declspec(property(get = get_NumberFormatLocal, put = put_NumberFormatLocal)) _variant_t NumberFormatLocal;
		_variant_t get_NumberFormatLocal();
		void put_NumberFormatLocal(_variant_t NumberFormatLocal);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		void put_Orientation(_variant_t Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ShrinkToFit, put = put_ShrinkToFit)) _variant_t ShrinkToFit;
		_variant_t get_ShrinkToFit();
		void put_ShrinkToFit(_variant_t ShrinkToFit);
		//
		__declspec(property(get = get_VerticalAlignment, put = put_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		void put_VerticalAlignment(_variant_t VerticalAlignment);
		//
		__declspec(property(get = get_WrapText, put = put_WrapText)) _variant_t WrapText;
		_variant_t get_WrapText();
		void put_WrapText(_variant_t WrapText);
	};

	//________________________________________________________UsedObjects
	// {00024451-0000-0000-C000-000000000046}
	class UsedObjects : public Com::Object
	{
	public:
		UsedObjects();
		~UsedObjects();
		UsedObjects(const Com::Object& init) { Com::Object::Private_Copy(init); }
		UsedObjects& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Com::Object get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Com::Object get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________CustomProperties
	// {00024452-0000-0000-C000-000000000046}
	class CustomProperties : public Com::Object
	{
	public:
		CustomProperties();
		~CustomProperties();
		CustomProperties(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CustomProperties& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::CustomProperty Add(wstring Name, _variant_t Value);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::CustomProperty get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::CustomProperty get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________CustomProperty
	// {00024453-0000-0000-C000-000000000046}
	class CustomProperty : public Com::Object
	{
	public:
		CustomProperty();
		~CustomProperty();
		CustomProperty(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CustomProperty& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Value, put = put_Value)) _variant_t Value;
		_variant_t get_Value();
		void put_Value(_variant_t Value);
		//
		__declspec(property(get = get__Default)) _variant_t _Default;
		_variant_t get__Default();
	};

	//________________________________________________________CalculatedMembers
	// {00024454-0000-0000-C000-000000000046}
	class CalculatedMembers : public Com::Object
	{
	public:
		CalculatedMembers();
		~CalculatedMembers();
		CalculatedMembers(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CalculatedMembers& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::CalculatedMember Add(wstring Name, _variant_t Formula, _variant_t SolveOrder, _variant_t Type, _variant_t Dynamic, _variant_t DisplayFolder, _variant_t HierarchizeDistinct);
		Excel::CalculatedMember Add(wstring Name, _variant_t Formula);
		Excel::CalculatedMember AddCalculatedMember(wstring Name, _variant_t Formula, _variant_t SolveOrder, _variant_t Type, _variant_t DisplayFolder, _variant_t MeasureGroup, _variant_t ParentHierarchy, _variant_t ParentMember, _variant_t NumberFormat);
		Excel::CalculatedMember AddCalculatedMember(wstring Name, _variant_t Formula);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::CalculatedMember get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::CalculatedMember _Add(wstring Name, wstring Formula, _variant_t SolveOrder, _variant_t Type);
		Excel::CalculatedMember _Add(wstring Name, wstring Formula);
		Excel::CalculatedMember get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________CalculatedMember
	// {00024455-0000-0000-C000-000000000046}
	class CalculatedMember : public Com::Object
	{
	public:
		CalculatedMember();
		~CalculatedMember();
		CalculatedMember(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CalculatedMember& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_DisplayFolder)) wstring DisplayFolder;
		wstring get_DisplayFolder();
		//
		__declspec(property(get = get_Dynamic)) bool Dynamic;
		bool get_Dynamic();
		//
		__declspec(property(get = get_FlattenHierarchies, put = put_FlattenHierarchies)) bool FlattenHierarchies;
		bool get_FlattenHierarchies();
		void put_FlattenHierarchies(bool FlattenHierarchies);
		//
		__declspec(property(get = get_Formula)) wstring Formula;
		wstring get_Formula();
		//
		__declspec(property(get = get_HierarchizeDistinct, put = put_HierarchizeDistinct)) bool HierarchizeDistinct;
		bool get_HierarchizeDistinct();
		void put_HierarchizeDistinct(bool HierarchizeDistinct);
		//
		__declspec(property(get = get_IsValid)) bool IsValid;
		bool get_IsValid();
		//
		__declspec(property(get = get_MeasureGroup)) wstring MeasureGroup;
		wstring get_MeasureGroup();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_NumberFormat)) Excel::XlCalcMemNumberFormatType NumberFormat;
		Excel::XlCalcMemNumberFormatType get_NumberFormat();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ParentHierarchy)) wstring ParentHierarchy;
		wstring get_ParentHierarchy();
		//
		__declspec(property(get = get_ParentMember)) wstring ParentMember;
		wstring get_ParentMember();
		//
		__declspec(property(get = get_SolveOrder)) long SolveOrder;
		long get_SolveOrder();
		//
		__declspec(property(get = get_SourceName)) wstring SourceName;
		wstring get_SourceName();
		//
		__declspec(property(get = get_Type)) Excel::XlCalculatedMemberType Type;
		Excel::XlCalculatedMemberType get_Type();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________Watches
	// {00024456-0000-0000-C000-000000000046}
	class Watches : public Com::Object
	{
	public:
		Watches();
		~Watches();
		Watches(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Watches& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Watch Add(_variant_t Source);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		Excel::Watch get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Watch get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Watch
	// {00024457-0000-0000-C000-000000000046}
	class Watch : public Com::Object
	{
	public:
		Watch();
		~Watch();
		Watch(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Watch& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Source)) _variant_t Source;
		_variant_t get_Source();
	};

	//________________________________________________________PivotCell
	// {00024458-0000-0000-C000-000000000046}
	class PivotCell : public Com::Object
	{
	public:
		PivotCell();
		~PivotCell();
		PivotCell(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotCell& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AllocateChange();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CellChanged)) Excel::XlCellChangedState CellChanged;
		Excel::XlCellChangedState get_CellChanged();
		//
		__declspec(property(get = get_ColumnItems)) Excel::PivotItemList ColumnItems;
		Excel::PivotItemList get_ColumnItems();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CustomSubtotalFunction)) Excel::XlConsolidationFunction CustomSubtotalFunction;
		Excel::XlConsolidationFunction get_CustomSubtotalFunction();
		//
		__declspec(property(get = get_DataField)) Excel::PivotField DataField;
		Excel::PivotField get_DataField();
		//
		__declspec(property(get = get_DataSourceValue)) _variant_t DataSourceValue;
		_variant_t get_DataSourceValue();
		void DiscardChange();
		//
		__declspec(property(get = get_Dummy18)) wstring Dummy18;
		wstring get_Dummy18();
		//
		__declspec(property(get = get_MDX)) wstring MDX;
		wstring get_MDX();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotCellType)) Excel::XlPivotCellType PivotCellType;
		Excel::XlPivotCellType get_PivotCellType();
		//
		__declspec(property(get = get_PivotColumnLine)) Excel::PivotLine PivotColumnLine;
		Excel::PivotLine get_PivotColumnLine();
		//
		__declspec(property(get = get_PivotField)) Excel::PivotField PivotFieldX;
		Excel::PivotField get_PivotField();
		//
		__declspec(property(get = get_PivotItem)) Excel::PivotItem PivotItemX;
		Excel::PivotItem get_PivotItem();
		//
		__declspec(property(get = get_PivotRowLine)) Excel::PivotLine PivotRowLine;
		Excel::PivotLine get_PivotRowLine();
		//
		__declspec(property(get = get_PivotTable)) Excel::PivotTable PivotTableX;
		Excel::PivotTable get_PivotTable();
		//
		__declspec(property(get = get_Range)) Excel::Range RangeX;
		Excel::Range get_Range();
		//
		__declspec(property(get = get_RowItems)) Excel::PivotItemList RowItems;
		Excel::PivotItemList get_RowItems();
		//
		__declspec(property(get = get_ServerActions)) Excel::Actions ServerActions;
		Excel::Actions get_ServerActions();
	};

	//________________________________________________________Graphic
	// {00024459-0000-0000-C000-000000000046}
	class Graphic : public Com::Object
	{
	public:
		Graphic();
		~Graphic();
		Graphic(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Graphic& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Brightness, put = put_Brightness)) float Brightness;
		float get_Brightness();
		void put_Brightness(float Brightness);
		//
		__declspec(property(get = get_ColorType, put = put_ColorType)) /* MsoPictureColorType*/ short ColorType;
		/* MsoPictureColorType*/ short get_ColorType();
		void put_ColorType(/* MsoPictureColorType*/ short ColorType);
		//
		__declspec(property(get = get_Contrast, put = put_Contrast)) float Contrast;
		float get_Contrast();
		void put_Contrast(float Contrast);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CropBottom, put = put_CropBottom)) float CropBottom;
		float get_CropBottom();
		void put_CropBottom(float CropBottom);
		//
		__declspec(property(get = get_CropLeft, put = put_CropLeft)) float CropLeft;
		float get_CropLeft();
		void put_CropLeft(float CropLeft);
		//
		__declspec(property(get = get_CropRight, put = put_CropRight)) float CropRight;
		float get_CropRight();
		void put_CropRight(float CropRight);
		//
		__declspec(property(get = get_CropTop, put = put_CropTop)) float CropTop;
		float get_CropTop();
		void put_CropTop(float CropTop);
		//
		__declspec(property(get = get_Filename, put = put_Filename)) wstring Filename;
		wstring get_Filename();
		void put_Filename(wstring Filename);
		//
		__declspec(property(get = get_Height, put = put_Height)) float Height;
		float get_Height();
		void put_Height(float Height);
		//
		__declspec(property(get = get_LockAspectRatio, put = put_LockAspectRatio)) /* MsoTriState*/ short LockAspectRatio;
		/* MsoTriState*/ short get_LockAspectRatio();
		void put_LockAspectRatio(/* MsoTriState*/ short LockAspectRatio);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Width, put = put_Width)) float Width;
		float get_Width();
		void put_Width(float Width);
	};

	//________________________________________________________AutoRecover
	// {0002445A-0000-0000-C000-000000000046}
	class AutoRecover : public Com::Object
	{
	public:
		AutoRecover();
		~AutoRecover();
		AutoRecover(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AutoRecover& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Path, put = put_Path)) wstring Path;
		wstring get_Path();
		void put_Path(wstring Path);
		//
		__declspec(property(get = get_Time, put = put_Time)) long Time;
		long get_Time();
		void put_Time(long Time);
	};

	//________________________________________________________ErrorCheckingOptions
	// {0002445B-0000-0000-C000-000000000046}
	class ErrorCheckingOptions : public Com::Object
	{
	public:
		ErrorCheckingOptions();
		~ErrorCheckingOptions();
		ErrorCheckingOptions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ErrorCheckingOptions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BackgroundChecking, put = put_BackgroundChecking)) bool BackgroundChecking;
		bool get_BackgroundChecking();
		void put_BackgroundChecking(bool BackgroundChecking);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_EmptyCellReferences, put = put_EmptyCellReferences)) bool EmptyCellReferences;
		bool get_EmptyCellReferences();
		void put_EmptyCellReferences(bool EmptyCellReferences);
		//
		__declspec(property(get = get_EvaluateToError, put = put_EvaluateToError)) bool EvaluateToError;
		bool get_EvaluateToError();
		void put_EvaluateToError(bool EvaluateToError);
		//
		__declspec(property(get = get_InconsistentFormula, put = put_InconsistentFormula)) bool InconsistentFormula;
		bool get_InconsistentFormula();
		void put_InconsistentFormula(bool InconsistentFormula);
		//
		__declspec(property(get = get_InconsistentTableFormula, put = put_InconsistentTableFormula)) bool InconsistentTableFormula;
		bool get_InconsistentTableFormula();
		void put_InconsistentTableFormula(bool InconsistentTableFormula);
		//
		__declspec(property(get = get_IndicatorColorIndex, put = put_IndicatorColorIndex)) Excel::XlColorIndex IndicatorColorIndex;
		Excel::XlColorIndex get_IndicatorColorIndex();
		void put_IndicatorColorIndex(Excel::XlColorIndex IndicatorColorIndex);
		//
		__declspec(property(get = get_ListDataValidation, put = put_ListDataValidation)) bool ListDataValidation;
		bool get_ListDataValidation();
		void put_ListDataValidation(bool ListDataValidation);
		//
		__declspec(property(get = get_NumberAsText, put = put_NumberAsText)) bool NumberAsText;
		bool get_NumberAsText();
		void put_NumberAsText(bool NumberAsText);
		//
		__declspec(property(get = get_OmittedCells, put = put_OmittedCells)) bool OmittedCells;
		bool get_OmittedCells();
		void put_OmittedCells(bool OmittedCells);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_TextDate, put = put_TextDate)) bool TextDate;
		bool get_TextDate();
		void put_TextDate(bool TextDate);
		//
		__declspec(property(get = get_UnlockedFormulaCells, put = put_UnlockedFormulaCells)) bool UnlockedFormulaCells;
		bool get_UnlockedFormulaCells();
		void put_UnlockedFormulaCells(bool UnlockedFormulaCells);
	};

	//________________________________________________________Errors
	// {0002445C-0000-0000-C000-000000000046}
	class Errors : public Com::Object
	{
	public:
		Errors();
		~Errors();
		Errors(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Errors& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Error get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Error get__Default(_variant_t Index);
	};

	//________________________________________________________Error
	// {0002445D-0000-0000-C000-000000000046}
	class Error : public Com::Object
	{
	public:
		Error();
		~Error();
		Error(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Error& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Ignore, put = put_Ignore)) bool Ignore;
		bool get_Ignore();
		void put_Ignore(bool Ignore);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Value)) bool Value;
		bool get_Value();
	};

	//________________________________________________________SmartTagAction
	// {0002445E-0000-0000-C000-000000000046}
	class SmartTagAction : public Com::Object
	{
	public:
		SmartTagAction();
		~SmartTagAction();
		SmartTagAction(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SmartTagAction& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_ActiveXControl)) Com::Object ActiveXControl;
		Com::Object get_ActiveXControl();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CheckboxState, put = put_CheckboxState)) bool CheckboxState;
		bool get_CheckboxState();
		void put_CheckboxState(bool CheckboxState);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Execute();
		//
		__declspec(property(get = get_ExpandHelp, put = put_ExpandHelp)) bool ExpandHelp;
		bool get_ExpandHelp();
		void put_ExpandHelp(bool ExpandHelp);
		//
		__declspec(property(get = get_ListSelection, put = put_ListSelection)) long ListSelection;
		long get_ListSelection();
		void put_ListSelection(long ListSelection);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PresentInPane)) bool PresentInPane;
		bool get_PresentInPane();
		//
		__declspec(property(get = get_RadioGroupSelection, put = put_RadioGroupSelection)) long RadioGroupSelection;
		long get_RadioGroupSelection();
		void put_RadioGroupSelection(long RadioGroupSelection);
		//
		__declspec(property(get = get_TextboxText, put = put_TextboxText)) wstring TextboxText;
		wstring get_TextboxText();
		void put_TextboxText(wstring TextboxText);
		//
		__declspec(property(get = get_Type)) Excel::XlSmartTagControlType Type;
		Excel::XlSmartTagControlType get_Type();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________SmartTagActions
	// {0002445F-0000-0000-C000-000000000046}
	class SmartTagActions : public Com::Object
	{
	public:
		SmartTagActions();
		~SmartTagActions();
		SmartTagActions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SmartTagActions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::SmartTagAction get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::SmartTagAction get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SmartTag
	// {00024460-0000-0000-C000-000000000046}
	class SmartTag : public Com::Object
	{
	public:
		SmartTag();
		~SmartTag();
		SmartTag(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SmartTag& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_DownloadURL)) wstring DownloadURL;
		wstring get_DownloadURL();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Properties)) Excel::CustomProperties Properties;
		Excel::CustomProperties get_Properties();
		//
		__declspec(property(get = get_Range)) Excel::Range RangeX;
		Excel::Range get_Range();
		//
		__declspec(property(get = get_SmartTagActions)) Excel::SmartTagActions SmartTagActionsX;
		Excel::SmartTagActions get_SmartTagActions();
		//
		__declspec(property(get = get_XML)) wstring XML;
		wstring get_XML();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________SmartTags
	// {00024461-0000-0000-C000-000000000046}
	class SmartTags : public Com::Object
	{
	public:
		SmartTags();
		~SmartTags();
		SmartTags(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SmartTags& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::SmartTag Add(wstring SmartTagType);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::SmartTag get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SmartTagRecognizer
	// {00024462-0000-0000-C000-000000000046}
	class SmartTagRecognizer : public Com::Object
	{
	public:
		SmartTagRecognizer();
		~SmartTagRecognizer();
		SmartTagRecognizer(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SmartTagRecognizer& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_FullName)) wstring FullName;
		wstring get_FullName();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
		//
		__declspec(property(get = get_progID)) wstring progID;
		wstring get_progID();
	};

	//________________________________________________________SmartTagRecognizers
	// {00024463-0000-0000-C000-000000000046}
	class SmartTagRecognizers : public Com::Object
	{
	public:
		SmartTagRecognizers();
		~SmartTagRecognizers();
		SmartTagRecognizers(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SmartTagRecognizers& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::SmartTagRecognizer get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Recognize, put = put_Recognize)) bool Recognize;
		bool get_Recognize();
		void put_Recognize(bool Recognize);
		Excel::SmartTagRecognizer get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SmartTagOptions
	// {00024464-0000-0000-C000-000000000046}
	class SmartTagOptions : public Com::Object
	{
	public:
		SmartTagOptions();
		~SmartTagOptions();
		SmartTagOptions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SmartTagOptions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DisplaySmartTags, put = put_DisplaySmartTags)) Excel::XlSmartTagDisplayMode DisplaySmartTags;
		Excel::XlSmartTagDisplayMode get_DisplaySmartTags();
		void put_DisplaySmartTags(Excel::XlSmartTagDisplayMode DisplaySmartTags);
		//
		__declspec(property(get = get_EmbedSmartTags, put = put_EmbedSmartTags)) bool EmbedSmartTags;
		bool get_EmbedSmartTags();
		void put_EmbedSmartTags(bool EmbedSmartTags);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________SpellingOptions
	// {00024465-0000-0000-C000-000000000046}
	class SpellingOptions : public Com::Object
	{
	public:
		SpellingOptions();
		~SpellingOptions();
		SpellingOptions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SpellingOptions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_ArabicModes, put = put_ArabicModes)) Excel::XlArabicModes ArabicModes;
		Excel::XlArabicModes get_ArabicModes();
		void put_ArabicModes(Excel::XlArabicModes ArabicModes);
		//
		__declspec(property(get = get_ArabicStrictAlefHamza, put = put_ArabicStrictAlefHamza)) bool ArabicStrictAlefHamza;
		bool get_ArabicStrictAlefHamza();
		void put_ArabicStrictAlefHamza(bool ArabicStrictAlefHamza);
		//
		__declspec(property(get = get_ArabicStrictFinalYaa, put = put_ArabicStrictFinalYaa)) bool ArabicStrictFinalYaa;
		bool get_ArabicStrictFinalYaa();
		void put_ArabicStrictFinalYaa(bool ArabicStrictFinalYaa);
		//
		__declspec(property(get = get_ArabicStrictTaaMarboota, put = put_ArabicStrictTaaMarboota)) bool ArabicStrictTaaMarboota;
		bool get_ArabicStrictTaaMarboota();
		void put_ArabicStrictTaaMarboota(bool ArabicStrictTaaMarboota);
		//
		__declspec(property(get = get_BrazilReform, put = put_BrazilReform)) Excel::XlPortugueseReform BrazilReform;
		Excel::XlPortugueseReform get_BrazilReform();
		void put_BrazilReform(Excel::XlPortugueseReform BrazilReform);
		//
		__declspec(property(get = get_DictLang, put = put_DictLang)) long DictLang;
		long get_DictLang();
		void put_DictLang(long DictLang);
		//
		__declspec(property(get = get_GermanPostReform, put = put_GermanPostReform)) bool GermanPostReform;
		bool get_GermanPostReform();
		void put_GermanPostReform(bool GermanPostReform);
		//
		__declspec(property(get = get_HebrewModes, put = put_HebrewModes)) Excel::XlHebrewModes HebrewModes;
		Excel::XlHebrewModes get_HebrewModes();
		void put_HebrewModes(Excel::XlHebrewModes HebrewModes);
		//
		__declspec(property(get = get_IgnoreCaps, put = put_IgnoreCaps)) bool IgnoreCaps;
		bool get_IgnoreCaps();
		void put_IgnoreCaps(bool IgnoreCaps);
		//
		__declspec(property(get = get_IgnoreFileNames, put = put_IgnoreFileNames)) bool IgnoreFileNames;
		bool get_IgnoreFileNames();
		void put_IgnoreFileNames(bool IgnoreFileNames);
		//
		__declspec(property(get = get_IgnoreMixedDigits, put = put_IgnoreMixedDigits)) bool IgnoreMixedDigits;
		bool get_IgnoreMixedDigits();
		void put_IgnoreMixedDigits(bool IgnoreMixedDigits);
		//
		__declspec(property(get = get_KoreanCombineAux, put = put_KoreanCombineAux)) bool KoreanCombineAux;
		bool get_KoreanCombineAux();
		void put_KoreanCombineAux(bool KoreanCombineAux);
		//
		__declspec(property(get = get_KoreanProcessCompound, put = put_KoreanProcessCompound)) bool KoreanProcessCompound;
		bool get_KoreanProcessCompound();
		void put_KoreanProcessCompound(bool KoreanProcessCompound);
		//
		__declspec(property(get = get_KoreanUseAutoChangeList, put = put_KoreanUseAutoChangeList)) bool KoreanUseAutoChangeList;
		bool get_KoreanUseAutoChangeList();
		void put_KoreanUseAutoChangeList(bool KoreanUseAutoChangeList);
		//
		__declspec(property(get = get_PortugalReform, put = put_PortugalReform)) Excel::XlPortugueseReform PortugalReform;
		Excel::XlPortugueseReform get_PortugalReform();
		void put_PortugalReform(Excel::XlPortugueseReform PortugalReform);
		//
		__declspec(property(get = get_RussianStrictE, put = put_RussianStrictE)) bool RussianStrictE;
		bool get_RussianStrictE();
		void put_RussianStrictE(bool RussianStrictE);
		//
		__declspec(property(get = get_SpanishModes, put = put_SpanishModes)) Excel::XlSpanishModes SpanishModes;
		Excel::XlSpanishModes get_SpanishModes();
		void put_SpanishModes(Excel::XlSpanishModes SpanishModes);
		//
		__declspec(property(get = get_SuggestMainOnly, put = put_SuggestMainOnly)) bool SuggestMainOnly;
		bool get_SuggestMainOnly();
		void put_SuggestMainOnly(bool SuggestMainOnly);
		//
		__declspec(property(get = get_UserDict, put = put_UserDict)) wstring UserDict;
		wstring get_UserDict();
		void put_UserDict(wstring UserDict);
	};

	//________________________________________________________Speech
	// {00024466-0000-0000-C000-000000000046}
	class Speech : public Com::Object
	{
	public:
		Speech();
		~Speech();
		Speech(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Speech& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Direction, put = put_Direction)) Excel::XlSpeakDirection Direction;
		Excel::XlSpeakDirection get_Direction();
		void put_Direction(Excel::XlSpeakDirection Direction);
		void Speak(wstring Text, _variant_t SpeakAsync, _variant_t SpeakXML, _variant_t Purge);
		void Speak(wstring Text);
		//
		__declspec(property(get = get_SpeakCellOnEnter, put = put_SpeakCellOnEnter)) bool SpeakCellOnEnter;
		bool get_SpeakCellOnEnter();
		void put_SpeakCellOnEnter(bool SpeakCellOnEnter);
	};

	//________________________________________________________Protection
	// {00024467-0000-0000-C000-000000000046}
	class Protection : public Com::Object
	{
	public:
		Protection();
		~Protection();
		Protection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Protection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AllowDeletingColumns)) bool AllowDeletingColumns;
		bool get_AllowDeletingColumns();
		//
		__declspec(property(get = get_AllowDeletingRows)) bool AllowDeletingRows;
		bool get_AllowDeletingRows();
		//
		__declspec(property(get = get_AllowEditRanges)) Excel::AllowEditRanges AllowEditRangesX;
		Excel::AllowEditRanges get_AllowEditRanges();
		//
		__declspec(property(get = get_AllowFiltering)) bool AllowFiltering;
		bool get_AllowFiltering();
		//
		__declspec(property(get = get_AllowFormattingCells)) bool AllowFormattingCells;
		bool get_AllowFormattingCells();
		//
		__declspec(property(get = get_AllowFormattingColumns)) bool AllowFormattingColumns;
		bool get_AllowFormattingColumns();
		//
		__declspec(property(get = get_AllowFormattingRows)) bool AllowFormattingRows;
		bool get_AllowFormattingRows();
		//
		__declspec(property(get = get_AllowInsertingColumns)) bool AllowInsertingColumns;
		bool get_AllowInsertingColumns();
		//
		__declspec(property(get = get_AllowInsertingHyperlinks)) bool AllowInsertingHyperlinks;
		bool get_AllowInsertingHyperlinks();
		//
		__declspec(property(get = get_AllowInsertingRows)) bool AllowInsertingRows;
		bool get_AllowInsertingRows();
		//
		__declspec(property(get = get_AllowSorting)) bool AllowSorting;
		bool get_AllowSorting();
		//
		__declspec(property(get = get_AllowUsingPivotTables)) bool AllowUsingPivotTables;
		bool get_AllowUsingPivotTables();
	};

	//________________________________________________________PivotItemList
	// {00024468-0000-0000-C000-000000000046}
	class PivotItemList : public Com::Object
	{
	public:
		PivotItemList();
		~PivotItemList();
		PivotItemList(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotItemList& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotItem Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotItem get__Default(_variant_t Field);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________Tab
	// {00024469-0000-0000-C000-000000000046}
	class Tab : public Com::Object
	{
	public:
		Tab();
		~Tab();
		Tab(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Tab& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Color, put = put_Color)) _variant_t Color;
		_variant_t get_Color();
		void put_Color(_variant_t Color);
		//
		__declspec(property(get = get_ColorIndex, put = put_ColorIndex)) Excel::XlColorIndex ColorIndex;
		Excel::XlColorIndex get_ColorIndex();
		void put_ColorIndex(Excel::XlColorIndex ColorIndex);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ThemeColor, put = put_ThemeColor)) Excel::XlThemeColor ThemeColor;
		Excel::XlThemeColor get_ThemeColor();
		void put_ThemeColor(Excel::XlThemeColor ThemeColor);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) _variant_t TintAndShade;
		_variant_t get_TintAndShade();
		void put_TintAndShade(_variant_t TintAndShade);
	};

	//________________________________________________________AllowEditRanges
	// {0002446A-0000-0000-C000-000000000046}
	class AllowEditRanges : public Com::Object
	{
	public:
		AllowEditRanges();
		~AllowEditRanges();
		AllowEditRanges(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AllowEditRanges& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::AllowEditRange Add(wstring Title, Excel::Range& Range, _variant_t Password);
		Excel::AllowEditRange Add(wstring Title, Excel::Range& Range);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		Excel::AllowEditRange get_Item(_variant_t Index);
		Excel::AllowEditRange get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________AllowEditRange
	// {0002446B-0000-0000-C000-000000000046}
	class AllowEditRange : public Com::Object
	{
	public:
		AllowEditRange();
		~AllowEditRange();
		AllowEditRange(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AllowEditRange& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void ChangePassword(wstring Password);
		void Delete();
		//
		__declspec(property(get = get_Range)) Excel::Range RangeX;
		Excel::Range get_Range();
		void put_Range(Excel::Range& Range);
		//
		__declspec(property(get = get_Title, put = put_Title)) wstring Title;
		wstring get_Title();
		void put_Title(wstring Title);
		void Unprotect(_variant_t Password);
		void Unprotect();
		//
		__declspec(property(get = get_Users)) Excel::UserAccessList Users;
		Excel::UserAccessList get_Users();
	};

	//________________________________________________________UserAccessList
	// {0002446C-0000-0000-C000-000000000046}
	class UserAccessList : public Com::Object
	{
	public:
		UserAccessList();
		~UserAccessList();
		UserAccessList(const Com::Object& init) { Com::Object::Private_Copy(init); }
		UserAccessList& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::UserAccess Add(wstring Name, bool AllowEdit);
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		void DeleteAll();
		Excel::UserAccess get_Item(_variant_t Index);
		Excel::UserAccess get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________UserAccess
	// {0002446D-0000-0000-C000-000000000046}
	class UserAccess : public Com::Object
	{
	public:
		UserAccess();
		~UserAccess();
		UserAccess(const Com::Object& init) { Com::Object::Private_Copy(init); }
		UserAccess& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AllowEdit, put = put_AllowEdit)) bool AllowEdit;
		bool get_AllowEdit();
		void put_AllowEdit(bool AllowEdit);
		void Delete();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
	};

	//________________________________________________________RTD
	// {0002446E-0000-0000-C000-000000000046}
	class RTD : public Com::Object
	{
	public:
		RTD();
		~RTD();
		RTD(const Com::Object& init) { Com::Object::Private_Copy(init); }
		RTD& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void RefreshData();
		void RestartServers();
		//
		__declspec(property(get = get_ThrottleInterval, put = put_ThrottleInterval)) long ThrottleInterval;
		long get_ThrottleInterval();
		void put_ThrottleInterval(long ThrottleInterval);
	};

	//________________________________________________________Diagram
	// {0002446F-0000-0000-C000-000000000046}
	class Diagram : public Com::Object
	{
	public:
		Diagram();
		~Diagram();
		Diagram(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Diagram& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoFormat, put = put_AutoFormat)) /* MsoTriState*/ short AutoFormat;
		/* MsoTriState*/ short get_AutoFormat();
		void put_AutoFormat(/* MsoTriState*/ short AutoFormat);
		//
		__declspec(property(get = get_AutoLayout, put = put_AutoLayout)) /* MsoTriState*/ short AutoLayout;
		/* MsoTriState*/ short get_AutoLayout();
		void put_AutoLayout(/* MsoTriState*/ short AutoLayout);
		void Convert(/* MsoDiagramType*/ short Type);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void FitText();
		//
		__declspec(property(get = get_Nodes)) Excel::DiagramNodes Nodes;
		Excel::DiagramNodes get_Nodes();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Reverse, put = put_Reverse)) /* MsoTriState*/ short Reverse;
		/* MsoTriState*/ short get_Reverse();
		void put_Reverse(/* MsoTriState*/ short Reverse);
		//
		__declspec(property(get = get_Type)) /* MsoDiagramType*/ short Type;
		/* MsoDiagramType*/ short get_Type();
	};

	//________________________________________________________ListObjects
	// {00024470-0000-0000-C000-000000000046}
	class ListObjects : public Com::Object
	{
	public:
		ListObjects();
		~ListObjects();
		ListObjects(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListObjects& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ListObject Add(Excel::XlListObjectSourceType SourceType, _variant_t Source, _variant_t LinkSource, Excel::XlYesNoGuess XlListObjectHasHeaders, _variant_t Destination, _variant_t TableStyleName);
		Excel::ListObject Add(Excel::XlListObjectSourceType SourceType, _variant_t Source, _variant_t LinkSource, Excel::XlYesNoGuess XlListObjectHasHeaders);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ListObject get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ListObject _Add(Excel::XlListObjectSourceType SourceType, _variant_t Source, _variant_t LinkSource, Excel::XlYesNoGuess XlListObjectHasHeaders, _variant_t Destination);
		Excel::ListObject _Add(Excel::XlListObjectSourceType SourceType, _variant_t Source, _variant_t LinkSource, Excel::XlYesNoGuess XlListObjectHasHeaders);
		Excel::ListObject get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ListObject
	// {00024471-0000-0000-C000-000000000046}
	class ListObject : public Com::Object
	{
	public:
		ListObject();
		~ListObject();
		ListObject(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListObject& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Active)) bool Active;
		bool get_Active();
		//
		__declspec(property(get = get_AlternativeText, put = put_AlternativeText)) wstring AlternativeText;
		wstring get_AlternativeText();
		void put_AlternativeText(wstring AlternativeText);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoFilter)) Excel::AutoFilter AutoFilterX;
		Excel::AutoFilter get_AutoFilter();
		//
		__declspec(property(get = get_Comment, put = put_Comment)) wstring CommentX;
		wstring get_Comment();
		void put_Comment(wstring Comment);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataBodyRange)) Excel::Range DataBodyRange;
		Excel::Range get_DataBodyRange();
		void Delete();
		//
		__declspec(property(get = get_DisplayName, put = put_DisplayName)) wstring DisplayName;
		wstring get_DisplayName();
		void put_DisplayName(wstring DisplayName);
		//
		__declspec(property(get = get_DisplayRightToLeft)) bool DisplayRightToLeft;
		bool get_DisplayRightToLeft();
		void ExportToVisio();
		//
		__declspec(property(get = get_HeaderRowRange)) Excel::Range HeaderRowRange;
		Excel::Range get_HeaderRowRange();
		//
		__declspec(property(get = get_InsertRowRange)) Excel::Range InsertRowRange;
		Excel::Range get_InsertRowRange();
		//
		__declspec(property(get = get_ListColumns)) Excel::ListColumns ListColumnsX;
		Excel::ListColumns get_ListColumns();
		//
		__declspec(property(get = get_ListRows)) Excel::ListRows ListRowsX;
		Excel::ListRows get_ListRows();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		wstring Publish(_variant_t Target, bool LinkSource);
		//
		__declspec(property(get = get_QueryTable)) Excel::QueryTableX QueryTable;
		Excel::QueryTableX get_QueryTable();
		//
		__declspec(property(get = get_Range)) Excel::Range RangeX;
		Excel::Range get_Range();
		void Refresh();
		void Resize(Excel::Range& Range);
		//
		__declspec(property(get = get_SharePointURL)) wstring SharePointURL;
		wstring get_SharePointURL();
		//
		__declspec(property(get = get_ShowAutoFilter, put = put_ShowAutoFilter)) bool ShowAutoFilter;
		bool get_ShowAutoFilter();
		void put_ShowAutoFilter(bool ShowAutoFilter);
		//
		__declspec(property(get = get_ShowAutoFilterDropDown, put = put_ShowAutoFilterDropDown)) bool ShowAutoFilterDropDown;
		bool get_ShowAutoFilterDropDown();
		void put_ShowAutoFilterDropDown(bool ShowAutoFilterDropDown);
		//
		__declspec(property(get = get_ShowHeaders, put = put_ShowHeaders)) bool ShowHeaders;
		bool get_ShowHeaders();
		void put_ShowHeaders(bool ShowHeaders);
		//
		__declspec(property(get = get_ShowTableStyleColumnStripes, put = put_ShowTableStyleColumnStripes)) bool ShowTableStyleColumnStripes;
		bool get_ShowTableStyleColumnStripes();
		void put_ShowTableStyleColumnStripes(bool ShowTableStyleColumnStripes);
		//
		__declspec(property(get = get_ShowTableStyleFirstColumn, put = put_ShowTableStyleFirstColumn)) bool ShowTableStyleFirstColumn;
		bool get_ShowTableStyleFirstColumn();
		void put_ShowTableStyleFirstColumn(bool ShowTableStyleFirstColumn);
		//
		__declspec(property(get = get_ShowTableStyleLastColumn, put = put_ShowTableStyleLastColumn)) bool ShowTableStyleLastColumn;
		bool get_ShowTableStyleLastColumn();
		void put_ShowTableStyleLastColumn(bool ShowTableStyleLastColumn);
		//
		__declspec(property(get = get_ShowTableStyleRowStripes, put = put_ShowTableStyleRowStripes)) bool ShowTableStyleRowStripes;
		bool get_ShowTableStyleRowStripes();
		void put_ShowTableStyleRowStripes(bool ShowTableStyleRowStripes);
		//
		__declspec(property(get = get_ShowTotals, put = put_ShowTotals)) bool ShowTotals;
		bool get_ShowTotals();
		void put_ShowTotals(bool ShowTotals);
		//
		__declspec(property(get = get_Slicers)) Excel::Slicers SlicersX;
		Excel::Slicers get_Slicers();
		//
		__declspec(property(get = get_Sort)) Excel::Sort SortX;
		Excel::Sort get_Sort();
		//
		__declspec(property(get = get_SourceType)) Excel::XlListObjectSourceType SourceType;
		Excel::XlListObjectSourceType get_SourceType();
		//
		__declspec(property(get = get_Summary, put = put_Summary)) wstring Summary;
		wstring get_Summary();
		void put_Summary(wstring Summary);
		//
		__declspec(property(get = get_TableObject)) Excel::TableObject TableObjectX;
		Excel::TableObject get_TableObject();
		//
		__declspec(property(get = get_TableStyle, put = put_TableStyle)) _variant_t TableStyleX;
		_variant_t get_TableStyle();
		void put_TableStyle(_variant_t TableStyle);
		//
		__declspec(property(get = get_TotalsRowRange)) Excel::Range TotalsRowRange;
		Excel::Range get_TotalsRowRange();
		void Unlink();
		void Unlist();
		void UpdateChanges(Excel::XlListConflict iConflictType);
		//
		__declspec(property(get = get_XmlMap)) Excel::XmlMap XmlMapX;
		Excel::XmlMap get_XmlMap();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________ListColumns
	// {00024472-0000-0000-C000-000000000046}
	class ListColumns : public Com::Object
	{
	public:
		ListColumns();
		~ListColumns();
		ListColumns(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListColumns& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ListColumn Add(_variant_t Position);
		Excel::ListColumn Add();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ListColumn get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ListColumn get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ListColumn
	// {00024473-0000-0000-C000-000000000046}
	class ListColumn : public Com::Object
	{
	public:
		ListColumn();
		~ListColumn();
		ListColumn(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListColumn& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataBodyRange)) Excel::Range DataBodyRange;
		Excel::Range get_DataBodyRange();
		void Delete();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_ListDataFormat)) Excel::ListDataFormat ListDataFormatX;
		Excel::ListDataFormat get_ListDataFormat();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Range)) Excel::Range RangeX;
		Excel::Range get_Range();
		//
		__declspec(property(get = get_SharePointFormula)) wstring SharePointFormula;
		wstring get_SharePointFormula();
		//
		__declspec(property(get = get_Total)) Excel::Range Total;
		Excel::Range get_Total();
		//
		__declspec(property(get = get_TotalsCalculation, put = put_TotalsCalculation)) Excel::XlTotalsCalculation TotalsCalculation;
		Excel::XlTotalsCalculation get_TotalsCalculation();
		void put_TotalsCalculation(Excel::XlTotalsCalculation TotalsCalculation);
		//
		__declspec(property(get = get_XPath)) Excel::XPath XPathX;
		Excel::XPath get_XPath();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________ListRows
	// {00024474-0000-0000-C000-000000000046}
	class ListRows : public Com::Object
	{
	public:
		ListRows();
		~ListRows();
		ListRows(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListRows& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ListRow Add(_variant_t Position, _variant_t AlwaysInsert);
		Excel::ListRow Add();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ListRow get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ListRow _Add(_variant_t Position);
		Excel::ListRow _Add();
		Excel::ListRow get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ListRow
	// {00024475-0000-0000-C000-000000000046}
	class ListRow : public Com::Object
	{
	public:
		ListRow();
		~ListRow();
		ListRow(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListRow& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_InvalidData)) bool InvalidData;
		bool get_InvalidData();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Range)) Excel::Range RangeX;
		Excel::Range get_Range();
	};

	//________________________________________________________XmlNamespace
	// {00024476-0000-0000-C000-000000000046}
	class XmlNamespace : public Com::Object
	{
	public:
		XmlNamespace();
		~XmlNamespace();
		XmlNamespace(const Com::Object& init) { Com::Object::Private_Copy(init); }
		XmlNamespace& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Prefix)) wstring Prefix;
		wstring get_Prefix();
		//
		__declspec(property(get = get_Uri)) wstring Uri;
		wstring get_Uri();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________XmlNamespaces
	// {00024477-0000-0000-C000-000000000046}
	class XmlNamespaces : public Com::Object
	{
	public:
		XmlNamespaces();
		~XmlNamespaces();
		XmlNamespaces(const Com::Object& init) { Com::Object::Private_Copy(init); }
		XmlNamespaces& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void InstallManifest(wstring Path, _variant_t InstallForAllUsers);
		void InstallManifest(wstring Path);
		Excel::XmlNamespace get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Value)) wstring Value;
		wstring get_Value();
		Excel::XmlNamespace get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________XmlDataBinding
	// {00024478-0000-0000-C000-000000000046}
	class XmlDataBinding : public Com::Object
	{
	public:
		XmlDataBinding();
		~XmlDataBinding();
		XmlDataBinding(const Com::Object& init) { Com::Object::Private_Copy(init); }
		XmlDataBinding& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void ClearSettings();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void LoadSettings(wstring Url);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::XlXmlImportResult Refresh();
		//
		__declspec(property(get = get_SourceUrl)) wstring SourceUrl;
		wstring get_SourceUrl();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________XmlSchema
	// {00024479-0000-0000-C000-000000000046}
	class XmlSchema : public Com::Object
	{
	public:
		XmlSchema();
		~XmlSchema();
		XmlSchema(const Com::Object& init) { Com::Object::Private_Copy(init); }
		XmlSchema& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Namespace)) Excel::XmlNamespace Namespace;
		Excel::XmlNamespace get_Namespace();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_XML)) wstring XML;
		wstring get_XML();
	};

	//________________________________________________________XmlSchemas
	// {0002447A-0000-0000-C000-000000000046}
	class XmlSchemas : public Com::Object
	{
	public:
		XmlSchemas();
		~XmlSchemas();
		XmlSchemas(const Com::Object& init) { Com::Object::Private_Copy(init); }
		XmlSchemas& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::XmlSchema get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::XmlSchema get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________XmlMap
	// {0002447B-0000-0000-C000-000000000046}
	class XmlMap : public Com::Object
	{
	public:
		XmlMap();
		~XmlMap();
		XmlMap(const Com::Object& init) { Com::Object::Private_Copy(init); }
		XmlMap& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AdjustColumnWidth, put = put_AdjustColumnWidth)) bool AdjustColumnWidth;
		bool get_AdjustColumnWidth();
		void put_AdjustColumnWidth(bool AdjustColumnWidth);
		//
		__declspec(property(get = get_AppendOnImport, put = put_AppendOnImport)) bool AppendOnImport;
		bool get_AppendOnImport();
		void put_AppendOnImport(bool AppendOnImport);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataBinding)) Excel::XmlDataBinding DataBinding;
		Excel::XmlDataBinding get_DataBinding();
		void Delete();
		Excel::XlXmlExportResult Export(wstring Url, _variant_t Overwrite);
		Excel::XlXmlExportResult Export(wstring Url);
		Excel::XlXmlExportResult ExportXml(_bstr_t& Data);
		Excel::XlXmlImportResult Import(wstring Url, _variant_t Overwrite);
		Excel::XlXmlImportResult Import(wstring Url);
		Excel::XlXmlImportResult ImportXml(wstring XmlData, _variant_t Overwrite);
		Excel::XlXmlImportResult ImportXml(wstring XmlData);
		//
		__declspec(property(get = get_IsExportable)) bool IsExportable;
		bool get_IsExportable();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PreserveColumnFilter, put = put_PreserveColumnFilter)) bool PreserveColumnFilter;
		bool get_PreserveColumnFilter();
		void put_PreserveColumnFilter(bool PreserveColumnFilter);
		//
		__declspec(property(get = get_PreserveNumberFormatting, put = put_PreserveNumberFormatting)) bool PreserveNumberFormatting;
		bool get_PreserveNumberFormatting();
		void put_PreserveNumberFormatting(bool PreserveNumberFormatting);
		//
		__declspec(property(get = get_RootElementName)) wstring RootElementName;
		wstring get_RootElementName();
		//
		__declspec(property(get = get_RootElementNamespace)) Excel::XmlNamespace RootElementNamespace;
		Excel::XmlNamespace get_RootElementNamespace();
		//
		__declspec(property(get = get_SaveDataSourceDefinition, put = put_SaveDataSourceDefinition)) bool SaveDataSourceDefinition;
		bool get_SaveDataSourceDefinition();
		void put_SaveDataSourceDefinition(bool SaveDataSourceDefinition);
		//
		__declspec(property(get = get_Schemas)) Excel::XmlSchemas Schemas;
		Excel::XmlSchemas get_Schemas();
		//
		__declspec(property(get = get_ShowImportExportValidationErrors, put = put_ShowImportExportValidationErrors)) bool ShowImportExportValidationErrors;
		bool get_ShowImportExportValidationErrors();
		void put_ShowImportExportValidationErrors(bool ShowImportExportValidationErrors);
		//
		__declspec(property(get = get_WorkbookConnection)) Excel::WorkbookConnection WorkbookConnectionX;
		Excel::WorkbookConnection get_WorkbookConnection();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________XmlMaps
	// {0002447C-0000-0000-C000-000000000046}
	class XmlMaps : public Com::Object
	{
	public:
		XmlMaps();
		~XmlMaps();
		XmlMaps(const Com::Object& init) { Com::Object::Private_Copy(init); }
		XmlMaps& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::XmlMap Add(wstring Schema, _variant_t RootElementName);
		Excel::XmlMap Add(wstring Schema);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::XmlMap get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::XmlMap get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ListDataFormat
	// {0002447D-0000-0000-C000-000000000046}
	class ListDataFormat : public Com::Object
	{
	public:
		ListDataFormat();
		~ListDataFormat();
		ListDataFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ListDataFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AllowFillIn)) bool AllowFillIn;
		bool get_AllowFillIn();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Choices)) _variant_t Choices;
		_variant_t get_Choices();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DecimalPlaces)) long DecimalPlaces;
		long get_DecimalPlaces();
		//
		__declspec(property(get = get_DefaultValue)) _variant_t DefaultValue;
		_variant_t get_DefaultValue();
		//
		__declspec(property(get = get_IsPercent)) bool IsPercent;
		bool get_IsPercent();
		//
		__declspec(property(get = get_MaxCharacters)) long MaxCharacters;
		long get_MaxCharacters();
		//
		__declspec(property(get = get_MaxNumber)) _variant_t MaxNumber;
		_variant_t get_MaxNumber();
		//
		__declspec(property(get = get_MinNumber)) _variant_t MinNumber;
		_variant_t get_MinNumber();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ReadOnly)) bool ReadOnly;
		bool get_ReadOnly();
		//
		__declspec(property(get = get_Required)) bool Required;
		bool get_Required();
		//
		__declspec(property(get = get_Type)) Excel::XlListDataType Type;
		Excel::XlListDataType get_Type();
		//
		__declspec(property(get = get__Default)) Excel::XlListDataType _Default;
		Excel::XlListDataType get__Default();
		//
		__declspec(property(get = get_lcid)) long lcid;
		long get_lcid();
	};

	//________________________________________________________XPath
	// {0002447E-0000-0000-C000-000000000046}
	class XPath : public Com::Object
	{
	public:
		XPath();
		~XPath();
		XPath(const Com::Object& init) { Com::Object::Private_Copy(init); }
		XPath& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Clear();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Map)) Excel::XmlMap Map;
		Excel::XmlMap get_Map();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Repeating)) bool Repeating;
		bool get_Repeating();
		void SetValue(Excel::XmlMap& Map, wstring XPath, _variant_t SelectionNamespace, _variant_t Repeating);
		void SetValue(Excel::XmlMap& Map, wstring XPath);
		//
		__declspec(property(get = get_Value)) wstring Value;
		wstring get_Value();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________PivotLineCells
	// {0002447F-0000-0000-C000-000000000046}
	class PivotLineCells : public Com::Object
	{
	public:
		PivotLineCells();
		~PivotLineCells();
		PivotLineCells(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotLineCells& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Full)) bool Full;
		bool get_Full();
		Excel::PivotCell get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotCell get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________PivotLine
	// {00024480-0000-0000-C000-000000000046}
	class PivotLine : public Com::Object
	{
	public:
		PivotLine();
		~PivotLine();
		PivotLine(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotLine& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_LineType)) Excel::XlPivotLineType LineType;
		Excel::XlPivotLineType get_LineType();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotLineCells)) Excel::PivotLineCells PivotLineCellsX;
		Excel::PivotLineCells get_PivotLineCells();
		//
		__declspec(property(get = get_PivotLineCellsFull)) Excel::PivotLineCells PivotLineCellsFull;
		Excel::PivotLineCells get_PivotLineCellsFull();
		//
		__declspec(property(get = get_Position)) long Position;
		long get_Position();
	};

	//________________________________________________________PivotLines
	// {00024481-0000-0000-C000-000000000046}
	class PivotLines : public Com::Object
	{
	public:
		PivotLines();
		~PivotLines();
		PivotLines(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotLines& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotLine get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotLine get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________PivotAxis
	// {00024482-0000-0000-C000-000000000046}
	class PivotAxis : public Com::Object
	{
	public:
		PivotAxis();
		~PivotAxis();
		PivotAxis(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotAxis& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotLines)) Excel::PivotLines PivotLinesX;
		Excel::PivotLines get_PivotLines();
	};

	//________________________________________________________PivotFilter
	// {00024483-0000-0000-C000-000000000046}
	class PivotFilter : public Com::Object
	{
	public:
		PivotFilter();
		~PivotFilter();
		PivotFilter(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotFilter& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Active)) bool Active;
		bool get_Active();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataCubeField)) Excel::CubeField DataCubeField;
		Excel::CubeField get_DataCubeField();
		//
		__declspec(property(get = get_DataField)) Excel::PivotField DataField;
		Excel::PivotField get_DataField();
		void Delete();
		//
		__declspec(property(get = get_Description)) wstring Description;
		wstring get_Description();
		//
		__declspec(property(get = get_FilterType)) Excel::XlPivotFilterType FilterType;
		Excel::XlPivotFilterType get_FilterType();
		//
		__declspec(property(get = get_IsMemberPropertyFilter)) bool IsMemberPropertyFilter;
		bool get_IsMemberPropertyFilter();
		//
		__declspec(property(get = get_MemberPropertyField)) Excel::PivotField MemberPropertyField;
		Excel::PivotField get_MemberPropertyField();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Order, put = put_Order)) long Order;
		long get_Order();
		void put_Order(long Order);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotField)) Excel::PivotField PivotFieldX;
		Excel::PivotField get_PivotField();
		//
		__declspec(property(get = get_Value1)) _variant_t Value1;
		_variant_t get_Value1();
		//
		__declspec(property(get = get_Value2)) _variant_t Value2;
		_variant_t get_Value2();
		//
		__declspec(property(get = get_WholeDayFilter, put = put_WholeDayFilter)) bool WholeDayFilter;
		bool get_WholeDayFilter();
		void put_WholeDayFilter(bool WholeDayFilter);
	};

	//________________________________________________________PivotFilters
	// {00024484-0000-0000-C000-000000000046}
	class PivotFilters : public Com::Object
	{
	public:
		PivotFilters();
		~PivotFilters();
		PivotFilters(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotFilters& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::PivotFilter Add(Excel::XlPivotFilterType Type, _variant_t DataField, _variant_t Value1, _variant_t Value2, _variant_t Order, _variant_t Name, _variant_t Description, _variant_t MemberPropertyField);
		Excel::PivotFilter Add(Excel::XlPivotFilterType Type);
		Excel::PivotFilter Add2(Excel::XlPivotFilterType Type, _variant_t DataField, _variant_t Value1, _variant_t Value2, _variant_t Order, _variant_t Name, _variant_t Description, _variant_t MemberPropertyField, _variant_t WholeDayFilter);
		Excel::PivotFilter Add2(Excel::XlPivotFilterType Type);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotFilter get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PivotFilter get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________WorkbookConnection
	// {00024485-0000-0000-C000-000000000046}
	class WorkbookConnection : public Com::Object
	{
	public:
		WorkbookConnection();
		~WorkbookConnection();
		WorkbookConnection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WorkbookConnection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataFeedConnection)) Excel::DataFeedConnection DataFeedConnectionX;
		Excel::DataFeedConnection get_DataFeedConnection();
		void Delete();
		//
		__declspec(property(get = get_Description, put = put_Description)) wstring Description;
		wstring get_Description();
		void put_Description(wstring Description);
		//
		__declspec(property(get = get_InModel)) bool InModel;
		bool get_InModel();
		//
		__declspec(property(get = get_ModelConnection)) Excel::ModelConnection ModelConnectionX;
		Excel::ModelConnection get_ModelConnection();
		//
		__declspec(property(get = get_ModelTables)) Excel::ModelTables ModelTablesX;
		Excel::ModelTables get_ModelTables();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_ODBCConnection)) Excel::ODBCConnection ODBCConnectionX;
		Excel::ODBCConnection get_ODBCConnection();
		//
		__declspec(property(get = get_OLEDBConnection)) Excel::OLEDBConnection OLEDBConnectionX;
		Excel::OLEDBConnection get_OLEDBConnection();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Ranges)) Excel::Ranges RangesX;
		Excel::Ranges get_Ranges();
		void Refresh();
		//
		__declspec(property(get = get_RefreshWithRefreshAll, put = put_RefreshWithRefreshAll)) bool RefreshWithRefreshAll;
		bool get_RefreshWithRefreshAll();
		void put_RefreshWithRefreshAll(bool RefreshWithRefreshAll);
		//
		__declspec(property(get = get_TextConnection)) Excel::TextConnection TextConnectionX;
		Excel::TextConnection get_TextConnection();
		//
		__declspec(property(get = get_Type)) Excel::XlConnectionType Type;
		Excel::XlConnectionType get_Type();
		//
		__declspec(property(get = get_WorksheetDataConnection)) Excel::WorksheetDataConnection WorksheetDataConnectionX;
		Excel::WorksheetDataConnection get_WorksheetDataConnection();
		//
		__declspec(property(get = get__Default, put = put__Default)) wstring _Default;
		wstring get__Default();
		void put__Default(wstring _Default);
	};

	//________________________________________________________Connections
	// {00024486-0000-0000-C000-000000000046}
	class Connections : public Com::Object
	{
	public:
		Connections();
		~Connections();
		Connections(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Connections& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::WorkbookConnection Add(wstring Name, wstring Description, _variant_t ConnectionString, _variant_t CommandText, _variant_t lCmdtype);
		Excel::WorkbookConnection Add(wstring Name, wstring Description, _variant_t ConnectionString, _variant_t CommandText);
		Excel::WorkbookConnection Add2(wstring Name, wstring Description, _variant_t ConnectionString, _variant_t CommandText, _variant_t lCmdtype, _variant_t CreateModelConnection, _variant_t ImportRelationships);
		Excel::WorkbookConnection Add2(wstring Name, wstring Description, _variant_t ConnectionString, _variant_t CommandText);
		Excel::WorkbookConnection AddFromFile(wstring Filename, _variant_t CreateModelConnection, _variant_t ImportRelationships);
		Excel::WorkbookConnection AddFromFile(wstring Filename);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::WorkbookConnection Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::WorkbookConnection _AddFromFile(wstring Filename);
		Excel::WorkbookConnection get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________WorksheetView
	// {00024487-0000-0000-C000-000000000046}
	class WorksheetView : public Com::Object
	{
	public:
		WorksheetView();
		~WorksheetView();
		WorksheetView(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WorksheetView& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DisplayFormulas, put = put_DisplayFormulas)) bool DisplayFormulas;
		bool get_DisplayFormulas();
		void put_DisplayFormulas(bool DisplayFormulas);
		//
		__declspec(property(get = get_DisplayGridlines, put = put_DisplayGridlines)) bool DisplayGridlines;
		bool get_DisplayGridlines();
		void put_DisplayGridlines(bool DisplayGridlines);
		//
		__declspec(property(get = get_DisplayHeadings, put = put_DisplayHeadings)) bool DisplayHeadings;
		bool get_DisplayHeadings();
		void put_DisplayHeadings(bool DisplayHeadings);
		//
		__declspec(property(get = get_DisplayOutline, put = put_DisplayOutline)) bool DisplayOutline;
		bool get_DisplayOutline();
		void put_DisplayOutline(bool DisplayOutline);
		//
		__declspec(property(get = get_DisplayZeros, put = put_DisplayZeros)) bool DisplayZeros;
		bool get_DisplayZeros();
		void put_DisplayZeros(bool DisplayZeros);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Sheet)) Com::Object Sheet;
		Com::Object get_Sheet();
	};

	//________________________________________________________ChartView
	// {00024488-0000-0000-C000-000000000046}
	class ChartView : public Com::Object
	{
	public:
		ChartView();
		~ChartView();
		ChartView(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartView& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Sheet)) Com::Object Sheet;
		Com::Object get_Sheet();
	};

	//________________________________________________________ModuleView
	// {00024489-0000-0000-C000-000000000046}
	class ModuleView : public Com::Object
	{
	public:
		ModuleView();
		~ModuleView();
		ModuleView(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModuleView& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Sheet)) Com::Object Sheet;
		Com::Object get_Sheet();
	};

	//________________________________________________________DialogSheetView
	// {0002448A-0000-0000-C000-000000000046}
	class DialogSheetView : public Com::Object
	{
	public:
		DialogSheetView();
		~DialogSheetView();
		DialogSheetView(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DialogSheetView& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Sheet)) Com::Object Sheet;
		Com::Object get_Sheet();
	};

	//________________________________________________________SheetViews
	// {0002448C-0000-0000-C000-000000000046}
	class SheetViews : public Com::Object
	{
	public:
		SheetViews();
		~SheetViews();
		SheetViews(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SheetViews& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Com::Object get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Com::Object get__Default(_variant_t Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________OLEDBConnection
	// {0002448D-0000-0000-C000-000000000046}
	class OLEDBConnection : public Com::Object
	{
	public:
		OLEDBConnection();
		~OLEDBConnection();
		OLEDBConnection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		OLEDBConnection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_ADOConnection)) Com::Object ADOConnection;
		Com::Object get_ADOConnection();
		//
		__declspec(property(get = get_AlwaysUseConnectionFile, put = put_AlwaysUseConnectionFile)) bool AlwaysUseConnectionFile;
		bool get_AlwaysUseConnectionFile();
		void put_AlwaysUseConnectionFile(bool AlwaysUseConnectionFile);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BackgroundQuery, put = put_BackgroundQuery)) bool BackgroundQuery;
		bool get_BackgroundQuery();
		void put_BackgroundQuery(bool BackgroundQuery);
		//
		__declspec(property(get = get_CalculatedMembers)) Excel::CalculatedMembers CalculatedMembersX;
		Excel::CalculatedMembers get_CalculatedMembers();
		void CancelRefresh();
		//
		__declspec(property(get = get_CommandText, put = put_CommandText)) _variant_t CommandText;
		_variant_t get_CommandText();
		void put_CommandText(_variant_t CommandText);
		//
		__declspec(property(get = get_CommandType, put = put_CommandType)) Excel::XlCmdType CommandType;
		Excel::XlCmdType get_CommandType();
		void put_CommandType(Excel::XlCmdType CommandType);
		//
		__declspec(property(get = get_Connection, put = put_Connection)) _variant_t Connection;
		_variant_t get_Connection();
		void put_Connection(_variant_t Connection);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_EnableRefresh, put = put_EnableRefresh)) bool EnableRefresh;
		bool get_EnableRefresh();
		void put_EnableRefresh(bool EnableRefresh);
		//
		__declspec(property(get = get_IsConnected)) bool IsConnected;
		bool get_IsConnected();
		//
		__declspec(property(get = get_LocalConnection, put = put_LocalConnection)) _variant_t LocalConnection;
		_variant_t get_LocalConnection();
		void put_LocalConnection(_variant_t LocalConnection);
		//
		__declspec(property(get = get_LocaleID, put = put_LocaleID)) long LocaleID;
		long get_LocaleID();
		void put_LocaleID(long LocaleID);
		//
		__declspec(property(get = get_MaintainConnection, put = put_MaintainConnection)) bool MaintainConnection;
		bool get_MaintainConnection();
		void put_MaintainConnection(bool MaintainConnection);
		void MakeConnection();
		//
		__declspec(property(get = get_MaxDrillthroughRecords, put = put_MaxDrillthroughRecords)) long MaxDrillthroughRecords;
		long get_MaxDrillthroughRecords();
		void put_MaxDrillthroughRecords(long MaxDrillthroughRecords);
		//
		__declspec(property(get = get_OLAP)) bool OLAP;
		bool get_OLAP();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Reconnect();
		void Refresh();
		//
		__declspec(property(get = get_RefreshDate)) Sys::Time RefreshDate;
		Sys::Time get_RefreshDate();
		//
		__declspec(property(get = get_RefreshOnFileOpen, put = put_RefreshOnFileOpen)) bool RefreshOnFileOpen;
		bool get_RefreshOnFileOpen();
		void put_RefreshOnFileOpen(bool RefreshOnFileOpen);
		//
		__declspec(property(get = get_RefreshPeriod, put = put_RefreshPeriod)) long RefreshPeriod;
		long get_RefreshPeriod();
		void put_RefreshPeriod(long RefreshPeriod);
		//
		__declspec(property(get = get_Refreshing)) bool Refreshing;
		bool get_Refreshing();
		//
		__declspec(property(get = get_RetrieveInOfficeUILang, put = put_RetrieveInOfficeUILang)) bool RetrieveInOfficeUILang;
		bool get_RetrieveInOfficeUILang();
		void put_RetrieveInOfficeUILang(bool RetrieveInOfficeUILang);
		//
		__declspec(property(get = get_RobustConnect, put = put_RobustConnect)) Excel::XlRobustConnect RobustConnect;
		Excel::XlRobustConnect get_RobustConnect();
		void put_RobustConnect(Excel::XlRobustConnect RobustConnect);
		void SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords);
		void SaveAsODC(wstring ODCFileName);
		//
		__declspec(property(get = get_SavePassword, put = put_SavePassword)) bool SavePassword;
		bool get_SavePassword();
		void put_SavePassword(bool SavePassword);
		//
		__declspec(property(get = get_ServerCredentialsMethod, put = put_ServerCredentialsMethod)) Excel::XlCredentialsMethod ServerCredentialsMethod;
		Excel::XlCredentialsMethod get_ServerCredentialsMethod();
		void put_ServerCredentialsMethod(Excel::XlCredentialsMethod ServerCredentialsMethod);
		//
		__declspec(property(get = get_ServerFillColor, put = put_ServerFillColor)) bool ServerFillColor;
		bool get_ServerFillColor();
		void put_ServerFillColor(bool ServerFillColor);
		//
		__declspec(property(get = get_ServerFontStyle, put = put_ServerFontStyle)) bool ServerFontStyle;
		bool get_ServerFontStyle();
		void put_ServerFontStyle(bool ServerFontStyle);
		//
		__declspec(property(get = get_ServerNumberFormat, put = put_ServerNumberFormat)) bool ServerNumberFormat;
		bool get_ServerNumberFormat();
		void put_ServerNumberFormat(bool ServerNumberFormat);
		//
		__declspec(property(get = get_ServerSSOApplicationID, put = put_ServerSSOApplicationID)) wstring ServerSSOApplicationID;
		wstring get_ServerSSOApplicationID();
		void put_ServerSSOApplicationID(wstring ServerSSOApplicationID);
		//
		__declspec(property(get = get_ServerTextColor, put = put_ServerTextColor)) bool ServerTextColor;
		bool get_ServerTextColor();
		void put_ServerTextColor(bool ServerTextColor);
		//
		__declspec(property(get = get_SourceConnectionFile, put = put_SourceConnectionFile)) wstring SourceConnectionFile;
		wstring get_SourceConnectionFile();
		void put_SourceConnectionFile(wstring SourceConnectionFile);
		//
		__declspec(property(get = get_SourceDataFile, put = put_SourceDataFile)) wstring SourceDataFile;
		wstring get_SourceDataFile();
		void put_SourceDataFile(wstring SourceDataFile);
		//
		__declspec(property(get = get_UseLocalConnection, put = put_UseLocalConnection)) bool UseLocalConnection;
		bool get_UseLocalConnection();
		void put_UseLocalConnection(bool UseLocalConnection);
	};

	//________________________________________________________ODBCConnection
	// {0002448E-0000-0000-C000-000000000046}
	class ODBCConnection : public Com::Object
	{
	public:
		ODBCConnection();
		~ODBCConnection();
		ODBCConnection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ODBCConnection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AlwaysUseConnectionFile, put = put_AlwaysUseConnectionFile)) bool AlwaysUseConnectionFile;
		bool get_AlwaysUseConnectionFile();
		void put_AlwaysUseConnectionFile(bool AlwaysUseConnectionFile);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BackgroundQuery, put = put_BackgroundQuery)) bool BackgroundQuery;
		bool get_BackgroundQuery();
		void put_BackgroundQuery(bool BackgroundQuery);
		void CancelRefresh();
		//
		__declspec(property(get = get_CommandText, put = put_CommandText)) _variant_t CommandText;
		_variant_t get_CommandText();
		void put_CommandText(_variant_t CommandText);
		//
		__declspec(property(get = get_CommandType, put = put_CommandType)) Excel::XlCmdType CommandType;
		Excel::XlCmdType get_CommandType();
		void put_CommandType(Excel::XlCmdType CommandType);
		//
		__declspec(property(get = get_Connection, put = put_Connection)) _variant_t Connection;
		_variant_t get_Connection();
		void put_Connection(_variant_t Connection);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_EnableRefresh, put = put_EnableRefresh)) bool EnableRefresh;
		bool get_EnableRefresh();
		void put_EnableRefresh(bool EnableRefresh);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Refresh();
		//
		__declspec(property(get = get_RefreshDate)) Sys::Time RefreshDate;
		Sys::Time get_RefreshDate();
		//
		__declspec(property(get = get_RefreshOnFileOpen, put = put_RefreshOnFileOpen)) bool RefreshOnFileOpen;
		bool get_RefreshOnFileOpen();
		void put_RefreshOnFileOpen(bool RefreshOnFileOpen);
		//
		__declspec(property(get = get_RefreshPeriod, put = put_RefreshPeriod)) long RefreshPeriod;
		long get_RefreshPeriod();
		void put_RefreshPeriod(long RefreshPeriod);
		//
		__declspec(property(get = get_Refreshing)) bool Refreshing;
		bool get_Refreshing();
		//
		__declspec(property(get = get_RobustConnect, put = put_RobustConnect)) Excel::XlRobustConnect RobustConnect;
		Excel::XlRobustConnect get_RobustConnect();
		void put_RobustConnect(Excel::XlRobustConnect RobustConnect);
		void SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords);
		void SaveAsODC(wstring ODCFileName);
		//
		__declspec(property(get = get_SavePassword, put = put_SavePassword)) bool SavePassword;
		bool get_SavePassword();
		void put_SavePassword(bool SavePassword);
		//
		__declspec(property(get = get_ServerCredentialsMethod, put = put_ServerCredentialsMethod)) Excel::XlCredentialsMethod ServerCredentialsMethod;
		Excel::XlCredentialsMethod get_ServerCredentialsMethod();
		void put_ServerCredentialsMethod(Excel::XlCredentialsMethod ServerCredentialsMethod);
		//
		__declspec(property(get = get_ServerSSOApplicationID, put = put_ServerSSOApplicationID)) wstring ServerSSOApplicationID;
		wstring get_ServerSSOApplicationID();
		void put_ServerSSOApplicationID(wstring ServerSSOApplicationID);
		//
		__declspec(property(get = get_SourceConnectionFile, put = put_SourceConnectionFile)) wstring SourceConnectionFile;
		wstring get_SourceConnectionFile();
		void put_SourceConnectionFile(wstring SourceConnectionFile);
		//
		__declspec(property(get = get_SourceData, put = put_SourceData)) _variant_t SourceData;
		_variant_t get_SourceData();
		void put_SourceData(_variant_t SourceData);
		//
		__declspec(property(get = get_SourceDataFile, put = put_SourceDataFile)) wstring SourceDataFile;
		wstring get_SourceDataFile();
		void put_SourceDataFile(wstring SourceDataFile);
	};

	//________________________________________________________Action
	// {0002448F-0000-0000-C000-000000000046}
	class Action : public Com::Object
	{
	public:
		Action();
		~Action();
		Action(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Action& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Caption)) wstring Caption;
		wstring get_Caption();
		//
		__declspec(property(get = get_Content)) wstring Content;
		wstring get_Content();
		//
		__declspec(property(get = get_Coordinate)) wstring Coordinate;
		wstring get_Coordinate();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Execute();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Type)) Excel::XlActionType Type;
		Excel::XlActionType get_Type();
	};

	//________________________________________________________Actions
	// {00024490-0000-0000-C000-000000000046}
	class Actions : public Com::Object
	{
	public:
		Actions();
		~Actions();
		Actions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Actions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Action get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Action get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________FormatColor
	// {00024491-0000-0000-C000-000000000046}
	class FormatColor : public Com::Object
	{
	public:
		FormatColor();
		~FormatColor();
		FormatColor(const Com::Object& init) { Com::Object::Private_Copy(init); }
		FormatColor& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Color, put = put_Color)) _variant_t Color;
		_variant_t get_Color();
		void put_Color(_variant_t Color);
		//
		__declspec(property(get = get_ColorIndex, put = put_ColorIndex)) Excel::XlColorIndex ColorIndex;
		Excel::XlColorIndex get_ColorIndex();
		void put_ColorIndex(Excel::XlColorIndex ColorIndex);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ThemeColor, put = put_ThemeColor)) _variant_t ThemeColor;
		_variant_t get_ThemeColor();
		void put_ThemeColor(_variant_t ThemeColor);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) _variant_t TintAndShade;
		_variant_t get_TintAndShade();
		void put_TintAndShade(_variant_t TintAndShade);
	};

	//________________________________________________________ConditionValue
	// {00024492-0000-0000-C000-000000000046}
	class ConditionValue : public Com::Object
	{
	public:
		ConditionValue();
		~ConditionValue();
		ConditionValue(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ConditionValue& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Modify(Excel::XlConditionValueTypes newtype, _variant_t newvalue);
		void Modify(Excel::XlConditionValueTypes newtype);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Type)) Excel::XlConditionValueTypes Type;
		Excel::XlConditionValueTypes get_Type();
		//
		__declspec(property(get = get_Value)) _variant_t Value;
		_variant_t get_Value();
	};

	//________________________________________________________ColorScale
	// {00024493-0000-0000-C000-000000000046}
	class ColorScale : public Com::Object
	{
	public:
		ColorScale();
		~ColorScale();
		ColorScale(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ColorScale& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AppliesTo)) Excel::Range AppliesTo;
		Excel::Range get_AppliesTo();
		//
		__declspec(property(get = get_ColorScaleCriteria)) Excel::ColorScaleCriteria ColorScaleCriteriaX;
		Excel::ColorScaleCriteria get_ColorScaleCriteria();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		void ModifyAppliesToRange(Excel::Range& Range);
		//
		__declspec(property(get = get_PTCondition)) bool PTCondition;
		bool get_PTCondition();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Priority, put = put_Priority)) long Priority;
		long get_Priority();
		void put_Priority(long Priority);
		//
		__declspec(property(get = get_ScopeType, put = put_ScopeType)) Excel::XlPivotConditionScope ScopeType;
		Excel::XlPivotConditionScope get_ScopeType();
		void put_ScopeType(Excel::XlPivotConditionScope ScopeType);
		void SetFirstPriority();
		void SetLastPriority();
		//
		__declspec(property(get = get_StopIfTrue)) bool StopIfTrue;
		bool get_StopIfTrue();
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
	};

	//________________________________________________________ColorScaleCriteria
	// {00024494-0000-0000-C000-000000000046}
	class ColorScaleCriteria : public Com::Object
	{
	public:
		ColorScaleCriteria();
		~ColorScaleCriteria();
		ColorScaleCriteria(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ColorScaleCriteria& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		Excel::ColorScaleCriterion get_Item(_variant_t Index);
		Excel::ColorScaleCriterion get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ColorScaleCriterion
	// {00024495-0000-0000-C000-000000000046}
	class ColorScaleCriterion : public Com::Object
	{
	public:
		ColorScaleCriterion();
		~ColorScaleCriterion();
		ColorScaleCriterion(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ColorScaleCriterion& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_FormatColor)) Excel::FormatColor FormatColorX;
		Excel::FormatColor get_FormatColor();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Type, put = put_Type)) Excel::XlConditionValueTypes Type;
		Excel::XlConditionValueTypes get_Type();
		void put_Type(Excel::XlConditionValueTypes Type);
		//
		__declspec(property(get = get_Value, put = put_Value)) _variant_t Value;
		_variant_t get_Value();
		void put_Value(_variant_t Value);
	};

	//________________________________________________________Databar
	// {00024496-0000-0000-C000-000000000046}
	class Databar : public Com::Object
	{
	public:
		Databar();
		~Databar();
		Databar(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Databar& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AppliesTo)) Excel::Range AppliesTo;
		Excel::Range get_AppliesTo();
		//
		__declspec(property(get = get_AxisColor)) Com::Object AxisColor;
		Com::Object get_AxisColor();
		//
		__declspec(property(get = get_AxisPosition, put = put_AxisPosition)) Excel::XlDataBarAxisPosition AxisPosition;
		Excel::XlDataBarAxisPosition get_AxisPosition();
		void put_AxisPosition(Excel::XlDataBarAxisPosition AxisPosition);
		//
		__declspec(property(get = get_BarBorder)) Excel::DataBarBorder BarBorder;
		Excel::DataBarBorder get_BarBorder();
		//
		__declspec(property(get = get_BarColor)) Com::Object BarColor;
		Com::Object get_BarColor();
		//
		__declspec(property(get = get_BarFillType, put = put_BarFillType)) Excel::XlDataBarFillType BarFillType;
		Excel::XlDataBarFillType get_BarFillType();
		void put_BarFillType(Excel::XlDataBarFillType BarFillType);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Direction, put = put_Direction)) long Direction;
		long get_Direction();
		void put_Direction(long Direction);
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_MaxPoint)) Excel::ConditionValue MaxPoint;
		Excel::ConditionValue get_MaxPoint();
		//
		__declspec(property(get = get_MinPoint)) Excel::ConditionValue MinPoint;
		Excel::ConditionValue get_MinPoint();
		void ModifyAppliesToRange(Excel::Range& Range);
		//
		__declspec(property(get = get_NegativeBarFormat)) Excel::NegativeBarFormat NegativeBarFormatX;
		Excel::NegativeBarFormat get_NegativeBarFormat();
		//
		__declspec(property(get = get_PTCondition)) bool PTCondition;
		bool get_PTCondition();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PercentMax, put = put_PercentMax)) long PercentMax;
		long get_PercentMax();
		void put_PercentMax(long PercentMax);
		//
		__declspec(property(get = get_PercentMin, put = put_PercentMin)) long PercentMin;
		long get_PercentMin();
		void put_PercentMin(long PercentMin);
		//
		__declspec(property(get = get_Priority, put = put_Priority)) long Priority;
		long get_Priority();
		void put_Priority(long Priority);
		//
		__declspec(property(get = get_ScopeType, put = put_ScopeType)) Excel::XlPivotConditionScope ScopeType;
		Excel::XlPivotConditionScope get_ScopeType();
		void put_ScopeType(Excel::XlPivotConditionScope ScopeType);
		void SetFirstPriority();
		void SetLastPriority();
		//
		__declspec(property(get = get_ShowValue, put = put_ShowValue)) bool ShowValue;
		bool get_ShowValue();
		void put_ShowValue(bool ShowValue);
		//
		__declspec(property(get = get_StopIfTrue)) bool StopIfTrue;
		bool get_StopIfTrue();
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
	};

	//________________________________________________________IconSetCondition
	// {00024497-0000-0000-C000-000000000046}
	class IconSetCondition : public Com::Object
	{
	public:
		IconSetCondition();
		~IconSetCondition();
		IconSetCondition(const Com::Object& init) { Com::Object::Private_Copy(init); }
		IconSetCondition& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AppliesTo)) Excel::Range AppliesTo;
		Excel::Range get_AppliesTo();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_IconCriteria)) Excel::IconCriteria IconCriteriaX;
		Excel::IconCriteria get_IconCriteria();
		//
		__declspec(property(get = get_IconSet, put = put_IconSet)) _variant_t IconSetX;
		_variant_t get_IconSet();
		void put_IconSet(_variant_t IconSet);
		void ModifyAppliesToRange(Excel::Range& Range);
		//
		__declspec(property(get = get_PTCondition)) bool PTCondition;
		bool get_PTCondition();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PercentileValues, put = put_PercentileValues)) bool PercentileValues;
		bool get_PercentileValues();
		void put_PercentileValues(bool PercentileValues);
		//
		__declspec(property(get = get_Priority, put = put_Priority)) long Priority;
		long get_Priority();
		void put_Priority(long Priority);
		//
		__declspec(property(get = get_ReverseOrder, put = put_ReverseOrder)) bool ReverseOrder;
		bool get_ReverseOrder();
		void put_ReverseOrder(bool ReverseOrder);
		//
		__declspec(property(get = get_ScopeType, put = put_ScopeType)) Excel::XlPivotConditionScope ScopeType;
		Excel::XlPivotConditionScope get_ScopeType();
		void put_ScopeType(Excel::XlPivotConditionScope ScopeType);
		void SetFirstPriority();
		void SetLastPriority();
		//
		__declspec(property(get = get_ShowIconOnly, put = put_ShowIconOnly)) bool ShowIconOnly;
		bool get_ShowIconOnly();
		void put_ShowIconOnly(bool ShowIconOnly);
		//
		__declspec(property(get = get_StopIfTrue)) bool StopIfTrue;
		bool get_StopIfTrue();
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
	};

	//________________________________________________________IconCriteria
	// {00024498-0000-0000-C000-000000000046}
	class IconCriteria : public Com::Object
	{
	public:
		IconCriteria();
		~IconCriteria();
		IconCriteria(const Com::Object& init) { Com::Object::Private_Copy(init); }
		IconCriteria& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		Excel::IconCriterion get_Item(_variant_t Index);
		Excel::IconCriterion get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________IconCriterion
	// {00024499-0000-0000-C000-000000000046}
	class IconCriterion : public Com::Object
	{
	public:
		IconCriterion();
		~IconCriterion();
		IconCriterion(const Com::Object& init) { Com::Object::Private_Copy(init); }
		IconCriterion& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Icon, put = put_Icon)) Excel::XlIcon IconX;
		Excel::XlIcon get_Icon();
		void put_Icon(Excel::XlIcon Icon);
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Operator, put = put_Operator)) long Operator;
		long get_Operator();
		void put_Operator(long Operator);
		//
		__declspec(property(get = get_Type, put = put_Type)) Excel::XlConditionValueTypes Type;
		Excel::XlConditionValueTypes get_Type();
		void put_Type(Excel::XlConditionValueTypes Type);
		//
		__declspec(property(get = get_Value, put = put_Value)) _variant_t Value;
		_variant_t get_Value();
		void put_Value(_variant_t Value);
	};

	//________________________________________________________Icon
	// {0002449A-0000-0000-C000-000000000046}
	class Icon : public Com::Object
	{
	public:
		Icon();
		~Icon();
		Icon(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Icon& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_Parent)) Excel::IconSet Parent;
		Excel::IconSet get_Parent();
	};

	//________________________________________________________IconSet
	// {0002449B-0000-0000-C000-000000000046}
	class IconSet : public Com::Object
	{
	public:
		IconSet();
		~IconSet();
		IconSet(const Com::Object& init) { Com::Object::Private_Copy(init); }
		IconSet& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_ID)) Excel::XlIconSet ID;
		Excel::XlIconSet get_ID();
		Excel::Icon get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Icon get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________IconSets
	// {0002449C-0000-0000-C000-000000000046}
	class IconSets : public Com::Object
	{
	public:
		IconSets();
		~IconSets();
		IconSets(const Com::Object& init) { Com::Object::Private_Copy(init); }
		IconSets& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Com::Object get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Com::Object get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Top10
	// {0002449D-0000-0000-C000-000000000046}
	class Top10 : public Com::Object
	{
	public:
		Top10();
		~Top10();
		Top10(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Top10& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AppliesTo)) Excel::Range AppliesTo;
		Excel::Range get_AppliesTo();
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		//
		__declspec(property(get = get_CalcFor, put = put_CalcFor)) Excel::XlCalcFor CalcFor;
		Excel::XlCalcFor get_CalcFor();
		void put_CalcFor(Excel::XlCalcFor CalcFor);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		void ModifyAppliesToRange(Excel::Range& Range);
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) _variant_t NumberFormat;
		_variant_t get_NumberFormat();
		void put_NumberFormat(_variant_t NumberFormat);
		//
		__declspec(property(get = get_PTCondition)) bool PTCondition;
		bool get_PTCondition();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Percent, put = put_Percent)) bool Percent;
		bool get_Percent();
		void put_Percent(bool Percent);
		//
		__declspec(property(get = get_Priority, put = put_Priority)) long Priority;
		long get_Priority();
		void put_Priority(long Priority);
		//
		__declspec(property(get = get_Rank, put = put_Rank)) long Rank;
		long get_Rank();
		void put_Rank(long Rank);
		//
		__declspec(property(get = get_ScopeType, put = put_ScopeType)) Excel::XlPivotConditionScope ScopeType;
		Excel::XlPivotConditionScope get_ScopeType();
		void put_ScopeType(Excel::XlPivotConditionScope ScopeType);
		void SetFirstPriority();
		void SetLastPriority();
		//
		__declspec(property(get = get_StopIfTrue, put = put_StopIfTrue)) bool StopIfTrue;
		bool get_StopIfTrue();
		void put_StopIfTrue(bool StopIfTrue);
		//
		__declspec(property(get = get_TopBottom, put = put_TopBottom)) Excel::XlTopBottom TopBottom;
		Excel::XlTopBottom get_TopBottom();
		void put_TopBottom(Excel::XlTopBottom TopBottom);
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
	};

	//________________________________________________________AboveAverage
	// {0002449E-0000-0000-C000-000000000046}
	class AboveAverage : public Com::Object
	{
	public:
		AboveAverage();
		~AboveAverage();
		AboveAverage(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AboveAverage& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AboveBelow, put = put_AboveBelow)) Excel::XlAboveBelow AboveBelow;
		Excel::XlAboveBelow get_AboveBelow();
		void put_AboveBelow(Excel::XlAboveBelow AboveBelow);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AppliesTo)) Excel::Range AppliesTo;
		Excel::Range get_AppliesTo();
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		//
		__declspec(property(get = get_CalcFor, put = put_CalcFor)) Excel::XlCalcFor CalcFor;
		Excel::XlCalcFor get_CalcFor();
		void put_CalcFor(Excel::XlCalcFor CalcFor);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		void ModifyAppliesToRange(Excel::Range& Range);
		//
		__declspec(property(get = get_NumStdDev, put = put_NumStdDev)) long NumStdDev;
		long get_NumStdDev();
		void put_NumStdDev(long NumStdDev);
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) _variant_t NumberFormat;
		_variant_t get_NumberFormat();
		void put_NumberFormat(_variant_t NumberFormat);
		//
		__declspec(property(get = get_PTCondition)) bool PTCondition;
		bool get_PTCondition();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Priority, put = put_Priority)) long Priority;
		long get_Priority();
		void put_Priority(long Priority);
		//
		__declspec(property(get = get_ScopeType, put = put_ScopeType)) Excel::XlPivotConditionScope ScopeType;
		Excel::XlPivotConditionScope get_ScopeType();
		void put_ScopeType(Excel::XlPivotConditionScope ScopeType);
		void SetFirstPriority();
		void SetLastPriority();
		//
		__declspec(property(get = get_StopIfTrue, put = put_StopIfTrue)) bool StopIfTrue;
		bool get_StopIfTrue();
		void put_StopIfTrue(bool StopIfTrue);
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
	};

	//________________________________________________________UniqueValues
	// {0002449F-0000-0000-C000-000000000046}
	class UniqueValues : public Com::Object
	{
	public:
		UniqueValues();
		~UniqueValues();
		UniqueValues(const Com::Object& init) { Com::Object::Private_Copy(init); }
		UniqueValues& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AppliesTo)) Excel::Range AppliesTo;
		Excel::Range get_AppliesTo();
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_DupeUnique, put = put_DupeUnique)) Excel::XlDupeUnique DupeUnique;
		Excel::XlDupeUnique get_DupeUnique();
		void put_DupeUnique(Excel::XlDupeUnique DupeUnique);
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		void ModifyAppliesToRange(Excel::Range& Range);
		//
		__declspec(property(get = get_NumberFormat, put = put_NumberFormat)) _variant_t NumberFormat;
		_variant_t get_NumberFormat();
		void put_NumberFormat(_variant_t NumberFormat);
		//
		__declspec(property(get = get_PTCondition)) bool PTCondition;
		bool get_PTCondition();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Priority, put = put_Priority)) long Priority;
		long get_Priority();
		void put_Priority(long Priority);
		//
		__declspec(property(get = get_ScopeType, put = put_ScopeType)) Excel::XlPivotConditionScope ScopeType;
		Excel::XlPivotConditionScope get_ScopeType();
		void put_ScopeType(Excel::XlPivotConditionScope ScopeType);
		void SetFirstPriority();
		void SetLastPriority();
		//
		__declspec(property(get = get_StopIfTrue, put = put_StopIfTrue)) bool StopIfTrue;
		bool get_StopIfTrue();
		void put_StopIfTrue(bool StopIfTrue);
		//
		__declspec(property(get = get_Type)) long Type;
		long get_Type();
	};

	//________________________________________________________Ranges
	// {000244A0-0000-0000-C000-000000000046}
	class Ranges : public Com::Object
	{
	public:
		Ranges();
		~Ranges();
		Ranges(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Ranges& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Range get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Range get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________HeaderFooter
	// {000244A1-0000-0000-C000-000000000046}
	class HeaderFooter : public Com::Object
	{
	public:
		HeaderFooter();
		~HeaderFooter();
		HeaderFooter(const Com::Object& init) { Com::Object::Private_Copy(init); }
		HeaderFooter& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Picture)) Excel::Graphic PictureX;
		Excel::Graphic get_Picture();
		//
		__declspec(property(get = get_Text, put = put_Text)) wstring Text;
		wstring get_Text();
		void put_Text(wstring Text);
	};

	//________________________________________________________Page
	// {000244A2-0000-0000-C000-000000000046}
	class Page : public Com::Object
	{
	public:
		Page();
		~Page();
		Page(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Page& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_CenterFooter)) Excel::HeaderFooter CenterFooter;
		Excel::HeaderFooter get_CenterFooter();
		//
		__declspec(property(get = get_CenterHeader)) Excel::HeaderFooter CenterHeader;
		Excel::HeaderFooter get_CenterHeader();
		//
		__declspec(property(get = get_LeftFooter)) Excel::HeaderFooter LeftFooter;
		Excel::HeaderFooter get_LeftFooter();
		//
		__declspec(property(get = get_LeftHeader)) Excel::HeaderFooter LeftHeader;
		Excel::HeaderFooter get_LeftHeader();
		//
		__declspec(property(get = get_RightFooter)) Excel::HeaderFooter RightFooter;
		Excel::HeaderFooter get_RightFooter();
		//
		__declspec(property(get = get_RightHeader)) Excel::HeaderFooter RightHeader;
		Excel::HeaderFooter get_RightHeader();
	};

	//________________________________________________________Pages
	// {000244A3-0000-0000-C000-000000000046}
	class Pages : public Com::Object
	{
	public:
		Pages();
		~Pages();
		Pages(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Pages& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		Excel::Page get_Item(_variant_t Index);
		Excel::Page get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ServerViewableItems
	// {000244A4-0000-0000-C000-000000000046}
	class ServerViewableItems : public Com::Object
	{
	public:
		ServerViewableItems();
		~ServerViewableItems();
		ServerViewableItems(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ServerViewableItems& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Com::Object Add(_variant_t Obj);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete(_variant_t Index);
		void DeleteAll();
		Com::Object Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Com::Object get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________TableStyleElement
	// {000244A5-0000-0000-C000-000000000046}
	class TableStyleElement : public Com::Object
	{
	public:
		TableStyleElement();
		~TableStyleElement();
		TableStyleElement(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TableStyleElement& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		void Clear();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_HasFormat)) bool HasFormat;
		bool get_HasFormat();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_StripeSize, put = put_StripeSize)) long StripeSize;
		long get_StripeSize();
		void put_StripeSize(long StripeSize);
	};

	//________________________________________________________TableStyleElements
	// {000244A6-0000-0000-C000-000000000046}
	class TableStyleElements : public Com::Object
	{
	public:
		TableStyleElements();
		~TableStyleElements();
		TableStyleElements(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TableStyleElements& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::TableStyleElement Item(Excel::XlTableStyleElementType Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::TableStyleElement get__Default(Excel::XlTableStyleElementType Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________TableStyle
	// {000244A7-0000-0000-C000-000000000046}
	class TableStyle : public Com::Object
	{
	public:
		TableStyle();
		~TableStyle();
		TableStyle(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TableStyle& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BuiltIn)) bool BuiltIn;
		bool get_BuiltIn();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		Excel::TableStyle Duplicate(_variant_t NewTableStyleName);
		Excel::TableStyle Duplicate();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_NameLocal)) wstring NameLocal;
		wstring get_NameLocal();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ShowAsAvailablePivotTableStyle, put = put_ShowAsAvailablePivotTableStyle)) bool ShowAsAvailablePivotTableStyle;
		bool get_ShowAsAvailablePivotTableStyle();
		void put_ShowAsAvailablePivotTableStyle(bool ShowAsAvailablePivotTableStyle);
		//
		__declspec(property(get = get_ShowAsAvailableSlicerStyle, put = put_ShowAsAvailableSlicerStyle)) bool ShowAsAvailableSlicerStyle;
		bool get_ShowAsAvailableSlicerStyle();
		void put_ShowAsAvailableSlicerStyle(bool ShowAsAvailableSlicerStyle);
		//
		__declspec(property(get = get_ShowAsAvailableTableStyle, put = put_ShowAsAvailableTableStyle)) bool ShowAsAvailableTableStyle;
		bool get_ShowAsAvailableTableStyle();
		void put_ShowAsAvailableTableStyle(bool ShowAsAvailableTableStyle);
		//
		__declspec(property(get = get_ShowAsAvailableTimelineStyle, put = put_ShowAsAvailableTimelineStyle)) bool ShowAsAvailableTimelineStyle;
		bool get_ShowAsAvailableTimelineStyle();
		void put_ShowAsAvailableTimelineStyle(bool ShowAsAvailableTimelineStyle);
		//
		__declspec(property(get = get_TableStyleElements)) Excel::TableStyleElements TableStyleElementsX;
		Excel::TableStyleElements get_TableStyleElements();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________TableStyles
	// {000244A8-0000-0000-C000-000000000046}
	class TableStyles : public Com::Object
	{
	public:
		TableStyles();
		~TableStyles();
		TableStyles(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TableStyles& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::TableStyle Add(wstring TableStyleName);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::TableStyle Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::TableStyle get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SortField
	// {000244A9-0000-0000-C000-000000000046}
	class SortField : public Com::Object
	{
	public:
		SortField();
		~SortField();
		SortField(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SortField& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CustomOrder, put = put_CustomOrder)) _variant_t CustomOrder;
		_variant_t get_CustomOrder();
		void put_CustomOrder(_variant_t CustomOrder);
		//
		__declspec(property(get = get_DataOption, put = put_DataOption)) Excel::XlSortDataOption DataOption;
		Excel::XlSortDataOption get_DataOption();
		void put_DataOption(Excel::XlSortDataOption DataOption);
		void Delete();
		//
		__declspec(property(get = get_Key)) Excel::Range Key;
		Excel::Range get_Key();
		void ModifyKey(Excel::Range& Key);
		//
		__declspec(property(get = get_Order, put = put_Order)) Excel::XlSortOrder Order;
		Excel::XlSortOrder get_Order();
		void put_Order(Excel::XlSortOrder Order);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Priority, put = put_Priority)) long Priority;
		long get_Priority();
		void put_Priority(long Priority);
		void SetIcon(Excel::Icon& Icon);
		//
		__declspec(property(get = get_SortOn, put = put_SortOn)) Excel::XlSortOn SortOn;
		Excel::XlSortOn get_SortOn();
		void put_SortOn(Excel::XlSortOn SortOn);
		//
		__declspec(property(get = get_SortOnValue)) Com::Object SortOnValue;
		Com::Object get_SortOnValue();
	};

	//________________________________________________________SortFields
	// {000244AA-0000-0000-C000-000000000046}
	class SortFields : public Com::Object
	{
	public:
		SortFields();
		~SortFields();
		SortFields(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SortFields& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::SortField Add(Excel::Range& Key, _variant_t SortOn, _variant_t Order, _variant_t CustomOrder, _variant_t DataOption);
		Excel::SortField Add(Excel::Range& Key);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Clear();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::SortField get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::SortField get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Sort
	// {000244AB-0000-0000-C000-000000000046}
	class Sort : public Com::Object
	{
	public:
		Sort();
		~Sort();
		Sort(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Sort& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Apply();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Header, put = put_Header)) Excel::XlYesNoGuess Header;
		Excel::XlYesNoGuess get_Header();
		void put_Header(Excel::XlYesNoGuess Header);
		//
		__declspec(property(get = get_MatchCase, put = put_MatchCase)) bool MatchCase;
		bool get_MatchCase();
		void put_MatchCase(bool MatchCase);
		//
		__declspec(property(get = get_Orientation, put = put_Orientation)) Excel::XlSortOrientation Orientation;
		Excel::XlSortOrientation get_Orientation();
		void put_Orientation(Excel::XlSortOrientation Orientation);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Rng)) Excel::Range Rng;
		Excel::Range get_Rng();
		void SetRange(Excel::Range& Rng);
		//
		__declspec(property(get = get_SortFields)) Excel::SortFields SortFieldsX;
		Excel::SortFields get_SortFields();
		//
		__declspec(property(get = get_SortMethod, put = put_SortMethod)) Excel::XlSortMethod SortMethod;
		Excel::XlSortMethod get_SortMethod();
		void put_SortMethod(Excel::XlSortMethod SortMethod);
	};

	//________________________________________________________Research
	// {000244AC-0000-0000-C000-000000000046}
	class Research : public Com::Object
	{
	public:
		Research();
		~Research();
		Research(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Research& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		bool IsResearchService(wstring ServiceID);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		_variant_t Query(wstring ServiceID, _variant_t QueryString, _variant_t QueryLanguage, _variant_t UseSelection, _variant_t LaunchQuery);
		_variant_t Query(wstring ServiceID);
		_variant_t SetLanguagePair(long LanguageFrom, long LanguageTo);
	};

	//________________________________________________________ColorStop
	// {000244AD-0000-0000-C000-000000000046}
	class ColorStop : public Com::Object
	{
	public:
		ColorStop();
		~ColorStop();
		ColorStop(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ColorStop& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Color, put = put_Color)) _variant_t Color;
		_variant_t get_Color();
		void put_Color(_variant_t Color);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Position, put = put_Position)) double Position;
		double get_Position();
		void put_Position(double Position);
		//
		__declspec(property(get = get_ThemeColor, put = put_ThemeColor)) long ThemeColor;
		long get_ThemeColor();
		void put_ThemeColor(long ThemeColor);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) _variant_t TintAndShade;
		_variant_t get_TintAndShade();
		void put_TintAndShade(_variant_t TintAndShade);
	};

	//________________________________________________________ColorStops
	// {000244AE-0000-0000-C000-000000000046}
	class ColorStops : public Com::Object
	{
	public:
		ColorStops();
		~ColorStops();
		ColorStops(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ColorStops& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ColorStop Add(double Position);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Clear();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ColorStop Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ColorStop get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________LinearGradient
	// {000244AF-0000-0000-C000-000000000046}
	class LinearGradient : public Com::Object
	{
	public:
		LinearGradient();
		~LinearGradient();
		LinearGradient(const Com::Object& init) { Com::Object::Private_Copy(init); }
		LinearGradient& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ColorStops)) Excel::ColorStops ColorStopsX;
		Excel::ColorStops get_ColorStops();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Degree, put = put_Degree)) double Degree;
		double get_Degree();
		void put_Degree(double Degree);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________RectangularGradient
	// {000244B0-0000-0000-C000-000000000046}
	class RectangularGradient : public Com::Object
	{
	public:
		RectangularGradient();
		~RectangularGradient();
		RectangularGradient(const Com::Object& init) { Com::Object::Private_Copy(init); }
		RectangularGradient& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ColorStops)) Excel::ColorStops ColorStopsX;
		Excel::ColorStops get_ColorStops();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RectangleBottom, put = put_RectangleBottom)) double RectangleBottom;
		double get_RectangleBottom();
		void put_RectangleBottom(double RectangleBottom);
		//
		__declspec(property(get = get_RectangleLeft, put = put_RectangleLeft)) double RectangleLeft;
		double get_RectangleLeft();
		void put_RectangleLeft(double RectangleLeft);
		//
		__declspec(property(get = get_RectangleRight, put = put_RectangleRight)) double RectangleRight;
		double get_RectangleRight();
		void put_RectangleRight(double RectangleRight);
		//
		__declspec(property(get = get_RectangleTop, put = put_RectangleTop)) double RectangleTop;
		double get_RectangleTop();
		void put_RectangleTop(double RectangleTop);
	};

	//________________________________________________________MultiThreadedCalculation
	// {000244B1-0000-0000-C000-000000000046}
	class MultiThreadedCalculation : public Com::Object
	{
	public:
		MultiThreadedCalculation();
		~MultiThreadedCalculation();
		MultiThreadedCalculation(const Com::Object& init) { Com::Object::Private_Copy(init); }
		MultiThreadedCalculation& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Enabled, put = put_Enabled)) bool Enabled;
		bool get_Enabled();
		void put_Enabled(bool Enabled);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ThreadCount, put = put_ThreadCount)) long ThreadCount;
		long get_ThreadCount();
		void put_ThreadCount(long ThreadCount);
		//
		__declspec(property(get = get_ThreadMode, put = put_ThreadMode)) Excel::XlThreadMode ThreadMode;
		Excel::XlThreadMode get_ThreadMode();
		void put_ThreadMode(Excel::XlThreadMode ThreadMode);
	};

	//________________________________________________________ChartFormat
	// {000244B2-0000-0000-C000-000000000046}
	class ChartFormat : public Com::Object
	{
	public:
		ChartFormat();
		~ChartFormat();
		ChartFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Adjustments)) Excel::Adjustments AdjustmentsX;
		Excel::Adjustments get_Adjustments();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AutoShapeType, put = put_AutoShapeType)) /* MsoAutoShapeType*/ short AutoShapeType;
		/* MsoAutoShapeType*/ short get_AutoShapeType();
		void put_AutoShapeType(/* MsoAutoShapeType*/ short AutoShapeType);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Fill)) Excel::FillFormat Fill;
		Excel::FillFormat get_Fill();
		//
		__declspec(property(get = get_Glow)) Com::Object Glow;
		Com::Object get_Glow();
		//
		__declspec(property(get = get_Line)) Excel::LineFormat LineX;
		Excel::LineFormat get_Line();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PictureFormat)) Excel::PictureFormat PictureFormatX;
		Excel::PictureFormat get_PictureFormat();
		//
		__declspec(property(get = get_Shadow)) Excel::ShadowFormat Shadow;
		Excel::ShadowFormat get_Shadow();
		//
		__declspec(property(get = get_SoftEdge)) Com::Object SoftEdge;
		Com::Object get_SoftEdge();
		//
		__declspec(property(get = get_TextFrame2)) Excel::TextFrame2 TextFrame2X;
		Excel::TextFrame2 get_TextFrame2();
		//
		__declspec(property(get = get_ThreeD)) Excel::ThreeDFormat ThreeD;
		Excel::ThreeDFormat get_ThreeD();
	};

	//________________________________________________________FileExportConverter
	// {000244B3-0000-0000-C000-000000000046}
	class FileExportConverter : public Com::Object
	{
	public:
		FileExportConverter();
		~FileExportConverter();
		FileExportConverter(const Com::Object& init) { Com::Object::Private_Copy(init); }
		FileExportConverter& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Description)) wstring Description;
		wstring get_Description();
		//
		__declspec(property(get = get_Extensions)) wstring Extensions;
		wstring get_Extensions();
		//
		__declspec(property(get = get_FileFormat)) long FileFormat;
		long get_FileFormat();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________FileExportConverters
	// {000244B4-0000-0000-C000-000000000046}
	class FileExportConverters : public Com::Object
	{
	public:
		FileExportConverters();
		~FileExportConverters();
		FileExportConverters(const Com::Object& init) { Com::Object::Private_Copy(init); }
		FileExportConverters& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::FileExportConverter get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::FileExportConverter get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________AddIns2
	// {000244B5-0000-0000-C000-000000000046}
	class AddIns2 : public Com::Object
	{
	public:
		AddIns2();
		~AddIns2();
		AddIns2(const Com::Object& init) { Com::Object::Private_Copy(init); }
		AddIns2& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::AddIn Add(wstring Filename, _variant_t CopyFile);
		Excel::AddIn Add(wstring Filename);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::AddIn get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::AddIn get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SparklineGroups
	// {000244B6-0000-0000-C000-000000000046}
	class SparklineGroups : public Com::Object
	{
	public:
		SparklineGroups();
		~SparklineGroups();
		SparklineGroups(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SparklineGroups& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::SparklineGroup Add(Excel::XlSparkType Type, wstring SourceData);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void Clear();
		void ClearGroups();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Group(Excel::Range& Location);
		Excel::SparklineGroup get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Ungroup();
		Excel::SparklineGroup get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SparklineGroup
	// {000244B7-0000-0000-C000-000000000046}
	class SparklineGroup : public Com::Object
	{
	public:
		SparklineGroup();
		~SparklineGroup();
		SparklineGroup(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SparklineGroup& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Axes)) Excel::SparkAxes AxesX;
		Excel::SparkAxes get_Axes();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DateRange, put = put_DateRange)) wstring DateRange;
		wstring get_DateRange();
		void put_DateRange(wstring DateRange);
		void Delete();
		//
		__declspec(property(get = get_DisplayBlanksAs, put = put_DisplayBlanksAs)) Excel::XlDisplayBlanksAs DisplayBlanksAs;
		Excel::XlDisplayBlanksAs get_DisplayBlanksAs();
		void put_DisplayBlanksAs(Excel::XlDisplayBlanksAs DisplayBlanksAs);
		//
		__declspec(property(get = get_DisplayHidden, put = put_DisplayHidden)) bool DisplayHidden;
		bool get_DisplayHidden();
		void put_DisplayHidden(bool DisplayHidden);
		Excel::Sparkline get_Item(_variant_t Index);
		//
		__declspec(property(get = get_LineWeight, put = put_LineWeight)) _variant_t LineWeight;
		_variant_t get_LineWeight();
		void put_LineWeight(_variant_t LineWeight);
		//
		__declspec(property(get = get_Location)) Excel::Range Location;
		Excel::Range get_Location();
		void put_Location(Excel::Range& Location);
		void Modify(Excel::Range& Location, wstring SourceData);
		void ModifyDateRange(wstring DateRange);
		void ModifyLocation(Excel::Range& Location);
		void ModifySourceData(wstring SourceData);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PlotBy, put = put_PlotBy)) Excel::XlSparklineRowCol PlotBy;
		Excel::XlSparklineRowCol get_PlotBy();
		void put_PlotBy(Excel::XlSparklineRowCol PlotBy);
		//
		__declspec(property(get = get_Points)) Excel::SparkPoints PointsX;
		Excel::SparkPoints get_Points();
		//
		__declspec(property(get = get_SeriesColor)) Excel::FormatColor SeriesColor;
		Excel::FormatColor get_SeriesColor();
		//
		__declspec(property(get = get_SourceData, put = put_SourceData)) wstring SourceData;
		wstring get_SourceData();
		void put_SourceData(wstring SourceData);
		//
		__declspec(property(get = get_Type, put = put_Type)) Excel::XlSparkType Type;
		Excel::XlSparkType get_Type();
		void put_Type(Excel::XlSparkType Type);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SparkPoints
	// {000244B8-0000-0000-C000-000000000046}
	class SparkPoints : public Com::Object
	{
	public:
		SparkPoints();
		~SparkPoints();
		SparkPoints(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SparkPoints& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Firstpoint)) Excel::SparkColor Firstpoint;
		Excel::SparkColor get_Firstpoint();
		//
		__declspec(property(get = get_Highpoint)) Excel::SparkColor Highpoint;
		Excel::SparkColor get_Highpoint();
		//
		__declspec(property(get = get_Lastpoint)) Excel::SparkColor Lastpoint;
		Excel::SparkColor get_Lastpoint();
		//
		__declspec(property(get = get_Lowpoint)) Excel::SparkColor Lowpoint;
		Excel::SparkColor get_Lowpoint();
		//
		__declspec(property(get = get_Markers)) Excel::SparkColor Markers;
		Excel::SparkColor get_Markers();
		//
		__declspec(property(get = get_Negative)) Excel::SparkColor Negative;
		Excel::SparkColor get_Negative();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________Sparkline
	// {000244B9-0000-0000-C000-000000000046}
	class Sparkline : public Com::Object
	{
	public:
		Sparkline();
		~Sparkline();
		Sparkline(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Sparkline& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Location)) Excel::Range Location;
		Excel::Range get_Location();
		void put_Location(Excel::Range& Location);
		void ModifyLocation(Excel::Range& Range);
		void ModifySourceData(wstring Formula);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_SourceData, put = put_SourceData)) wstring SourceData;
		wstring get_SourceData();
		void put_SourceData(wstring SourceData);
	};

	//________________________________________________________SparkAxes
	// {000244BA-0000-0000-C000-000000000046}
	class SparkAxes : public Com::Object
	{
	public:
		SparkAxes();
		~SparkAxes();
		SparkAxes(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SparkAxes& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Horizontal)) Excel::SparkHorizontalAxis Horizontal;
		Excel::SparkHorizontalAxis get_Horizontal();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Vertical)) Excel::SparkVerticalAxis Vertical;
		Excel::SparkVerticalAxis get_Vertical();
	};

	//________________________________________________________SparkHorizontalAxis
	// {000244BB-0000-0000-C000-000000000046}
	class SparkHorizontalAxis : public Com::Object
	{
	public:
		SparkHorizontalAxis();
		~SparkHorizontalAxis();
		SparkHorizontalAxis(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SparkHorizontalAxis& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Axis)) Excel::SparkColor AxisX;
		Excel::SparkColor get_Axis();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_IsDateAxis)) bool IsDateAxis;
		bool get_IsDateAxis();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RightToLeftPlotOrder, put = put_RightToLeftPlotOrder)) bool RightToLeftPlotOrder;
		bool get_RightToLeftPlotOrder();
		void put_RightToLeftPlotOrder(bool RightToLeftPlotOrder);
	};

	//________________________________________________________SparkVerticalAxis
	// {000244BC-0000-0000-C000-000000000046}
	class SparkVerticalAxis : public Com::Object
	{
	public:
		SparkVerticalAxis();
		~SparkVerticalAxis();
		SparkVerticalAxis(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SparkVerticalAxis& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CustomMaxScaleValue, put = put_CustomMaxScaleValue)) _variant_t CustomMaxScaleValue;
		_variant_t get_CustomMaxScaleValue();
		void put_CustomMaxScaleValue(_variant_t CustomMaxScaleValue);
		//
		__declspec(property(get = get_CustomMinScaleValue, put = put_CustomMinScaleValue)) _variant_t CustomMinScaleValue;
		_variant_t get_CustomMinScaleValue();
		void put_CustomMinScaleValue(_variant_t CustomMinScaleValue);
		//
		__declspec(property(get = get_MaxScaleType, put = put_MaxScaleType)) Excel::XlSparkScale MaxScaleType;
		Excel::XlSparkScale get_MaxScaleType();
		void put_MaxScaleType(Excel::XlSparkScale MaxScaleType);
		//
		__declspec(property(get = get_MinScaleType, put = put_MinScaleType)) Excel::XlSparkScale MinScaleType;
		Excel::XlSparkScale get_MinScaleType();
		void put_MinScaleType(Excel::XlSparkScale MinScaleType);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________SparkColor
	// {000244BD-0000-0000-C000-000000000046}
	class SparkColor : public Com::Object
	{
	public:
		SparkColor();
		~SparkColor();
		SparkColor(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SparkColor& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Color)) Excel::FormatColor Color;
		Excel::FormatColor get_Color();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
	};

	//________________________________________________________DataBarBorder
	// {000244BE-0000-0000-C000-000000000046}
	class DataBarBorder : public Com::Object
	{
	public:
		DataBarBorder();
		~DataBarBorder();
		DataBarBorder(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DataBarBorder& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Color)) Com::Object Color;
		Com::Object get_Color();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Type, put = put_Type)) Excel::XlDataBarBorderType Type;
		Excel::XlDataBarBorderType get_Type();
		void put_Type(Excel::XlDataBarBorderType Type);
	};

	//________________________________________________________NegativeBarFormat
	// {000244BF-0000-0000-C000-000000000046}
	class NegativeBarFormat : public Com::Object
	{
	public:
		NegativeBarFormat();
		~NegativeBarFormat();
		NegativeBarFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		NegativeBarFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_BorderColor)) Com::Object BorderColor;
		Com::Object get_BorderColor();
		//
		__declspec(property(get = get_BorderColorType, put = put_BorderColorType)) Excel::XlDataBarNegativeColorType BorderColorType;
		Excel::XlDataBarNegativeColorType get_BorderColorType();
		void put_BorderColorType(Excel::XlDataBarNegativeColorType BorderColorType);
		//
		__declspec(property(get = get_Color)) Com::Object Color;
		Com::Object get_Color();
		//
		__declspec(property(get = get_ColorType, put = put_ColorType)) Excel::XlDataBarNegativeColorType ColorType;
		Excel::XlDataBarNegativeColorType get_ColorType();
		void put_ColorType(Excel::XlDataBarNegativeColorType ColorType);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________ValueChange
	// {000244C0-0000-0000-C000-000000000046}
	class ValueChange : public Com::Object
	{
	public:
		ValueChange();
		~ValueChange();
		ValueChange(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ValueChange& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AllocationMethod)) Excel::XlAllocationMethod AllocationMethod;
		Excel::XlAllocationMethod get_AllocationMethod();
		//
		__declspec(property(get = get_AllocationValue)) Excel::XlAllocationValue AllocationValue;
		Excel::XlAllocationValue get_AllocationValue();
		//
		__declspec(property(get = get_AllocationWeightExpression)) wstring AllocationWeightExpression;
		wstring get_AllocationWeightExpression();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Order)) long Order;
		long get_Order();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotCell)) Excel::PivotCell PivotCellX;
		Excel::PivotCell get_PivotCell();
		//
		__declspec(property(get = get_Tuple)) wstring Tuple;
		wstring get_Tuple();
		//
		__declspec(property(get = get_Value)) double Value;
		double get_Value();
		//
		__declspec(property(get = get_VisibleInPivotTable)) bool VisibleInPivotTable;
		bool get_VisibleInPivotTable();
	};

	//________________________________________________________PivotTableChangeList
	// {000244C1-0000-0000-C000-000000000046}
	class PivotTableChangeList : public Com::Object
	{
	public:
		PivotTableChangeList();
		~PivotTableChangeList();
		PivotTableChangeList(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotTableChangeList& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ValueChange Add(wstring Tuple, double Value, _variant_t AllocationValue, _variant_t AllocationMethod, _variant_t AllocationWeightExpression);
		Excel::ValueChange Add(wstring Tuple, double Value);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ValueChange get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ValueChange get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________DisplayFormat
	// {000244C2-0000-0000-C000-000000000046}
	class DisplayFormat : public Com::Object
	{
	public:
		DisplayFormat();
		~DisplayFormat();
		DisplayFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DisplayFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AddIndent)) _variant_t AddIndent;
		_variant_t get_AddIndent();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Borders)) Excel::Borders BordersX;
		Excel::Borders get_Borders();
		Excel::Characters get_Characters(_variant_t Start, _variant_t Length);
		Excel::Characters get_Characters();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Font)) Excel::Font FontX;
		Excel::Font get_Font();
		//
		__declspec(property(get = get_FormulaHidden)) _variant_t FormulaHidden;
		_variant_t get_FormulaHidden();
		//
		__declspec(property(get = get_HorizontalAlignment)) _variant_t HorizontalAlignment;
		_variant_t get_HorizontalAlignment();
		//
		__declspec(property(get = get_IndentLevel)) _variant_t IndentLevel;
		_variant_t get_IndentLevel();
		//
		__declspec(property(get = get_Interior)) Excel::Interior InteriorX;
		Excel::Interior get_Interior();
		//
		__declspec(property(get = get_Locked)) _variant_t Locked;
		_variant_t get_Locked();
		//
		__declspec(property(get = get_MergeCells)) _variant_t MergeCells;
		_variant_t get_MergeCells();
		//
		__declspec(property(get = get_NumberFormat)) _variant_t NumberFormat;
		_variant_t get_NumberFormat();
		//
		__declspec(property(get = get_NumberFormatLocal)) _variant_t NumberFormatLocal;
		_variant_t get_NumberFormatLocal();
		//
		__declspec(property(get = get_Orientation)) _variant_t Orientation;
		_variant_t get_Orientation();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ReadingOrder)) long ReadingOrder;
		long get_ReadingOrder();
		//
		__declspec(property(get = get_ShrinkToFit)) _variant_t ShrinkToFit;
		_variant_t get_ShrinkToFit();
		//
		__declspec(property(get = get_Style)) _variant_t StyleX;
		_variant_t get_Style();
		//
		__declspec(property(get = get_VerticalAlignment)) _variant_t VerticalAlignment;
		_variant_t get_VerticalAlignment();
		//
		__declspec(property(get = get_WrapText)) _variant_t WrapText;
		_variant_t get_WrapText();
	};

	//________________________________________________________SlicerCaches
	// {000244C3-0000-0000-C000-000000000046}
	class SlicerCaches : public Com::Object
	{
	public:
		SlicerCaches();
		~SlicerCaches();
		SlicerCaches(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SlicerCaches& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::SlicerCache Add(_variant_t Source, _variant_t SourceField, _variant_t Name);
		Excel::SlicerCache Add(_variant_t Source, _variant_t SourceField);
		Excel::SlicerCache Add2(_variant_t Source, _variant_t SourceField, _variant_t Name, _variant_t SlicerCacheType);
		Excel::SlicerCache Add2(_variant_t Source, _variant_t SourceField);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::SlicerCache get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::SlicerCache get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SlicerCache
	// {000244C4-0000-0000-C000-000000000046}
	class SlicerCache : public Com::Object
	{
	public:
		SlicerCache();
		~SlicerCache();
		SlicerCache(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SlicerCache& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void ClearAllFilters();
		void ClearDateFilter();
		void ClearManualFilter();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CrossFilterType, put = put_CrossFilterType)) Excel::XlSlicerCrossFilterType CrossFilterType;
		Excel::XlSlicerCrossFilterType get_CrossFilterType();
		void put_CrossFilterType(Excel::XlSlicerCrossFilterType CrossFilterType);
		void Delete();
		//
		__declspec(property(get = get_FilterCleared)) bool FilterCleared;
		bool get_FilterCleared();
		//
		__declspec(property(get = get_Index)) long Index;
		long get_Index();
		//
		__declspec(property(get = get_List)) bool List;
		bool get_List();
		//
		__declspec(property(get = get_ListObject)) Excel::ListObject ListObjectX;
		Excel::ListObject get_ListObject();
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_OLAP)) bool OLAP;
		bool get_OLAP();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotTables)) Excel::SlicerPivotTables PivotTablesX;
		Excel::SlicerPivotTables get_PivotTables();
		//
		__declspec(property(get = get_RequireManualUpdate, put = put_RequireManualUpdate)) bool RequireManualUpdate;
		bool get_RequireManualUpdate();
		void put_RequireManualUpdate(bool RequireManualUpdate);
		//
		__declspec(property(get = get_ShowAllItems, put = put_ShowAllItems)) bool ShowAllItems;
		bool get_ShowAllItems();
		void put_ShowAllItems(bool ShowAllItems);
		//
		__declspec(property(get = get_SlicerCacheLevels)) Excel::SlicerCacheLevels SlicerCacheLevelsX;
		Excel::SlicerCacheLevels get_SlicerCacheLevels();
		//
		__declspec(property(get = get_SlicerCacheType)) Excel::XlSlicerCacheType SlicerCacheType;
		Excel::XlSlicerCacheType get_SlicerCacheType();
		//
		__declspec(property(get = get_SlicerItems)) Excel::SlicerItems SlicerItemsX;
		Excel::SlicerItems get_SlicerItems();
		//
		__declspec(property(get = get_Slicers)) Excel::Slicers SlicersX;
		Excel::Slicers get_Slicers();
		//
		__declspec(property(get = get_SortItems, put = put_SortItems)) Excel::XlSlicerSort SortItems;
		Excel::XlSlicerSort get_SortItems();
		void put_SortItems(Excel::XlSlicerSort SortItems);
		//
		__declspec(property(get = get_SortUsingCustomLists, put = put_SortUsingCustomLists)) bool SortUsingCustomLists;
		bool get_SortUsingCustomLists();
		void put_SortUsingCustomLists(bool SortUsingCustomLists);
		//
		__declspec(property(get = get_SourceName)) wstring SourceName;
		wstring get_SourceName();
		//
		__declspec(property(get = get_SourceType)) Excel::XlPivotTableSourceType SourceType;
		Excel::XlPivotTableSourceType get_SourceType();
		//
		__declspec(property(get = get_TimelineState)) Excel::TimelineState TimelineStateX;
		Excel::TimelineState get_TimelineState();
		//
		__declspec(property(get = get_VisibleSlicerItems)) Excel::SlicerItems VisibleSlicerItems;
		Excel::SlicerItems get_VisibleSlicerItems();
		//
		__declspec(property(get = get_VisibleSlicerItemsList, put = put_VisibleSlicerItemsList)) _variant_t VisibleSlicerItemsList;
		_variant_t get_VisibleSlicerItemsList();
		void put_VisibleSlicerItemsList(_variant_t VisibleSlicerItemsList);
		//
		__declspec(property(get = get_WorkbookConnection)) Excel::WorkbookConnection WorkbookConnectionX;
		Excel::WorkbookConnection get_WorkbookConnection();
	};

	//________________________________________________________SlicerCacheLevels
	// {000244C5-0000-0000-C000-000000000046}
	class SlicerCacheLevels : public Com::Object
	{
	public:
		SlicerCacheLevels();
		~SlicerCacheLevels();
		SlicerCacheLevels(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SlicerCacheLevels& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::SlicerCacheLevel get_Item(_variant_t Level);
		Excel::SlicerCacheLevel get_Item();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::SlicerCacheLevel get__Default(_variant_t Level);
		Excel::SlicerCacheLevel get__Default();
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SlicerCacheLevel
	// {000244C6-0000-0000-C000-000000000046}
	class SlicerCacheLevel : public Com::Object
	{
	public:
		SlicerCacheLevel();
		~SlicerCacheLevel();
		SlicerCacheLevel(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SlicerCacheLevel& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_CrossFilterType, put = put_CrossFilterType)) Excel::XlSlicerCrossFilterType CrossFilterType;
		Excel::XlSlicerCrossFilterType get_CrossFilterType();
		void put_CrossFilterType(Excel::XlSlicerCrossFilterType CrossFilterType);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Ordinal)) long Ordinal;
		long get_Ordinal();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_SlicerItems)) Excel::SlicerItems SlicerItemsX;
		Excel::SlicerItems get_SlicerItems();
		//
		__declspec(property(get = get_SortItems, put = put_SortItems)) Excel::XlSlicerSort SortItems;
		Excel::XlSlicerSort get_SortItems();
		void put_SortItems(Excel::XlSlicerSort SortItems);
		//
		__declspec(property(get = get_VisibleSlicerItemsList)) _variant_t VisibleSlicerItemsList;
		_variant_t get_VisibleSlicerItemsList();
	};

	//________________________________________________________Slicers
	// {000244C7-0000-0000-C000-000000000046}
	class Slicers : public Com::Object
	{
	public:
		Slicers();
		~Slicers();
		Slicers(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Slicers& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::Slicer Add(_variant_t SlicerDestination, _variant_t Level, _variant_t Name, _variant_t Caption, _variant_t Top, _variant_t Left, _variant_t Width, _variant_t Height);
		Excel::Slicer Add(_variant_t SlicerDestination);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Slicer get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Slicer get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Slicer
	// {000244C8-0000-0000-C000-000000000046}
	class Slicer : public Com::Object
	{
	public:
		Slicer();
		~Slicer();
		Slicer(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Slicer& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_ActiveItem)) Excel::SlicerItem ActiveItem;
		Excel::SlicerItem get_ActiveItem();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		//
		__declspec(property(get = get_ColumnWidth, put = put_ColumnWidth)) double ColumnWidth;
		double get_ColumnWidth();
		void put_ColumnWidth(double ColumnWidth);
		void Copy();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Cut();
		void Delete();
		//
		__declspec(property(get = get_DisableMoveResizeUI, put = put_DisableMoveResizeUI)) bool DisableMoveResizeUI;
		bool get_DisableMoveResizeUI();
		void put_DisableMoveResizeUI(bool DisableMoveResizeUI);
		//
		__declspec(property(get = get_DisplayHeader, put = put_DisplayHeader)) bool DisplayHeader;
		bool get_DisplayHeader();
		void put_DisplayHeader(bool DisplayHeader);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_Locked, put = put_Locked)) bool Locked;
		bool get_Locked();
		void put_Locked(bool Locked);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_NumberOfColumns, put = put_NumberOfColumns)) long NumberOfColumns;
		long get_NumberOfColumns();
		void put_NumberOfColumns(long NumberOfColumns);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RowHeight, put = put_RowHeight)) double RowHeight;
		double get_RowHeight();
		void put_RowHeight(double RowHeight);
		//
		__declspec(property(get = get_Shape)) Excel::Shape ShapeX;
		Excel::Shape get_Shape();
		//
		__declspec(property(get = get_SlicerCache)) Excel::SlicerCache SlicerCacheX;
		Excel::SlicerCache get_SlicerCache();
		//
		__declspec(property(get = get_SlicerCacheLevel)) Excel::SlicerCacheLevel SlicerCacheLevelX;
		Excel::SlicerCacheLevel get_SlicerCacheLevel();
		//
		__declspec(property(get = get_SlicerCacheType)) Excel::XlSlicerCacheType SlicerCacheType;
		Excel::XlSlicerCacheType get_SlicerCacheType();
		//
		__declspec(property(get = get_Style, put = put_Style)) _variant_t StyleX;
		_variant_t get_Style();
		void put_Style(_variant_t Style);
		//
		__declspec(property(get = get_TimelineViewState)) Excel::TimelineViewState TimelineViewStateX;
		Excel::TimelineViewState get_TimelineViewState();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
	};

	//________________________________________________________SlicerItem
	// {000244C9-0000-0000-C000-000000000046}
	class SlicerItem : public Com::Object
	{
	public:
		SlicerItem();
		~SlicerItem();
		SlicerItem(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SlicerItem& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Caption)) wstring Caption;
		wstring get_Caption();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_HasData)) bool HasData;
		bool get_HasData();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Excel::SlicerCache Parent;
		Excel::SlicerCache get_Parent();
		//
		__declspec(property(get = get_Selected, put = put_Selected)) bool Selected;
		bool get_Selected();
		void put_Selected(bool Selected);
		//
		__declspec(property(get = get_SourceName)) _variant_t SourceName;
		_variant_t get_SourceName();
		//
		__declspec(property(get = get_SourceNameStandard)) wstring SourceNameStandard;
		wstring get_SourceNameStandard();
		//
		__declspec(property(get = get_Value)) wstring Value;
		wstring get_Value();
	};

	//________________________________________________________SlicerItems
	// {000244CA-0000-0000-C000-000000000046}
	class SlicerItems : public Com::Object
	{
	public:
		SlicerItems();
		~SlicerItems();
		SlicerItems(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SlicerItems& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::SlicerItem get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::SlicerItem get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________SlicerPivotTables
	// {000244CB-0000-0000-C000-000000000046}
	class SlicerPivotTables : public Com::Object
	{
	public:
		SlicerPivotTables();
		~SlicerPivotTables();
		SlicerPivotTables(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SlicerPivotTables& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void AddPivotTable(Excel::PivotTable& PivotTable);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PivotTable get_Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void RemovePivotTable(_variant_t PivotTable);
		Excel::PivotTable get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ProtectedViewWindows
	// {000244CC-0000-0000-C000-000000000046}
	class ProtectedViewWindows : public Com::Object
	{
	public:
		ProtectedViewWindows();
		~ProtectedViewWindows();
		ProtectedViewWindows(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ProtectedViewWindows& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ProtectedViewWindow get_Item(_variant_t Index);
		Excel::ProtectedViewWindow Open(wstring Filename, _variant_t Password, _variant_t AddToMru, _variant_t RepairMode);
		Excel::ProtectedViewWindow Open(wstring Filename);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ProtectedViewWindow get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ProtectedViewWindow
	// {000244CD-0000-0000-C000-000000000046}
	class ProtectedViewWindow : public Com::Object
	{
	public:
		ProtectedViewWindow();
		~ProtectedViewWindow();
		ProtectedViewWindow(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ProtectedViewWindow& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		void Activate();
		//
		__declspec(property(get = get_Caption, put = put_Caption)) wstring Caption;
		wstring get_Caption();
		void put_Caption(wstring Caption);
		bool Close();
		Excel::WorkbookX Edit(_variant_t WriteResPassword, _variant_t UpdateLinks);
		Excel::WorkbookX Edit();
		//
		__declspec(property(get = get_EnableResize, put = put_EnableResize)) bool EnableResize;
		bool get_EnableResize();
		void put_EnableResize(bool EnableResize);
		//
		__declspec(property(get = get_Height, put = put_Height)) double Height;
		double get_Height();
		void put_Height(double Height);
		//
		__declspec(property(get = get_Left, put = put_Left)) double Left;
		double get_Left();
		void put_Left(double Left);
		//
		__declspec(property(get = get_SourceName)) wstring SourceName;
		wstring get_SourceName();
		//
		__declspec(property(get = get_SourcePath)) wstring SourcePath;
		wstring get_SourcePath();
		//
		__declspec(property(get = get_Top, put = put_Top)) double Top;
		double get_Top();
		void put_Top(double Top);
		//
		__declspec(property(get = get_Visible, put = put_Visible)) bool Visible;
		bool get_Visible();
		void put_Visible(bool Visible);
		//
		__declspec(property(get = get_Width, put = put_Width)) double Width;
		double get_Width();
		void put_Width(double Width);
		//
		__declspec(property(get = get_WindowState, put = put_WindowState)) Excel::XlProtectedViewWindowState WindowState;
		Excel::XlProtectedViewWindowState get_WindowState();
		void put_WindowState(Excel::XlProtectedViewWindowState WindowState);
		//
		__declspec(property(get = get_Workbook)) Excel::WorkbookX Workbook;
		Excel::WorkbookX get_Workbook();
		//
		__declspec(property(get = get__Default)) wstring _Default;
		wstring get__Default();
	};

	//________________________________________________________TableObject
	// {000244CE-0000-0000-C000-000000000046}
	class TableObject : public Com::Object
	{
	public:
		TableObject();
		~TableObject();
		TableObject(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TableObject& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AdjustColumnWidth, put = put_AdjustColumnWidth)) bool AdjustColumnWidth;
		bool get_AdjustColumnWidth();
		void put_AdjustColumnWidth(bool AdjustColumnWidth);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Destination)) Excel::Range Destination;
		Excel::Range get_Destination();
		//
		__declspec(property(get = get_EnableEditing, put = put_EnableEditing)) bool EnableEditing;
		bool get_EnableEditing();
		void put_EnableEditing(bool EnableEditing);
		//
		__declspec(property(get = get_EnableRefresh, put = put_EnableRefresh)) bool EnableRefresh;
		bool get_EnableRefresh();
		void put_EnableRefresh(bool EnableRefresh);
		//
		__declspec(property(get = get_FetchedRowOverflow)) bool FetchedRowOverflow;
		bool get_FetchedRowOverflow();
		//
		__declspec(property(get = get_ListObject)) Excel::ListObject ListObjectX;
		Excel::ListObject get_ListObject();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PreserveColumnInfo, put = put_PreserveColumnInfo)) bool PreserveColumnInfo;
		bool get_PreserveColumnInfo();
		void put_PreserveColumnInfo(bool PreserveColumnInfo);
		//
		__declspec(property(get = get_PreserveFormatting, put = put_PreserveFormatting)) bool PreserveFormatting;
		bool get_PreserveFormatting();
		void put_PreserveFormatting(bool PreserveFormatting);
		bool Refresh();
		//
		__declspec(property(get = get_RefreshStyle, put = put_RefreshStyle)) Excel::XlCellInsertionMode RefreshStyle;
		Excel::XlCellInsertionMode get_RefreshStyle();
		void put_RefreshStyle(Excel::XlCellInsertionMode RefreshStyle);
		//
		__declspec(property(get = get_ResultRange)) Excel::Range ResultRange;
		Excel::Range get_ResultRange();
		//
		__declspec(property(get = get_RowNumbers, put = put_RowNumbers)) bool RowNumbers;
		bool get_RowNumbers();
		void put_RowNumbers(bool RowNumbers);
		//
		__declspec(property(get = get_WorkbookConnection)) Excel::WorkbookConnection WorkbookConnectionX;
		Excel::WorkbookConnection get_WorkbookConnection();
	};

	//________________________________________________________PivotValueCell
	// {000244CF-0000-0000-C000-000000000046}
	class PivotValueCell : public Com::Object
	{
	public:
		PivotValueCell();
		~PivotValueCell();
		PivotValueCell(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PivotValueCell& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PivotCell)) Excel::PivotCell PivotCellX;
		Excel::PivotCell get_PivotCell();
		//
		__declspec(property(get = get_ServerActions)) Excel::Actions ServerActions;
		Excel::Actions get_ServerActions();
		void ShowDetail();
		//
		__declspec(property(get = get_Value)) _variant_t Value;
		_variant_t get_Value();
	};

	//________________________________________________________QuickAnalysis
	// {000244D0-0000-0000-C000-000000000046}
	class QuickAnalysis : public Com::Object
	{
	public:
		QuickAnalysis();
		~QuickAnalysis();
		QuickAnalysis(const Com::Object& init) { Com::Object::Private_Copy(init); }
		QuickAnalysis& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Hide(Excel::XlQuickAnalysisMode XlQuickAnalysisMode);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Show(Excel::XlQuickAnalysisMode XlQuickAnalysisMode);
	};

	//________________________________________________________ModelConnection
	// {000244D1-0000-0000-C000-000000000046}
	class ModelConnection : public Com::Object
	{
	public:
		ModelConnection();
		~ModelConnection();
		ModelConnection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelConnection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_ADOConnection)) Com::Object ADOConnection;
		Com::Object get_ADOConnection();
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CalculatedMembers)) Excel::CalculatedMembers CalculatedMembersX;
		Excel::CalculatedMembers get_CalculatedMembers();
		//
		__declspec(property(get = get_CommandText, put = put_CommandText)) _variant_t CommandText;
		_variant_t get_CommandText();
		void put_CommandText(_variant_t CommandText);
		//
		__declspec(property(get = get_CommandType, put = put_CommandType)) Excel::XlCmdType CommandType;
		Excel::XlCmdType get_CommandType();
		void put_CommandType(Excel::XlCmdType CommandType);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________WorksheetDataConnection
	// {000244D2-0000-0000-C000-000000000046}
	class WorksheetDataConnection : public Com::Object
	{
	public:
		WorksheetDataConnection();
		~WorksheetDataConnection();
		WorksheetDataConnection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WorksheetDataConnection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CommandText, put = put_CommandText)) _variant_t CommandText;
		_variant_t get_CommandText();
		void put_CommandText(_variant_t CommandText);
		//
		__declspec(property(get = get_CommandType, put = put_CommandType)) Excel::XlCmdType CommandType;
		Excel::XlCmdType get_CommandType();
		void put_CommandType(Excel::XlCmdType CommandType);
		//
		__declspec(property(get = get_Connection)) _variant_t Connection;
		_variant_t get_Connection();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________TextConnection
	// {000244D3-0000-0000-C000-000000000046}
	class TextConnection : public Com::Object
	{
	public:
		TextConnection();
		~TextConnection();
		TextConnection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TextConnection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Connection, put = put_Connection)) _variant_t Connection;
		_variant_t get_Connection();
		void put_Connection(_variant_t Connection);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_TextFileColumnDataTypes, put = put_TextFileColumnDataTypes)) _variant_t TextFileColumnDataTypes;
		_variant_t get_TextFileColumnDataTypes();
		void put_TextFileColumnDataTypes(_variant_t TextFileColumnDataTypes);
		//
		__declspec(property(get = get_TextFileCommaDelimiter, put = put_TextFileCommaDelimiter)) bool TextFileCommaDelimiter;
		bool get_TextFileCommaDelimiter();
		void put_TextFileCommaDelimiter(bool TextFileCommaDelimiter);
		//
		__declspec(property(get = get_TextFileConsecutiveDelimiter, put = put_TextFileConsecutiveDelimiter)) bool TextFileConsecutiveDelimiter;
		bool get_TextFileConsecutiveDelimiter();
		void put_TextFileConsecutiveDelimiter(bool TextFileConsecutiveDelimiter);
		//
		__declspec(property(get = get_TextFileDecimalSeparator, put = put_TextFileDecimalSeparator)) wstring TextFileDecimalSeparator;
		wstring get_TextFileDecimalSeparator();
		void put_TextFileDecimalSeparator(wstring TextFileDecimalSeparator);
		//
		__declspec(property(get = get_TextFileFixedColumnWidths, put = put_TextFileFixedColumnWidths)) _variant_t TextFileFixedColumnWidths;
		_variant_t get_TextFileFixedColumnWidths();
		void put_TextFileFixedColumnWidths(_variant_t TextFileFixedColumnWidths);
		//
		__declspec(property(get = get_TextFileHeaderRow, put = put_TextFileHeaderRow)) bool TextFileHeaderRow;
		bool get_TextFileHeaderRow();
		void put_TextFileHeaderRow(bool TextFileHeaderRow);
		//
		__declspec(property(get = get_TextFileOtherDelimiter, put = put_TextFileOtherDelimiter)) wstring TextFileOtherDelimiter;
		wstring get_TextFileOtherDelimiter();
		void put_TextFileOtherDelimiter(wstring TextFileOtherDelimiter);
		//
		__declspec(property(get = get_TextFileParseType, put = put_TextFileParseType)) Excel::XlTextParsingType TextFileParseType;
		Excel::XlTextParsingType get_TextFileParseType();
		void put_TextFileParseType(Excel::XlTextParsingType TextFileParseType);
		//
		__declspec(property(get = get_TextFilePlatform, put = put_TextFilePlatform)) Excel::XlPlatform TextFilePlatform;
		Excel::XlPlatform get_TextFilePlatform();
		void put_TextFilePlatform(Excel::XlPlatform TextFilePlatform);
		//
		__declspec(property(get = get_TextFilePromptOnRefresh, put = put_TextFilePromptOnRefresh)) bool TextFilePromptOnRefresh;
		bool get_TextFilePromptOnRefresh();
		void put_TextFilePromptOnRefresh(bool TextFilePromptOnRefresh);
		//
		__declspec(property(get = get_TextFileSemicolonDelimiter, put = put_TextFileSemicolonDelimiter)) bool TextFileSemicolonDelimiter;
		bool get_TextFileSemicolonDelimiter();
		void put_TextFileSemicolonDelimiter(bool TextFileSemicolonDelimiter);
		//
		__declspec(property(get = get_TextFileSpaceDelimiter, put = put_TextFileSpaceDelimiter)) bool TextFileSpaceDelimiter;
		bool get_TextFileSpaceDelimiter();
		void put_TextFileSpaceDelimiter(bool TextFileSpaceDelimiter);
		//
		__declspec(property(get = get_TextFileStartRow, put = put_TextFileStartRow)) long TextFileStartRow;
		long get_TextFileStartRow();
		void put_TextFileStartRow(long TextFileStartRow);
		//
		__declspec(property(get = get_TextFileTabDelimiter, put = put_TextFileTabDelimiter)) bool TextFileTabDelimiter;
		bool get_TextFileTabDelimiter();
		void put_TextFileTabDelimiter(bool TextFileTabDelimiter);
		//
		__declspec(property(get = get_TextFileTextQualifier, put = put_TextFileTextQualifier)) Excel::XlTextQualifier TextFileTextQualifier;
		Excel::XlTextQualifier get_TextFileTextQualifier();
		void put_TextFileTextQualifier(Excel::XlTextQualifier TextFileTextQualifier);
		//
		__declspec(property(get = get_TextFileThousandsSeparator, put = put_TextFileThousandsSeparator)) wstring TextFileThousandsSeparator;
		wstring get_TextFileThousandsSeparator();
		void put_TextFileThousandsSeparator(wstring TextFileThousandsSeparator);
		//
		__declspec(property(get = get_TextFileTrailingMinusNumbers, put = put_TextFileTrailingMinusNumbers)) bool TextFileTrailingMinusNumbers;
		bool get_TextFileTrailingMinusNumbers();
		void put_TextFileTrailingMinusNumbers(bool TextFileTrailingMinusNumbers);
		//
		__declspec(property(get = get_TextFileVisualLayout, put = put_TextFileVisualLayout)) Excel::XlTextVisualLayoutType TextFileVisualLayout;
		Excel::XlTextVisualLayoutType get_TextFileVisualLayout();
		void put_TextFileVisualLayout(Excel::XlTextVisualLayoutType TextFileVisualLayout);
	};

	//________________________________________________________DataFeedConnection
	// {000244D4-0000-0000-C000-000000000046}
	class DataFeedConnection : public Com::Object
	{
	public:
		DataFeedConnection();
		~DataFeedConnection();
		DataFeedConnection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DataFeedConnection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AlwaysUseConnectionFile, put = put_AlwaysUseConnectionFile)) bool AlwaysUseConnectionFile;
		bool get_AlwaysUseConnectionFile();
		void put_AlwaysUseConnectionFile(bool AlwaysUseConnectionFile);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		void CancelRefresh();
		//
		__declspec(property(get = get_CommandText, put = put_CommandText)) _variant_t CommandText;
		_variant_t get_CommandText();
		void put_CommandText(_variant_t CommandText);
		//
		__declspec(property(get = get_CommandType, put = put_CommandType)) Excel::XlCmdType CommandType;
		Excel::XlCmdType get_CommandType();
		void put_CommandType(Excel::XlCmdType CommandType);
		//
		__declspec(property(get = get_Connection, put = put_Connection)) _variant_t Connection;
		_variant_t get_Connection();
		void put_Connection(_variant_t Connection);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_EnableRefresh, put = put_EnableRefresh)) bool EnableRefresh;
		bool get_EnableRefresh();
		void put_EnableRefresh(bool EnableRefresh);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Refresh();
		//
		__declspec(property(get = get_RefreshDate)) Sys::Time RefreshDate;
		Sys::Time get_RefreshDate();
		//
		__declspec(property(get = get_RefreshOnFileOpen, put = put_RefreshOnFileOpen)) bool RefreshOnFileOpen;
		bool get_RefreshOnFileOpen();
		void put_RefreshOnFileOpen(bool RefreshOnFileOpen);
		//
		__declspec(property(get = get_RefreshPeriod, put = put_RefreshPeriod)) long RefreshPeriod;
		long get_RefreshPeriod();
		void put_RefreshPeriod(long RefreshPeriod);
		//
		__declspec(property(get = get_Refreshing)) bool Refreshing;
		bool get_Refreshing();
		void SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords);
		void SaveAsODC(wstring ODCFileName);
		//
		__declspec(property(get = get_SavePassword, put = put_SavePassword)) bool SavePassword;
		bool get_SavePassword();
		void put_SavePassword(bool SavePassword);
		//
		__declspec(property(get = get_ServerCredentialsMethod, put = put_ServerCredentialsMethod)) Excel::XlCredentialsMethod ServerCredentialsMethod;
		Excel::XlCredentialsMethod get_ServerCredentialsMethod();
		void put_ServerCredentialsMethod(Excel::XlCredentialsMethod ServerCredentialsMethod);
		//
		__declspec(property(get = get_SourceConnectionFile, put = put_SourceConnectionFile)) wstring SourceConnectionFile;
		wstring get_SourceConnectionFile();
		void put_SourceConnectionFile(wstring SourceConnectionFile);
		//
		__declspec(property(get = get_SourceDataFile, put = put_SourceDataFile)) wstring SourceDataFile;
		wstring get_SourceDataFile();
		void put_SourceDataFile(wstring SourceDataFile);
	};

	//________________________________________________________ModelTableColumn
	// {000244D5-0000-0000-C000-000000000046}
	class ModelTableColumn : public Com::Object
	{
	public:
		ModelTableColumn();
		~ModelTableColumn();
		ModelTableColumn(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelTableColumn& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataType)) long DataType;
		long get_DataType();
		void Dummy1(wstring NewName);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________ModelTableColumns
	// {000244D6-0000-0000-C000-000000000046}
	class ModelTableColumns : public Com::Object
	{
	public:
		ModelTableColumns();
		~ModelTableColumns();
		ModelTableColumns(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelTableColumns& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ModelTableColumn Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ModelTableColumn get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ModelTable
	// {000244D7-0000-0000-C000-000000000046}
	class ModelTable : public Com::Object
	{
	public:
		ModelTable();
		~ModelTable();
		ModelTable(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelTable& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Dummy1(wstring NewName);
		//
		__declspec(property(get = get_ModelTableColumns)) Excel::ModelTableColumns ModelTableColumnsX;
		Excel::ModelTableColumns get_ModelTableColumns();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RecordCount)) long RecordCount;
		long get_RecordCount();
		void Refresh();
		//
		__declspec(property(get = get_SourceName)) wstring SourceName;
		wstring get_SourceName();
		//
		__declspec(property(get = get_SourceWorkbookConnection)) Excel::WorkbookConnection SourceWorkbookConnection;
		Excel::WorkbookConnection get_SourceWorkbookConnection();
		void _Dummy7();
	};

	//________________________________________________________ModelTables
	// {000244D8-0000-0000-C000-000000000046}
	class ModelTables : public Com::Object
	{
	public:
		ModelTables();
		~ModelTables();
		ModelTables(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelTables& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ModelTable Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ModelTable get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ModelRelationship
	// {000244D9-0000-0000-C000-000000000046}
	class ModelRelationship : public Com::Object
	{
	public:
		ModelRelationship();
		~ModelRelationship();
		ModelRelationship(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelRelationship& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Active, put = put_Active)) bool Active;
		bool get_Active();
		void put_Active(bool Active);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_ForeignKeyColumn)) Excel::ModelTableColumn ForeignKeyColumn;
		Excel::ModelTableColumn get_ForeignKeyColumn();
		//
		__declspec(property(get = get_ForeignKeyTable)) Excel::ModelTable ForeignKeyTable;
		Excel::ModelTable get_ForeignKeyTable();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PrimaryKeyColumn)) Excel::ModelTableColumn PrimaryKeyColumn;
		Excel::ModelTableColumn get_PrimaryKeyColumn();
		//
		__declspec(property(get = get_PrimaryKeyTable)) Excel::ModelTable PrimaryKeyTable;
		Excel::ModelTable get_PrimaryKeyTable();
	};

	//________________________________________________________ModelRelationships
	// {000244DA-0000-0000-C000-000000000046}
	class ModelRelationships : public Com::Object
	{
	public:
		ModelRelationships();
		~ModelRelationships();
		ModelRelationships(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelRelationships& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ModelRelationship Add(Excel::ModelTableColumn& ForeignKeyColumn, Excel::ModelTableColumn& PrimaryKeyColumn);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void DetectRelationships(Excel::PivotTable& PivotTable);
		Excel::ModelRelationship Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ModelRelationship get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________Model
	// {000244DB-0000-0000-C000-000000000046}
	class Model : public Com::Object
	{
	public:
		Model();
		~Model();
		Model(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Model& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::WorkbookConnection AddConnection(Excel::WorkbookConnection& ConnectionToDataSource);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		Excel::WorkbookConnection CreateModelWorkbookConnection(_variant_t ModelTable);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DataModelConnection)) Excel::WorkbookConnection DataModelConnection;
		Excel::WorkbookConnection get_DataModelConnection();
		void Initialize();
		//
		__declspec(property(get = get_ModelFormatBoolean)) Excel::ModelFormatBoolean ModelFormatBooleanX;
		Excel::ModelFormatBoolean get_ModelFormatBoolean();
		Excel::ModelFormatCurrency get_ModelFormatCurrency(_variant_t Symbol, _variant_t DecimalPlaces);
		Excel::ModelFormatCurrency get_ModelFormatCurrency();
		Excel::ModelFormatDate get_ModelFormatDate(_variant_t FormatString);
		Excel::ModelFormatDate get_ModelFormatDate();
		Excel::ModelFormatDecimalNumber get_ModelFormatDecimalNumber(_variant_t UseThousandSeparator, _variant_t DecimalPlaces);
		Excel::ModelFormatDecimalNumber get_ModelFormatDecimalNumber();
		//
		__declspec(property(get = get_ModelFormatGeneral)) Excel::ModelFormatGeneral ModelFormatGeneralX;
		Excel::ModelFormatGeneral get_ModelFormatGeneral();
		Excel::ModelFormatPercentageNumber get_ModelFormatPercentageNumber(_variant_t UseThousandSeparator, _variant_t DecimalPlaces);
		Excel::ModelFormatPercentageNumber get_ModelFormatPercentageNumber();
		Excel::ModelFormatScientificNumber get_ModelFormatScientificNumber(_variant_t DecimalPlaces);
		Excel::ModelFormatScientificNumber get_ModelFormatScientificNumber();
		Excel::ModelFormatWholeNumber get_ModelFormatWholeNumber(_variant_t UseThousandSeparator);
		Excel::ModelFormatWholeNumber get_ModelFormatWholeNumber();
		//
		__declspec(property(get = get_ModelMeasures)) Excel::ModelMeasures ModelMeasuresX;
		Excel::ModelMeasures get_ModelMeasures();
		//
		__declspec(property(get = get_ModelRelationships)) Excel::ModelRelationships ModelRelationshipsX;
		Excel::ModelRelationships get_ModelRelationships();
		//
		__declspec(property(get = get_ModelTables)) Excel::ModelTables ModelTablesX;
		Excel::ModelTables get_ModelTables();
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		void Refresh();
	};

	//________________________________________________________FullSeriesCollection
	// {000244DC-0000-0000-C000-000000000046}
	class FullSeriesCollection : public Com::Object
	{
	public:
		FullSeriesCollection();
		~FullSeriesCollection();
		FullSeriesCollection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		FullSeriesCollection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::Series Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::Series _Default(_variant_t Index);
		IUnknownPtr _NewEnum();
	};

	//________________________________________________________ChartCategory
	// {000244DD-0000-0000-C000-000000000046}
	class ChartCategory : public Com::Object
	{
	public:
		ChartCategory();
		~ChartCategory();
		ChartCategory(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartCategory& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_IsFiltered, put = put_IsFiltered)) bool IsFiltered;
		bool get_IsFiltered();
		void put_IsFiltered(bool IsFiltered);
		//
		__declspec(property(get = get_Name)) wstring NameX;
		wstring get_Name();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________CategoryCollection
	// {000244DE-0000-0000-C000-000000000046}
	class CategoryCollection : public Com::Object
	{
	public:
		CategoryCollection();
		~CategoryCollection();
		CategoryCollection(const Com::Object& init) { Com::Object::Private_Copy(init); }
		CategoryCollection& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ChartCategory Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ChartCategory _Default(_variant_t Index);
	};

	//________________________________________________________TimelineState
	// {000244DF-0000-0000-C000-000000000046}
	class TimelineState : public Com::Object
	{
	public:
		TimelineState();
		~TimelineState();
		TimelineState(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TimelineState& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_EndDate)) _variant_t EndDate;
		_variant_t get_EndDate();
		//
		__declspec(property(get = get_FilterType)) Excel::XlPivotFilterType FilterType;
		Excel::XlPivotFilterType get_FilterType();
		//
		__declspec(property(get = get_FilterValue1)) _variant_t FilterValue1;
		_variant_t get_FilterValue1();
		//
		__declspec(property(get = get_FilterValue2)) _variant_t FilterValue2;
		_variant_t get_FilterValue2();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::XlFilterStatus SetFilterDateRange(_variant_t StartDate, _variant_t EndDate);
		//
		__declspec(property(get = get_SingleRangeFilterState)) bool SingleRangeFilterState;
		bool get_SingleRangeFilterState();
		//
		__declspec(property(get = get_StartDate)) _variant_t StartDate;
		_variant_t get_StartDate();
	};

	//________________________________________________________TimelineViewState
	// {000244E0-0000-0000-C000-000000000046}
	class TimelineViewState : public Com::Object
	{
	public:
		TimelineViewState();
		~TimelineViewState();
		TimelineViewState(const Com::Object& init) { Com::Object::Private_Copy(init); }
		TimelineViewState& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Level, put = put_Level)) Excel::XlTimelineLevel Level;
		Excel::XlTimelineLevel get_Level();
		void put_Level(Excel::XlTimelineLevel Level);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_ShowHeader, put = put_ShowHeader)) bool ShowHeader;
		bool get_ShowHeader();
		void put_ShowHeader(bool ShowHeader);
		//
		__declspec(property(get = get_ShowHorizontalScrollbar, put = put_ShowHorizontalScrollbar)) bool ShowHorizontalScrollbar;
		bool get_ShowHorizontalScrollbar();
		void put_ShowHorizontalScrollbar(bool ShowHorizontalScrollbar);
		//
		__declspec(property(get = get_ShowSelectionLabel, put = put_ShowSelectionLabel)) bool ShowSelectionLabel;
		bool get_ShowSelectionLabel();
		void put_ShowSelectionLabel(bool ShowSelectionLabel);
		//
		__declspec(property(get = get_ShowTimeLevel, put = put_ShowTimeLevel)) bool ShowTimeLevel;
		bool get_ShowTimeLevel();
		void put_ShowTimeLevel(bool ShowTimeLevel);
	};

	//________________________________________________________ModelTableNames
	// {000244E1-0000-0000-C000-000000000046}
	class ModelTableNames : public Com::Object
	{
	public:
		ModelTableNames();
		~ModelTableNames();
		ModelTableNames(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelTableNames& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		wstring Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		wstring get__Default(_variant_t Index);
	};

	//________________________________________________________ModelTableNameChange
	// {000244E2-0000-0000-C000-000000000046}
	class ModelTableNameChange : public Com::Object
	{
	public:
		ModelTableNameChange();
		~ModelTableNameChange();
		ModelTableNameChange(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelTableNameChange& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_TableNameNew)) wstring TableNameNew;
		wstring get_TableNameNew();
		//
		__declspec(property(get = get_TableNameOld)) wstring TableNameOld;
		wstring get_TableNameOld();
	};

	//________________________________________________________ModelTableNameChanges
	// {000244E3-0000-0000-C000-000000000046}
	class ModelTableNameChanges : public Com::Object
	{
	public:
		ModelTableNameChanges();
		~ModelTableNameChanges();
		ModelTableNameChanges(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelTableNameChanges& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ModelTableNameChange Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ModelTableNameChange get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ModelChanges
	// {000244E4-0000-0000-C000-000000000046}
	class ModelChanges : public Com::Object
	{
	public:
		ModelChanges();
		~ModelChanges();
		ModelChanges(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelChanges& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ColumnsAdded)) Excel::ModelColumnNames ColumnsAdded;
		Excel::ModelColumnNames get_ColumnsAdded();
		//
		__declspec(property(get = get_ColumnsChanged)) Excel::ModelColumnChanges ColumnsChanged;
		Excel::ModelColumnChanges get_ColumnsChanged();
		//
		__declspec(property(get = get_ColumnsDeleted)) Excel::ModelColumnNames ColumnsDeleted;
		Excel::ModelColumnNames get_ColumnsDeleted();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_MeasuresAdded)) Excel::ModelMeasureNames MeasuresAdded;
		Excel::ModelMeasureNames get_MeasuresAdded();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RelationshipChange)) bool RelationshipChange;
		bool get_RelationshipChange();
		//
		__declspec(property(get = get_Source)) Excel::XlModelChangeSource Source;
		Excel::XlModelChangeSource get_Source();
		//
		__declspec(property(get = get_TableNamesChanged)) Excel::ModelTableNameChanges TableNamesChanged;
		Excel::ModelTableNameChanges get_TableNamesChanged();
		//
		__declspec(property(get = get_TablesAdded)) Excel::ModelTableNames TablesAdded;
		Excel::ModelTableNames get_TablesAdded();
		//
		__declspec(property(get = get_TablesDeleted)) Excel::ModelTableNames TablesDeleted;
		Excel::ModelTableNames get_TablesDeleted();
		//
		__declspec(property(get = get_TablesModified)) Excel::ModelTableNames TablesModified;
		Excel::ModelTableNames get_TablesModified();
		//
		__declspec(property(get = get_UnknownChange)) bool UnknownChange;
		bool get_UnknownChange();
	};

	//________________________________________________________ModelColumnName
	// {000244E5-0000-0000-C000-000000000046}
	class ModelColumnName : public Com::Object
	{
	public:
		ModelColumnName();
		~ModelColumnName();
		ModelColumnName(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelColumnName& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ColumnName)) wstring ColumnName;
		wstring get_ColumnName();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_TableName)) wstring TableName;
		wstring get_TableName();
	};

	//________________________________________________________ModelColumnNames
	// {000244E6-0000-0000-C000-000000000046}
	class ModelColumnNames : public Com::Object
	{
	public:
		ModelColumnNames();
		~ModelColumnNames();
		ModelColumnNames(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelColumnNames& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ModelColumnName Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ModelColumnName get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ModelColumnChange
	// {000244E7-0000-0000-C000-000000000046}
	class ModelColumnChange : public Com::Object
	{
	public:
		ModelColumnChange();
		~ModelColumnChange();
		ModelColumnChange(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelColumnChange& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_ColumnName)) wstring ColumnName;
		wstring get_ColumnName();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_TableName)) wstring TableName;
		wstring get_TableName();
	};

	//________________________________________________________ModelColumnChanges
	// {000244E8-0000-0000-C000-000000000046}
	class ModelColumnChanges : public Com::Object
	{
	public:
		ModelColumnChanges();
		~ModelColumnChanges();
		ModelColumnChanges(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelColumnChanges& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ModelColumnChange Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ModelColumnChange get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ModelMeasureName
	// {000244E9-0000-0000-C000-000000000046}
	class ModelMeasureName : public Com::Object
	{
	public:
		ModelMeasureName();
		~ModelMeasureName();
		ModelMeasureName(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelMeasureName& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_MeasureName)) wstring MeasureName;
		wstring get_MeasureName();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_TableName)) wstring TableName;
		wstring get_TableName();
	};

	//________________________________________________________ModelMeasureNames
	// {000244EA-0000-0000-C000-000000000046}
	class ModelMeasureNames : public Com::Object
	{
	public:
		ModelMeasureNames();
		~ModelMeasureNames();
		ModelMeasureNames(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelMeasureNames& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ModelMeasureName Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ModelMeasureName get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________WorkbookQuery
	// {000244EB-0000-0000-C000-000000000046}
	class WorkbookQuery : public Com::Object
	{
	public:
		WorkbookQuery();
		~WorkbookQuery();
		WorkbookQuery(const Com::Object& init) { Com::Object::Private_Copy(init); }
		WorkbookQuery& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Description, put = put_Description)) wstring Description;
		wstring get_Description();
		void put_Description(wstring Description);
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get__Default, put = put__Default)) wstring _Default;
		wstring get__Default();
		void put__Default(wstring _Default);
	};

	//________________________________________________________Queries
	// {000244EC-0000-0000-C000-000000000046}
	class Queries : public Com::Object
	{
	public:
		Queries();
		~Queries();
		Queries(const Com::Object& init) { Com::Object::Private_Copy(init); }
		Queries& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::WorkbookQuery Add(wstring Name, wstring Formula, _variant_t Description);
		Excel::WorkbookQuery Add(wstring Name, wstring Formula);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_FastCombine, put = put_FastCombine)) bool FastCombine;
		bool get_FastCombine();
		void put_FastCombine(bool FastCombine);
		Excel::WorkbookQuery Item(_variant_t NameOrIndex);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::WorkbookQuery get__Default(_variant_t NameOrIndex);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ModelMeasure
	// {000244ED-0000-0000-C000-000000000046}
	class ModelMeasure : public Com::Object
	{
	public:
		ModelMeasure();
		~ModelMeasure();
		ModelMeasure(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelMeasure& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_AssociatedTable)) Excel::ModelTable AssociatedTable;
		Excel::ModelTable get_AssociatedTable();
		void put_AssociatedTable(Excel::ModelTable& AssociatedTable);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		void Delete();
		//
		__declspec(property(get = get_Description, put = put_Description)) wstring Description;
		wstring get_Description();
		void put_Description(wstring Description);
		//
		__declspec(property(get = get_FormatInformation, put = put_FormatInformation)) _variant_t FormatInformation;
		_variant_t get_FormatInformation();
		void put_FormatInformation(_variant_t FormatInformation);
		//
		__declspec(property(get = get_Formula, put = put_Formula)) wstring Formula;
		wstring get_Formula();
		void put_Formula(wstring Formula);
		//
		__declspec(property(get = get_Name, put = put_Name)) wstring NameX;
		wstring get_Name();
		void put_Name(wstring Name);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________ModelMeasures
	// {000244EE-0000-0000-C000-000000000046}
	class ModelMeasures : public Com::Object
	{
	public:
		ModelMeasures();
		~ModelMeasures();
		ModelMeasures(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelMeasures& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		Excel::ModelMeasure Add(wstring MeasureName, Excel::ModelTable& AssociatedTable, wstring Formula, _variant_t FormatInformation, _variant_t Description);
		Excel::ModelMeasure Add(wstring MeasureName, Excel::ModelTable& AssociatedTable, wstring Formula, _variant_t FormatInformation);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::ModelMeasure Item(_variant_t Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::ModelMeasure get__Default(_variant_t Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________ModelFormatGeneral
	// {000244EF-0000-0000-C000-000000000046}
	class ModelFormatGeneral : public Com::Object
	{
	public:
		ModelFormatGeneral();
		~ModelFormatGeneral();
		ModelFormatGeneral(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelFormatGeneral& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________ModelFormatDate
	// {000244F0-0000-0000-C000-000000000046}
	class ModelFormatDate : public Com::Object
	{
	public:
		ModelFormatDate();
		~ModelFormatDate();
		ModelFormatDate(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelFormatDate& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_FormatString, put = put_FormatString)) wstring FormatString;
		wstring get_FormatString();
		void put_FormatString(wstring FormatString);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________ModelFormatDecimalNumber
	// {000244F1-0000-0000-C000-000000000046}
	class ModelFormatDecimalNumber : public Com::Object
	{
	public:
		ModelFormatDecimalNumber();
		~ModelFormatDecimalNumber();
		ModelFormatDecimalNumber(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelFormatDecimalNumber& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DecimalPlaces, put = put_DecimalPlaces)) long DecimalPlaces;
		long get_DecimalPlaces();
		void put_DecimalPlaces(long DecimalPlaces);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_UseThousandSeparator, put = put_UseThousandSeparator)) bool UseThousandSeparator;
		bool get_UseThousandSeparator();
		void put_UseThousandSeparator(bool UseThousandSeparator);
	};

	//________________________________________________________ModelFormatWholeNumber
	// {000244F2-0000-0000-C000-000000000046}
	class ModelFormatWholeNumber : public Com::Object
	{
	public:
		ModelFormatWholeNumber();
		~ModelFormatWholeNumber();
		ModelFormatWholeNumber(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelFormatWholeNumber& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_UseThousandSeparator, put = put_UseThousandSeparator)) bool UseThousandSeparator;
		bool get_UseThousandSeparator();
		void put_UseThousandSeparator(bool UseThousandSeparator);
	};

	//________________________________________________________ModelFormatPercentageNumber
	// {000244F3-0000-0000-C000-000000000046}
	class ModelFormatPercentageNumber : public Com::Object
	{
	public:
		ModelFormatPercentageNumber();
		~ModelFormatPercentageNumber();
		ModelFormatPercentageNumber(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelFormatPercentageNumber& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DecimalPlaces, put = put_DecimalPlaces)) long DecimalPlaces;
		long get_DecimalPlaces();
		void put_DecimalPlaces(long DecimalPlaces);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_UseThousandSeparator, put = put_UseThousandSeparator)) bool UseThousandSeparator;
		bool get_UseThousandSeparator();
		void put_UseThousandSeparator(bool UseThousandSeparator);
	};

	//________________________________________________________ModelFormatScientificNumber
	// {000244F4-0000-0000-C000-000000000046}
	class ModelFormatScientificNumber : public Com::Object
	{
	public:
		ModelFormatScientificNumber();
		~ModelFormatScientificNumber();
		ModelFormatScientificNumber(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelFormatScientificNumber& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DecimalPlaces, put = put_DecimalPlaces)) long DecimalPlaces;
		long get_DecimalPlaces();
		void put_DecimalPlaces(long DecimalPlaces);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________ModelFormatCurrency
	// {000244F5-0000-0000-C000-000000000046}
	class ModelFormatCurrency : public Com::Object
	{
	public:
		ModelFormatCurrency();
		~ModelFormatCurrency();
		ModelFormatCurrency(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelFormatCurrency& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DecimalPlaces, put = put_DecimalPlaces)) long DecimalPlaces;
		long get_DecimalPlaces();
		void put_DecimalPlaces(long DecimalPlaces);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_Symbol, put = put_Symbol)) wstring Symbol;
		wstring get_Symbol();
		void put_Symbol(wstring Symbol);
	};

	//________________________________________________________ModelFormatBoolean
	// {000244F6-0000-0000-C000-000000000046}
	class ModelFormatBoolean : public Com::Object
	{
	public:
		ModelFormatBoolean();
		~ModelFormatBoolean();
		ModelFormatBoolean(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ModelFormatBoolean& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
	};

	//________________________________________________________PublishedDocs
	// {000244F7-0000-0000-C000-000000000046}
	class PublishedDocs : public Com::Object
	{
	public:
		PublishedDocs();
		~PublishedDocs();
		PublishedDocs(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PublishedDocs& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Count)) long Count;
		long get_Count();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		Excel::PublishedDoc Item(long Index);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		Excel::PublishedDoc _Default(long Index);
		//
		__declspec(property(get = get__NewEnum)) IUnknownPtr _NewEnum;
		IUnknownPtr get__NewEnum();
	};

	//________________________________________________________PublishedDoc
	// {000244F8-0000-0000-C000-000000000046}
	class PublishedDoc : public Com::Object
	{
	public:
		PublishedDoc();
		~PublishedDoc();
		PublishedDoc(const Com::Object& init) { Com::Object::Private_Copy(init); }
		PublishedDoc& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DisclosureScope)) long DisclosureScope;
		long get_DisclosureScope();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PublishedDate)) Sys::Time PublishedDate;
		Sys::Time get_PublishedDate();
		//
		__declspec(property(get = get_Title)) wstring Title;
		wstring get_Title();
		//
		__declspec(property(get = get_Url)) wstring Url;
		wstring get_Url();
	};

	//________________________________________________________SeriesGradientStopColorFormat
	// {000244F9-0000-0000-C000-000000000046}
	class SeriesGradientStopColorFormat : public Com::Object
	{
	public:
		SeriesGradientStopColorFormat();
		~SeriesGradientStopColorFormat();
		SeriesGradientStopColorFormat(const Com::Object& init) { Com::Object::Private_Copy(init); }
		SeriesGradientStopColorFormat& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_ObjectThemeColor, put = put_ObjectThemeColor)) /* MsoThemeColorIndex*/ short ObjectThemeColor;
		/* MsoThemeColorIndex*/ short get_ObjectThemeColor();
		void put_ObjectThemeColor(/* MsoThemeColorIndex*/ short ObjectThemeColor);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_RGB, put = put_RGB)) long RGB;
		long get_RGB();
		void put_RGB(long RGB);
		//
		__declspec(property(get = get_TintAndShade, put = put_TintAndShade)) float TintAndShade;
		float get_TintAndShade();
		void put_TintAndShade(float TintAndShade);
		//
		__declspec(property(get = get_Transparency, put = put_Transparency)) float Transparency;
		float get_Transparency();
		void put_Transparency(float Transparency);
		//
		__declspec(property(get = get_Type)) /* MsoColorType*/ short Type;
		/* MsoColorType*/ short get_Type();
	};

	//________________________________________________________ChartSeriesGradientStopData
	// {000244FA-0000-0000-C000-000000000046}
	class ChartSeriesGradientStopData : public Com::Object
	{
	public:
		ChartSeriesGradientStopData();
		~ChartSeriesGradientStopData();
		ChartSeriesGradientStopData(const Com::Object& init) { Com::Object::Private_Copy(init); }
		ChartSeriesGradientStopData& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_StopColor)) Excel::SeriesGradientStopColorFormat StopColor;
		Excel::SeriesGradientStopColorFormat get_StopColor();
		//
		__declspec(property(get = get_StopPositionType, put = put_StopPositionType)) Excel::XlGradientStopPositionType StopPositionType;
		Excel::XlGradientStopPositionType get_StopPositionType();
		void put_StopPositionType(Excel::XlGradientStopPositionType StopPositionType);
		//
		__declspec(property(get = get_StopValue, put = put_StopValue)) wstring StopValue;
		wstring get_StopValue();
		void put_StopValue(wstring StopValue);
	};

	//________________________________________________________DefaultPivotTableLayoutOptions
	// {000244FB-0000-0000-C000-000000000046}
	class DefaultPivotTableLayoutOptions : public Com::Object
	{
	public:
		DefaultPivotTableLayoutOptions();
		~DefaultPivotTableLayoutOptions();
		DefaultPivotTableLayoutOptions(const Com::Object& init) { Com::Object::Private_Copy(init); }
		DefaultPivotTableLayoutOptions& operator=(const Com::Object& init) { Com::Object::Private_Copy(init); return *this; }
		//
		__declspec(property(get = get_AllowMultipleFilters, put = put_AllowMultipleFilters)) bool AllowMultipleFilters;
		bool get_AllowMultipleFilters();
		void put_AllowMultipleFilters(bool AllowMultipleFilters);
		//
		__declspec(property(get = get_Application)) Excel::ApplicationX Application;
		Excel::ApplicationX get_Application();
		//
		__declspec(property(get = get_CalculatedMembersInFilters, put = put_CalculatedMembersInFilters)) bool CalculatedMembersInFilters;
		bool get_CalculatedMembersInFilters();
		void put_CalculatedMembersInFilters(bool CalculatedMembersInFilters);
		//
		__declspec(property(get = get_ColumnGrand, put = put_ColumnGrand)) bool ColumnGrand;
		bool get_ColumnGrand();
		void put_ColumnGrand(bool ColumnGrand);
		//
		__declspec(property(get = get_CompactRowIndent, put = put_CompactRowIndent)) long CompactRowIndent;
		long get_CompactRowIndent();
		void put_CompactRowIndent(long CompactRowIndent);
		//
		__declspec(property(get = get_Creator)) Excel::XlCreator Creator;
		Excel::XlCreator get_Creator();
		//
		__declspec(property(get = get_DisplayContextTooltips, put = put_DisplayContextTooltips)) bool DisplayContextTooltips;
		bool get_DisplayContextTooltips();
		void put_DisplayContextTooltips(bool DisplayContextTooltips);
		//
		__declspec(property(get = get_DisplayEmptyColumn, put = put_DisplayEmptyColumn)) bool DisplayEmptyColumn;
		bool get_DisplayEmptyColumn();
		void put_DisplayEmptyColumn(bool DisplayEmptyColumn);
		//
		__declspec(property(get = get_DisplayEmptyRow, put = put_DisplayEmptyRow)) bool DisplayEmptyRow;
		bool get_DisplayEmptyRow();
		void put_DisplayEmptyRow(bool DisplayEmptyRow);
		//
		__declspec(property(get = get_DisplayErrorString, put = put_DisplayErrorString)) bool DisplayErrorString;
		bool get_DisplayErrorString();
		void put_DisplayErrorString(bool DisplayErrorString);
		//
		__declspec(property(get = get_DisplayFieldCaptions, put = put_DisplayFieldCaptions)) bool DisplayFieldCaptions;
		bool get_DisplayFieldCaptions();
		void put_DisplayFieldCaptions(bool DisplayFieldCaptions);
		//
		__declspec(property(get = get_DisplayImmediateItems, put = put_DisplayImmediateItems)) bool DisplayImmediateItems;
		bool get_DisplayImmediateItems();
		void put_DisplayImmediateItems(bool DisplayImmediateItems);
		//
		__declspec(property(get = get_DisplayMemberPropertyTooltips, put = put_DisplayMemberPropertyTooltips)) bool DisplayMemberPropertyTooltips;
		bool get_DisplayMemberPropertyTooltips();
		void put_DisplayMemberPropertyTooltips(bool DisplayMemberPropertyTooltips);
		//
		__declspec(property(get = get_DisplayNullString, put = put_DisplayNullString)) bool DisplayNullString;
		bool get_DisplayNullString();
		void put_DisplayNullString(bool DisplayNullString);
		//
		__declspec(property(get = get_EnableDrilldown, put = put_EnableDrilldown)) bool EnableDrilldown;
		bool get_EnableDrilldown();
		void put_EnableDrilldown(bool EnableDrilldown);
		//
		__declspec(property(get = get_EnableWriteback, put = put_EnableWriteback)) bool EnableWriteback;
		bool get_EnableWriteback();
		void put_EnableWriteback(bool EnableWriteback);
		//
		__declspec(property(get = get_ErrorString, put = put_ErrorString)) wstring ErrorString;
		wstring get_ErrorString();
		void put_ErrorString(wstring ErrorString);
		//
		__declspec(property(get = get_FieldListSortAscending, put = put_FieldListSortAscending)) bool FieldListSortAscending;
		bool get_FieldListSortAscending();
		void put_FieldListSortAscending(bool FieldListSortAscending);
		//
		__declspec(property(get = get_HasAutoFormat, put = put_HasAutoFormat)) bool HasAutoFormat;
		bool get_HasAutoFormat();
		void put_HasAutoFormat(bool HasAutoFormat);
		//
		__declspec(property(get = get_InGridDropZones, put = put_InGridDropZones)) bool InGridDropZones;
		bool get_InGridDropZones();
		void put_InGridDropZones(bool InGridDropZones);
		//
		__declspec(property(get = get_LayoutBlankLine, put = put_LayoutBlankLine)) bool LayoutBlankLine;
		bool get_LayoutBlankLine();
		void put_LayoutBlankLine(bool LayoutBlankLine);
		//
		__declspec(property(get = get_MergeLabels, put = put_MergeLabels)) bool MergeLabels;
		bool get_MergeLabels();
		void put_MergeLabels(bool MergeLabels);
		//
		__declspec(property(get = get_NullString, put = put_NullString)) wstring NullString;
		wstring get_NullString();
		void put_NullString(wstring NullString);
		//
		__declspec(property(get = get_PageFieldOrder, put = put_PageFieldOrder)) bool PageFieldOrder;
		bool get_PageFieldOrder();
		void put_PageFieldOrder(bool PageFieldOrder);
		//
		__declspec(property(get = get_PageFieldWrapCount, put = put_PageFieldWrapCount)) long PageFieldWrapCount;
		long get_PageFieldWrapCount();
		void put_PageFieldWrapCount(long PageFieldWrapCount);
		//
		__declspec(property(get = get_Parent)) Com::Object Parent;
		Com::Object get_Parent();
		//
		__declspec(property(get = get_PreserveFormatting, put = put_PreserveFormatting)) bool PreserveFormatting;
		bool get_PreserveFormatting();
		void put_PreserveFormatting(bool PreserveFormatting);
		//
		__declspec(property(get = get_PrintDrillIndicators, put = put_PrintDrillIndicators)) bool PrintDrillIndicators;
		bool get_PrintDrillIndicators();
		void put_PrintDrillIndicators(bool PrintDrillIndicators);
		//
		__declspec(property(get = get_PrintTitles, put = put_PrintTitles)) bool PrintTitles;
		bool get_PrintTitles();
		void put_PrintTitles(bool PrintTitles);
		//
		__declspec(property(get = get_RefreshOnFileOpen, put = put_RefreshOnFileOpen)) bool RefreshOnFileOpen;
		bool get_RefreshOnFileOpen();
		void put_RefreshOnFileOpen(bool RefreshOnFileOpen);
		//
		__declspec(property(get = get_RepeatAllLabels, put = put_RepeatAllLabels)) Excel::XlPivotFieldRepeatLabels RepeatAllLabels;
		Excel::XlPivotFieldRepeatLabels get_RepeatAllLabels();
		void put_RepeatAllLabels(Excel::XlPivotFieldRepeatLabels RepeatAllLabels);
		//
		__declspec(property(get = get_RepeatItemsOnEachPrintedPage, put = put_RepeatItemsOnEachPrintedPage)) bool RepeatItemsOnEachPrintedPage;
		bool get_RepeatItemsOnEachPrintedPage();
		void put_RepeatItemsOnEachPrintedPage(bool RepeatItemsOnEachPrintedPage);
		//
		__declspec(property(get = get_RowAxisLayout, put = put_RowAxisLayout)) Excel::XlLayoutRowType RowAxisLayout;
		Excel::XlLayoutRowType get_RowAxisLayout();
		void put_RowAxisLayout(Excel::XlLayoutRowType RowAxisLayout);
		//
		__declspec(property(get = get_RowGrand, put = put_RowGrand)) bool RowGrand;
		bool get_RowGrand();
		void put_RowGrand(bool RowGrand);
		//
		__declspec(property(get = get_SaveData, put = put_SaveData)) bool SaveData;
		bool get_SaveData();
		void put_SaveData(bool SaveData);
		//
		__declspec(property(get = get_ShowDrillIndicators, put = put_ShowDrillIndicators)) bool ShowDrillIndicators;
		bool get_ShowDrillIndicators();
		void put_ShowDrillIndicators(bool ShowDrillIndicators);
		//
		__declspec(property(get = get_ShowValuesRow, put = put_ShowValuesRow)) bool ShowValuesRow;
		bool get_ShowValuesRow();
		void put_ShowValuesRow(bool ShowValuesRow);
		//
		__declspec(property(get = get_SortUsingCustomLists, put = put_SortUsingCustomLists)) bool SortUsingCustomLists;
		bool get_SortUsingCustomLists();
		void put_SortUsingCustomLists(bool SortUsingCustomLists);
		//
		__declspec(property(get = get_SubtotalHiddenPageItems, put = put_SubtotalHiddenPageItems)) bool SubtotalHiddenPageItems;
		bool get_SubtotalHiddenPageItems();
		void put_SubtotalHiddenPageItems(bool SubtotalHiddenPageItems);
		//
		__declspec(property(get = get_SubtotalLocation, put = put_SubtotalLocation)) bool SubtotalLocation;
		bool get_SubtotalLocation();
		void put_SubtotalLocation(bool SubtotalLocation);
		//
		__declspec(property(get = get_Subtotals, put = put_Subtotals)) bool Subtotals;
		bool get_Subtotals();
		void put_Subtotals(bool Subtotals);
		//
		__declspec(property(get = get_TotalsAnnotation, put = put_TotalsAnnotation)) bool TotalsAnnotation;
		bool get_TotalsAnnotation();
		void put_TotalsAnnotation(bool TotalsAnnotation);
		//
		__declspec(property(get = get_ViewCalculatedMembers, put = put_ViewCalculatedMembers)) bool ViewCalculatedMembers;
		bool get_ViewCalculatedMembers();
		void put_ViewCalculatedMembers(bool ViewCalculatedMembers);
		//
		__declspec(property(get = get_VisualTotals, put = put_VisualTotals)) bool VisualTotals;
		bool get_VisualTotals();
		void put_VisualTotals(bool VisualTotals);
		//
		__declspec(property(get = get_VisualTotalsForSets, put = put_VisualTotalsForSets)) bool VisualTotalsForSets;
		bool get_VisualTotalsForSets();
		void put_VisualTotalsForSets(bool VisualTotalsForSets);
		//
		__declspec(property(get = get_xlMissingItemsNone, put = put_xlMissingItemsNone)) long xlMissingItemsNone;
		long get_xlMissingItemsNone();
		void put_xlMissingItemsNone(long xlMissingItemsNone);
	};

}
