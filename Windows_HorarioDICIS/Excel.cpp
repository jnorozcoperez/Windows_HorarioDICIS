#include "stdafx.h"//__________________________________________Excel.cpp
#include "Excel.h"
namespace Excel {

	//________________________________________________________Adjustments
	Adjustments::Adjustments()
	{
	}

	Adjustments::~Adjustments()
	{
	}

	Com::Object Adjustments::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	int Adjustments::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.intVal;
	}

	long Adjustments::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	float Adjustments::get_Item(int Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_INT;
		param[0].intVal = Index;
		Invoke(1, 0, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Adjustments::put_Item(int Item, float Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_INT;
		param[0].intVal = Item;
		param[1].vt = VT_R4;
		param[1].fltVal = Index;
		Invoke(2, 0, L"Item", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Adjustments::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________CalloutFormat
	CalloutFormat::CalloutFormat()
	{
	}

	CalloutFormat::~CalloutFormat()
	{
	}

	/* MsoTriState*/ short CalloutFormat::get_Accent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"Accent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void CalloutFormat::put_Accent(/* MsoTriState*/ short Accent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Accent;
		Invoke(1, 100, L"Accent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoCalloutAngleType*/ short CalloutFormat::get_Angle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"Angle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoCalloutAngleType*/ short)returnedValue.iVal;
	}

	void CalloutFormat::put_Angle(/* MsoCalloutAngleType*/ short Angle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Angle;
		Invoke(1, 101, L"Angle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object CalloutFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short CalloutFormat::get_AutoAttach()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"AutoAttach", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void CalloutFormat::put_AutoAttach(/* MsoTriState*/ short AutoAttach)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutoAttach;
		Invoke(1, 102, L"AutoAttach", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short CalloutFormat::get_AutoLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"AutoLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void CalloutFormat::AutomaticLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 10, L"AutomaticLength", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short CalloutFormat::get_Border()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void CalloutFormat::put_Border(/* MsoTriState*/ short Border)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Border;
		Invoke(1, 104, L"Border", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long CalloutFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void CalloutFormat::CustomDrop(float Drop)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Drop;
		Invoke(1, 11, L"CustomDrop", param, returnedValue, DISPATCH_METHOD);
	}

	void CalloutFormat::CustomLength(float Length)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Length;
		Invoke(1, 12, L"CustomLength", param, returnedValue, DISPATCH_METHOD);
	}

	float CalloutFormat::get_Drop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"Drop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	/* MsoCalloutDropType*/ short CalloutFormat::get_DropType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"DropType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoCalloutDropType*/ short)returnedValue.iVal;
	}

	float CalloutFormat::get_Gap()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"Gap", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void CalloutFormat::put_Gap(float Gap)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Gap;
		Invoke(1, 107, L"Gap", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float CalloutFormat::get_Length()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Length", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	Com::Object CalloutFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CalloutFormat::PresetDrop(/* MsoCalloutDropType*/ short DropType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DropType;
		Invoke(1, 13, L"PresetDrop", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoCalloutType*/ short CalloutFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoCalloutType*/ short)returnedValue.iVal;
	}

	void CalloutFormat::put_Type(/* MsoCalloutType*/ short Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 109, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ColorFormat
	ColorFormat::ColorFormat()
	{
	}

	ColorFormat::~ColorFormat()
	{
	}

	Com::Object ColorFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float ColorFormat::get_Brightness()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"Brightness", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ColorFormat::put_Brightness(float Brightness)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Brightness;
		Invoke(1, 105, L"Brightness", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ColorFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	/* MsoThemeColorIndex*/ short ColorFormat::get_ObjectThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"ObjectThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoThemeColorIndex*/ short)returnedValue.iVal;
	}

	void ColorFormat::put_ObjectThemeColor(/* MsoThemeColorIndex*/ short ObjectThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ObjectThemeColor;
		Invoke(1, 104, L"ObjectThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ColorFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoRGBType*/ short ColorFormat::get_RGB()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"RGB", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.iVal;
	}

	void ColorFormat::put_RGB(/* MsoRGBType*/ short RGB)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_USERDEFINED;
		param[0].iVal = RGB;
		Invoke(1, 0, L"RGB", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	int ColorFormat::get_SchemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"SchemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.intVal;
	}

	void ColorFormat::put_SchemeColor(int SchemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_INT;
		param[0].intVal = SchemeColor;
		Invoke(1, 100, L"SchemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ColorFormat::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ColorFormat::put_TintAndShade(float TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = TintAndShade;
		Invoke(1, 102, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoColorType*/ short ColorFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoColorType*/ short)returnedValue.iVal;
	}

	//________________________________________________________LineFormat
	LineFormat::LineFormat()
	{
	}

	LineFormat::~LineFormat()
	{
	}

	Com::Object LineFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ColorFormat LineFormat::get_BackColor()
	{
		Excel::ColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 100, L"BackColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void LineFormat::put_BackColor(Excel::ColorFormat& BackColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = BackColor.dispatch.GetInterfacePtr();
		Invoke(1, 100, L"BackColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoArrowheadLength*/ short LineFormat::get_BeginArrowheadLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"BeginArrowheadLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoArrowheadLength*/ short)returnedValue.iVal;
	}

	void LineFormat::put_BeginArrowheadLength(/* MsoArrowheadLength*/ short BeginArrowheadLength)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BeginArrowheadLength;
		Invoke(1, 101, L"BeginArrowheadLength", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoArrowheadStyle*/ short LineFormat::get_BeginArrowheadStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"BeginArrowheadStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoArrowheadStyle*/ short)returnedValue.iVal;
	}

	void LineFormat::put_BeginArrowheadStyle(/* MsoArrowheadStyle*/ short BeginArrowheadStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BeginArrowheadStyle;
		Invoke(1, 102, L"BeginArrowheadStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoArrowheadWidth*/ short LineFormat::get_BeginArrowheadWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"BeginArrowheadWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoArrowheadWidth*/ short)returnedValue.iVal;
	}

	void LineFormat::put_BeginArrowheadWidth(/* MsoArrowheadWidth*/ short BeginArrowheadWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BeginArrowheadWidth;
		Invoke(1, 103, L"BeginArrowheadWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long LineFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	/* MsoLineDashStyle*/ short LineFormat::get_DashStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"DashStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoLineDashStyle*/ short)returnedValue.iVal;
	}

	void LineFormat::put_DashStyle(/* MsoLineDashStyle*/ short DashStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DashStyle;
		Invoke(1, 104, L"DashStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoArrowheadLength*/ short LineFormat::get_EndArrowheadLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"EndArrowheadLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoArrowheadLength*/ short)returnedValue.iVal;
	}

	void LineFormat::put_EndArrowheadLength(/* MsoArrowheadLength*/ short EndArrowheadLength)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = EndArrowheadLength;
		Invoke(1, 105, L"EndArrowheadLength", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoArrowheadStyle*/ short LineFormat::get_EndArrowheadStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"EndArrowheadStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoArrowheadStyle*/ short)returnedValue.iVal;
	}

	void LineFormat::put_EndArrowheadStyle(/* MsoArrowheadStyle*/ short EndArrowheadStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = EndArrowheadStyle;
		Invoke(1, 106, L"EndArrowheadStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoArrowheadWidth*/ short LineFormat::get_EndArrowheadWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"EndArrowheadWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoArrowheadWidth*/ short)returnedValue.iVal;
	}

	void LineFormat::put_EndArrowheadWidth(/* MsoArrowheadWidth*/ short EndArrowheadWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = EndArrowheadWidth;
		Invoke(1, 107, L"EndArrowheadWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ColorFormat LineFormat::get_ForeColor()
	{
		Excel::ColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 108, L"ForeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void LineFormat::put_ForeColor(Excel::ColorFormat& ForeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = ForeColor.dispatch.GetInterfacePtr();
		Invoke(1, 108, L"ForeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short LineFormat::get_InsetPen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 114, L"InsetPen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void LineFormat::put_InsetPen(/* MsoTriState*/ short InsetPen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = InsetPen;
		Invoke(1, 114, L"InsetPen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object LineFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoPatternType*/ short LineFormat::get_Pattern()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"Pattern", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPatternType*/ short)returnedValue.iVal;
	}

	void LineFormat::put_Pattern(/* MsoPatternType*/ short Pattern)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Pattern;
		Invoke(1, 109, L"Pattern", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoLineStyle*/ short LineFormat::get_Style()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Style", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoLineStyle*/ short)returnedValue.iVal;
	}

	void LineFormat::put_Style(/* MsoLineStyle*/ short Style)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Style;
		Invoke(1, 110, L"Style", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float LineFormat::get_Transparency()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Transparency", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void LineFormat::put_Transparency(float Transparency)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Transparency;
		Invoke(1, 111, L"Transparency", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short LineFormat::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void LineFormat::put_Visible(/* MsoTriState*/ short Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 112, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float LineFormat::get_Weight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 113, L"Weight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void LineFormat::put_Weight(float Weight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Weight;
		Invoke(1, 113, L"Weight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ShapeNode
	ShapeNode::ShapeNode()
	{
	}

	ShapeNode::~ShapeNode()
	{
	}

	Com::Object ShapeNode::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ShapeNode::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	/* MsoEditingType*/ short ShapeNode::get_EditingType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"EditingType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoEditingType*/ short)returnedValue.iVal;
	}

	Com::Object ShapeNode::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ShapeNode::get_Points()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"Points", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoSegmentType*/ short ShapeNode::get_SegmentType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"SegmentType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoSegmentType*/ short)returnedValue.iVal;
	}

	//________________________________________________________ShapeNodes
	ShapeNodes::ShapeNodes()
	{
	}

	ShapeNodes::~ShapeNodes()
	{
	}

	Com::Object ShapeNodes::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	int ShapeNodes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.intVal;
	}

	long ShapeNodes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ShapeNodes::Delete(int Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_INT;
		param[0].intVal = Index;
		Invoke(1, 11, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeNodes::Insert(int Index, /* MsoSegmentType*/ short SegmentType, /* MsoEditingType*/ short EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_INT;
		param[0].intVal = Index;
		param[1].vt = VT_I2;
		param[1].iVal = SegmentType;
		param[2].vt = VT_I2;
		param[2].iVal = EditingType;
		param[3].vt = VT_R4;
		param[3].fltVal = X1;
		param[4].vt = VT_R4;
		param[4].fltVal = Y1;
		param[5].vt = VT_R4;
		param[5].fltVal = X2;
		param[6].vt = VT_R4;
		param[6].fltVal = Y2;
		param[7].vt = VT_R4;
		param[7].fltVal = X3;
		param[8].vt = VT_R4;
		param[8].fltVal = Y3;
		Invoke(9, 12, L"Insert", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ShapeNode ShapeNodes::Item(_variant_t Index)
	{
		Excel::ShapeNode returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ShapeNodes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ShapeNodes::SetEditingType(int Index, /* MsoEditingType*/ short EditingType)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_INT;
		param[0].intVal = Index;
		param[1].vt = VT_I2;
		param[1].iVal = EditingType;
		Invoke(2, 13, L"SetEditingType", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeNodes::SetPosition(int Index, float X1, float Y1)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_INT;
		param[0].intVal = Index;
		param[1].vt = VT_R4;
		param[1].fltVal = X1;
		param[2].vt = VT_R4;
		param[2].fltVal = Y1;
		Invoke(3, 14, L"SetPosition", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeNodes::SetSegmentType(int Index, /* MsoSegmentType*/ short SegmentType)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_INT;
		param[0].intVal = Index;
		param[1].vt = VT_I2;
		param[1].iVal = SegmentType;
		Invoke(2, 15, L"SetSegmentType", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr ShapeNodes::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________PictureFormat
	PictureFormat::PictureFormat()
	{
	}

	PictureFormat::~PictureFormat()
	{
	}

	Com::Object PictureFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float PictureFormat::get_Brightness()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"Brightness", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void PictureFormat::put_Brightness(float Brightness)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Brightness;
		Invoke(1, 100, L"Brightness", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPictureColorType*/ short PictureFormat::get_ColorType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"ColorType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPictureColorType*/ short)returnedValue.iVal;
	}

	void PictureFormat::put_ColorType(/* MsoPictureColorType*/ short ColorType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ColorType;
		Invoke(1, 101, L"ColorType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float PictureFormat::get_Contrast()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"Contrast", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void PictureFormat::put_Contrast(float Contrast)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Contrast;
		Invoke(1, 102, L"Contrast", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PictureFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object PictureFormat::get_Crop()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 109, L"Crop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float PictureFormat::get_CropBottom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"CropBottom", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void PictureFormat::put_CropBottom(float CropBottom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = CropBottom;
		Invoke(1, 103, L"CropBottom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float PictureFormat::get_CropLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"CropLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void PictureFormat::put_CropLeft(float CropLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = CropLeft;
		Invoke(1, 104, L"CropLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float PictureFormat::get_CropRight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"CropRight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void PictureFormat::put_CropRight(float CropRight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = CropRight;
		Invoke(1, 105, L"CropRight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float PictureFormat::get_CropTop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"CropTop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void PictureFormat::put_CropTop(float CropTop)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = CropTop;
		Invoke(1, 106, L"CropTop", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PictureFormat::IncrementBrightness(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 10, L"IncrementBrightness", param, returnedValue, DISPATCH_METHOD);
	}

	void PictureFormat::IncrementContrast(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 11, L"IncrementContrast", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object PictureFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoRGBType*/ short PictureFormat::get_TransparencyColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"TransparencyColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.iVal;
	}

	void PictureFormat::put_TransparencyColor(/* MsoRGBType*/ short TransparencyColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_USERDEFINED;
		param[0].iVal = TransparencyColor;
		Invoke(1, 107, L"TransparencyColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short PictureFormat::get_TransparentBackground()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"TransparentBackground", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void PictureFormat::put_TransparentBackground(/* MsoTriState*/ short TransparentBackground)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TransparentBackground;
		Invoke(1, 108, L"TransparentBackground", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ShadowFormat
	ShadowFormat::ShadowFormat()
	{
	}

	ShadowFormat::~ShadowFormat()
	{
	}

	Com::Object ShadowFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float ShadowFormat::get_Blur()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Blur", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShadowFormat::put_Blur(float Blur)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Blur;
		Invoke(1, 108, L"Blur", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ShadowFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::ColorFormat ShadowFormat::get_ForeColor()
	{
		Excel::ColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 100, L"ForeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ShadowFormat::put_ForeColor(Excel::ColorFormat& ForeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = ForeColor.dispatch.GetInterfacePtr();
		Invoke(1, 100, L"ForeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ShadowFormat::IncrementOffsetX(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 10, L"IncrementOffsetX", param, returnedValue, DISPATCH_METHOD);
	}

	void ShadowFormat::IncrementOffsetY(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 11, L"IncrementOffsetY", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short ShadowFormat::get_Obscured()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"Obscured", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ShadowFormat::put_Obscured(/* MsoTriState*/ short Obscured)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Obscured;
		Invoke(1, 101, L"Obscured", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ShadowFormat::get_OffsetX()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"OffsetX", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShadowFormat::put_OffsetX(float OffsetX)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = OffsetX;
		Invoke(1, 102, L"OffsetX", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ShadowFormat::get_OffsetY()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"OffsetY", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShadowFormat::put_OffsetY(float OffsetY)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = OffsetY;
		Invoke(1, 103, L"OffsetY", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ShadowFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short ShadowFormat::get_RotateWithShape()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"RotateWithShape", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ShadowFormat::put_RotateWithShape(/* MsoTriState*/ short RotateWithShape)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RotateWithShape;
		Invoke(1, 110, L"RotateWithShape", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ShadowFormat::get_Size()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"Size", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShadowFormat::put_Size(float Size)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Size;
		Invoke(1, 109, L"Size", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoShadowStyle*/ short ShadowFormat::get_Style()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"Style", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoShadowStyle*/ short)returnedValue.iVal;
	}

	void ShadowFormat::put_Style(/* MsoShadowStyle*/ short Style)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Style;
		Invoke(1, 107, L"Style", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ShadowFormat::get_Transparency()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"Transparency", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShadowFormat::put_Transparency(float Transparency)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Transparency;
		Invoke(1, 104, L"Transparency", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoShadowType*/ short ShadowFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoShadowType*/ short)returnedValue.iVal;
	}

	void ShadowFormat::put_Type(/* MsoShadowType*/ short Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 105, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short ShadowFormat::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ShadowFormat::put_Visible(/* MsoTriState*/ short Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 106, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________TextEffectFormat
	TextEffectFormat::TextEffectFormat()
	{
	}

	TextEffectFormat::~TextEffectFormat()
	{
	}

	/* MsoTextEffectAlignment*/ short TextEffectFormat::get_Alignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"Alignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTextEffectAlignment*/ short)returnedValue.iVal;
	}

	void TextEffectFormat::put_Alignment(/* MsoTextEffectAlignment*/ short Alignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Alignment;
		Invoke(1, 100, L"Alignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TextEffectFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long TextEffectFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	/* MsoTriState*/ short TextEffectFormat::get_FontBold()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"FontBold", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void TextEffectFormat::put_FontBold(/* MsoTriState*/ short FontBold)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = FontBold;
		Invoke(1, 101, L"FontBold", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short TextEffectFormat::get_FontItalic()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"FontItalic", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void TextEffectFormat::put_FontItalic(/* MsoTriState*/ short FontItalic)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = FontItalic;
		Invoke(1, 102, L"FontItalic", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TextEffectFormat::get_FontName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"FontName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextEffectFormat::put_FontName(wstring FontName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FontName.c_str());
		Invoke(1, 103, L"FontName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextEffectFormat::get_FontSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"FontSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextEffectFormat::put_FontSize(float FontSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = FontSize;
		Invoke(1, 104, L"FontSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short TextEffectFormat::get_KernedPairs()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"KernedPairs", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void TextEffectFormat::put_KernedPairs(/* MsoTriState*/ short KernedPairs)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = KernedPairs;
		Invoke(1, 105, L"KernedPairs", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short TextEffectFormat::get_NormalizedHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"NormalizedHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void TextEffectFormat::put_NormalizedHeight(/* MsoTriState*/ short NormalizedHeight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = NormalizedHeight;
		Invoke(1, 106, L"NormalizedHeight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TextEffectFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoPresetTextEffectShape*/ short TextEffectFormat::get_PresetShape()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"PresetShape", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetTextEffectShape*/ short)returnedValue.iVal;
	}

	void TextEffectFormat::put_PresetShape(/* MsoPresetTextEffectShape*/ short PresetShape)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetShape;
		Invoke(1, 107, L"PresetShape", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPresetTextEffect*/ short TextEffectFormat::get_PresetTextEffect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"PresetTextEffect", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetTextEffect*/ short)returnedValue.iVal;
	}

	void TextEffectFormat::put_PresetTextEffect(/* MsoPresetTextEffect*/ short PresetTextEffect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetTextEffect;
		Invoke(1, 108, L"PresetTextEffect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short TextEffectFormat::get_RotatedChars()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"RotatedChars", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void TextEffectFormat::put_RotatedChars(/* MsoTriState*/ short RotatedChars)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RotatedChars;
		Invoke(1, 109, L"RotatedChars", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TextEffectFormat::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextEffectFormat::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 110, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void TextEffectFormat::ToggleVerticalText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 10, L"ToggleVerticalText", param, returnedValue, DISPATCH_METHOD);
	}

	float TextEffectFormat::get_Tracking()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Tracking", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextEffectFormat::put_Tracking(float Tracking)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Tracking;
		Invoke(1, 111, L"Tracking", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ThreeDFormat
	ThreeDFormat::ThreeDFormat()
	{
	}

	ThreeDFormat::~ThreeDFormat()
	{
	}

	Com::Object ThreeDFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float ThreeDFormat::get_BevelBottomDepth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 119, L"BevelBottomDepth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_BevelBottomDepth(float BevelBottomDepth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = BevelBottomDepth;
		Invoke(1, 119, L"BevelBottomDepth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ThreeDFormat::get_BevelBottomInset()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"BevelBottomInset", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_BevelBottomInset(float BevelBottomInset)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = BevelBottomInset;
		Invoke(1, 118, L"BevelBottomInset", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoBevelType*/ short ThreeDFormat::get_BevelBottomType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"BevelBottomType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoBevelType*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_BevelBottomType(/* MsoBevelType*/ short BevelBottomType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BevelBottomType;
		Invoke(1, 117, L"BevelBottomType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ThreeDFormat::get_BevelTopDepth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 116, L"BevelTopDepth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_BevelTopDepth(float BevelTopDepth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = BevelTopDepth;
		Invoke(1, 116, L"BevelTopDepth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ThreeDFormat::get_BevelTopInset()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 115, L"BevelTopInset", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_BevelTopInset(float BevelTopInset)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = BevelTopInset;
		Invoke(1, 115, L"BevelTopInset", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoBevelType*/ short ThreeDFormat::get_BevelTopType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 114, L"BevelTopType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoBevelType*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_BevelTopType(/* MsoBevelType*/ short BevelTopType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BevelTopType;
		Invoke(1, 114, L"BevelTopType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ColorFormat ThreeDFormat::get_ContourColor()
	{
		Excel::ColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 123, L"ContourColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float ThreeDFormat::get_ContourWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"ContourWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_ContourWidth(float ContourWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = ContourWidth;
		Invoke(1, 122, L"ContourWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ThreeDFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	float ThreeDFormat::get_Depth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"Depth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_Depth(float Depth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Depth;
		Invoke(1, 100, L"Depth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ColorFormat ThreeDFormat::get_ExtrusionColor()
	{
		Excel::ColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 101, L"ExtrusionColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoExtrusionColorType*/ short ThreeDFormat::get_ExtrusionColorType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"ExtrusionColorType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoExtrusionColorType*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_ExtrusionColorType(/* MsoExtrusionColorType*/ short ExtrusionColorType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ExtrusionColorType;
		Invoke(1, 102, L"ExtrusionColorType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ThreeDFormat::get_FieldOfView()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 124, L"FieldOfView", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_FieldOfView(float FieldOfView)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = FieldOfView;
		Invoke(1, 124, L"FieldOfView", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ThreeDFormat::IncrementRotationHorizontal(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 17, L"IncrementRotationHorizontal", param, returnedValue, DISPATCH_METHOD);
	}

	void ThreeDFormat::IncrementRotationVertical(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 18, L"IncrementRotationVertical", param, returnedValue, DISPATCH_METHOD);
	}

	void ThreeDFormat::IncrementRotationX(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 10, L"IncrementRotationX", param, returnedValue, DISPATCH_METHOD);
	}

	void ThreeDFormat::IncrementRotationY(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 11, L"IncrementRotationY", param, returnedValue, DISPATCH_METHOD);
	}

	void ThreeDFormat::IncrementRotationZ(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 16, L"IncrementRotationZ", param, returnedValue, DISPATCH_METHOD);
	}

	float ThreeDFormat::get_LightAngle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"LightAngle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_LightAngle(float LightAngle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = LightAngle;
		Invoke(1, 126, L"LightAngle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ThreeDFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short ThreeDFormat::get_Perspective()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Perspective", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_Perspective(/* MsoTriState*/ short Perspective)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Perspective;
		Invoke(1, 103, L"Perspective", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPresetCamera*/ short ThreeDFormat::get_PresetCamera()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 120, L"PresetCamera", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetCamera*/ short)returnedValue.iVal;
	}

	/* MsoPresetExtrusionDirection*/ short ThreeDFormat::get_PresetExtrusionDirection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"PresetExtrusionDirection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetExtrusionDirection*/ short)returnedValue.iVal;
	}

	/* MsoLightRigType*/ short ThreeDFormat::get_PresetLighting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"PresetLighting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoLightRigType*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_PresetLighting(/* MsoLightRigType*/ short PresetLighting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetLighting;
		Invoke(1, 112, L"PresetLighting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPresetLightingDirection*/ short ThreeDFormat::get_PresetLightingDirection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"PresetLightingDirection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetLightingDirection*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_PresetLightingDirection(/* MsoPresetLightingDirection*/ short PresetLightingDirection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetLightingDirection;
		Invoke(1, 105, L"PresetLightingDirection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPresetLightingSoftness*/ short ThreeDFormat::get_PresetLightingSoftness()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"PresetLightingSoftness", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetLightingSoftness*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_PresetLightingSoftness(/* MsoPresetLightingSoftness*/ short PresetLightingSoftness)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetLightingSoftness;
		Invoke(1, 106, L"PresetLightingSoftness", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPresetMaterial*/ short ThreeDFormat::get_PresetMaterial()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"PresetMaterial", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetMaterial*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_PresetMaterial(/* MsoPresetMaterial*/ short PresetMaterial)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetMaterial;
		Invoke(1, 107, L"PresetMaterial", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPresetThreeDFormat*/ short ThreeDFormat::get_PresetThreeDFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"PresetThreeDFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetThreeDFormat*/ short)returnedValue.iVal;
	}

	/* MsoTriState*/ short ThreeDFormat::get_ProjectText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 125, L"ProjectText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_ProjectText(/* MsoTriState*/ short ProjectText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ProjectText;
		Invoke(1, 125, L"ProjectText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ThreeDFormat::ResetRotation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 12, L"ResetRotation", param, returnedValue, DISPATCH_METHOD);
	}

	float ThreeDFormat::get_RotationX()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"RotationX", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_RotationX(float RotationX)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = RotationX;
		Invoke(1, 109, L"RotationX", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ThreeDFormat::get_RotationY()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"RotationY", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_RotationY(float RotationY)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = RotationY;
		Invoke(1, 110, L"RotationY", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ThreeDFormat::get_RotationZ()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 121, L"RotationZ", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_RotationZ(float RotationZ)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = RotationZ;
		Invoke(1, 121, L"RotationZ", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ThreeDFormat::SetExtrusionDirection(/* MsoPresetExtrusionDirection*/ short PresetExtrusionDirection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetExtrusionDirection;
		Invoke(1, 14, L"SetExtrusionDirection", param, returnedValue, DISPATCH_METHOD);
	}

	void ThreeDFormat::SetPresetCamera(/* MsoPresetCamera*/ short PresetCamera)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetCamera;
		Invoke(1, 15, L"SetPresetCamera", param, returnedValue, DISPATCH_METHOD);
	}

	void ThreeDFormat::SetThreeDFormat(/* MsoPresetThreeDFormat*/ short PresetThreeDFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetThreeDFormat;
		Invoke(1, 13, L"SetThreeDFormat", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short ThreeDFormat::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ThreeDFormat::put_Visible(/* MsoTriState*/ short Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 111, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ThreeDFormat::get_Z()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 113, L"Z", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ThreeDFormat::put_Z(float Z)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Z;
		Invoke(1, 113, L"Z", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________FillFormat
	FillFormat::FillFormat()
	{
	}

	FillFormat::~FillFormat()
	{
	}

	Com::Object FillFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ColorFormat FillFormat::get_BackColor()
	{
		Excel::ColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 100, L"BackColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void FillFormat::put_BackColor(Excel::ColorFormat& BackColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = BackColor.dispatch.GetInterfacePtr();
		Invoke(1, 100, L"BackColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void FillFormat::Background()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 10, L"Background", param, returnedValue, DISPATCH_METHOD);
	}

	long FillFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::ColorFormat FillFormat::get_ForeColor()
	{
		Excel::ColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 101, L"ForeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void FillFormat::put_ForeColor(Excel::ColorFormat& ForeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = ForeColor.dispatch.GetInterfacePtr();
		Invoke(1, 101, L"ForeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float FillFormat::get_GradientAngle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"GradientAngle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void FillFormat::put_GradientAngle(float GradientAngle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = GradientAngle;
		Invoke(1, 123, L"GradientAngle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoGradientColorType*/ short FillFormat::get_GradientColorType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"GradientColorType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoGradientColorType*/ short)returnedValue.iVal;
	}

	float FillFormat::get_GradientDegree()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"GradientDegree", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	Com::Object FillFormat::get_GradientStops()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 114, L"GradientStops", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoGradientStyle*/ short FillFormat::get_GradientStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"GradientStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoGradientStyle*/ short)returnedValue.iVal;
	}

	int FillFormat::get_GradientVariant()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"GradientVariant", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.intVal;
	}

	void FillFormat::OneColorGradient(/* MsoGradientStyle*/ short Style, int Variant, float Degree)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = Style;
		param[1].vt = VT_INT;
		param[1].intVal = Variant;
		param[2].vt = VT_R4;
		param[2].fltVal = Degree;
		Invoke(3, 11, L"OneColorGradient", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object FillFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoPatternType*/ short FillFormat::get_Pattern()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"Pattern", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPatternType*/ short)returnedValue.iVal;
	}

	void FillFormat::Patterned(/* MsoPatternType*/ short Pattern)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Pattern;
		Invoke(1, 12, L"Patterned", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object FillFormat::get_PictureEffects()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 122, L"PictureEffects", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void FillFormat::PresetGradient(/* MsoGradientStyle*/ short Style, int Variant, /* MsoPresetGradientType*/ short PresetGradientType)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = Style;
		param[1].vt = VT_INT;
		param[1].intVal = Variant;
		param[2].vt = VT_I2;
		param[2].iVal = PresetGradientType;
		Invoke(3, 13, L"PresetGradient", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoPresetGradientType*/ short FillFormat::get_PresetGradientType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"PresetGradientType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetGradientType*/ short)returnedValue.iVal;
	}

	/* MsoPresetTexture*/ short FillFormat::get_PresetTexture()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"PresetTexture", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetTexture*/ short)returnedValue.iVal;
	}

	void FillFormat::PresetTextured(/* MsoPresetTexture*/ short PresetTexture)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetTexture;
		Invoke(1, 14, L"PresetTextured", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short FillFormat::get_RotateWithObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 121, L"RotateWithObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void FillFormat::put_RotateWithObject(/* MsoTriState*/ short RotateWithObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RotateWithObject;
		Invoke(1, 121, L"RotateWithObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void FillFormat::Solid()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 15, L"Solid", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTextureAlignment*/ short FillFormat::get_TextureAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"TextureAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTextureAlignment*/ short)returnedValue.iVal;
	}

	void FillFormat::put_TextureAlignment(/* MsoTextureAlignment*/ short TextureAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextureAlignment;
		Invoke(1, 117, L"TextureAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float FillFormat::get_TextureHorizontalScale()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"TextureHorizontalScale", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void FillFormat::put_TextureHorizontalScale(float TextureHorizontalScale)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = TextureHorizontalScale;
		Invoke(1, 118, L"TextureHorizontalScale", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring FillFormat::get_TextureName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"TextureName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	float FillFormat::get_TextureOffsetX()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 115, L"TextureOffsetX", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void FillFormat::put_TextureOffsetX(float TextureOffsetX)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = TextureOffsetX;
		Invoke(1, 115, L"TextureOffsetX", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float FillFormat::get_TextureOffsetY()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 116, L"TextureOffsetY", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void FillFormat::put_TextureOffsetY(float TextureOffsetY)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = TextureOffsetY;
		Invoke(1, 116, L"TextureOffsetY", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short FillFormat::get_TextureTile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 120, L"TextureTile", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void FillFormat::put_TextureTile(/* MsoTriState*/ short TextureTile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextureTile;
		Invoke(1, 120, L"TextureTile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTextureType*/ short FillFormat::get_TextureType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"TextureType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTextureType*/ short)returnedValue.iVal;
	}

	float FillFormat::get_TextureVerticalScale()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 119, L"TextureVerticalScale", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void FillFormat::put_TextureVerticalScale(float TextureVerticalScale)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = TextureVerticalScale;
		Invoke(1, 119, L"TextureVerticalScale", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float FillFormat::get_Transparency()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Transparency", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void FillFormat::put_Transparency(float Transparency)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Transparency;
		Invoke(1, 111, L"Transparency", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void FillFormat::TwoColorGradient(/* MsoGradientStyle*/ short Style, int Variant)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Style;
		param[1].vt = VT_INT;
		param[1].intVal = Variant;
		Invoke(2, 16, L"TwoColorGradient", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoFillType*/ short FillFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoFillType*/ short)returnedValue.iVal;
	}

	void FillFormat::UserPicture(wstring PictureFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PictureFile.c_str());
		Invoke(1, 17, L"UserPicture", param, returnedValue, DISPATCH_METHOD);
	}

	void FillFormat::UserTextured(wstring TextureFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextureFile.c_str());
		Invoke(1, 18, L"UserTextured", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short FillFormat::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 113, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void FillFormat::put_Visible(/* MsoTriState*/ short Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 113, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________DiagramNodes
	DiagramNodes::DiagramNodes()
	{
	}

	DiagramNodes::~DiagramNodes()
	{
	}

	Com::Object DiagramNodes::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	int DiagramNodes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.intVal;
	}

	long DiagramNodes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::DiagramNode DiagramNodes::Item(_variant_t Index)
	{
		Excel::DiagramNode returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DiagramNodes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 100, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DiagramNodes::SelectAll()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 10, L"SelectAll", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr DiagramNodes::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________DiagramNodeChildren
	DiagramNodeChildren::DiagramNodeChildren()
	{
	}

	DiagramNodeChildren::~DiagramNodeChildren()
	{
	}

	Excel::DiagramNode DiagramNodeChildren::AddNode(_variant_t Index, /* MsoDiagramNodeType*/ short nodeType)
	{
		Excel::DiagramNode returnedValue;
		Com::Param param(2);
		param[0] = Index;
		param[1].vt = VT_I2;
		param[1].iVal = nodeType;
		Invoke(2, 10, L"AddNode", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DiagramNodeChildren::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	int DiagramNodeChildren::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.intVal;
	}

	long DiagramNodeChildren::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::DiagramNode DiagramNodeChildren::get_FirstChild()
	{
		Excel::DiagramNode returnedValue;
		Com::Param param;
		Invoke(0, 103, L"FirstChild", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DiagramNode DiagramNodeChildren::Item(_variant_t Index)
	{
		Excel::DiagramNode returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::DiagramNode DiagramNodeChildren::get_LastChild()
	{
		Excel::DiagramNode returnedValue;
		Com::Param param;
		Invoke(0, 104, L"LastChild", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DiagramNodeChildren::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 100, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DiagramNodeChildren::SelectAll()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 11, L"SelectAll", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr DiagramNodeChildren::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________DiagramNode
	DiagramNode::DiagramNode()
	{
	}

	DiagramNode::~DiagramNode()
	{
	}

	Excel::DiagramNode DiagramNode::AddNode(/* MsoRelativeNodePosition*/ short pos, /* MsoDiagramNodeType*/ short nodeType)
	{
		Excel::DiagramNode returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = pos;
		param[1].vt = VT_I2;
		param[1].iVal = nodeType;
		Invoke(2, 10, L"AddNode", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DiagramNode::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DiagramNodeChildren DiagramNode::get_Children()
	{
		Excel::DiagramNodeChildren returnedValue;
		Com::Param param;
		Invoke(0, 101, L"Children", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DiagramNode DiagramNode::CloneNode(bool copyChildren, Excel::DiagramNode& pTargetNode, /* MsoRelativeNodePosition*/ short pos)
	{
		Excel::DiagramNode returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (copyChildren == true) ? 1 : 0;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = pTargetNode.dispatch.GetInterfacePtr();
		param[2].vt = VT_I2;
		param[2].iVal = pos;
		Invoke(3, 15, L"CloneNode", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long DiagramNode::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DiagramNode::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 11, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object DiagramNode::get_Diagram()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 104, L"Diagram", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoOrgChartLayoutType*/ short DiagramNode::get_Layout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"Layout", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoOrgChartLayoutType*/ short)returnedValue.iVal;
	}

	void DiagramNode::put_Layout(/* MsoOrgChartLayoutType*/ short Layout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Layout;
		Invoke(1, 105, L"Layout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DiagramNode::MoveNode(Excel::DiagramNode& pTargetNode, /* MsoRelativeNodePosition*/ short pos)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = pTargetNode.dispatch.GetInterfacePtr();
		param[1].vt = VT_I2;
		param[1].iVal = pos;
		Invoke(2, 12, L"MoveNode", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::DiagramNode DiagramNode::NextNode()
	{
		Excel::DiagramNode returnedValue;
		Com::Param param;
		Invoke(0, 17, L"NextNode", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DiagramNode::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 100, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DiagramNode DiagramNode::PrevNode()
	{
		Excel::DiagramNode returnedValue;
		Com::Param param;
		Invoke(0, 18, L"PrevNode", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DiagramNode::ReplaceNode(Excel::DiagramNode& pTargetNode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = pTargetNode.dispatch.GetInterfacePtr();
		Invoke(1, 13, L"ReplaceNode", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::DiagramNode DiagramNode::get_Root()
	{
		Excel::DiagramNode returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Root", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Shape DiagramNode::get_Shape()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 102, L"Shape", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DiagramNode::SwapNode(Excel::DiagramNode& pTargetNode, bool swapChildren)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = pTargetNode.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL;
		param[1].boolVal = (swapChildren == true) ? 1 : 0;
		Invoke(2, 14, L"SwapNode", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Shape DiagramNode::get_TextShape()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 106, L"TextShape", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DiagramNode::TransferChildren(Excel::DiagramNode& pReceivingNode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = pReceivingNode.dispatch.GetInterfacePtr();
		Invoke(1, 16, L"TransferChildren", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________IRTDUpdateEvent
	IRTDUpdateEvent::IRTDUpdateEvent()
	{
	}

	IRTDUpdateEvent::~IRTDUpdateEvent()
	{
	}

	void IRTDUpdateEvent::Disconnect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 12, L"Disconnect", param, returnedValue, DISPATCH_METHOD);
	}

	long IRTDUpdateEvent::get_HeartbeatInterval()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 11, L"HeartbeatInterval", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void IRTDUpdateEvent::put_HeartbeatInterval(long HeartbeatInterval)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = HeartbeatInterval;
		Invoke(1, 11, L"HeartbeatInterval", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void IRTDUpdateEvent::UpdateNotify()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 10, L"UpdateNotify", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________IRtdServer
	IRtdServer::IRtdServer()
	{
	}

	IRtdServer::~IRtdServer()
	{
	}

	_variant_t IRtdServer::ConnectData(long TopicID, SAFEARRAY* Strings, VARIANT_BOOL& GetNewValues)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I4;
		param[0].lVal = TopicID;
		param[1].vt = VT_SAFEARRAY | VT_BYREF;
		param[1].pparray = &Strings;
		param[2].vt = VT_BOOL | VT_BYREF;
		param[2].pboolVal = &GetNewValues;
		Invoke(3, 11, L"ConnectData", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void IRtdServer::DisconnectData(long TopicID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = TopicID;
		Invoke(1, 13, L"DisconnectData", param, returnedValue, DISPATCH_METHOD);
	}

	long IRtdServer::Heartbeat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 14, L"Heartbeat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	void IRtdServer::RefreshData(long& TopicCount)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4 | VT_BYREF;
		param[0].plVal = &TopicCount;
		Invoke(1, 12, L"RefreshData", param, returnedValue, DISPATCH_METHOD);
	}

	long IRtdServer::ServerStart(Excel::IRTDUpdateEvent& CallbackObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = CallbackObject.dispatch.GetInterfacePtr();
		Invoke(1, 10, L"ServerStart", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	void IRtdServer::ServerTerminate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 15, L"ServerTerminate", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________TextFrame2
	TextFrame2::TextFrame2()
	{
	}

	TextFrame2::~TextFrame2()
	{
	}

	Com::Object TextFrame2::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoAutoSize*/ short TextFrame2::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoAutoSize*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_AutoSize(/* MsoAutoSize*/ short AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutoSize;
		Invoke(1, 111, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TextFrame2::get_Column()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 115, L"Column", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long TextFrame2::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TextFrame2::DeleteText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"DeleteText", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short TextFrame2::get_HasText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 113, L"HasText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	/* MsoHorizontalAnchor*/ short TextFrame2::get_HorizontalAnchor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"HorizontalAnchor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoHorizontalAnchor*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_HorizontalAnchor(/* MsoHorizontalAnchor*/ short HorizontalAnchor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = HorizontalAnchor;
		Invoke(1, 105, L"HorizontalAnchor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextFrame2::get_MarginBottom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"MarginBottom", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextFrame2::put_MarginBottom(float MarginBottom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = MarginBottom;
		Invoke(1, 100, L"MarginBottom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextFrame2::get_MarginLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"MarginLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextFrame2::put_MarginLeft(float MarginLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = MarginLeft;
		Invoke(1, 101, L"MarginLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextFrame2::get_MarginRight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"MarginRight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextFrame2::put_MarginRight(float MarginRight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = MarginRight;
		Invoke(1, 102, L"MarginRight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextFrame2::get_MarginTop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"MarginTop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextFrame2::put_MarginTop(float MarginTop)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = MarginTop;
		Invoke(1, 103, L"MarginTop", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short TextFrame2::get_NoTextRotation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"NoTextRotation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_NoTextRotation(/* MsoTriState*/ short NoTextRotation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = NoTextRotation;
		Invoke(1, 118, L"NoTextRotation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTextOrientation*/ short TextFrame2::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTextOrientation*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_Orientation(/* MsoTextOrientation*/ short Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		Invoke(1, 104, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TextFrame2::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoPathFormat*/ short TextFrame2::get_PathFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"PathFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPathFormat*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_PathFormat(/* MsoPathFormat*/ short PathFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PathFormat;
		Invoke(1, 107, L"PathFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TextFrame2::get_Ruler()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Ruler", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object TextFrame2::get_TextRange()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 114, L"TextRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ThreeDFormat TextFrame2::get_ThreeD()
	{
		Excel::ThreeDFormat returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ThreeD", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoVerticalAnchor*/ short TextFrame2::get_VerticalAnchor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"VerticalAnchor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoVerticalAnchor*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_VerticalAnchor(/* MsoVerticalAnchor*/ short VerticalAnchor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = VerticalAnchor;
		Invoke(1, 106, L"VerticalAnchor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoWarpFormat*/ short TextFrame2::get_WarpFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"WarpFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoWarpFormat*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_WarpFormat(/* MsoWarpFormat*/ short WarpFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = WarpFormat;
		Invoke(1, 108, L"WarpFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPresetTextEffect*/ short TextFrame2::get_WordArtformat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"WordArtformat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetTextEffect*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_WordArtformat(/* MsoPresetTextEffect*/ short WordArtformat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = WordArtformat;
		Invoke(1, 109, L"WordArtformat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short TextFrame2::get_WordWrap()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"WordWrap", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void TextFrame2::put_WordWrap(/* MsoTriState*/ short WordWrap)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = WordWrap;
		Invoke(1, 110, L"WordWrap", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Model3DFormat
	Model3DFormat::Model3DFormat()
	{
	}

	Model3DFormat::~Model3DFormat()
	{
	}

	Com::Object Model3DFormat::get_Application()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1610743808, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short Model3DFormat::get_AutoFit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"AutoFit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void Model3DFormat::put_AutoFit(/* MsoTriState*/ short AutoFit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutoFit;
		Invoke(1, 100, L"AutoFit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Model3DFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610743809, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	float Model3DFormat::get_FieldOfView()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"FieldOfView", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Model3DFormat::put_FieldOfView(float FieldOfView)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = FieldOfView;
		Invoke(1, 104, L"FieldOfView", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Model3DFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float Model3DFormat::get_RotationX()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"RotationX", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Model3DFormat::put_RotationX(float RotationX)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = RotationX;
		Invoke(1, 101, L"RotationX", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Model3DFormat::get_RotationY()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 102, L"RotationY", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Model3DFormat::put_RotationY(float RotationY)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = RotationY;
		Invoke(1, 102, L"RotationY", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Model3DFormat::get_RotationZ()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"RotationZ", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Model3DFormat::put_RotationZ(float RotationZ)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = RotationZ;
		Invoke(1, 103, L"RotationZ", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//_________________________________________________________Application
	ApplicationX::ApplicationX()
	{
	}

	ApplicationX::~ApplicationX()
	{
	}

	void ApplicationX::ActivateMicrosoftApp(Excel::XlMSApplication Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Index;
		Invoke(1, 1095, L"ActivateMicrosoftApp", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range ApplicationX::get_ActiveCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 305, L"ActiveCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartX ApplicationX::get_ActiveChart()
	{
		Excel::ChartX returnedValue;
		Com::Param param;
		Invoke(0, 183, L"ActiveChart", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DialogSheet ApplicationX::get_ActiveDialog()
	{
		Excel::DialogSheet returnedValue;
		Com::Param param;
		Invoke(0, 815, L"ActiveDialog", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ApplicationX::get_ActiveEncryptionSession()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2394, L"ActiveEncryptionSession", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::MenuBar ApplicationX::get_ActiveMenuBar()
	{
		Excel::MenuBar returnedValue;
		Com::Param param;
		Invoke(0, 758, L"ActiveMenuBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_ActivePrinter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 306, L"ActivePrinter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_ActivePrinter(wstring ActivePrinter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ActivePrinter.c_str());
		Invoke(1, 306, L"ActivePrinter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ProtectedViewWindow ApplicationX::get_ActiveProtectedViewWindow()
	{
		Excel::ProtectedViewWindow returnedValue;
		Com::Param param;
		Invoke(0, 2784, L"ActiveProtectedViewWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ApplicationX::get_ActiveSheet()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 307, L"ActiveSheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Window ApplicationX::get_ActiveWindow()
	{
		Excel::Window returnedValue;
		Com::Param param;
		Invoke(0, 759, L"ActiveWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookX ApplicationX::get_ActiveWorkbook()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param;
		Invoke(0, 308, L"ActiveWorkbook", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::AddChartAutoFormat(_variant_t Chart, wstring Name, _variant_t Description)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Chart;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Name.c_str());
		param[2] = Description;
		Invoke(3, 216, L"AddChartAutoFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::AddChartAutoFormat(_variant_t Chart, wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Chart;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Name.c_str());
		Invoke(2, 216, L"AddChartAutoFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::AddCustomList(_variant_t ListArray, _variant_t ByRow)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = ListArray;
		param[1] = ByRow;
		Invoke(2, 780, L"AddCustomList", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::AddCustomList(_variant_t ListArray)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ListArray;
		Invoke(1, 780, L"AddCustomList", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::AddIns ApplicationX::get_AddIns()
	{
		Excel::AddIns returnedValue;
		Com::Param param;
		Invoke(0, 549, L"AddIns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::AddIns2 ApplicationX::get_AddIns2()
	{
		Excel::AddIns2 returnedValue;
		Com::Param param;
		Invoke(0, 2775, L"AddIns2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_AlertBeforeOverwriting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 930, L"AlertBeforeOverwriting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_AlertBeforeOverwriting(bool AlertBeforeOverwriting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AlertBeforeOverwriting == true) ? 1 : 0;
		Invoke(1, 930, L"AlertBeforeOverwriting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_AltStartupPath()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 313, L"AltStartupPath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_AltStartupPath(wstring AltStartupPath)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(AltStartupPath.c_str());
		Invoke(1, 313, L"AltStartupPath", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_AlwaysUseClearType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2381, L"AlwaysUseClearType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_AlwaysUseClearType(bool AlwaysUseClearType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AlwaysUseClearType == true) ? 1 : 0;
		Invoke(1, 2381, L"AlwaysUseClearType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ApplicationX::get_AnswerWizard()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1804, L"AnswerWizard", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX ApplicationX::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_ArbitraryXMLSupportAvailable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2254, L"ArbitraryXMLSupportAvailable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ApplicationX::get_AskToUpdateLinks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 992, L"AskToUpdateLinks", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_AskToUpdateLinks(bool AskToUpdateLinks)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AskToUpdateLinks == true) ? 1 : 0;
		Invoke(1, 992, L"AskToUpdateLinks", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ApplicationX::get_Assistance()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2386, L"Assistance", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ApplicationX::get_Assistant()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1438, L"Assistant", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::AutoCorrect ApplicationX::get_AutoCorrect()
	{
		Excel::AutoCorrect returnedValue;
		Com::Param param;
		Invoke(0, 1145, L"AutoCorrect", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_AutoFormatAsYouTypeReplaceHyperlinks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1955, L"AutoFormatAsYouTypeReplaceHyperlinks", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_AutoFormatAsYouTypeReplaceHyperlinks(bool AutoFormatAsYouTypeReplaceHyperlinks)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoFormatAsYouTypeReplaceHyperlinks == true) ? 1 : 0;
		Invoke(1, 1955, L"AutoFormatAsYouTypeReplaceHyperlinks", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_AutoPercentEntry()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1800, L"AutoPercentEntry", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_AutoPercentEntry(bool AutoPercentEntry)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoPercentEntry == true) ? 1 : 0;
		Invoke(1, 1800, L"AutoPercentEntry", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::AutoRecover ApplicationX::get_AutoRecover()
	{
		Excel::AutoRecover returnedValue;
		Com::Param param;
		Invoke(0, 1949, L"AutoRecover", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoAutomationSecurity*/ short ApplicationX::get_AutomationSecurity()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1941, L"AutomationSecurity", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoAutomationSecurity*/ short)returnedValue.iVal;
	}

	void ApplicationX::put_AutomationSecurity(/* MsoAutomationSecurity*/ short AutomationSecurity)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutomationSecurity;
		Invoke(1, 1941, L"AutomationSecurity", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_Build()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 314, L"Build", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object ApplicationX::get_COMAddIns()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1796, L"COMAddIns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::Calculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 279, L"Calculate", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::get_CalculateBeforeSave()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 315, L"CalculateBeforeSave", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_CalculateBeforeSave(bool CalculateBeforeSave)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CalculateBeforeSave == true) ? 1 : 0;
		Invoke(1, 315, L"CalculateBeforeSave", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::CalculateFull()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1805, L"CalculateFull", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::CalculateFullRebuild()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1945, L"CalculateFullRebuild", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::CalculateUntilAsyncQueriesDone()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2387, L"CalculateUntilAsyncQueriesDone", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCalculation ApplicationX::get_Calculation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 316, L"Calculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCalculation)returnedValue.iVal;
	}

	void ApplicationX::put_Calculation(Excel::XlCalculation Calculation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Calculation;
		Invoke(1, 316, L"Calculation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCalculationInterruptKey ApplicationX::get_CalculationInterruptKey()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1938, L"CalculationInterruptKey", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCalculationInterruptKey)returnedValue.iVal;
	}

	void ApplicationX::put_CalculationInterruptKey(Excel::XlCalculationInterruptKey CalculationInterruptKey)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CalculationInterruptKey;
		Invoke(1, 1938, L"CalculationInterruptKey", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCalculationState ApplicationX::get_CalculationState()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1937, L"CalculationState", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCalculationState)returnedValue.iVal;
	}

	long ApplicationX::get_CalculationVersion()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1806, L"CalculationVersion", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t ApplicationX::get_Caller(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 317, L"Caller", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::get_Caller()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 317, L"Caller", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_CanPlaySounds()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 318, L"CanPlaySounds", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ApplicationX::get_CanRecordSounds()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 319, L"CanRecordSounds", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring ApplicationX::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_CellDragAndDrop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 320, L"CellDragAndDrop", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_CellDragAndDrop(bool CellDragAndDrop)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CellDragAndDrop == true) ? 1 : 0;
		Invoke(1, 320, L"CellDragAndDrop", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range ApplicationX::get_Cells()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 238, L"Cells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ApplicationX::CentimetersToPoints(double Centimeters)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Centimeters;
		Invoke(1, 1086, L"CentimetersToPoints", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	bool ApplicationX::get_ChartDataPointTrack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2998, L"ChartDataPointTrack", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ChartDataPointTrack(bool ChartDataPointTrack)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ChartDataPointTrack == true) ? 1 : 0;
		Invoke(1, 2998, L"ChartDataPointTrack", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Sheets ApplicationX::get_Charts()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 121, L"Charts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::CheckAbort(_variant_t KeepAbort)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = KeepAbort;
		Invoke(1, 1952, L"CheckAbort", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::CheckAbort()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1952, L"CheckAbort", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::CheckSpelling(wstring Word, _variant_t CustomDictionary, _variant_t IgnoreUppercase)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Word.c_str());
		param[1] = CustomDictionary;
		param[2] = IgnoreUppercase;
		Invoke(3, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool ApplicationX::CheckSpelling(wstring Word)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Word.c_str());
		Invoke(1, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	_variant_t ApplicationX::get_ClipboardFormats(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 321, L"ClipboardFormats", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::get_ClipboardFormats()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 321, L"ClipboardFormats", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_ClusterConnector()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2779, L"ClusterConnector", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_ClusterConnector(wstring ClusterConnector)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ClusterConnector.c_str());
		Invoke(1, 2779, L"ClusterConnector", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ColorButtons()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 365, L"ColorButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ColorButtons(bool ColorButtons)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ColorButtons == true) ? 1 : 0;
		Invoke(1, 365, L"ColorButtons", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range ApplicationX::get_Columns()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 241, L"Columns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ApplicationX::get_CommandBars()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1439, L"CommandBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCommandUnderlines ApplicationX::get_CommandUnderlines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 323, L"CommandUnderlines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCommandUnderlines)returnedValue.iVal;
	}

	void ApplicationX::put_CommandUnderlines(Excel::XlCommandUnderlines CommandUnderlines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CommandUnderlines;
		Invoke(1, 323, L"CommandUnderlines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ConstrainNumeric()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 324, L"ConstrainNumeric", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ConstrainNumeric(bool ConstrainNumeric)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ConstrainNumeric == true) ? 1 : 0;
		Invoke(1, 324, L"ConstrainNumeric", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ControlCharacters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 233, L"ControlCharacters", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ControlCharacters(bool ControlCharacters)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ControlCharacters == true) ? 1 : 0;
		Invoke(1, 233, L"ControlCharacters", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ApplicationX::ConvertFormula(_variant_t Formula, Excel::XlReferenceStyle FromReferenceStyle, _variant_t ToReferenceStyle, _variant_t ToAbsolute, _variant_t RelativeTo)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Formula;
		param[1].vt = VT_I2;
		param[1].iVal = FromReferenceStyle;
		param[2] = ToReferenceStyle;
		param[3] = ToAbsolute;
		param[4] = RelativeTo;
		Invoke(5, 325, L"ConvertFormula", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::ConvertFormula(_variant_t Formula, Excel::XlReferenceStyle FromReferenceStyle)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Formula;
		param[1].vt = VT_I2;
		param[1].iVal = FromReferenceStyle;
		Invoke(2, 325, L"ConvertFormula", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ApplicationX::get_CopyObjectsWithCells()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 991, L"CopyObjectsWithCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_CopyObjectsWithCells(bool CopyObjectsWithCells)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CopyObjectsWithCells == true) ? 1 : 0;
		Invoke(1, 991, L"CopyObjectsWithCells", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator ApplicationX::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlMousePointer ApplicationX::get_Cursor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1161, L"Cursor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlMousePointer)returnedValue.iVal;
	}

	void ApplicationX::put_Cursor(Excel::XlMousePointer Cursor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Cursor;
		Invoke(1, 1161, L"Cursor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_CursorMovement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 232, L"CursorMovement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_CursorMovement(long CursorMovement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = CursorMovement;
		Invoke(1, 232, L"CursorMovement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_CustomListCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 787, L"CustomListCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCutCopyMode ApplicationX::get_CutCopyMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 330, L"CutCopyMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCutCopyMode)returnedValue.iVal;
	}

	void ApplicationX::put_CutCopyMode(Excel::XlCutCopyMode CutCopyMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CutCopyMode;
		Invoke(1, 330, L"CutCopyMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_DDEAppReturnCode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 332, L"DDEAppReturnCode", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::DDEExecute(long Channel, wstring String)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Channel;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(String.c_str());
		Invoke(2, 333, L"DDEExecute", param, returnedValue, DISPATCH_METHOD);
	}

	long ApplicationX::DDEInitiate(wstring App, wstring Topic)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(App.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Topic.c_str());
		Invoke(2, 334, L"DDEInitiate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	void ApplicationX::DDEPoke(long Channel, _variant_t Item, _variant_t Data)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I4;
		param[0].lVal = Channel;
		param[1] = Item;
		param[2] = Data;
		Invoke(3, 335, L"DDEPoke", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ApplicationX::DDERequest(long Channel, wstring Item)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Channel;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Item.c_str());
		Invoke(2, 336, L"DDERequest", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ApplicationX::DDETerminate(long Channel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Channel;
		Invoke(1, 337, L"DDETerminate", param, returnedValue, DISPATCH_METHOD);
	}

	long ApplicationX::get_DataEntryMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 331, L"DataEntryMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_DataEntryMode(long DataEntryMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DataEntryMode;
		Invoke(1, 331, L"DataEntryMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_DecimalSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1809, L"DecimalSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_DecimalSeparator(wstring DecimalSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(DecimalSeparator.c_str());
		Invoke(1, 1809, L"DecimalSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_DefaultFilePath()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1038, L"DefaultFilePath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_DefaultFilePath(wstring DefaultFilePath)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(DefaultFilePath.c_str());
		Invoke(1, 1038, L"DefaultFilePath", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::DefaultPivotTableLayoutOptions ApplicationX::get_DefaultPivotTableLayoutOptions()
	{
		Excel::DefaultPivotTableLayoutOptions returnedValue;
		Com::Param param;
		Invoke(0, 3271, L"DefaultPivotTableLayoutOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlFileFormat ApplicationX::get_DefaultSaveFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1209, L"DefaultSaveFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlFileFormat)returnedValue.iVal;
	}

	void ApplicationX::put_DefaultSaveFormat(Excel::XlFileFormat DefaultSaveFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DefaultSaveFormat;
		Invoke(1, 1209, L"DefaultSaveFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_DefaultSheetDirection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 229, L"DefaultSheetDirection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_DefaultSheetDirection(long DefaultSheetDirection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DefaultSheetDirection;
		Invoke(1, 229, L"DefaultSheetDirection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::DefaultWebOptions ApplicationX::get_DefaultWebOptions()
	{
		Excel::DefaultWebOptions returnedValue;
		Com::Param param;
		Invoke(0, 1797, L"DefaultWebOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_DeferAsyncQueries()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2390, L"DeferAsyncQueries", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DeferAsyncQueries(bool DeferAsyncQueries)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DeferAsyncQueries == true) ? 1 : 0;
		Invoke(1, 2390, L"DeferAsyncQueries", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::DeleteChartAutoFormat(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 217, L"DeleteChartAutoFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::DeleteCustomList(long ListNum)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListNum;
		Invoke(1, 783, L"DeleteCustomList", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Sheets ApplicationX::get_DialogSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 764, L"DialogSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Dialogs ApplicationX::get_Dialogs()
	{
		Excel::Dialogs returnedValue;
		Com::Param param;
		Invoke(0, 761, L"Dialogs", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_DisplayAlerts()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 343, L"DisplayAlerts", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayAlerts(bool DisplayAlerts)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayAlerts == true) ? 1 : 0;
		Invoke(1, 343, L"DisplayAlerts", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayClipboardWindow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 322, L"DisplayClipboardWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayClipboardWindow(bool DisplayClipboardWindow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayClipboardWindow == true) ? 1 : 0;
		Invoke(1, 322, L"DisplayClipboardWindow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCommentDisplayMode ApplicationX::get_DisplayCommentIndicator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1196, L"DisplayCommentIndicator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCommentDisplayMode)returnedValue.iVal;
	}

	void ApplicationX::put_DisplayCommentIndicator(Excel::XlCommentDisplayMode DisplayCommentIndicator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DisplayCommentIndicator;
		Invoke(1, 1196, L"DisplayCommentIndicator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayDocumentActionTaskPane()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2251, L"DisplayDocumentActionTaskPane", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayDocumentActionTaskPane(bool DisplayDocumentActionTaskPane)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayDocumentActionTaskPane == true) ? 1 : 0;
		Invoke(1, 2251, L"DisplayDocumentActionTaskPane", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayDocumentInformationPanel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2380, L"DisplayDocumentInformationPanel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayDocumentInformationPanel(bool DisplayDocumentInformationPanel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayDocumentInformationPanel == true) ? 1 : 0;
		Invoke(1, 2380, L"DisplayDocumentInformationPanel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayExcel4Menus()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 927, L"DisplayExcel4Menus", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayExcel4Menus(bool DisplayExcel4Menus)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayExcel4Menus == true) ? 1 : 0;
		Invoke(1, 927, L"DisplayExcel4Menus", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayFormulaAutoComplete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2384, L"DisplayFormulaAutoComplete", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayFormulaAutoComplete(bool DisplayFormulaAutoComplete)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayFormulaAutoComplete == true) ? 1 : 0;
		Invoke(1, 2384, L"DisplayFormulaAutoComplete", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayFormulaBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 344, L"DisplayFormulaBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayFormulaBar(bool DisplayFormulaBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayFormulaBar == true) ? 1 : 0;
		Invoke(1, 344, L"DisplayFormulaBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayFullScreen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1061, L"DisplayFullScreen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayFullScreen(bool DisplayFullScreen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayFullScreen == true) ? 1 : 0;
		Invoke(1, 1061, L"DisplayFullScreen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayFunctionToolTips()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1940, L"DisplayFunctionToolTips", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayFunctionToolTips(bool DisplayFunctionToolTips)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayFunctionToolTips == true) ? 1 : 0;
		Invoke(1, 1940, L"DisplayFunctionToolTips", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayInfoWindow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1213, L"DisplayInfoWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayInfoWindow(bool DisplayInfoWindow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayInfoWindow == true) ? 1 : 0;
		Invoke(1, 1213, L"DisplayInfoWindow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayInsertOptions()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1947, L"DisplayInsertOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayInsertOptions(bool DisplayInsertOptions)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayInsertOptions == true) ? 1 : 0;
		Invoke(1, 1947, L"DisplayInsertOptions", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayNoteIndicator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 345, L"DisplayNoteIndicator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayNoteIndicator(bool DisplayNoteIndicator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayNoteIndicator == true) ? 1 : 0;
		Invoke(1, 345, L"DisplayNoteIndicator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayPasteOptions()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1946, L"DisplayPasteOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayPasteOptions(bool DisplayPasteOptions)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayPasteOptions == true) ? 1 : 0;
		Invoke(1, 1946, L"DisplayPasteOptions", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayRecentFiles()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 926, L"DisplayRecentFiles", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayRecentFiles(bool DisplayRecentFiles)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayRecentFiles == true) ? 1 : 0;
		Invoke(1, 926, L"DisplayRecentFiles", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayScrollBars()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 346, L"DisplayScrollBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayScrollBars(bool DisplayScrollBars)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayScrollBars == true) ? 1 : 0;
		Invoke(1, 346, L"DisplayScrollBars", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_DisplayStatusBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 347, L"DisplayStatusBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_DisplayStatusBar(bool DisplayStatusBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayStatusBar == true) ? 1 : 0;
		Invoke(1, 347, L"DisplayStatusBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::DisplayXMLSourcePane(_variant_t XmlMap)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = XmlMap;
		Invoke(1, 2252, L"DisplayXMLSourcePane", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::DisplayXMLSourcePane()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2252, L"DisplayXMLSourcePane", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::DoubleClick()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 349, L"DoubleClick", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ApplicationX::Dummy1(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 1782, L"Dummy1", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy1()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1782, L"Dummy1", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ApplicationX::Dummy10(_variant_t arg)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = arg;
		Invoke(1, 1791, L"Dummy10", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool ApplicationX::Dummy10()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1791, L"Dummy10", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Com::Object ApplicationX::get_Dummy101()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1802, L"Dummy101", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::Dummy11()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1792, L"Dummy11", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::Dummy12(Excel::PivotTable& p1, Excel::PivotTable& p2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = p1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = p2.dispatch.GetInterfacePtr();
		Invoke(2, 1803, L"Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ApplicationX::Dummy13(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 1933, L"Dummy13", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy13(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 1933, L"Dummy13", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ApplicationX::Dummy14()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1944, L"Dummy14", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ApplicationX::Dummy2(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		Invoke(8, 1783, L"Dummy2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy2()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1783, L"Dummy2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy20(long grfCompareFunctions)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = grfCompareFunctions;
		Invoke(1, 2373, L"Dummy20", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ApplicationX::get_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2781, L"Dummy22", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_Dummy22(bool Dummy22)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Dummy22 == true) ? 1 : 0;
		Invoke(1, 2781, L"Dummy22", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_Dummy23()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2782, L"Dummy23", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_Dummy23(bool Dummy23)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Dummy23 == true) ? 1 : 0;
		Invoke(1, 2782, L"Dummy23", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ApplicationX::Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1784, L"Dummy3", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy4(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15)
	{
		_variant_t returnedValue;
		Com::Param param(15);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		Invoke(15, 1785, L"Dummy4", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy4()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1785, L"Dummy4", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy5(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13)
	{
		_variant_t returnedValue;
		Com::Param param(13);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		Invoke(13, 1786, L"Dummy5", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy5()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1786, L"Dummy5", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy6()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1787, L"Dummy6", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy7()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1788, L"Dummy7", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy8(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 1789, L"Dummy8", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy8()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1789, L"Dummy8", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Dummy9()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1790, L"Dummy9", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ApplicationX::get_EditDirectlyInCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 929, L"EditDirectlyInCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EditDirectlyInCell(bool EditDirectlyInCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EditDirectlyInCell == true) ? 1 : 0;
		Invoke(1, 929, L"EditDirectlyInCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableAnimations()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1180, L"EnableAnimations", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableAnimations(bool EnableAnimations)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableAnimations == true) ? 1 : 0;
		Invoke(1, 1180, L"EnableAnimations", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableAutoComplete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1179, L"EnableAutoComplete", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableAutoComplete(bool EnableAutoComplete)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableAutoComplete == true) ? 1 : 0;
		Invoke(1, 1179, L"EnableAutoComplete", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlEnableCancelKey ApplicationX::get_EnableCancelKey()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1096, L"EnableCancelKey", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlEnableCancelKey)returnedValue.iVal;
	}

	void ApplicationX::put_EnableCancelKey(Excel::XlEnableCancelKey EnableCancelKey)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = EnableCancelKey;
		Invoke(1, 1096, L"EnableCancelKey", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableCheckFileExtensions()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3158, L"EnableCheckFileExtensions", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableCheckFileExtensions(bool EnableCheckFileExtensions)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableCheckFileExtensions == true) ? 1 : 0;
		Invoke(1, 3158, L"EnableCheckFileExtensions", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableEvents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1212, L"EnableEvents", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableEvents(bool EnableEvents)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableEvents == true) ? 1 : 0;
		Invoke(1, 1212, L"EnableEvents", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableLargeOperationAlert()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2388, L"EnableLargeOperationAlert", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableLargeOperationAlert(bool EnableLargeOperationAlert)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableLargeOperationAlert == true) ? 1 : 0;
		Invoke(1, 2388, L"EnableLargeOperationAlert", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableLivePreview()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2379, L"EnableLivePreview", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableLivePreview(bool EnableLivePreview)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableLivePreview == true) ? 1 : 0;
		Invoke(1, 2379, L"EnableLivePreview", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableMacroAnimations()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2997, L"EnableMacroAnimations", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableMacroAnimations(bool EnableMacroAnimations)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableMacroAnimations == true) ? 1 : 0;
		Invoke(1, 2997, L"EnableMacroAnimations", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableSound()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1197, L"EnableSound", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableSound(bool EnableSound)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableSound == true) ? 1 : 0;
		Invoke(1, 1197, L"EnableSound", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_EnableTipWizard()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1064, L"EnableTipWizard", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_EnableTipWizard(bool EnableTipWizard)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableTipWizard == true) ? 1 : 0;
		Invoke(1, 1064, L"EnableTipWizard", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ErrorCheckingOptions ApplicationX::get_ErrorCheckingOptions()
	{
		Excel::ErrorCheckingOptions returnedValue;
		Com::Param param;
		Invoke(0, 1954, L"ErrorCheckingOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 1, L"Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Sheets ApplicationX::get_Excel4IntlMacroSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 581, L"Excel4IntlMacroSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sheets ApplicationX::get_Excel4MacroSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 579, L"Excel4MacroSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::ExecuteExcel4Macro(wstring String)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(String.c_str());
		Invoke(1, 350, L"ExecuteExcel4Macro", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ApplicationX::get_ExtendList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1793, L"ExtendList", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ExtendList(bool ExtendList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ExtendList == true) ? 1 : 0;
		Invoke(1, 1793, L"ExtendList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoFeatureInstall*/ short ApplicationX::get_FeatureInstall()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1808, L"FeatureInstall", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoFeatureInstall*/ short)returnedValue.iVal;
	}

	void ApplicationX::put_FeatureInstall(/* MsoFeatureInstall*/ short FeatureInstall)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = FeatureInstall;
		Invoke(1, 1808, L"FeatureInstall", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ApplicationX::get_FileConverters(_variant_t Index1, _variant_t Index2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Index1;
		param[1] = Index2;
		Invoke(2, 931, L"FileConverters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::get_FileConverters()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 931, L"FileConverters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ApplicationX::get_FileDialog(/* MsoFileDialogType*/ short fileDialogType)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = fileDialogType;
		Invoke(1, 1942, L"FileDialog", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::FileExportConverters ApplicationX::get_FileExportConverters()
	{
		Excel::FileExportConverters returnedValue;
		Com::Param param;
		Invoke(0, 2768, L"FileExportConverters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ApplicationX::get_FileFind()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1201, L"FileFind", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ApplicationX::get_FileSearch()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1200, L"FileSearch", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoFileValidationMode*/ short ApplicationX::get_FileValidation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2788, L"FileValidation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoFileValidationMode*/ short)returnedValue.iVal;
	}

	void ApplicationX::put_FileValidation(/* MsoFileValidationMode*/ short FileValidation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = FileValidation;
		Invoke(1, 2788, L"FileValidation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlFileValidationPivotMode ApplicationX::get_FileValidationPivot()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2789, L"FileValidationPivot", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlFileValidationPivotMode)returnedValue.iVal;
	}

	void ApplicationX::put_FileValidationPivot(Excel::XlFileValidationPivotMode FileValidationPivot)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = FileValidationPivot;
		Invoke(1, 2789, L"FileValidationPivot", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::FindFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1771, L"FindFile", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::CellFormat ApplicationX::get_FindFormat()
	{
		Excel::CellFormat returnedValue;
		Com::Param param;
		Invoke(0, 1934, L"FindFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::put_FindFormat(Excel::CellFormat& FindFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = FindFormat.dispatch.GetInterfacePtr();
		Invoke(1, 1934, L"FindFormat", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	bool ApplicationX::get_FixedDecimal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 351, L"FixedDecimal", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_FixedDecimal(bool FixedDecimal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FixedDecimal == true) ? 1 : 0;
		Invoke(1, 351, L"FixedDecimal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_FixedDecimalPlaces()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 352, L"FixedDecimalPlaces", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_FixedDecimalPlaces(long FixedDecimalPlaces)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = FixedDecimalPlaces;
		Invoke(1, 352, L"FixedDecimalPlaces", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_FlashFill()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2996, L"FlashFill", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_FlashFill(bool FlashFill)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FlashFill == true) ? 1 : 0;
		Invoke(1, 2996, L"FlashFill", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_FlashFillMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2999, L"FlashFillMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_FlashFillMode(bool FlashFillMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FlashFillMode == true) ? 1 : 0;
		Invoke(1, 2999, L"FlashFillMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_FormulaBarHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2383, L"FormulaBarHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_FormulaBarHeight(long FormulaBarHeight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = FormulaBarHeight;
		Invoke(1, 2383, L"FormulaBarHeight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_GenerateGetPivotData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1948, L"GenerateGetPivotData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_GenerateGetPivotData(bool GenerateGetPivotData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (GenerateGetPivotData == true) ? 1 : 0;
		Invoke(1, 1948, L"GenerateGetPivotData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlGenerateTableRefs ApplicationX::get_GenerateTableRefs()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2385, L"GenerateTableRefs", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlGenerateTableRefs)returnedValue.iVal;
	}

	void ApplicationX::put_GenerateTableRefs(Excel::XlGenerateTableRefs GenerateTableRefs)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = GenerateTableRefs;
		Invoke(1, 2385, L"GenerateTableRefs", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ApplicationX::GetCustomListContents(long ListNum)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListNum;
		Invoke(1, 786, L"GetCustomListContents", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ApplicationX::GetCustomListNum(_variant_t ListArray)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ListArray;
		Invoke(1, 785, L"GetCustomListNum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	_variant_t ApplicationX::GetOpenFilename(_variant_t FileFilter, _variant_t FilterIndex, _variant_t Title, _variant_t ButtonText, _variant_t MultiSelect)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = FileFilter;
		param[1] = FilterIndex;
		param[2] = Title;
		param[3] = ButtonText;
		param[4] = MultiSelect;
		Invoke(5, 1075, L"GetOpenFilename", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::GetOpenFilename()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1075, L"GetOpenFilename", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring ApplicationX::GetPhonetic(_variant_t Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Text;
		Invoke(1, 1795, L"GetPhonetic", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring ApplicationX::GetPhonetic()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1795, L"GetPhonetic", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	_variant_t ApplicationX::GetSaveAsFilename(_variant_t InitialFilename, _variant_t FileFilter, _variant_t FilterIndex, _variant_t Title, _variant_t ButtonText)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = InitialFilename;
		param[1] = FileFilter;
		param[2] = FilterIndex;
		param[3] = Title;
		param[4] = ButtonText;
		Invoke(5, 1076, L"GetSaveAsFilename", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::GetSaveAsFilename()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1076, L"GetSaveAsFilename", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ApplicationX::Goto(_variant_t Reference, _variant_t Scroll)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Reference;
		param[1] = Scroll;
		Invoke(2, 475, L"Goto", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::Goto()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 475, L"Goto", param, returnedValue, DISPATCH_METHOD);
	}

	double ApplicationX::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ApplicationX::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::Help(_variant_t HelpFile, _variant_t HelpContextID)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = HelpFile;
		param[1] = HelpContextID;
		Invoke(2, 354, L"Help", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::Help()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 354, L"Help", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::get_HighQualityModeForGraphics()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2395, L"HighQualityModeForGraphics", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_HighQualityModeForGraphics(bool HighQualityModeForGraphics)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HighQualityModeForGraphics == true) ? 1 : 0;
		Invoke(1, 2395, L"HighQualityModeForGraphics", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_Hinstance()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1951, L"Hinstance", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t ApplicationX::get_HinstancePtr()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2787, L"HinstancePtr", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ApplicationX::get_Hwnd()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1950, L"Hwnd", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool ApplicationX::get_IgnoreRemoteRequests()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 356, L"IgnoreRemoteRequests", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_IgnoreRemoteRequests(bool IgnoreRemoteRequests)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IgnoreRemoteRequests == true) ? 1 : 0;
		Invoke(1, 356, L"IgnoreRemoteRequests", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ApplicationX::InchesToPoints(double Inches)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Inches;
		Invoke(1, 1087, L"InchesToPoints", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t ApplicationX::InputBox(wstring Prompt, _variant_t Title, _variant_t Default, _variant_t Left, _variant_t Top, _variant_t HelpFile, _variant_t HelpContextID, _variant_t Type)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Prompt.c_str());
		param[1] = Title;
		param[2] = Default;
		param[3] = Left;
		param[4] = Top;
		param[5] = HelpFile;
		param[6] = HelpContextID;
		param[7] = Type;
		Invoke(8, 357, L"InputBox", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::InputBox(wstring Prompt)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Prompt.c_str());
		Invoke(1, 357, L"InputBox", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ApplicationX::get_Interactive()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 361, L"Interactive", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_Interactive(bool Interactive)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Interactive == true) ? 1 : 0;
		Invoke(1, 361, L"Interactive", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ApplicationX::get_International(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 362, L"International", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::get_International()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 362, L"International", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ApplicationX::Intersect(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		Excel::Range returnedValue;
		Com::Param param(30);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 766, L"Intersect", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range ApplicationX::Intersect(Excel::Range& Arg1, Excel::Range& Arg2)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		Invoke(2, 766, L"Intersect", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ApplicationX::get_IsSandboxed()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2785, L"IsSandboxed", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ApplicationX::get_Iteration()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 363, L"Iteration", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_Iteration(bool Iteration)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Iteration == true) ? 1 : 0;
		Invoke(1, 363, L"Iteration", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ApplicationX::get_LanguageSettings()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1801, L"LanguageSettings", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_LargeButtons()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 364, L"LargeButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_LargeButtons(bool LargeButtons)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LargeButtons == true) ? 1 : 0;
		Invoke(1, 364, L"LargeButtons", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_LargeOperationCellThousandCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2389, L"LargeOperationCellThousandCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_LargeOperationCellThousandCount(long LargeOperationCellThousandCount)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = LargeOperationCellThousandCount;
		Invoke(1, 2389, L"LargeOperationCellThousandCount", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ApplicationX::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ApplicationX::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_LibraryPath()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 366, L"LibraryPath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::MacroOptions(_variant_t Macro, _variant_t Description, _variant_t HasMenu, _variant_t MenuText, _variant_t HasShortcutKey, _variant_t ShortcutKey, _variant_t Category, _variant_t StatusBar, _variant_t HelpContextID, _variant_t HelpFile, _variant_t ArgumentDescriptions)
	{
		_variant_t returnedValue;
		Com::Param param(11);
		param[0] = Macro;
		param[1] = Description;
		param[2] = HasMenu;
		param[3] = MenuText;
		param[4] = HasShortcutKey;
		param[5] = ShortcutKey;
		param[6] = Category;
		param[7] = StatusBar;
		param[8] = HelpContextID;
		param[9] = HelpFile;
		param[10] = ArgumentDescriptions;
		Invoke(11, 2770, L"MacroOptions", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::MacroOptions()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2770, L"MacroOptions", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::MailLogoff()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 945, L"MailLogoff", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::MailLogon(_variant_t Name, _variant_t Password, _variant_t DownloadNewMail)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Name;
		param[1] = Password;
		param[2] = DownloadNewMail;
		Invoke(3, 943, L"MailLogon", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::MailLogon()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 943, L"MailLogon", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ApplicationX::get_MailSession()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 942, L"MailSession", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlMailSystem ApplicationX::get_MailSystem()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 971, L"MailSystem", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlMailSystem)returnedValue.iVal;
	}

	bool ApplicationX::get_MapPaperSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1959, L"MapPaperSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_MapPaperSize(bool MapPaperSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MapPaperSize == true) ? 1 : 0;
		Invoke(1, 1959, L"MapPaperSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_MathCoprocessorAvailable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 367, L"MathCoprocessorAvailable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	double ApplicationX::get_MaxChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 368, L"MaxChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ApplicationX::put_MaxChange(double MaxChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = MaxChange;
		Invoke(1, 368, L"MaxChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_MaxIterations()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 369, L"MaxIterations", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_MaxIterations(long MaxIterations)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MaxIterations;
		Invoke(1, 369, L"MaxIterations", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_MeasurementUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2375, L"MeasurementUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_MeasurementUnit(long MeasurementUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MeasurementUnit;
		Invoke(1, 2375, L"MeasurementUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_MemoryFree()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 370, L"MemoryFree", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ApplicationX::get_MemoryTotal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 371, L"MemoryTotal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ApplicationX::get_MemoryUsed()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 372, L"MemoryUsed", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::MenuBars ApplicationX::get_MenuBars()
	{
		Excel::MenuBars returnedValue;
		Com::Param param;
		Invoke(0, 589, L"MenuBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_MergeInstances()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3000, L"MergeInstances", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_MergeInstances(bool MergeInstances)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MergeInstances == true) ? 1 : 0;
		Invoke(1, 3000, L"MergeInstances", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Modules ApplicationX::get_Modules()
	{
		Excel::Modules returnedValue;
		Com::Param param;
		Invoke(0, 582, L"Modules", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_MouseAvailable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 373, L"MouseAvailable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ApplicationX::get_MoveAfterReturn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 374, L"MoveAfterReturn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_MoveAfterReturn(bool MoveAfterReturn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MoveAfterReturn == true) ? 1 : 0;
		Invoke(1, 374, L"MoveAfterReturn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlDirection ApplicationX::get_MoveAfterReturnDirection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1144, L"MoveAfterReturnDirection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDirection)returnedValue.iVal;
	}

	void ApplicationX::put_MoveAfterReturnDirection(Excel::XlDirection MoveAfterReturnDirection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MoveAfterReturnDirection;
		Invoke(1, 1144, L"MoveAfterReturnDirection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::MultiThreadedCalculation ApplicationX::get_MultiThreadedCalculation()
	{
		Excel::MultiThreadedCalculation returnedValue;
		Com::Param param;
		Invoke(0, 2391, L"MultiThreadedCalculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::Names ApplicationX::get_Names()
	{
		Excel::Names returnedValue;
		Com::Param param;
		Invoke(0, 442, L"Names", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_NetworkTemplatesPath()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 388, L"NetworkTemplatesPath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object ApplicationX::get_NewWorkbook()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1565, L"NewWorkbook", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookX ApplicationX::NextLetter()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param;
		Invoke(0, 972, L"NextLetter", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ODBCErrors ApplicationX::get_ODBCErrors()
	{
		Excel::ODBCErrors returnedValue;
		Com::Param param;
		Invoke(0, 1203, L"ODBCErrors", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ApplicationX::get_ODBCTimeout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1204, L"ODBCTimeout", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_ODBCTimeout(long ODBCTimeout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ODBCTimeout;
		Invoke(1, 1204, L"ODBCTimeout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::OLEDBErrors ApplicationX::get_OLEDBErrors()
	{
		Excel::OLEDBErrors returnedValue;
		Com::Param param;
		Invoke(0, 1794, L"OLEDBErrors", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_OnCalculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 625, L"OnCalculate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_OnCalculate(wstring OnCalculate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnCalculate.c_str());
		Invoke(1, 625, L"OnCalculate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_OnData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 629, L"OnData", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_OnData(wstring OnData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnData.c_str());
		Invoke(1, 629, L"OnData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_OnDoubleClick()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_OnDoubleClick(wstring OnDoubleClick)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnDoubleClick.c_str());
		Invoke(1, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_OnEntry()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 627, L"OnEntry", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_OnEntry(wstring OnEntry)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnEntry.c_str());
		Invoke(1, 627, L"OnEntry", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::OnKey(wstring Key, _variant_t Procedure)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Key.c_str());
		param[1] = Procedure;
		Invoke(2, 626, L"OnKey", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::OnKey(wstring Key)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Key.c_str());
		Invoke(1, 626, L"OnKey", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::OnRepeat(wstring Text, wstring Procedure)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Procedure.c_str());
		Invoke(2, 769, L"OnRepeat", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ApplicationX::get_OnSheetActivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_OnSheetActivate(wstring OnSheetActivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetActivate.c_str());
		Invoke(1, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_OnSheetDeactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_OnSheetDeactivate(wstring OnSheetDeactivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetDeactivate.c_str());
		Invoke(1, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::OnTime(_variant_t EarliestTime, wstring Procedure, _variant_t LatestTime, _variant_t Schedule)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = EarliestTime;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Procedure.c_str());
		param[2] = LatestTime;
		param[3] = Schedule;
		Invoke(4, 624, L"OnTime", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::OnTime(_variant_t EarliestTime, wstring Procedure)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = EarliestTime;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Procedure.c_str());
		Invoke(2, 624, L"OnTime", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::OnUndo(wstring Text, wstring Procedure)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Procedure.c_str());
		Invoke(2, 770, L"OnUndo", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ApplicationX::get_OnWindow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 623, L"OnWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_OnWindow(wstring OnWindow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnWindow.c_str());
		Invoke(1, 623, L"OnWindow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_OperatingSystem()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 375, L"OperatingSystem", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring ApplicationX::get_OrganizationName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 376, L"OrganizationName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::ApplicationX ApplicationX::get_Parent()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_Path()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 291, L"Path", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring ApplicationX::get_PathSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 377, L"PathSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool ApplicationX::get_PivotTableSelection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1205, L"PivotTableSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_PivotTableSelection(bool PivotTableSelection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PivotTableSelection == true) ? 1 : 0;
		Invoke(1, 1205, L"PivotTableSelection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ApplicationX::get_PreviousSelections(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 378, L"PreviousSelections", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::get_PreviousSelections()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 378, L"PreviousSelections", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_PrintCommunication()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2776, L"PrintCommunication", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_PrintCommunication(bool PrintCommunication)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintCommunication == true) ? 1 : 0;
		Invoke(1, 2776, L"PrintCommunication", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_ProductCode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1798, L"ProductCode", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool ApplicationX::get_PromptForSummaryInfo()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1062, L"PromptForSummaryInfo", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_PromptForSummaryInfo(bool PromptForSummaryInfo)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PromptForSummaryInfo == true) ? 1 : 0;
		Invoke(1, 1062, L"PromptForSummaryInfo", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ProtectedViewWindows ApplicationX::get_ProtectedViewWindows()
	{
		Excel::ProtectedViewWindows returnedValue;
		Com::Param param;
		Invoke(0, 2783, L"ProtectedViewWindows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::QuickAnalysis ApplicationX::get_QuickAnalysis()
	{
		Excel::QuickAnalysis returnedValue;
		Com::Param param;
		Invoke(0, 2995, L"QuickAnalysis", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::Quit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 302, L"Quit", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::get_Quitting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2780, L"Quitting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::RTD ApplicationX::get_RTD()
	{
		Excel::RTD returnedValue;
		Com::Param param;
		Invoke(0, 1963, L"RTD", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ApplicationX::get_Range(_variant_t Cell1, _variant_t Cell2)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0] = Cell1;
		param[1] = Cell2;
		Invoke(2, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ApplicationX::get_Range(_variant_t Cell1)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = Cell1;
		Invoke(1, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_Ready()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1932, L"Ready", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::RecentFiles ApplicationX::get_RecentFiles()
	{
		Excel::RecentFiles returnedValue;
		Com::Param param;
		Invoke(0, 1202, L"RecentFiles", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::RecordMacro(_variant_t BasicCode, _variant_t XlmCode)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = BasicCode;
		param[1] = XlmCode;
		Invoke(2, 773, L"RecordMacro", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::RecordMacro()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 773, L"RecordMacro", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::get_RecordRelative()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 379, L"RecordRelative", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlReferenceStyle ApplicationX::get_ReferenceStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 380, L"ReferenceStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlReferenceStyle)returnedValue.iVal;
	}

	void ApplicationX::put_ReferenceStyle(Excel::XlReferenceStyle ReferenceStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ReferenceStyle;
		Invoke(1, 380, L"ReferenceStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::RegisterXLL(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 30, L"RegisterXLL", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	_variant_t ApplicationX::get_RegisteredFunctions(_variant_t Index1, _variant_t Index2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Index1;
		param[1] = Index2;
		Invoke(2, 775, L"RegisteredFunctions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::get_RegisteredFunctions()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 775, L"RegisteredFunctions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::Repeat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 301, L"Repeat", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::CellFormat ApplicationX::get_ReplaceFormat()
	{
		Excel::CellFormat returnedValue;
		Com::Param param;
		Invoke(0, 1935, L"ReplaceFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::put_ReplaceFormat(Excel::CellFormat& ReplaceFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = ReplaceFormat.dispatch.GetInterfacePtr();
		Invoke(1, 1935, L"ReplaceFormat", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	void ApplicationX::ResetTipWizard()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 928, L"ResetTipWizard", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::get_RollZoom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1206, L"RollZoom", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_RollZoom(bool RollZoom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RollZoom == true) ? 1 : 0;
		Invoke(1, 1206, L"RollZoom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range ApplicationX::get_Rows()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 258, L"Rows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ApplicationX::Run(_variant_t Macro, _variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(31);
		param[0] = Macro;
		param[1] = Arg1;
		param[2] = Arg2;
		param[3] = Arg3;
		param[4] = Arg4;
		param[5] = Arg5;
		param[6] = Arg6;
		param[7] = Arg7;
		param[8] = Arg8;
		param[9] = Arg9;
		param[10] = Arg10;
		param[11] = Arg11;
		param[12] = Arg12;
		param[13] = Arg13;
		param[14] = Arg14;
		param[15] = Arg15;
		param[16] = Arg16;
		param[17] = Arg17;
		param[18] = Arg18;
		param[19] = Arg19;
		param[20] = Arg20;
		param[21] = Arg21;
		param[22] = Arg22;
		param[23] = Arg23;
		param[24] = Arg24;
		param[25] = Arg25;
		param[26] = Arg26;
		param[27] = Arg27;
		param[28] = Arg28;
		param[29] = Arg29;
		param[30] = Arg30;
		Invoke(31, 259, L"Run", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Run()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 259, L"Run", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ApplicationX::Save(_variant_t Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Filename;
		Invoke(1, 283, L"Save", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::Save()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 283, L"Save", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::get_SaveISO8601Dates()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2786, L"SaveISO8601Dates", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_SaveISO8601Dates(bool SaveISO8601Dates)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveISO8601Dates == true) ? 1 : 0;
		Invoke(1, 2786, L"SaveISO8601Dates", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::SaveWorkspace(_variant_t Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Filename;
		Invoke(1, 212, L"SaveWorkspace", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::SaveWorkspace()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 212, L"SaveWorkspace", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::get_ScreenUpdating()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 382, L"ScreenUpdating", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ScreenUpdating(bool ScreenUpdating)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ScreenUpdating == true) ? 1 : 0;
		Invoke(1, 382, L"ScreenUpdating", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ApplicationX::get_Selection()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 147, L"Selection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::SendKeys(_variant_t Keys, _variant_t Wait)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Keys;
		param[1] = Wait;
		Invoke(2, 383, L"SendKeys", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::SendKeys(_variant_t Keys)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Keys;
		Invoke(1, 383, L"SendKeys", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::SetDefaultChart(_variant_t FormatName, _variant_t Gallery)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = FormatName;
		param[1] = Gallery;
		Invoke(2, 219, L"SetDefaultChart", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::SetDefaultChart()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 219, L"SetDefaultChart", param, returnedValue, DISPATCH_METHOD);
	}

	long ApplicationX::SharePointVersion(wstring bstrUrl)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(bstrUrl.c_str());
		Invoke(1, 2392, L"SharePointVersion", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	Excel::Sheets ApplicationX::get_Sheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 485, L"Sheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ApplicationX::get_SheetsInNewWorkbook()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 993, L"SheetsInNewWorkbook", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_SheetsInNewWorkbook(long SheetsInNewWorkbook)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SheetsInNewWorkbook;
		Invoke(1, 993, L"SheetsInNewWorkbook", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Menu ApplicationX::get_ShortcutMenus(long Index)
	{
		Excel::Menu returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 776, L"ShortcutMenus", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_ShowChartTipNames()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1207, L"ShowChartTipNames", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowChartTipNames(bool ShowChartTipNames)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowChartTipNames == true) ? 1 : 0;
		Invoke(1, 1207, L"ShowChartTipNames", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ShowChartTipValues()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1208, L"ShowChartTipValues", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowChartTipValues(bool ShowChartTipValues)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowChartTipValues == true) ? 1 : 0;
		Invoke(1, 1208, L"ShowChartTipValues", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ShowDevTools()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2378, L"ShowDevTools", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowDevTools(bool ShowDevTools)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowDevTools == true) ? 1 : 0;
		Invoke(1, 2378, L"ShowDevTools", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ShowMenuFloaties()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2377, L"ShowMenuFloaties", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowMenuFloaties(bool ShowMenuFloaties)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowMenuFloaties == true) ? 1 : 0;
		Invoke(1, 2377, L"ShowMenuFloaties", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ShowQuickAnalysis()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2994, L"ShowQuickAnalysis", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowQuickAnalysis(bool ShowQuickAnalysis)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowQuickAnalysis == true) ? 1 : 0;
		Invoke(1, 2994, L"ShowQuickAnalysis", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ShowSelectionFloaties()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2376, L"ShowSelectionFloaties", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowSelectionFloaties(bool ShowSelectionFloaties)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowSelectionFloaties == true) ? 1 : 0;
		Invoke(1, 2376, L"ShowSelectionFloaties", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ShowStartupDialog()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1960, L"ShowStartupDialog", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowStartupDialog(bool ShowStartupDialog)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowStartupDialog == true) ? 1 : 0;
		Invoke(1, 1960, L"ShowStartupDialog", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ShowToolTips()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 387, L"ShowToolTips", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowToolTips(bool ShowToolTips)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowToolTips == true) ? 1 : 0;
		Invoke(1, 387, L"ShowToolTips", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_ShowWindowsInTaskbar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1807, L"ShowWindowsInTaskbar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_ShowWindowsInTaskbar(bool ShowWindowsInTaskbar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowWindowsInTaskbar == true) ? 1 : 0;
		Invoke(1, 1807, L"ShowWindowsInTaskbar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ApplicationX::get_SmartArtColors()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2774, L"SmartArtColors", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ApplicationX::get_SmartArtLayouts()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2772, L"SmartArtLayouts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ApplicationX::get_SmartArtQuickStyles()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2773, L"SmartArtQuickStyles", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SmartTagRecognizers ApplicationX::get_SmartTagRecognizers()
	{
		Excel::SmartTagRecognizers returnedValue;
		Com::Param param;
		Invoke(0, 1956, L"SmartTagRecognizers", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Speech ApplicationX::get_Speech()
	{
		Excel::Speech returnedValue;
		Com::Param param;
		Invoke(0, 1958, L"Speech", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SpellingOptions ApplicationX::get_SpellingOptions()
	{
		Excel::SpellingOptions returnedValue;
		Com::Param param;
		Invoke(0, 1957, L"SpellingOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_StandardFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 924, L"StandardFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_StandardFont(wstring StandardFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(StandardFont.c_str());
		Invoke(1, 924, L"StandardFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ApplicationX::get_StandardFontSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 925, L"StandardFontSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ApplicationX::put_StandardFontSize(double StandardFontSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = StandardFontSize;
		Invoke(1, 925, L"StandardFontSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_StartupPath()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 385, L"StartupPath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	_variant_t ApplicationX::get_StatusBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 386, L"StatusBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ApplicationX::put_StatusBar(_variant_t StatusBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = StatusBar;
		Invoke(1, 386, L"StatusBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ApplicationX::Support(Com::Object Object, long ID, _variant_t arg)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Object.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = ID;
		param[2] = arg;
		Invoke(3, 2255, L"Support", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::Support(Com::Object Object, long ID)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Object.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = ID;
		Invoke(2, 2255, L"Support", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring ApplicationX::get_TemplatesPath()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 381, L"TemplatesPath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::Range ApplicationX::get_ThisCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1962, L"ThisCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookX ApplicationX::get_ThisWorkbook()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param;
		Invoke(0, 778, L"ThisWorkbook", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_ThousandsSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1810, L"ThousandsSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_ThousandsSeparator(wstring ThousandsSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ThousandsSeparator.c_str());
		Invoke(1, 1810, L"ThousandsSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Toolbars ApplicationX::get_Toolbars()
	{
		Excel::Toolbars returnedValue;
		Com::Param param;
		Invoke(0, 552, L"Toolbars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ApplicationX::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ApplicationX::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_TransitionMenuKey()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 310, L"TransitionMenuKey", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_TransitionMenuKey(wstring TransitionMenuKey)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TransitionMenuKey.c_str());
		Invoke(1, 310, L"TransitionMenuKey", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_TransitionMenuKeyAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 311, L"TransitionMenuKeyAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_TransitionMenuKeyAction(long TransitionMenuKeyAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = TransitionMenuKeyAction;
		Invoke(1, 311, L"TransitionMenuKeyAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_TransitionNavigKeys()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 312, L"TransitionNavigKeys", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_TransitionNavigKeys(bool TransitionNavigKeys)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TransitionNavigKeys == true) ? 1 : 0;
		Invoke(1, 312, L"TransitionNavigKeys", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ApplicationX::get_UILanguage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2, L"UILanguage", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ApplicationX::put_UILanguage(long UILanguage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = UILanguage;
		Invoke(1, 2, L"UILanguage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::Undo()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 303, L"Undo", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range ApplicationX::Union(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		Excel::Range returnedValue;
		Com::Param param(30);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 779, L"Union", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range ApplicationX::Union(Excel::Range& Arg1, Excel::Range& Arg2)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		Invoke(2, 779, L"Union", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double ApplicationX::get_UsableHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 389, L"UsableHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double ApplicationX::get_UsableWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 390, L"UsableWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	bool ApplicationX::get_UseClusterConnector()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2778, L"UseClusterConnector", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_UseClusterConnector(bool UseClusterConnector)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseClusterConnector == true) ? 1 : 0;
		Invoke(1, 2778, L"UseClusterConnector", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ApplicationX::get_UseSystemSeparators()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1961, L"UseSystemSeparators", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_UseSystemSeparators(bool UseSystemSeparators)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseSystemSeparators == true) ? 1 : 0;
		Invoke(1, 1961, L"UseSystemSeparators", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::UsedObjects ApplicationX::get_UsedObjects()
	{
		Excel::UsedObjects returnedValue;
		Com::Param param;
		Invoke(0, 1936, L"UsedObjects", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_UserControl()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1210, L"UserControl", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_UserControl(bool UserControl)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UserControl == true) ? 1 : 0;
		Invoke(1, 1210, L"UserControl", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ApplicationX::get_UserLibraryPath()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1799, L"UserLibraryPath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring ApplicationX::get_UserName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 391, L"UserName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ApplicationX::put_UserName(wstring UserName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(UserName.c_str());
		Invoke(1, 391, L"UserName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ApplicationX::get_VBE()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1211, L"VBE", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring ApplicationX::get_Version()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 392, L"Version", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool ApplicationX::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ApplicationX::Volatile(_variant_t Volatile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Volatile;
		Invoke(1, 788, L"Volatile", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::Volatile()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 788, L"Volatile", param, returnedValue, DISPATCH_METHOD);
	}

	bool ApplicationX::Wait(_variant_t Time)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Time;
		Invoke(1, 1770, L"Wait", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool ApplicationX::get_WarnOnFunctionNameConflict()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2382, L"WarnOnFunctionNameConflict", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ApplicationX::put_WarnOnFunctionNameConflict(bool WarnOnFunctionNameConflict)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WarnOnFunctionNameConflict == true) ? 1 : 0;
		Invoke(1, 2382, L"WarnOnFunctionNameConflict", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Watches ApplicationX::get_Watches()
	{
		Excel::Watches returnedValue;
		Com::Param param;
		Invoke(0, 1939, L"Watches", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ApplicationX::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ApplicationX::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlWindowState ApplicationX::get_WindowState()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 396, L"WindowState", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlWindowState)returnedValue.iVal;
	}

	void ApplicationX::put_WindowState(Excel::XlWindowState WindowState)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = WindowState;
		Invoke(1, 396, L"WindowState", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Windows ApplicationX::get_Windows()
	{
		Excel::Windows returnedValue;
		Com::Param param;
		Invoke(0, 430, L"Windows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ApplicationX::get_WindowsForPens()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 395, L"WindowsForPens", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::Workbooks ApplicationX::get_Workbooks()
	{
		Excel::Workbooks returnedValue;
		Com::Param param;
		Invoke(0, 572, L"Workbooks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorksheetFunction ApplicationX::get_WorksheetFunction()
	{
		Excel::WorksheetFunction returnedValue;
		Com::Param param;
		Invoke(0, 1440, L"WorksheetFunction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sheets ApplicationX::get_Worksheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 494, L"Worksheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ApplicationX::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	_variant_t ApplicationX::_Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, -5, L"_Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ApplicationX::_FindFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1068, L"_FindFile", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::_MacroOptions(_variant_t Macro, _variant_t Description, _variant_t HasMenu, _variant_t MenuText, _variant_t HasShortcutKey, _variant_t ShortcutKey, _variant_t Category, _variant_t StatusBar, _variant_t HelpContextID, _variant_t HelpFile)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0] = Macro;
		param[1] = Description;
		param[2] = HasMenu;
		param[3] = MenuText;
		param[4] = HasShortcutKey;
		param[5] = ShortcutKey;
		param[6] = Category;
		param[7] = StatusBar;
		param[8] = HelpContextID;
		param[9] = HelpFile;
		Invoke(10, 1135, L"_MacroOptions", param, returnedValue, DISPATCH_METHOD);
	}

	void ApplicationX::_MacroOptions()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1135, L"_MacroOptions", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ApplicationX::_Run2(_variant_t Macro, _variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(31);
		param[0] = Macro;
		param[1] = Arg1;
		param[2] = Arg2;
		param[3] = Arg3;
		param[4] = Arg4;
		param[5] = Arg5;
		param[6] = Arg6;
		param[7] = Arg7;
		param[8] = Arg8;
		param[9] = Arg9;
		param[10] = Arg10;
		param[11] = Arg11;
		param[12] = Arg12;
		param[13] = Arg13;
		param[14] = Arg14;
		param[15] = Arg15;
		param[16] = Arg16;
		param[17] = Arg17;
		param[18] = Arg18;
		param[19] = Arg19;
		param[20] = Arg20;
		param[21] = Arg21;
		param[22] = Arg22;
		param[23] = Arg23;
		param[24] = Arg24;
		param[25] = Arg25;
		param[26] = Arg26;
		param[27] = Arg27;
		param[28] = Arg28;
		param[29] = Arg29;
		param[30] = Arg30;
		Invoke(31, 806, L"_Run2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::_Run2()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 806, L"_Run2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::_WSFunction(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 169, L"_WSFunction", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ApplicationX::_WSFunction()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 169, L"_WSFunction", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ApplicationX::_Wait(_variant_t Time)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Time;
		Invoke(1, 393, L"_Wait", param, returnedValue, DISPATCH_METHOD);
	}

	//_________________________________________________________Chart
	ChartX::ChartX()
	{
	}

	ChartX::~ChartX()
	{
	}

	void ChartX::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX ChartX::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::ApplyChartTemplate(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2507, L"ApplyChartTemplate", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ApplyCustomType(Excel::XlChartType ChartType, _variant_t TypeName)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = ChartType;
		param[1] = TypeName;
		Invoke(2, 1401, L"ApplyCustomType", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ApplyCustomType(Excel::XlChartType ChartType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ChartType;
		Invoke(1, 1401, L"ApplyCustomType", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines, _variant_t ShowSeriesName, _variant_t ShowCategoryName, _variant_t ShowValue, _variant_t ShowPercentage, _variant_t ShowBubbleSize, _variant_t Separator)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = LegendKey;
		param[2] = AutoText;
		param[3] = HasLeaderLines;
		param[4] = ShowSeriesName;
		param[5] = ShowCategoryName;
		param[6] = ShowValue;
		param[7] = ShowPercentage;
		param[8] = ShowBubbleSize;
		param[9] = Separator;
		Invoke(10, 1922, L"ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ApplyDataLabels(Excel::XlDataLabelsType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 1922, L"ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ApplyLayout(long Layout, _variant_t ChartType)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Layout;
		param[1] = ChartType;
		Invoke(2, 2500, L"ApplyLayout", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ApplyLayout(long Layout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Layout;
		Invoke(1, 2500, L"ApplyLayout", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ChartX::Arcs(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 760, L"Arcs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Arcs()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 760, L"Arcs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartGroup ChartX::get_Area3DGroup()
	{
		Excel::ChartGroup returnedValue;
		Com::Param param;
		Invoke(0, 17, L"Area3DGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::AreaGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 9, L"AreaGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::AreaGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 9, L"AreaGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartX::AutoFormat(long Gallery, _variant_t Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Gallery;
		param[1] = Format;
		Invoke(2, 114, L"AutoFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::AutoFormat(long Gallery)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Gallery;
		Invoke(1, 114, L"AutoFormat", param, returnedValue, DISPATCH_METHOD);
	}

	bool ChartX::get_AutoScaling()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 107, L"AutoScaling", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_AutoScaling(bool AutoScaling)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoScaling == true) ? 1 : 0;
		Invoke(1, 107, L"AutoScaling", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::Axes(_variant_t Type, Excel::XlAxisGroup AxisGroup)
	{
		Com::Object returnedValue;
		Com::Param param(2);
		param[0] = Type;
		param[1].vt = VT_I2;
		param[1].iVal = AxisGroup;
		Invoke(2, 23, L"Axes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Walls ChartX::get_BackWall()
	{
		Excel::Walls returnedValue;
		Com::Param param;
		Invoke(0, 2506, L"BackWall", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartGroup ChartX::get_Bar3DGroup()
	{
		Excel::ChartGroup returnedValue;
		Com::Param param;
		Invoke(0, 18, L"Bar3DGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::BarGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 10, L"BarGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::BarGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 10, L"BarGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlBarShape ChartX::get_BarShape()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1403, L"BarShape", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlBarShape)returnedValue.iVal;
	}

	void ChartX::put_BarShape(Excel::XlBarShape BarShape)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BarShape;
		Invoke(1, 1403, L"BarShape", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::Buttons(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 557, L"Buttons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Buttons()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 557, L"Buttons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCategoryLabelLevel ChartX::get_CategoryLabelLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3048, L"CategoryLabelLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCategoryLabelLevel)returnedValue.iVal;
	}

	void ChartX::put_CategoryLabelLevel(Excel::XlCategoryLabelLevel CategoryLabelLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CategoryLabelLevel;
		Invoke(1, 3048, L"CategoryLabelLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ChartArea ChartX::get_ChartArea()
	{
		Excel::ChartArea returnedValue;
		Com::Param param;
		Invoke(0, 80, L"ChartArea", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartX::get_ChartColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3052, L"ChartColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::put_ChartColor(_variant_t ChartColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ChartColor;
		Invoke(1, 3052, L"ChartColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::ChartGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 8, L"ChartGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::ChartGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 8, L"ChartGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::ChartObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1060, L"ChartObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::ChartObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 1060, L"ChartObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartX::get_ChartStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2509, L"ChartStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::put_ChartStyle(_variant_t ChartStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ChartStyle;
		Invoke(1, 2509, L"ChartStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ChartTitle ChartX::get_ChartTitle()
	{
		Excel::ChartTitle returnedValue;
		Com::Param param;
		Invoke(0, 81, L"ChartTitle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlChartType ChartX::get_ChartType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1400, L"ChartType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartType)returnedValue.iVal;
	}

	void ChartX::put_ChartType(Excel::XlChartType ChartType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ChartType;
		Invoke(1, 1400, L"ChartType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ChartX::ChartWizard(_variant_t Source, _variant_t Gallery, _variant_t Format, _variant_t PlotBy, _variant_t CategoryLabels, _variant_t SeriesLabels, _variant_t HasLegend, _variant_t Title, _variant_t CategoryTitle, _variant_t ValueTitle, _variant_t ExtraTitle)
	{
		_variant_t returnedValue;
		Com::Param param(11);
		param[0] = Source;
		param[1] = Gallery;
		param[2] = Format;
		param[3] = PlotBy;
		param[4] = CategoryLabels;
		param[5] = SeriesLabels;
		param[6] = HasLegend;
		param[7] = Title;
		param[8] = CategoryTitle;
		param[9] = ValueTitle;
		param[10] = ExtraTitle;
		Invoke(11, 196, L"ChartWizard", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ChartWizard()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 196, L"ChartWizard", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ChartX::CheckBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 824, L"CheckBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::CheckBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 824, L"CheckBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartX::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ClearToMatchColorStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3053, L"ClearToMatchColorStyle", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ClearToMatchStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2510, L"ClearToMatchStyle", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ChartX::get_CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1373, L"CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::ChartGroup ChartX::get_Column3DGroup()
	{
		Excel::ChartGroup returnedValue;
		Com::Param param;
		Invoke(0, 19, L"Column3DGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::ColumnGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 11, L"ColumnGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::ColumnGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 11, L"ColumnGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartX::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::CopyChartBuild()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1404, L"CopyChartBuild", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format, Excel::XlPictureAppearance Size)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		param[2].vt = VT_I2;
		param[2].iVal = Size;
		Invoke(3, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Corners ChartX::get_Corners()
	{
		Excel::Corners returnedValue;
		Com::Param param;
		Invoke(0, 79, L"Corners", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::CreatePublisher(_variant_t Edition, Excel::XlPictureAppearance Appearance, Excel::XlPictureAppearance Size, _variant_t ContainsPICT, _variant_t ContainsBIFF, _variant_t ContainsRTF, _variant_t ContainsVALU)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Edition;
		param[1].vt = VT_I2;
		param[1].iVal = Appearance;
		param[2].vt = VT_I2;
		param[2].iVal = Size;
		param[3] = ContainsPICT;
		param[4] = ContainsBIFF;
		param[5] = ContainsRTF;
		param[6] = ContainsVALU;
		Invoke(7, 458, L"CreatePublisher", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::CreatePublisher(_variant_t Edition, Excel::XlPictureAppearance Appearance, Excel::XlPictureAppearance Size)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Edition;
		param[1].vt = VT_I2;
		param[1].iVal = Appearance;
		param[2].vt = VT_I2;
		param[2].iVal = Size;
		Invoke(3, 458, L"CreatePublisher", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator ChartX::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::DataTable ChartX::get_DataTable()
	{
		Excel::DataTable returnedValue;
		Com::Param param;
		Invoke(0, 1395, L"DataTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::DeleteHiddenContent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3051, L"DeleteHiddenContent", param, returnedValue, DISPATCH_METHOD);
	}

	long ChartX::get_DepthPercent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 48, L"DepthPercent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartX::put_DepthPercent(long DepthPercent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DepthPercent;
		Invoke(1, 48, L"DepthPercent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ChartX::Deselect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1120, L"Deselect", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlDisplayBlanksAs ChartX::get_DisplayBlanksAs()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 93, L"DisplayBlanksAs", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDisplayBlanksAs)returnedValue.iVal;
	}

	void ChartX::put_DisplayBlanksAs(Excel::XlDisplayBlanksAs DisplayBlanksAs)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DisplayBlanksAs;
		Invoke(1, 93, L"DisplayBlanksAs", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_DisplayValueNotAvailableAsBlank()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3280, L"DisplayValueNotAvailableAsBlank", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_DisplayValueNotAvailableAsBlank(bool DisplayValueNotAvailableAsBlank)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayValueNotAvailableAsBlank == true) ? 1 : 0;
		Invoke(1, 3280, L"DisplayValueNotAvailableAsBlank", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::DoughnutGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 14, L"DoughnutGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::DoughnutGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 14, L"DoughnutGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::DrawingObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 88, L"DrawingObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::DrawingObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 88, L"DrawingObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Drawings(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 772, L"Drawings", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Drawings()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 772, L"Drawings", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::DropDowns(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 836, L"DropDowns", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::DropDowns()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 836, L"DropDowns", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ChartX::get_Dummy24()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2858, L"Dummy24", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_Dummy24(bool Dummy24)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Dummy24 == true) ? 1 : 0;
		Invoke(1, 2858, L"Dummy24", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_Dummy25()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2859, L"Dummy25", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_Dummy25(bool Dummy25)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Dummy25 == true) ? 1 : 0;
		Invoke(1, 2859, L"Dummy25", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartX::get_Elevation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 49, L"Elevation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartX::put_Elevation(long Elevation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Elevation;
		Invoke(1, 49, L"Elevation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartX::Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 1, L"Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ChartX::Export(wstring Filename, _variant_t FilterName, _variant_t Interactive)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FilterName;
		param[2] = Interactive;
		Invoke(3, 1414, L"Export", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool ChartX::Export(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1414, L"Export", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		param[9] = WorkIdentity;
		Invoke(10, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Floor ChartX::get_Floor()
	{
		Excel::Floor returnedValue;
		Com::Param param;
		Invoke(0, 83, L"Floor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::FullSeriesCollection(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 3047, L"FullSeriesCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::FullSeriesCollection()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 3047, L"FullSeriesCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ChartX::get_GapDepth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 50, L"GapDepth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartX::put_GapDepth(long GapDepth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = GapDepth;
		Invoke(1, 50, L"GapDepth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ChartX::GetChartElement(long x, long y, long& ElementID, long& Arg1, long& Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I4;
		param[0].lVal = x;
		param[1].vt = VT_I4;
		param[1].lVal = y;
		param[2].vt = VT_I4 | VT_BYREF;
		param[2].plVal = &ElementID;
		param[3].vt = VT_I4 | VT_BYREF;
		param[3].plVal = &Arg1;
		param[4].vt = VT_I4 | VT_BYREF;
		param[4].plVal = &Arg2;
		Invoke(5, 1409, L"GetChartElement", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ChartX::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::GroupBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 834, L"GroupBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::GroupBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 834, L"GroupBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::GroupObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1113, L"GroupObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::GroupObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 1113, L"GroupObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartX::get_HasAxis(_variant_t Index1, _variant_t Index2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Index1;
		param[1] = Index2;
		Invoke(2, 52, L"HasAxis", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartX::get_HasAxis()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 52, L"HasAxis", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::put_HasAxis(_variant_t HasAxis, _variant_t Index1, _variant_t Index2)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = HasAxis;
		param[1] = Index1;
		param[2] = Index2;
		Invoke(3, 52, L"HasAxis", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ChartX::put_HasAxis(_variant_t HasAxis)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HasAxis;
		Invoke(1, 52, L"HasAxis", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_HasDataTable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1396, L"HasDataTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_HasDataTable(bool HasDataTable)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasDataTable == true) ? 1 : 0;
		Invoke(1, 1396, L"HasDataTable", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_HasHiddenContent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3050, L"HasHiddenContent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ChartX::get_HasLegend()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 53, L"HasLegend", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_HasLegend(bool HasLegend)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasLegend == true) ? 1 : 0;
		Invoke(1, 53, L"HasLegend", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_HasPivotFields()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1815, L"HasPivotFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_HasPivotFields(bool HasPivotFields)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasPivotFields == true) ? 1 : 0;
		Invoke(1, 1815, L"HasPivotFields", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_HasTitle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 54, L"HasTitle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_HasTitle(bool HasTitle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasTitle == true) ? 1 : 0;
		Invoke(1, 54, L"HasTitle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartX::get_HeightPercent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 55, L"HeightPercent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartX::put_HeightPercent(long HeightPercent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = HeightPercent;
		Invoke(1, 55, L"HeightPercent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Hyperlinks ChartX::get_Hyperlinks()
	{
		Excel::Hyperlinks returnedValue;
		Com::Param param;
		Invoke(0, 1393, L"Hyperlinks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ChartX::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object ChartX::Labels(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 841, L"Labels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Labels()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 841, L"Labels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Legend ChartX::get_Legend()
	{
		Excel::Legend returnedValue;
		Com::Param param;
		Invoke(0, 84, L"Legend", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartGroup ChartX::get_Line3DGroup()
	{
		Excel::ChartGroup returnedValue;
		Com::Param param;
		Invoke(0, 20, L"Line3DGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::LineGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 12, L"LineGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::LineGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 12, L"LineGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Lines(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 767, L"Lines", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Lines()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 767, L"Lines", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::ListBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 832, L"ListBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::ListBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 832, L"ListBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartX ChartX::Location(Excel::XlChartLocation Where, _variant_t Name)
	{
		Excel::ChartX returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Where;
		param[1] = Name;
		Invoke(2, 1397, L"Location", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartX ChartX::Location(Excel::XlChartLocation Where)
	{
		Excel::ChartX returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Where;
		Invoke(1, 1397, L"Location", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::get_MailEnvelope()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2021, L"MailEnvelope", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ChartX::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartX::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::get_Next()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 502, L"Next", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::OLEObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 799, L"OLEObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::OLEObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 799, L"OLEObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring ChartX::get_OnDoubleClick()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartX::put_OnDoubleClick(wstring OnDoubleClick)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnDoubleClick.c_str());
		Invoke(1, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartX::get_OnSheetActivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartX::put_OnSheetActivate(wstring OnSheetActivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetActivate.c_str());
		Invoke(1, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartX::get_OnSheetDeactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartX::put_OnSheetDeactivate(wstring OnSheetDeactivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetDeactivate.c_str());
		Invoke(1, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::OptionButtons(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 826, L"OptionButtons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::OptionButtons()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 826, L"OptionButtons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Ovals(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 801, L"Ovals", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Ovals()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 801, L"Ovals", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PageSetup ChartX::get_PageSetup()
	{
		Excel::PageSetup returnedValue;
		Com::Param param;
		Invoke(0, 998, L"PageSetup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::Paste(_variant_t Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Type;
		Invoke(1, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::Paste()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
	}

	long ChartX::get_Perspective()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 57, L"Perspective", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartX::put_Perspective(long Perspective)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Perspective;
		Invoke(1, 57, L"Perspective", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::Pictures(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 771, L"Pictures", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Pictures()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 771, L"Pictures", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartGroup ChartX::get_Pie3DGroup()
	{
		Excel::ChartGroup returnedValue;
		Com::Param param;
		Invoke(0, 21, L"Pie3DGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::PieGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 13, L"PieGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::PieGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 13, L"PieGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotLayout ChartX::get_PivotLayout()
	{
		Excel::PivotLayout returnedValue;
		Com::Param param;
		Invoke(0, 1814, L"PivotLayout", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PlotArea ChartX::get_PlotArea()
	{
		Excel::PlotArea returnedValue;
		Com::Param param;
		Invoke(0, 85, L"PlotArea", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlRowCol ChartX::get_PlotBy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 202, L"PlotBy", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlRowCol)returnedValue.iVal;
	}

	void ChartX::put_PlotBy(Excel::XlRowCol PlotBy)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PlotBy;
		Invoke(1, 202, L"PlotBy", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_PlotVisibleOnly()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 92, L"PlotVisibleOnly", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_PlotVisibleOnly(bool PlotVisibleOnly)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PlotVisibleOnly == true) ? 1 : 0;
		Invoke(1, 92, L"PlotVisibleOnly", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::get_Previous()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 503, L"Previous", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	long ChartX::get_PrintedCommentPages()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2857, L"PrintedCommentPages", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartX::Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Password;
		param[1] = DrawingObjects;
		param[2] = Contents;
		param[3] = Scenarios;
		param[4] = UserInterfaceOnly;
		Invoke(5, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	bool ChartX::get_ProtectContents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 292, L"ProtectContents", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ChartX::get_ProtectData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1406, L"ProtectData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ProtectData(bool ProtectData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ProtectData == true) ? 1 : 0;
		Invoke(1, 1406, L"ProtectData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ProtectDrawingObjects()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 293, L"ProtectDrawingObjects", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ChartX::get_ProtectFormatting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1405, L"ProtectFormatting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ProtectFormatting(bool ProtectFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ProtectFormatting == true) ? 1 : 0;
		Invoke(1, 1405, L"ProtectFormatting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ProtectGoalSeek()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1407, L"ProtectGoalSeek", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ProtectGoalSeek(bool ProtectGoalSeek)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ProtectGoalSeek == true) ? 1 : 0;
		Invoke(1, 1407, L"ProtectGoalSeek", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ProtectSelection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1408, L"ProtectSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ProtectSelection(bool ProtectSelection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ProtectSelection == true) ? 1 : 0;
		Invoke(1, 1408, L"ProtectSelection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ProtectionMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1159, L"ProtectionMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object ChartX::RadarGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 15, L"RadarGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::RadarGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 15, L"RadarGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Rectangles(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 774, L"Rectangles", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Rectangles()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 774, L"Rectangles", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartX::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ChartX::get_RightAngleAxes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 58, L"RightAngleAxes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::put_RightAngleAxes(_variant_t RightAngleAxes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = RightAngleAxes;
		Invoke(1, 58, L"RightAngleAxes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartX::get_Rotation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 59, L"Rotation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartX::put_Rotation(_variant_t Rotation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Rotation;
		Invoke(1, 59, L"Rotation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ChartX::SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		param[9] = Local;
		Invoke(10, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::SaveChartTemplate(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2508, L"SaveChartTemplate", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ChartX::get_Scripts()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1816, L"Scripts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::ScrollBars(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 830, L"ScrollBars", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::ScrollBars()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 830, L"ScrollBars", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartX::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ChartX::SeriesCollection(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 68, L"SeriesCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::SeriesCollection()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 68, L"SeriesCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlSeriesNameLevel ChartX::get_SeriesNameLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3049, L"SeriesNameLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSeriesNameLevel)returnedValue.iVal;
	}

	void ChartX::put_SeriesNameLevel(Excel::XlSeriesNameLevel SeriesNameLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SeriesNameLevel;
		Invoke(1, 3049, L"SeriesNameLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ChartX::SetBackgroundPicture(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1188, L"SetBackgroundPicture", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::SetDefaultChart(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 219, L"SetDefaultChart", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::SetElement(/* MsoChartElementType*/ short Element)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Element;
		Invoke(1, 2502, L"SetElement", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::SetSourceData(Excel::Range& Source, _variant_t PlotBy)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Source.dispatch.GetInterfacePtr();
		param[1] = PlotBy;
		Invoke(2, 1413, L"SetSourceData", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::SetSourceData(Excel::Range& Source)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Source.dispatch.GetInterfacePtr();
		Invoke(1, 1413, L"SetSourceData", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Shapes ChartX::get_Shapes()
	{
		Excel::Shapes returnedValue;
		Com::Param param;
		Invoke(0, 1377, L"Shapes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ChartX::get_ShowAllFieldButtons()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2864, L"ShowAllFieldButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ShowAllFieldButtons(bool ShowAllFieldButtons)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAllFieldButtons == true) ? 1 : 0;
		Invoke(1, 2864, L"ShowAllFieldButtons", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ShowAxisFieldButtons()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2862, L"ShowAxisFieldButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ShowAxisFieldButtons(bool ShowAxisFieldButtons)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAxisFieldButtons == true) ? 1 : 0;
		Invoke(1, 2862, L"ShowAxisFieldButtons", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ShowDataLabelsOverMaximum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2504, L"ShowDataLabelsOverMaximum", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ShowDataLabelsOverMaximum(bool ShowDataLabelsOverMaximum)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowDataLabelsOverMaximum == true) ? 1 : 0;
		Invoke(1, 2504, L"ShowDataLabelsOverMaximum", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ShowExpandCollapseEntireFieldButtons()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3166, L"ShowExpandCollapseEntireFieldButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ShowExpandCollapseEntireFieldButtons(bool ShowExpandCollapseEntireFieldButtons)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowExpandCollapseEntireFieldButtons == true) ? 1 : 0;
		Invoke(1, 3166, L"ShowExpandCollapseEntireFieldButtons", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ShowLegendFieldButtons()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2861, L"ShowLegendFieldButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ShowLegendFieldButtons(bool ShowLegendFieldButtons)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowLegendFieldButtons == true) ? 1 : 0;
		Invoke(1, 2861, L"ShowLegendFieldButtons", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ShowReportFilterFieldButtons()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2860, L"ShowReportFilterFieldButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ShowReportFilterFieldButtons(bool ShowReportFilterFieldButtons)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowReportFilterFieldButtons == true) ? 1 : 0;
		Invoke(1, 2860, L"ShowReportFilterFieldButtons", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ShowValueFieldButtons()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2863, L"ShowValueFieldButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ShowValueFieldButtons(bool ShowValueFieldButtons)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowValueFieldButtons == true) ? 1 : 0;
		Invoke(1, 2863, L"ShowValueFieldButtons", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartX::get_ShowWindow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1399, L"ShowWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_ShowWindow(bool ShowWindow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowWindow == true) ? 1 : 0;
		Invoke(1, 1399, L"ShowWindow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Walls ChartX::get_SideWall()
	{
		Excel::Walls returnedValue;
		Com::Param param;
		Invoke(0, 2505, L"SideWall", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ChartX::get_SizeWithWindow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 94, L"SizeWithWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_SizeWithWindow(bool SizeWithWindow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SizeWithWindow == true) ? 1 : 0;
		Invoke(1, 94, L"SizeWithWindow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::Spinners(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 838, L"Spinners", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::Spinners()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 838, L"Spinners", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ChartX::get_SubType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"SubType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartX::put_SubType(long SubType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SubType;
		Invoke(1, 109, L"SubType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ChartGroup ChartX::get_SurfaceGroup()
	{
		Excel::ChartGroup returnedValue;
		Com::Param param;
		Invoke(0, 22, L"SurfaceGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Tab ChartX::get_Tab()
	{
		Excel::Tab returnedValue;
		Com::Param param;
		Invoke(0, 1041, L"Tab", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartX::TextBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 777, L"TextBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::TextBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 777, L"TextBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ChartX::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartX::put_Type(long Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ChartX::Unprotect(_variant_t Password)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Password;
		Invoke(1, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::Unprotect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlSheetVisibility ChartX::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSheetVisibility)returnedValue.iVal;
	}

	void ChartX::put_Visible(Excel::XlSheetVisibility Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Walls ChartX::get_Walls()
	{
		Excel::Walls returnedValue;
		Com::Param param;
		Invoke(0, 86, L"Walls", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ChartX::get_WallsAndGridlines2D()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 210, L"WallsAndGridlines2D", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartX::put_WallsAndGridlines2D(bool WallsAndGridlines2D)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WallsAndGridlines2D == true) ? 1 : 0;
		Invoke(1, 210, L"WallsAndGridlines2D", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartX::XYGroups(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 16, L"XYGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartX::XYGroups()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 16, L"XYGroups", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartX::_ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = LegendKey;
		param[2] = AutoText;
		param[3] = HasLeaderLines;
		Invoke(4, 151, L"_ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::_ApplyDataLabels(Excel::XlDataLabelsType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 151, L"_ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ChartX::get__CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartX::put__CodeName(wstring _CodeName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_CodeName.c_str());
		Invoke(1, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ChartX::_Dummy23()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65559, L"_Dummy23", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ChartX::_Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, -5, L"_Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartX::_ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		Invoke(9, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::_ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::_Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Password;
		param[1] = DrawingObjects;
		param[2] = Contents;
		param[3] = Scenarios;
		param[4] = UserInterfaceOnly;
		Invoke(5, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::_Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::_SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		param[9] = Local;
		Invoke(10, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::_SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::__SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		Invoke(9, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartX::__SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Sheets
	Sheets::Sheets()
	{
	}

	Sheets::~Sheets()
	{
	}

	Com::Object Sheets::Add(_variant_t Before, _variant_t After, _variant_t Count, _variant_t Type)
	{
		Com::Object returnedValue;
		Com::Param param(4);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		param[3] = Type;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Sheets::Add()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Sheets::Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout)
	{
		Com::Object returnedValue;
		Com::Param param(4);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		param[3] = NewLayout;
		Invoke(4, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Sheets::Add2()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Sheets::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Sheets::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	long Sheets::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Sheets::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Sheets::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::FillAcrossSheets(Excel::Range& Range, Excel::XlFillWith Type)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		param[1].vt = VT_I2;
		param[1].iVal = Type;
		Invoke(2, 469, L"FillAcrossSheets", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::HPageBreaks Sheets::get_HPageBreaks()
	{
		Excel::HPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1418, L"HPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Sheets::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Sheets::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object Sheets::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Sheets::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		param[8] = IgnorePrintAreas;
		Invoke(9, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::VPageBreaks Sheets::get_VPageBreaks()
	{
		Excel::VPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1419, L"VPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Sheets::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Sheets::put_Visible(_variant_t Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Sheets::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Sheets::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	void Sheets::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Sheets::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	//_________________________________________________________Worksheet
	WorksheetX::WorksheetX()
	{
	}

	WorksheetX::~WorksheetX()
	{
	}

	void WorksheetX::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX WorksheetX::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::Arcs(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 760, L"Arcs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Arcs()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 760, L"Arcs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::AutoFilter WorksheetX::get_AutoFilter()
	{
		Excel::AutoFilter returnedValue;
		Com::Param param;
		Invoke(0, 793, L"AutoFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorksheetX::get_AutoFilterMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 792, L"AutoFilterMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_AutoFilterMode(bool AutoFilterMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoFilterMode == true) ? 1 : 0;
		Invoke(1, 792, L"AutoFilterMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorksheetX::Buttons(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 557, L"Buttons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Buttons()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 557, L"Buttons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void WorksheetX::Calculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 279, L"Calculate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range WorksheetX::get_Cells()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 238, L"Cells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::ChartObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1060, L"ChartObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::ChartObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 1060, L"ChartObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::CheckBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 824, L"CheckBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::CheckBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 824, L"CheckBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void WorksheetX::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::CircleInvalid()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1437, L"CircleInvalid", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range WorksheetX::get_CircularReference()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1069, L"CircularReference", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetX::ClearArrows()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 970, L"ClearArrows", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::ClearCircles()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1436, L"ClearCircles", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorksheetX::get_CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1373, L"CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::Range WorksheetX::get_Columns()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 241, L"Columns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Comments WorksheetX::get_Comments()
	{
		Excel::Comments returnedValue;
		Com::Param param;
		Invoke(0, 575, L"Comments", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlConsolidationFunction WorksheetX::get_ConsolidationFunction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 789, L"ConsolidationFunction", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlConsolidationFunction)returnedValue.iVal;
	}

	_variant_t WorksheetX::get_ConsolidationOptions()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 790, L"ConsolidationOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t WorksheetX::get_ConsolidationSources()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 791, L"ConsolidationSources", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetX::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator WorksheetX::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CustomProperties WorksheetX::get_CustomProperties()
	{
		Excel::CustomProperties returnedValue;
		Com::Param param;
		Invoke(0, 2030, L"CustomProperties", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetX::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorksheetX::get_DisplayAutomaticPageBreaks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 643, L"DisplayAutomaticPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_DisplayAutomaticPageBreaks(bool DisplayAutomaticPageBreaks)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayAutomaticPageBreaks == true) ? 1 : 0;
		Invoke(1, 643, L"DisplayAutomaticPageBreaks", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetX::get_DisplayPageBreaks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1435, L"DisplayPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_DisplayPageBreaks(bool DisplayPageBreaks)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayPageBreaks == true) ? 1 : 0;
		Invoke(1, 1435, L"DisplayPageBreaks", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetX::get_DisplayRightToLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1774, L"DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_DisplayRightToLeft(bool DisplayRightToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayRightToLeft == true) ? 1 : 0;
		Invoke(1, 1774, L"DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorksheetX::DrawingObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 88, L"DrawingObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::DrawingObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 88, L"DrawingObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Drawings(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 772, L"Drawings", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Drawings()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 772, L"Drawings", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::DropDowns(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 836, L"DropDowns", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::DropDowns()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 836, L"DropDowns", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool WorksheetX::get_EnableAutoFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1156, L"EnableAutoFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_EnableAutoFilter(bool EnableAutoFilter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableAutoFilter == true) ? 1 : 0;
		Invoke(1, 1156, L"EnableAutoFilter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetX::get_EnableCalculation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1424, L"EnableCalculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_EnableCalculation(bool EnableCalculation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableCalculation == true) ? 1 : 0;
		Invoke(1, 1424, L"EnableCalculation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetX::get_EnableFormatConditionsCalculation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2511, L"EnableFormatConditionsCalculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_EnableFormatConditionsCalculation(bool EnableFormatConditionsCalculation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableFormatConditionsCalculation == true) ? 1 : 0;
		Invoke(1, 2511, L"EnableFormatConditionsCalculation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetX::get_EnableOutlining()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1157, L"EnableOutlining", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_EnableOutlining(bool EnableOutlining)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableOutlining == true) ? 1 : 0;
		Invoke(1, 1157, L"EnableOutlining", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetX::get_EnablePivotTable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1158, L"EnablePivotTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_EnablePivotTable(bool EnablePivotTable)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnablePivotTable == true) ? 1 : 0;
		Invoke(1, 1158, L"EnablePivotTable", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlEnableSelection WorksheetX::get_EnableSelection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1425, L"EnableSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlEnableSelection)returnedValue.iVal;
	}

	void WorksheetX::put_EnableSelection(Excel::XlEnableSelection EnableSelection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = EnableSelection;
		Invoke(1, 1425, L"EnableSelection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorksheetX::Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 1, L"Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void WorksheetX::ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		param[9] = WorkIdentity;
		Invoke(10, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorksheetX::get_FilterMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 800, L"FilterMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object WorksheetX::GroupBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 834, L"GroupBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::GroupBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 834, L"GroupBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::GroupObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1113, L"GroupObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::GroupObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 1113, L"GroupObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::HPageBreaks WorksheetX::get_HPageBreaks()
	{
		Excel::HPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1418, L"HPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Hyperlinks WorksheetX::get_Hyperlinks()
	{
		Excel::Hyperlinks returnedValue;
		Com::Param param;
		Invoke(0, 1393, L"Hyperlinks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long WorksheetX::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object WorksheetX::Labels(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 841, L"Labels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Labels()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 841, L"Labels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Lines(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 767, L"Lines", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Lines()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 767, L"Lines", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::ListBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 832, L"ListBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::ListBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 832, L"ListBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListObjects WorksheetX::get_ListObjects()
	{
		Excel::ListObjects returnedValue;
		Com::Param param;
		Invoke(0, 2259, L"ListObjects", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::get_MailEnvelope()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2021, L"MailEnvelope", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetX::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorksheetX::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Names WorksheetX::get_Names()
	{
		Excel::Names returnedValue;
		Com::Param param;
		Invoke(0, 442, L"Names", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::get_Next()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 502, L"Next", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::OLEObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 799, L"OLEObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::OLEObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 799, L"OLEObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring WorksheetX::get_OnCalculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 625, L"OnCalculate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put_OnCalculate(wstring OnCalculate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnCalculate.c_str());
		Invoke(1, 625, L"OnCalculate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorksheetX::get_OnData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 629, L"OnData", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put_OnData(wstring OnData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnData.c_str());
		Invoke(1, 629, L"OnData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorksheetX::get_OnDoubleClick()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put_OnDoubleClick(wstring OnDoubleClick)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnDoubleClick.c_str());
		Invoke(1, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorksheetX::get_OnEntry()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 627, L"OnEntry", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put_OnEntry(wstring OnEntry)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnEntry.c_str());
		Invoke(1, 627, L"OnEntry", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorksheetX::get_OnSheetActivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put_OnSheetActivate(wstring OnSheetActivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetActivate.c_str());
		Invoke(1, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorksheetX::get_OnSheetDeactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put_OnSheetDeactivate(wstring OnSheetDeactivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetDeactivate.c_str());
		Invoke(1, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorksheetX::OptionButtons(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 826, L"OptionButtons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::OptionButtons()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 826, L"OptionButtons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Outline WorksheetX::get_Outline()
	{
		Excel::Outline returnedValue;
		Com::Param param;
		Invoke(0, 102, L"Outline", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::Ovals(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 801, L"Ovals", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Ovals()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 801, L"Ovals", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PageSetup WorksheetX::get_PageSetup()
	{
		Excel::PageSetup returnedValue;
		Com::Param param;
		Invoke(0, 998, L"PageSetup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetX::Paste(_variant_t Destination, _variant_t Link)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Destination;
		param[1] = Link;
		Invoke(2, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::Paste()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::PasteSpecial(_variant_t Format, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel, _variant_t NoHTMLFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Format;
		param[1] = Link;
		param[2] = DisplayAsIcon;
		param[3] = IconFileName;
		param[4] = IconIndex;
		param[5] = IconLabel;
		param[6] = NoHTMLFormatting;
		Invoke(7, 1928, L"PasteSpecial", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::PasteSpecial()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1928, L"PasteSpecial", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object WorksheetX::Pictures(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 771, L"Pictures", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Pictures()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 771, L"Pictures", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotTable WorksheetX::PivotTableWizard(_variant_t SourceType, _variant_t SourceData, _variant_t TableDestination, _variant_t TableName, _variant_t RowGrand, _variant_t ColumnGrand, _variant_t SaveData, _variant_t HasAutoFormat, _variant_t AutoPage, _variant_t Reserved, _variant_t BackgroundQuery, _variant_t OptimizeCache, _variant_t PageFieldOrder, _variant_t PageFieldWrapCount, _variant_t ReadData, _variant_t Connection)
	{
		Excel::PivotTable returnedValue;
		Com::Param param(16);
		param[0] = SourceType;
		param[1] = SourceData;
		param[2] = TableDestination;
		param[3] = TableName;
		param[4] = RowGrand;
		param[5] = ColumnGrand;
		param[6] = SaveData;
		param[7] = HasAutoFormat;
		param[8] = AutoPage;
		param[9] = Reserved;
		param[10] = BackgroundQuery;
		param[11] = OptimizeCache;
		param[12] = PageFieldOrder;
		param[13] = PageFieldWrapCount;
		param[14] = ReadData;
		param[15] = Connection;
		Invoke(16, 684, L"PivotTableWizard", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotTable WorksheetX::PivotTableWizard()
	{
		Excel::PivotTable returnedValue;
		Com::Param param(0);
		Invoke(0, 684, L"PivotTableWizard", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::PivotTables(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 690, L"PivotTables", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::PivotTables()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 690, L"PivotTables", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::get_Previous()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 503, L"Previous", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetX::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		param[8] = IgnorePrintAreas;
		Invoke(9, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	long WorksheetX::get_PrintedCommentPages()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2857, L"PrintedCommentPages", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void WorksheetX::Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly, _variant_t AllowFormattingCells, _variant_t AllowFormattingColumns, _variant_t AllowFormattingRows, _variant_t AllowInsertingColumns, _variant_t AllowInsertingRows, _variant_t AllowInsertingHyperlinks, _variant_t AllowDeletingColumns, _variant_t AllowDeletingRows, _variant_t AllowSorting, _variant_t AllowFiltering, _variant_t AllowUsingPivotTables)
	{
		_variant_t returnedValue;
		Com::Param param(16);
		param[0] = Password;
		param[1] = DrawingObjects;
		param[2] = Contents;
		param[3] = Scenarios;
		param[4] = UserInterfaceOnly;
		param[5] = AllowFormattingCells;
		param[6] = AllowFormattingColumns;
		param[7] = AllowFormattingRows;
		param[8] = AllowInsertingColumns;
		param[9] = AllowInsertingRows;
		param[10] = AllowInsertingHyperlinks;
		param[11] = AllowDeletingColumns;
		param[12] = AllowDeletingRows;
		param[13] = AllowSorting;
		param[14] = AllowFiltering;
		param[15] = AllowUsingPivotTables;
		Invoke(16, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorksheetX::get_ProtectContents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 292, L"ProtectContents", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetX::get_ProtectDrawingObjects()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 293, L"ProtectDrawingObjects", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetX::get_ProtectScenarios()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 294, L"ProtectScenarios", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::Protection WorksheetX::get_Protection()
	{
		Excel::Protection returnedValue;
		Com::Param param;
		Invoke(0, 176, L"Protection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorksheetX::get_ProtectionMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1159, L"ProtectionMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::QueryTables WorksheetX::get_QueryTables()
	{
		Excel::QueryTables returnedValue;
		Com::Param param;
		Invoke(0, 1434, L"QueryTables", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range WorksheetX::get_Range(_variant_t Cell1, _variant_t Cell2)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0] = Cell1;
		param[1] = Cell2;
		Invoke(2, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range WorksheetX::get_Range(_variant_t Cell1)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = Cell1;
		Invoke(1, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::Rectangles(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 774, L"Rectangles", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Rectangles()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 774, L"Rectangles", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void WorksheetX::ResetAllPageBreaks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1426, L"ResetAllPageBreaks", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range WorksheetX::get_Rows()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 258, L"Rows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetX::SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		param[9] = Local;
		Invoke(10, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object WorksheetX::Scenarios(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 908, L"Scenarios", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Scenarios()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 908, L"Scenarios", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::get_Scripts()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1816, L"Scripts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorksheetX::get_ScrollArea()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1433, L"ScrollArea", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put_ScrollArea(wstring ScrollArea)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ScrollArea.c_str());
		Invoke(1, 1433, L"ScrollArea", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorksheetX::ScrollBars(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 830, L"ScrollBars", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::ScrollBars()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 830, L"ScrollBars", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void WorksheetX::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::SetBackgroundPicture(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1188, L"SetBackgroundPicture", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Shapes WorksheetX::get_Shapes()
	{
		Excel::Shapes returnedValue;
		Com::Param param;
		Invoke(0, 1377, L"Shapes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetX::ShowAllData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 794, L"ShowAllData", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::ShowDataForm()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 409, L"ShowDataForm", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::SmartTags WorksheetX::get_SmartTags()
	{
		Excel::SmartTags returnedValue;
		Com::Param param;
		Invoke(0, 2016, L"SmartTags", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sort WorksheetX::get_Sort()
	{
		Excel::Sort returnedValue;
		Com::Param param;
		Invoke(0, 880, L"Sort", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::Spinners(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 838, L"Spinners", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::Spinners()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 838, L"Spinners", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetX::get_StandardHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 407, L"StandardHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double WorksheetX::get_StandardWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 408, L"StandardWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void WorksheetX::put_StandardWidth(double StandardWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = StandardWidth;
		Invoke(1, 408, L"StandardWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Tab WorksheetX::get_Tab()
	{
		Excel::Tab returnedValue;
		Com::Param param;
		Invoke(0, 1041, L"Tab", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetX::TextBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 777, L"TextBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorksheetX::TextBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 777, L"TextBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool WorksheetX::get_TransitionExpEval()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 401, L"TransitionExpEval", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_TransitionExpEval(bool TransitionExpEval)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TransitionExpEval == true) ? 1 : 0;
		Invoke(1, 401, L"TransitionExpEval", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetX::get_TransitionFormEntry()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 402, L"TransitionFormEntry", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetX::put_TransitionFormEntry(bool TransitionFormEntry)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TransitionFormEntry == true) ? 1 : 0;
		Invoke(1, 402, L"TransitionFormEntry", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSheetType WorksheetX::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSheetType)returnedValue.iVal;
	}

	void WorksheetX::Unprotect(_variant_t Password)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Password;
		Invoke(1, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::Unprotect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range WorksheetX::get_UsedRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 412, L"UsedRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::VPageBreaks WorksheetX::get_VPageBreaks()
	{
		Excel::VPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1419, L"VPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlSheetVisibility WorksheetX::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSheetVisibility)returnedValue.iVal;
	}

	void WorksheetX::put_Visible(Excel::XlSheetVisibility Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range WorksheetX::XmlDataQuery(wstring XPath, _variant_t SelectionNamespaces, _variant_t Map)
	{
		Excel::Range returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(XPath.c_str());
		param[1] = SelectionNamespaces;
		param[2] = Map;
		Invoke(3, 2260, L"XmlDataQuery", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range WorksheetX::XmlDataQuery(wstring XPath)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(XPath.c_str());
		Invoke(1, 2260, L"XmlDataQuery", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range WorksheetX::XmlMapQuery(wstring XPath, _variant_t SelectionNamespaces, _variant_t Map)
	{
		Excel::Range returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(XPath.c_str());
		param[1] = SelectionNamespaces;
		param[2] = Map;
		Invoke(3, 2263, L"XmlMapQuery", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range WorksheetX::XmlMapQuery(wstring XPath)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(XPath.c_str());
		Invoke(1, 2263, L"XmlMapQuery", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void WorksheetX::_CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang, _variant_t IgnoreFinalYaa, _variant_t SpellScript)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		param[4] = IgnoreFinalYaa;
		param[5] = SpellScript;
		Invoke(6, 1817, L"_CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1817, L"_CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorksheetX::get__CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorksheetX::put__CodeName(wstring _CodeName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_CodeName.c_str());
		Invoke(1, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long WorksheetX::get__DisplayRightToLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 648, L"_DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void WorksheetX::put__DisplayRightToLeft(long _DisplayRightToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _DisplayRightToLeft;
		Invoke(1, 648, L"_DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorksheetX::_Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, -5, L"_Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void WorksheetX::_ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		Invoke(9, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_PasteSpecial(_variant_t Format, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Format;
		param[1] = Link;
		param[2] = DisplayAsIcon;
		param[3] = IconFileName;
		param[4] = IconIndex;
		param[5] = IconLabel;
		Invoke(6, 1027, L"_PasteSpecial", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_PasteSpecial()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1027, L"_PasteSpecial", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Password;
		param[1] = DrawingObjects;
		param[2] = Contents;
		param[3] = Scenarios;
		param[4] = UserInterfaceOnly;
		Invoke(5, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		param[9] = Local;
		Invoke(10, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::_SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::__SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		Invoke(9, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorksheetX::__SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	//_________________________________________________________Global
	GlobalX::GlobalX()
	{
	}

	GlobalX::~GlobalX()
	{
	}

	Excel::Range GlobalX::get_ActiveCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 305, L"ActiveCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartX GlobalX::get_ActiveChart()
	{
		Excel::ChartX returnedValue;
		Com::Param param;
		Invoke(0, 183, L"ActiveChart", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DialogSheet GlobalX::get_ActiveDialog()
	{
		Excel::DialogSheet returnedValue;
		Com::Param param;
		Invoke(0, 815, L"ActiveDialog", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::MenuBar GlobalX::get_ActiveMenuBar()
	{
		Excel::MenuBar returnedValue;
		Com::Param param;
		Invoke(0, 758, L"ActiveMenuBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring GlobalX::get_ActivePrinter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 306, L"ActivePrinter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GlobalX::put_ActivePrinter(wstring ActivePrinter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ActivePrinter.c_str());
		Invoke(1, 306, L"ActivePrinter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GlobalX::get_ActiveSheet()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 307, L"ActiveSheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Window GlobalX::get_ActiveWindow()
	{
		Excel::Window returnedValue;
		Com::Param param;
		Invoke(0, 759, L"ActiveWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookX GlobalX::get_ActiveWorkbook()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param;
		Invoke(0, 308, L"ActiveWorkbook", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::AddIns GlobalX::get_AddIns()
	{
		Excel::AddIns returnedValue;
		Com::Param param;
		Invoke(0, 549, L"AddIns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX GlobalX::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object GlobalX::get_Assistant()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1438, L"Assistant", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GlobalX::Calculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 279, L"Calculate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range GlobalX::get_Cells()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 238, L"Cells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sheets GlobalX::get_Charts()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 121, L"Charts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range GlobalX::get_Columns()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 241, L"Columns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object GlobalX::get_CommandBars()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1439, L"CommandBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator GlobalX::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long GlobalX::get_DDEAppReturnCode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 332, L"DDEAppReturnCode", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void GlobalX::DDEExecute(long Channel, wstring String)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Channel;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(String.c_str());
		Invoke(2, 333, L"DDEExecute", param, returnedValue, DISPATCH_METHOD);
	}

	long GlobalX::DDEInitiate(wstring App, wstring Topic)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(App.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Topic.c_str());
		Invoke(2, 334, L"DDEInitiate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	void GlobalX::DDEPoke(long Channel, _variant_t Item, _variant_t Data)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I4;
		param[0].lVal = Channel;
		param[1] = Item;
		param[2] = Data;
		Invoke(3, 335, L"DDEPoke", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t GlobalX::DDERequest(long Channel, wstring Item)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Channel;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Item.c_str());
		Invoke(2, 336, L"DDERequest", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void GlobalX::DDETerminate(long Channel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Channel;
		Invoke(1, 337, L"DDETerminate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Sheets GlobalX::get_DialogSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 764, L"DialogSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GlobalX::Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 1, L"Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Sheets GlobalX::get_Excel4IntlMacroSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 581, L"Excel4IntlMacroSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sheets GlobalX::get_Excel4MacroSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 579, L"Excel4MacroSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GlobalX::ExecuteExcel4Macro(wstring String)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(String.c_str());
		Invoke(1, 350, L"ExecuteExcel4Macro", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range GlobalX::Intersect(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		Excel::Range returnedValue;
		Com::Param param(30);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 766, L"Intersect", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range GlobalX::Intersect(Excel::Range& Arg1, Excel::Range& Arg2)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		Invoke(2, 766, L"Intersect", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::MenuBars GlobalX::get_MenuBars()
	{
		Excel::MenuBars returnedValue;
		Com::Param param;
		Invoke(0, 589, L"MenuBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Modules GlobalX::get_Modules()
	{
		Excel::Modules returnedValue;
		Com::Param param;
		Invoke(0, 582, L"Modules", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Names GlobalX::get_Names()
	{
		Excel::Names returnedValue;
		Com::Param param;
		Invoke(0, 442, L"Names", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX GlobalX::get_Parent()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range GlobalX::get_Range(_variant_t Cell1, _variant_t Cell2)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0] = Cell1;
		param[1] = Cell2;
		Invoke(2, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range GlobalX::get_Range(_variant_t Cell1)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = Cell1;
		Invoke(1, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range GlobalX::get_Rows()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 258, L"Rows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GlobalX::Run(_variant_t Macro, _variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(31);
		param[0] = Macro;
		param[1] = Arg1;
		param[2] = Arg2;
		param[3] = Arg3;
		param[4] = Arg4;
		param[5] = Arg5;
		param[6] = Arg6;
		param[7] = Arg7;
		param[8] = Arg8;
		param[9] = Arg9;
		param[10] = Arg10;
		param[11] = Arg11;
		param[12] = Arg12;
		param[13] = Arg13;
		param[14] = Arg14;
		param[15] = Arg15;
		param[16] = Arg16;
		param[17] = Arg17;
		param[18] = Arg18;
		param[19] = Arg19;
		param[20] = Arg20;
		param[21] = Arg21;
		param[22] = Arg22;
		param[23] = Arg23;
		param[24] = Arg24;
		param[25] = Arg25;
		param[26] = Arg26;
		param[27] = Arg27;
		param[28] = Arg28;
		param[29] = Arg29;
		param[30] = Arg30;
		Invoke(31, 259, L"Run", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GlobalX::Run()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 259, L"Run", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object GlobalX::get_Selection()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 147, L"Selection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GlobalX::SendKeys(_variant_t Keys, _variant_t Wait)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Keys;
		param[1] = Wait;
		Invoke(2, 383, L"SendKeys", param, returnedValue, DISPATCH_METHOD);
	}

	void GlobalX::SendKeys(_variant_t Keys)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Keys;
		Invoke(1, 383, L"SendKeys", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Sheets GlobalX::get_Sheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 485, L"Sheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Menu GlobalX::get_ShortcutMenus(long Index)
	{
		Excel::Menu returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 776, L"ShortcutMenus", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookX GlobalX::get_ThisWorkbook()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param;
		Invoke(0, 778, L"ThisWorkbook", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Toolbars GlobalX::get_Toolbars()
	{
		Excel::Toolbars returnedValue;
		Com::Param param;
		Invoke(0, 552, L"Toolbars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range GlobalX::Union(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		Excel::Range returnedValue;
		Com::Param param(30);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 779, L"Union", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range GlobalX::Union(Excel::Range& Arg1, Excel::Range& Arg2)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		Invoke(2, 779, L"Union", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Windows GlobalX::get_Windows()
	{
		Excel::Windows returnedValue;
		Com::Param param;
		Invoke(0, 430, L"Windows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Workbooks GlobalX::get_Workbooks()
	{
		Excel::Workbooks returnedValue;
		Com::Param param;
		Invoke(0, 572, L"Workbooks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorksheetFunction GlobalX::get_WorksheetFunction()
	{
		Excel::WorksheetFunction returnedValue;
		Com::Param param;
		Invoke(0, 1440, L"WorksheetFunction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sheets GlobalX::get_Worksheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 494, L"Worksheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GlobalX::_Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, -5, L"_Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GlobalX::_Run2(_variant_t Macro, _variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(31);
		param[0] = Macro;
		param[1] = Arg1;
		param[2] = Arg2;
		param[3] = Arg3;
		param[4] = Arg4;
		param[5] = Arg5;
		param[6] = Arg6;
		param[7] = Arg7;
		param[8] = Arg8;
		param[9] = Arg9;
		param[10] = Arg10;
		param[11] = Arg11;
		param[12] = Arg12;
		param[13] = Arg13;
		param[14] = Arg14;
		param[15] = Arg15;
		param[16] = Arg16;
		param[17] = Arg17;
		param[18] = Arg18;
		param[19] = Arg19;
		param[20] = Arg20;
		param[21] = Arg21;
		param[22] = Arg22;
		param[23] = Arg23;
		param[24] = Arg24;
		param[25] = Arg25;
		param[26] = Arg26;
		param[27] = Arg27;
		param[28] = Arg28;
		param[29] = Arg29;
		param[30] = Arg30;
		Invoke(31, 806, L"_Run2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GlobalX::_Run2()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 806, L"_Run2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//_________________________________________________________Workbook
	WorkbookX::WorkbookX()
	{
	}

	WorkbookX::~WorkbookX()
	{
	}

	void WorkbookX::AcceptAllChanges(_variant_t When, _variant_t Who, _variant_t Where)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = When;
		param[1] = Who;
		param[2] = Where;
		Invoke(3, 1466, L"AcceptAllChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::AcceptAllChanges()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1466, L"AcceptAllChanges", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_AcceptLabelsInFormulas()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1441, L"AcceptLabelsInFormulas", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_AcceptLabelsInFormulas(bool AcceptLabelsInFormulas)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AcceptLabelsInFormulas == true) ? 1 : 0;
		Invoke(1, 1441, L"AcceptLabelsInFormulas", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long WorkbookX::get_AccuracyVersion()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2871, L"AccuracyVersion", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void WorkbookX::put_AccuracyVersion(long AccuracyVersion)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = AccuracyVersion;
		Invoke(1, 2871, L"AccuracyVersion", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ChartX WorkbookX::get_ActiveChart()
	{
		Excel::ChartX returnedValue;
		Com::Param param;
		Invoke(0, 183, L"ActiveChart", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorkbookX::get_ActiveSheet()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 307, L"ActiveSheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Slicer WorkbookX::get_ActiveSlicer()
	{
		Excel::Slicer returnedValue;
		Com::Param param;
		Invoke(0, 2867, L"ActiveSlicer", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::AddToFavorites()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1476, L"AddToFavorites", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX WorkbookX::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::ApplyTheme(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2534, L"ApplyTheme", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorkbookX::get_Author()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 574, L"Author", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_Author(wstring Author)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Author.c_str());
		Invoke(1, 574, L"Author", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_AutoSaveOn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3232, L"AutoSaveOn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_AutoSaveOn(bool AutoSaveOn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSaveOn == true) ? 1 : 0;
		Invoke(1, 3232, L"AutoSaveOn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long WorkbookX::get_AutoUpdateFrequency()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1442, L"AutoUpdateFrequency", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void WorkbookX::put_AutoUpdateFrequency(long AutoUpdateFrequency)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = AutoUpdateFrequency;
		Invoke(1, 1442, L"AutoUpdateFrequency", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_AutoUpdateSaveChanges()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1443, L"AutoUpdateSaveChanges", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_AutoUpdateSaveChanges(bool AutoUpdateSaveChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoUpdateSaveChanges == true) ? 1 : 0;
		Invoke(1, 1443, L"AutoUpdateSaveChanges", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::BreakLink(wstring Name, Excel::XlLinkType Type)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = Type;
		Invoke(2, 2047, L"BreakLink", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object WorkbookX::get_BuiltinDocumentProperties()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1176, L"BuiltinDocumentProperties", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long WorkbookX::get_CalculationVersion()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1806, L"CalculationVersion", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool WorkbookX::CanCheckIn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2053, L"CanCheckIn", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::get_CaseSensitive()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3056, L"CaseSensitive", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::ChangeFileAccess(Excel::XlFileAccess Mode, _variant_t WritePassword, _variant_t Notify)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = Mode;
		param[1] = WritePassword;
		param[2] = Notify;
		Invoke(3, 989, L"ChangeFileAccess", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::ChangeFileAccess(Excel::XlFileAccess Mode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Mode;
		Invoke(1, 989, L"ChangeFileAccess", param, returnedValue, DISPATCH_METHOD);
	}

	long WorkbookX::get_ChangeHistoryDuration()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1444, L"ChangeHistoryDuration", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void WorkbookX::put_ChangeHistoryDuration(long ChangeHistoryDuration)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ChangeHistoryDuration;
		Invoke(1, 1444, L"ChangeHistoryDuration", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::ChangeLink(wstring Name, wstring NewName, Excel::XlLinkType Type)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(NewName.c_str());
		param[2].vt = VT_I2;
		param[2].iVal = Type;
		Invoke(3, 802, L"ChangeLink", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_ChartDataPointTrack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2998, L"ChartDataPointTrack", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_ChartDataPointTrack(bool ChartDataPointTrack)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ChartDataPointTrack == true) ? 1 : 0;
		Invoke(1, 2998, L"ChartDataPointTrack", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Sheets WorkbookX::get_Charts()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 121, L"Charts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_CheckCompatibility()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2528, L"CheckCompatibility", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_CheckCompatibility(bool CheckCompatibility)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CheckCompatibility == true) ? 1 : 0;
		Invoke(1, 2528, L"CheckCompatibility", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::CheckIn(_variant_t SaveChanges, _variant_t Comments, _variant_t MakePublic)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = SaveChanges;
		param[1] = Comments;
		param[2] = MakePublic;
		Invoke(3, 2051, L"CheckIn", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::CheckIn()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2051, L"CheckIn", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::CheckInWithVersion(_variant_t SaveChanges, _variant_t Comments, _variant_t MakePublic, _variant_t VersionType)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = SaveChanges;
		param[1] = Comments;
		param[2] = MakePublic;
		param[3] = VersionType;
		Invoke(4, 2517, L"CheckInWithVersion", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::CheckInWithVersion()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2517, L"CheckInWithVersion", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Close(_variant_t SaveChanges, _variant_t Filename, _variant_t RouteWorkbook)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = SaveChanges;
		param[1] = Filename;
		param[2] = RouteWorkbook;
		Invoke(3, 277, L"Close", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Close()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 277, L"Close", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorkbookX::get_CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1373, L"CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	_variant_t WorkbookX::get_Colors(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 286, L"Colors", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t WorkbookX::get_Colors()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 286, L"Colors", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::put_Colors(_variant_t Colors, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Colors;
		param[1] = Index;
		Invoke(2, 286, L"Colors", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::put_Colors(_variant_t Colors)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Colors;
		Invoke(1, 286, L"Colors", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorkbookX::get_CommandBars()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1439, L"CommandBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookX::get_Comments()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 575, L"Comments", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_Comments(wstring Comments)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Comments.c_str());
		Invoke(1, 575, L"Comments", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSaveConflictResolution WorkbookX::get_ConflictResolution()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1175, L"ConflictResolution", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSaveConflictResolution)returnedValue.iVal;
	}

	void WorkbookX::put_ConflictResolution(Excel::XlSaveConflictResolution ConflictResolution)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ConflictResolution;
		Invoke(1, 1175, L"ConflictResolution", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Connections WorkbookX::get_Connections()
	{
		Excel::Connections returnedValue;
		Com::Param param;
		Invoke(0, 2513, L"Connections", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_ConnectionsDisabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2536, L"ConnectionsDisabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object WorkbookX::get_Container()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1190, L"Container", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorkbookX::get_ContentTypeProperties()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2512, L"ContentTypeProperties", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_CreateBackup()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 287, L"CreateBackup", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::CreateForecastSheet(Excel::Range& Timeline, Excel::Range& Values, _variant_t ForecastStart, _variant_t ForecastEnd, _variant_t ConfInt, _variant_t Seasonality, _variant_t DataCompletion, _variant_t Aggregation, _variant_t ChartType, _variant_t ShowStatsTable)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Timeline.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Values.dispatch.GetInterfacePtr();
		param[2] = ForecastStart;
		param[3] = ForecastEnd;
		param[4] = ConfInt;
		param[5] = Seasonality;
		param[6] = DataCompletion;
		param[7] = Aggregation;
		param[8] = ChartType;
		param[9] = ShowStatsTable;
		Invoke(10, 3167, L"CreateForecastSheet", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::CreateForecastSheet(Excel::Range& Timeline, Excel::Range& Values)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Timeline.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Values.dispatch.GetInterfacePtr();
		Invoke(2, 3167, L"CreateForecastSheet", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator WorkbookX::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object WorkbookX::get_CustomDocumentProperties()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1177, L"CustomDocumentProperties", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::CustomViews WorkbookX::get_CustomViews()
	{
		Excel::CustomViews returnedValue;
		Com::Param param;
		Invoke(0, 1456, L"CustomViews", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorkbookX::get_CustomXMLParts()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2530, L"CustomXMLParts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_Date1904()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 403, L"Date1904", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_Date1904(bool Date1904)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Date1904 == true) ? 1 : 0;
		Invoke(1, 403, L"Date1904", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorkbookX::get_DefaultPivotTableStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2527, L"DefaultPivotTableStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::put_DefaultPivotTableStyle(_variant_t DefaultPivotTableStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = DefaultPivotTableStyle;
		Invoke(1, 2527, L"DefaultPivotTableStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorkbookX::get_DefaultSlicerStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2868, L"DefaultSlicerStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::put_DefaultSlicerStyle(_variant_t DefaultSlicerStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = DefaultSlicerStyle;
		Invoke(1, 2868, L"DefaultSlicerStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorkbookX::get_DefaultTableStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2526, L"DefaultTableStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::put_DefaultTableStyle(_variant_t DefaultTableStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = DefaultTableStyle;
		Invoke(1, 2526, L"DefaultTableStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorkbookX::get_DefaultTimelineStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3060, L"DefaultTimelineStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::put_DefaultTimelineStyle(_variant_t DefaultTimelineStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = DefaultTimelineStyle;
		Invoke(1, 3060, L"DefaultTimelineStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::DeleteNumberFormat(wstring NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NumberFormat.c_str());
		Invoke(1, 397, L"DeleteNumberFormat", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Sheets WorkbookX::get_DialogSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 764, L"DialogSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlDisplayDrawingObjects WorkbookX::get_DisplayDrawingObjects()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 404, L"DisplayDrawingObjects", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDisplayDrawingObjects)returnedValue.iVal;
	}

	void WorkbookX::put_DisplayDrawingObjects(Excel::XlDisplayDrawingObjects DisplayDrawingObjects)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DisplayDrawingObjects;
		Invoke(1, 404, L"DisplayDrawingObjects", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_DisplayInkComments()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2276, L"DisplayInkComments", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_DisplayInkComments(bool DisplayInkComments)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayInkComments == true) ? 1 : 0;
		Invoke(1, 2276, L"DisplayInkComments", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_DoNotPromptForConvert()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2541, L"DoNotPromptForConvert", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_DoNotPromptForConvert(bool DoNotPromptForConvert)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DoNotPromptForConvert == true) ? 1 : 0;
		Invoke(1, 2541, L"DoNotPromptForConvert", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorkbookX::get_DocumentInspectors()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2521, L"DocumentInspectors", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorkbookX::get_DocumentLibraryVersions()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2274, L"DocumentLibraryVersions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::Dummy16()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2048, L"Dummy16", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Dummy17(long calcid)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = calcid;
		Invoke(1, 2044, L"Dummy17", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Dummy26()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2869, L"Dummy26", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Dummy27()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2870, L"Dummy27", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_EnableAutoRecover()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2049, L"EnableAutoRecover", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_EnableAutoRecover(bool EnableAutoRecover)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableAutoRecover == true) ? 1 : 0;
		Invoke(1, 2049, L"EnableAutoRecover", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::EnableConnections()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2537, L"EnableConnections", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorkbookX::get_EncryptionProvider()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2540, L"EncryptionProvider", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_EncryptionProvider(wstring EncryptionProvider)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(EncryptionProvider.c_str());
		Invoke(1, 2540, L"EncryptionProvider", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::EndReview()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2058, L"EndReview", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_EnvelopeVisible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1824, L"EnvelopeVisible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_EnvelopeVisible(bool EnvelopeVisible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnvelopeVisible == true) ? 1 : 0;
		Invoke(1, 1824, L"EnvelopeVisible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Sheets WorkbookX::get_Excel4IntlMacroSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 581, L"Excel4IntlMacroSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sheets WorkbookX::get_Excel4MacroSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 579, L"Excel4MacroSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_Excel8CompatibilityMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2535, L"Excel8CompatibilityMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::ExclusiveAccess()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1168, L"ExclusiveAccess", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		param[9] = WorkIdentity;
		Invoke(10, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlFileFormat WorkbookX::get_FileFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 288, L"FileFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlFileFormat)returnedValue.iVal;
	}

	bool WorkbookX::get_Final()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2531, L"Final", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_Final(bool Final)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Final == true) ? 1 : 0;
		Invoke(1, 2531, L"Final", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::FollowHyperlink(wstring Address, _variant_t SubAddress, _variant_t NewWindow, _variant_t AddHistory, _variant_t ExtraInfo, _variant_t Method, _variant_t HeaderInfo)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Address.c_str());
		param[1] = SubAddress;
		param[2] = NewWindow;
		param[3] = AddHistory;
		param[4] = ExtraInfo;
		param[5] = Method;
		param[6] = HeaderInfo;
		Invoke(7, 1470, L"FollowHyperlink", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::FollowHyperlink(wstring Address)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Address.c_str());
		Invoke(1, 1470, L"FollowHyperlink", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_ForceFullCalculation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2542, L"ForceFullCalculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_ForceFullCalculation(bool ForceFullCalculation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ForceFullCalculation == true) ? 1 : 0;
		Invoke(1, 2542, L"ForceFullCalculation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::ForwardMailer()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 973, L"ForwardMailer", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorkbookX::get_FullName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 289, L"FullName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring WorkbookX::get_FullNameURLEncoded()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1927, L"FullNameURLEncoded", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object WorkbookX::GetWorkflowTasks()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2522, L"GetWorkflowTasks", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorkbookX::GetWorkflowTemplates()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2523, L"GetWorkflowTemplates", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object WorkbookX::get_HTMLProject()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1823, L"HTMLProject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_HasMailer()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 976, L"HasMailer", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_HasMailer(bool HasMailer)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasMailer == true) ? 1 : 0;
		Invoke(1, 976, L"HasMailer", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_HasPassword()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 290, L"HasPassword", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::get_HasRoutingSlip()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 950, L"HasRoutingSlip", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_HasRoutingSlip(bool HasRoutingSlip)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasRoutingSlip == true) ? 1 : 0;
		Invoke(1, 950, L"HasRoutingSlip", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_HasVBProject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2529, L"HasVBProject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::get_HighlightChangesOnScreen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1461, L"HighlightChangesOnScreen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_HighlightChangesOnScreen(bool HighlightChangesOnScreen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HighlightChangesOnScreen == true) ? 1 : 0;
		Invoke(1, 1461, L"HighlightChangesOnScreen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::HighlightChangesOptions(_variant_t When, _variant_t Who, _variant_t Where)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = When;
		param[1] = Who;
		param[2] = Where;
		Invoke(3, 1458, L"HighlightChangesOptions", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::HighlightChangesOptions()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1458, L"HighlightChangesOptions", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::IconSets WorkbookX::get_IconSets()
	{
		Excel::IconSets returnedValue;
		Com::Param param;
		Invoke(0, 2539, L"IconSets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_InactiveListBorderVisible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2275, L"InactiveListBorderVisible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_InactiveListBorderVisible(bool InactiveListBorderVisible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InactiveListBorderVisible == true) ? 1 : 0;
		Invoke(1, 2275, L"InactiveListBorderVisible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_IsAddin()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1445, L"IsAddin", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_IsAddin(bool IsAddin)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IsAddin == true) ? 1 : 0;
		Invoke(1, 1445, L"IsAddin", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_IsInplace()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1769, L"IsInplace", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::get_KeepChangeHistory()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1462, L"KeepChangeHistory", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_KeepChangeHistory(bool KeepChangeHistory)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (KeepChangeHistory == true) ? 1 : 0;
		Invoke(1, 1462, L"KeepChangeHistory", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorkbookX::get_Keywords()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 577, L"Keywords", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_Keywords(wstring Keywords)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Keywords.c_str());
		Invoke(1, 577, L"Keywords", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorkbookX::LinkInfo(wstring Name, Excel::XlLinkInfo LinkInfo, _variant_t Type, _variant_t EditionRef)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = LinkInfo;
		param[2] = Type;
		param[3] = EditionRef;
		Invoke(4, 807, L"LinkInfo", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorkbookX::LinkInfo(wstring Name, Excel::XlLinkInfo LinkInfo)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = LinkInfo;
		Invoke(2, 807, L"LinkInfo", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorkbookX::LinkSources(_variant_t Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Type;
		Invoke(1, 808, L"LinkSources", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorkbookX::LinkSources()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 808, L"LinkSources", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool WorkbookX::get_ListChangesOnNewSheet()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1463, L"ListChangesOnNewSheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_ListChangesOnNewSheet(bool ListChangesOnNewSheet)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ListChangesOnNewSheet == true) ? 1 : 0;
		Invoke(1, 1463, L"ListChangesOnNewSheet", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::LockServerFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2520, L"LockServerFile", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::PublishedDocs WorkbookX::LookUpInDocs(_variant_t Filename)
	{
		Excel::PublishedDocs returnedValue;
		Com::Param param(1);
		param[0] = Filename;
		Invoke(1, 3227, L"LookUpInDocs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PublishedDocs WorkbookX::LookUpInDocs()
	{
		Excel::PublishedDocs returnedValue;
		Com::Param param(0);
		Invoke(0, 3227, L"LookUpInDocs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Mailer WorkbookX::get_Mailer()
	{
		Excel::Mailer returnedValue;
		Com::Param param;
		Invoke(0, 979, L"Mailer", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::MergeWorkbook(_variant_t Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Filename;
		Invoke(1, 1446, L"MergeWorkbook", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Model WorkbookX::get_Model()
	{
		Excel::Model returnedValue;
		Com::Param param;
		Invoke(0, 3059, L"Model", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sheets WorkbookX::get_Modules()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 582, L"Modules", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_MultiUserEditing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1169, L"MultiUserEditing", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring WorkbookX::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::Names WorkbookX::get_Names()
	{
		Excel::Names returnedValue;
		Com::Param param;
		Invoke(0, 442, L"Names", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Window WorkbookX::NewWindow()
	{
		Excel::Window returnedValue;
		Com::Param param;
		Invoke(0, 280, L"NewWindow", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring WorkbookX::get_OnSave()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1178, L"OnSave", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_OnSave(wstring OnSave)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSave.c_str());
		Invoke(1, 1178, L"OnSave", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorkbookX::get_OnSheetActivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_OnSheetActivate(wstring OnSheetActivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetActivate.c_str());
		Invoke(1, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorkbookX::get_OnSheetDeactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_OnSheetDeactivate(wstring OnSheetDeactivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetDeactivate.c_str());
		Invoke(1, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::OpenLinks(wstring Name, _variant_t ReadOnly, _variant_t Type)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = ReadOnly;
		param[2] = Type;
		Invoke(3, 803, L"OpenLinks", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::OpenLinks(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 803, L"OpenLinks", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object WorkbookX::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookX::get_Password()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 429, L"Password", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_Password(wstring Password)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Password.c_str());
		Invoke(1, 429, L"Password", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorkbookX::get_PasswordEncryptionAlgorithm()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2060, L"PasswordEncryptionAlgorithm", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool WorkbookX::get_PasswordEncryptionFileProperties()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2063, L"PasswordEncryptionFileProperties", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long WorkbookX::get_PasswordEncryptionKeyLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2061, L"PasswordEncryptionKeyLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring WorkbookX::get_PasswordEncryptionProvider()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2059, L"PasswordEncryptionProvider", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring WorkbookX::get_Path()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 291, L"Path", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object WorkbookX::get_Permission()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2264, L"Permission", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_PersonalViewListSettings()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1447, L"PersonalViewListSettings", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_PersonalViewListSettings(bool PersonalViewListSettings)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PersonalViewListSettings == true) ? 1 : 0;
		Invoke(1, 1447, L"PersonalViewListSettings", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_PersonalViewPrintSettings()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1448, L"PersonalViewPrintSettings", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_PersonalViewPrintSettings(bool PersonalViewPrintSettings)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PersonalViewPrintSettings == true) ? 1 : 0;
		Invoke(1, 1448, L"PersonalViewPrintSettings", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::PivotCaches WorkbookX::PivotCaches()
	{
		Excel::PivotCaches returnedValue;
		Com::Param param;
		Invoke(0, 1449, L"PivotCaches", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void WorkbookX::PivotTableWizard(_variant_t SourceType, _variant_t SourceData, _variant_t TableDestination, _variant_t TableName, _variant_t RowGrand, _variant_t ColumnGrand, _variant_t SaveData, _variant_t HasAutoFormat, _variant_t AutoPage, _variant_t Reserved, _variant_t BackgroundQuery, _variant_t OptimizeCache, _variant_t PageFieldOrder, _variant_t PageFieldWrapCount, _variant_t ReadData, _variant_t Connection)
	{
		_variant_t returnedValue;
		Com::Param param(16);
		param[0] = SourceType;
		param[1] = SourceData;
		param[2] = TableDestination;
		param[3] = TableName;
		param[4] = RowGrand;
		param[5] = ColumnGrand;
		param[6] = SaveData;
		param[7] = HasAutoFormat;
		param[8] = AutoPage;
		param[9] = Reserved;
		param[10] = BackgroundQuery;
		param[11] = OptimizeCache;
		param[12] = PageFieldOrder;
		param[13] = PageFieldWrapCount;
		param[14] = ReadData;
		param[15] = Connection;
		Invoke(16, 684, L"PivotTableWizard", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::PivotTableWizard()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 684, L"PivotTableWizard", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object WorkbookX::get_PivotTables()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 690, L"PivotTables", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::Post(_variant_t DestName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = DestName;
		Invoke(1, 1166, L"Post", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Post()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1166, L"Post", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_PrecisionAsDisplayed()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 405, L"PrecisionAsDisplayed", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_PrecisionAsDisplayed(bool PrecisionAsDisplayed)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrecisionAsDisplayed == true) ? 1 : 0;
		Invoke(1, 405, L"PrecisionAsDisplayed", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		param[8] = IgnorePrintAreas;
		Invoke(9, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Protect(_variant_t Password, _variant_t Structure, _variant_t Windows)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Password;
		param[1] = Structure;
		param[2] = Windows;
		Invoke(3, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::ProtectSharing(_variant_t Filename, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t SharingPassword, _variant_t FileFormat)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Filename;
		param[1] = Password;
		param[2] = WriteResPassword;
		param[3] = ReadOnlyRecommended;
		param[4] = CreateBackup;
		param[5] = SharingPassword;
		param[6] = FileFormat;
		Invoke(7, 2543, L"ProtectSharing", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::ProtectSharing()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2543, L"ProtectSharing", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_ProtectStructure()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 588, L"ProtectStructure", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::get_ProtectWindows()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 295, L"ProtectWindows", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::PublishObjects WorkbookX::get_PublishObjects()
	{
		Excel::PublishObjects returnedValue;
		Com::Param param;
		Invoke(0, 1819, L"PublishObjects", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookX::PublishToDocs(wstring Title, Excel::XlPublishToDocsDisclosureScope DisclosureScope, _variant_t OverwriteUrl)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = DisclosureScope;
		param[2] = OverwriteUrl;
		Invoke(3, 3185, L"PublishToDocs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorkbookX::PublishToDocs(wstring Title, Excel::XlPublishToDocsDisclosureScope DisclosureScope)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = DisclosureScope;
		Invoke(2, 3185, L"PublishToDocs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorkbookX::PublishToPBI(_variant_t PublishType, _variant_t nameConflict, _variant_t bstrGroupName)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = PublishType;
		param[1] = nameConflict;
		param[2] = bstrGroupName;
		Invoke(3, 3257, L"PublishToPBI", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorkbookX::PublishToPBI()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 3257, L"PublishToPBI", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	void WorkbookX::PurgeChangeHistoryNow(long Days, _variant_t SharingPassword)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Days;
		param[1] = SharingPassword;
		Invoke(2, 1464, L"PurgeChangeHistoryNow", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::PurgeChangeHistoryNow(long Days)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Days;
		Invoke(1, 1464, L"PurgeChangeHistoryNow", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Queries WorkbookX::get_Queries()
	{
		Excel::Queries returnedValue;
		Com::Param param;
		Invoke(0, 3186, L"Queries", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_ReadOnly()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 296, L"ReadOnly", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::get_ReadOnlyRecommended()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2005, L"ReadOnlyRecommended", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_ReadOnlyRecommended(bool ReadOnlyRecommended)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ReadOnlyRecommended == true) ? 1 : 0;
		Invoke(1, 2005, L"ReadOnlyRecommended", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::RecheckSmartTags()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2065, L"RecheckSmartTags", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::RefreshAll()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1452, L"RefreshAll", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::RejectAllChanges(_variant_t When, _variant_t Who, _variant_t Where)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = When;
		param[1] = Who;
		param[2] = Where;
		Invoke(3, 1467, L"RejectAllChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::RejectAllChanges()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1467, L"RejectAllChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::ReloadAs(/* MsoEncoding*/ short Encoding)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Encoding;
		Invoke(1, 1821, L"ReloadAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::RemoveDocumentInformation(Excel::XlRemoveDocInfoType RemoveDocInfoType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RemoveDocInfoType;
		Invoke(1, 2514, L"RemoveDocumentInformation", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_RemovePersonalInformation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2050, L"RemovePersonalInformation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_RemovePersonalInformation(bool RemovePersonalInformation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RemovePersonalInformation == true) ? 1 : 0;
		Invoke(1, 2050, L"RemovePersonalInformation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::RemoveUser(long Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 1453, L"RemoveUser", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Reply()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 977, L"Reply", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::ReplyAll()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 978, L"ReplyAll", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::ReplyWithChanges(_variant_t ShowMessage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ShowMessage;
		Invoke(1, 2057, L"ReplyWithChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::ReplyWithChanges()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2057, L"ReplyWithChanges", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Research WorkbookX::get_Research()
	{
		Excel::Research returnedValue;
		Com::Param param;
		Invoke(0, 2532, L"Research", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::ResetColors()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1468, L"ResetColors", param, returnedValue, DISPATCH_METHOD);
	}

	long WorkbookX::get_RevisionNumber()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1172, L"RevisionNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void WorkbookX::Route()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 946, L"Route", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_Routed()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 951, L"Routed", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::RoutingSlip WorkbookX::get_RoutingSlip()
	{
		Excel::RoutingSlip returnedValue;
		Com::Param param;
		Invoke(0, 949, L"RoutingSlip", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::RunAutoMacros(Excel::XlRunAutoMacro Which)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Which;
		Invoke(1, 634, L"RunAutoMacros", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Save()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 283, L"Save", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode, _variant_t ConflictResolution, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local, _variant_t WorkIdentity)
	{
		_variant_t returnedValue;
		Com::Param param(13);
		param[0] = Filename;
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6].vt = VT_I2;
		param[6].iVal = AccessMode;
		param[7] = ConflictResolution;
		param[8] = AddToMru;
		param[9] = TextCodepage;
		param[10] = TextVisualLayout;
		param[11] = Local;
		param[12] = WorkIdentity;
		Invoke(13, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Filename;
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6].vt = VT_I2;
		param[6].iVal = AccessMode;
		Invoke(7, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SaveAsXMLData(wstring Filename, Excel::XmlMap& Map)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Map.dispatch.GetInterfacePtr();
		Invoke(2, 2278, L"SaveAsXMLData", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SaveCopyAs(_variant_t Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Filename;
		Invoke(1, 175, L"SaveCopyAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SaveCopyAs()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 175, L"SaveCopyAs", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get_SaveLinkValues()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 406, L"SaveLinkValues", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_SaveLinkValues(bool SaveLinkValues)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveLinkValues == true) ? 1 : 0;
		Invoke(1, 406, L"SaveLinkValues", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_Saved()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 298, L"Saved", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_Saved(bool Saved)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Saved == true) ? 1 : 0;
		Invoke(1, 298, L"Saved", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::SendFaxOverInternet(_variant_t Recipients, _variant_t Subject, _variant_t ShowMessage)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Recipients;
		param[1] = Subject;
		param[2] = ShowMessage;
		Invoke(3, 2267, L"SendFaxOverInternet", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SendFaxOverInternet()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2267, L"SendFaxOverInternet", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SendForReview(_variant_t Recipients, _variant_t Subject, _variant_t ShowMessage, _variant_t IncludeAttachment)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Recipients;
		param[1] = Subject;
		param[2] = ShowMessage;
		param[3] = IncludeAttachment;
		Invoke(4, 2054, L"SendForReview", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SendForReview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2054, L"SendForReview", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SendMail(_variant_t Recipients, _variant_t Subject, _variant_t ReturnReceipt)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Recipients;
		param[1] = Subject;
		param[2] = ReturnReceipt;
		Invoke(3, 947, L"SendMail", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SendMail(_variant_t Recipients)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Recipients;
		Invoke(1, 947, L"SendMail", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SendMailer(_variant_t FileFormat, Excel::XlPriority Priority)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = FileFormat;
		param[1].vt = VT_I2;
		param[1].iVal = Priority;
		Invoke(2, 980, L"SendMailer", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object WorkbookX::get_ServerPolicy()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2519, L"ServerPolicy", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ServerViewableItems WorkbookX::get_ServerViewableItems()
	{
		Excel::ServerViewableItems returnedValue;
		Com::Param param;
		Invoke(0, 2524, L"ServerViewableItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::SetLinkOnData(wstring Name, _variant_t Procedure)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = Procedure;
		Invoke(2, 809, L"SetLinkOnData", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SetLinkOnData(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 809, L"SetLinkOnData", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SetPasswordEncryptionOptions(_variant_t PasswordEncryptionProvider, _variant_t PasswordEncryptionAlgorithm, _variant_t PasswordEncryptionKeyLength, _variant_t PasswordEncryptionFileProperties)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = PasswordEncryptionProvider;
		param[1] = PasswordEncryptionAlgorithm;
		param[2] = PasswordEncryptionKeyLength;
		param[3] = PasswordEncryptionFileProperties;
		Invoke(4, 2062, L"SetPasswordEncryptionOptions", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::SetPasswordEncryptionOptions()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2062, L"SetPasswordEncryptionOptions", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object WorkbookX::get_SharedWorkspace()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2265, L"SharedWorkspace", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sheets WorkbookX::get_Sheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 485, L"Sheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_ShowConflictHistory()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1171, L"ShowConflictHistory", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_ShowConflictHistory(bool ShowConflictHistory)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowConflictHistory == true) ? 1 : 0;
		Invoke(1, 1171, L"ShowConflictHistory", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_ShowPivotChartActiveFields()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2538, L"ShowPivotChartActiveFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_ShowPivotChartActiveFields(bool ShowPivotChartActiveFields)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowPivotChartActiveFields == true) ? 1 : 0;
		Invoke(1, 2538, L"ShowPivotChartActiveFields", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_ShowPivotTableFieldList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2046, L"ShowPivotTableFieldList", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_ShowPivotTableFieldList(bool ShowPivotTableFieldList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowPivotTableFieldList == true) ? 1 : 0;
		Invoke(1, 2046, L"ShowPivotTableFieldList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorkbookX::get_Signatures()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2516, L"Signatures", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerCaches WorkbookX::get_SlicerCaches()
	{
		Excel::SlicerCaches returnedValue;
		Com::Param param;
		Invoke(0, 2866, L"SlicerCaches", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorkbookX::get_SmartDocument()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2273, L"SmartDocument", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SmartTagOptions WorkbookX::get_SmartTagOptions()
	{
		Excel::SmartTagOptions returnedValue;
		Com::Param param;
		Invoke(0, 2064, L"SmartTagOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Styles WorkbookX::get_Styles()
	{
		Excel::Styles returnedValue;
		Com::Param param;
		Invoke(0, 493, L"Styles", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookX::get_Subject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 953, L"Subject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_Subject(wstring Subject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Subject.c_str());
		Invoke(1, 953, L"Subject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorkbookX::get_Sync()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2266, L"Sync", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TableStyles WorkbookX::get_TableStyles()
	{
		Excel::TableStyles returnedValue;
		Com::Param param;
		Invoke(0, 2525, L"TableStyles", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_TemplateRemoveExtData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1457, L"TemplateRemoveExtData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_TemplateRemoveExtData(bool TemplateRemoveExtData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TemplateRemoveExtData == true) ? 1 : 0;
		Invoke(1, 1457, L"TemplateRemoveExtData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorkbookX::get_Theme()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2533, L"Theme", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookX::get_Title()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_Title(wstring Title)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		Invoke(1, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::ToggleFormsDesign()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2279, L"ToggleFormsDesign", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Unprotect(_variant_t Password)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Password;
		Invoke(1, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::Unprotect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::UnprotectSharing(_variant_t SharingPassword)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = SharingPassword;
		Invoke(1, 1455, L"UnprotectSharing", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::UnprotectSharing()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1455, L"UnprotectSharing", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::UpdateFromFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 995, L"UpdateFromFile", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::UpdateLink(_variant_t Name, _variant_t Type)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Name;
		param[1] = Type;
		Invoke(2, 804, L"UpdateLink", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::UpdateLink()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 804, L"UpdateLink", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlUpdateLinks WorkbookX::get_UpdateLinks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 864, L"UpdateLinks", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlUpdateLinks)returnedValue.iVal;
	}

	void WorkbookX::put_UpdateLinks(Excel::XlUpdateLinks UpdateLinks)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = UpdateLinks;
		Invoke(1, 864, L"UpdateLinks", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_UpdateRemoteReferences()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 411, L"UpdateRemoteReferences", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_UpdateRemoteReferences(bool UpdateRemoteReferences)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UpdateRemoteReferences == true) ? 1 : 0;
		Invoke(1, 411, L"UpdateRemoteReferences", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_UseWholeCellCriteria()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3057, L"UseWholeCellCriteria", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::get_UseWildcards()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3058, L"UseWildcards", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool WorkbookX::get_UserControl()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1210, L"UserControl", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::put_UserControl(bool UserControl)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UserControl == true) ? 1 : 0;
		Invoke(1, 1210, L"UserControl", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorkbookX::get_UserStatus()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1173, L"UserStatus", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool WorkbookX::get_VBASigned()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1828, L"VBASigned", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object WorkbookX::get_VBProject()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1469, L"VBProject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WebOptions WorkbookX::get_WebOptions()
	{
		Excel::WebOptions returnedValue;
		Com::Param param;
		Invoke(0, 1820, L"WebOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookX::WebPagePreview()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1818, L"WebPagePreview", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Windows WorkbookX::get_Windows()
	{
		Excel::Windows returnedValue;
		Com::Param param;
		Invoke(0, 430, L"Windows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookX::get_WorkIdentity()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3173, L"WorkIdentity", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_WorkIdentity(wstring WorkIdentity)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(WorkIdentity.c_str());
		Invoke(1, 3173, L"WorkIdentity", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Sheets WorkbookX::get_Worksheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 494, L"Worksheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookX::get_WritePassword()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1128, L"WritePassword", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put_WritePassword(wstring WritePassword)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(WritePassword.c_str());
		Invoke(1, 1128, L"WritePassword", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookX::get_WriteReserved()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 299, L"WriteReserved", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring WorkbookX::get_WriteReservedBy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 300, L"WriteReservedBy", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlXmlImportResult WorkbookX::XmlImport(wstring Url, Com::Object& ImportMap, _variant_t Overwrite, _variant_t Destination)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Url.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = ImportMap.dispatch.GetInterfacePtr();
		param[2] = Overwrite;
		param[3] = Destination;
		Invoke(4, 2270, L"XmlImport", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	Excel::XlXmlImportResult WorkbookX::XmlImport(wstring Url, Com::Object& ImportMap)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Url.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = ImportMap.dispatch.GetInterfacePtr();
		Invoke(2, 2270, L"XmlImport", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	Excel::XlXmlImportResult WorkbookX::XmlImportXml(wstring Data, Com::Object& ImportMap, _variant_t Overwrite, _variant_t Destination)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Data.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = ImportMap.dispatch.GetInterfacePtr();
		param[2] = Overwrite;
		param[3] = Destination;
		Invoke(4, 2277, L"XmlImportXml", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	Excel::XlXmlImportResult WorkbookX::XmlImportXml(wstring Data, Com::Object& ImportMap)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Data.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = ImportMap.dispatch.GetInterfacePtr();
		Invoke(2, 2277, L"XmlImportXml", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	Excel::XmlMaps WorkbookX::get_XmlMaps()
	{
		Excel::XmlMaps returnedValue;
		Com::Param param;
		Invoke(0, 2269, L"XmlMaps", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XmlNamespaces WorkbookX::get_XmlNamespaces()
	{
		Excel::XmlNamespaces returnedValue;
		Com::Param param;
		Invoke(0, 2268, L"XmlNamespaces", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookX::get__CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookX::put__CodeName(wstring _CodeName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_CodeName.c_str());
		Invoke(1, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WorkbookX::_ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		Invoke(9, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::_ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::_Protect(_variant_t Password, _variant_t Structure, _variant_t Windows)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Password;
		param[1] = Structure;
		param[2] = Windows;
		Invoke(3, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::_Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::_ProtectSharing(_variant_t Filename, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t SharingPassword)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Filename;
		param[1] = Password;
		param[2] = WriteResPassword;
		param[3] = ReadOnlyRecommended;
		param[4] = CreateBackup;
		param[5] = SharingPassword;
		Invoke(6, 1450, L"_ProtectSharing", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::_ProtectSharing()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1450, L"_ProtectSharing", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookX::get__ReadOnlyRecommended()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 297, L"_ReadOnlyRecommended", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookX::_SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode, _variant_t ConflictResolution, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local)
	{
		_variant_t returnedValue;
		Com::Param param(12);
		param[0] = Filename;
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6].vt = VT_I2;
		param[6].iVal = AccessMode;
		param[7] = ConflictResolution;
		param[8] = AddToMru;
		param[9] = TextCodepage;
		param[10] = TextVisualLayout;
		param[11] = Local;
		Invoke(12, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::_SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Filename;
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6].vt = VT_I2;
		param[6].iVal = AccessMode;
		Invoke(7, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::__SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode, _variant_t ConflictResolution, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(11);
		param[0] = Filename;
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6].vt = VT_I2;
		param[6].iVal = AccessMode;
		param[7] = ConflictResolution;
		param[8] = AddToMru;
		param[9] = TextCodepage;
		param[10] = TextVisualLayout;
		Invoke(11, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::__SaveAs(_variant_t Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, Excel::XlSaveAsAccessMode AccessMode)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Filename;
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6].vt = VT_I2;
		param[6].iVal = AccessMode;
		Invoke(7, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookX::sblt(wstring s)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(s.c_str());
		Invoke(1, 1826, L"sblt", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Workbooks
	Workbooks::Workbooks()
	{
	}

	Workbooks::~Workbooks()
	{
	}

	Excel::WorkbookX Workbooks::Add(_variant_t Template)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(1);
		param[0] = Template;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::Add()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Workbooks::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Workbooks::CanCheckOut(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2070, L"CanCheckOut", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	void Workbooks::CheckOut(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2069, L"CheckOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Workbooks::Close()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 277, L"Close", param, returnedValue, DISPATCH_METHOD);
	}

	long Workbooks::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Workbooks::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::WorkbookX Workbooks::get_Item(_variant_t Index)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::Open(wstring Filename, _variant_t UpdateLinks, _variant_t ReadOnly, _variant_t Format, _variant_t Password, _variant_t WriteResPassword, _variant_t IgnoreReadOnlyRecommended, _variant_t Origin, _variant_t Delimiter, _variant_t Editable, _variant_t Notify, _variant_t Converter, _variant_t AddToMru, _variant_t Local, _variant_t CorruptLoad)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(15);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = UpdateLinks;
		param[2] = ReadOnly;
		param[3] = Format;
		param[4] = Password;
		param[5] = WriteResPassword;
		param[6] = IgnoreReadOnlyRecommended;
		param[7] = Origin;
		param[8] = Delimiter;
		param[9] = Editable;
		param[10] = Notify;
		param[11] = Converter;
		param[12] = AddToMru;
		param[13] = Local;
		param[14] = CorruptLoad;
		Invoke(15, 1923, L"Open", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::Open(wstring Filename)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1923, L"Open", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::OpenDatabase(wstring Filename, _variant_t CommandText, _variant_t CommandType, _variant_t BackgroundQuery, _variant_t ImportDataAs)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = CommandText;
		param[2] = CommandType;
		param[3] = BackgroundQuery;
		param[4] = ImportDataAs;
		Invoke(5, 2067, L"OpenDatabase", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::OpenDatabase(wstring Filename)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2067, L"OpenDatabase", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Workbooks::OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier, _variant_t ConsecutiveDelimiter, _variant_t Tab, _variant_t Semicolon, _variant_t Comma, _variant_t Space, _variant_t Other, _variant_t OtherChar, _variant_t FieldInfo, _variant_t TextVisualLayout, _variant_t DecimalSeparator, _variant_t ThousandsSeparator, _variant_t TrailingMinusNumbers, _variant_t Local)
	{
		_variant_t returnedValue;
		Com::Param param(18);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Origin;
		param[2] = StartRow;
		param[3] = DataType;
		param[4].vt = VT_I2;
		param[4].iVal = TextQualifier;
		param[5] = ConsecutiveDelimiter;
		param[6] = Tab;
		param[7] = Semicolon;
		param[8] = Comma;
		param[9] = Space;
		param[10] = Other;
		param[11] = OtherChar;
		param[12] = FieldInfo;
		param[13] = TextVisualLayout;
		param[14] = DecimalSeparator;
		param[15] = ThousandsSeparator;
		param[16] = TrailingMinusNumbers;
		param[17] = Local;
		Invoke(18, 1924, L"OpenText", param, returnedValue, DISPATCH_METHOD);
	}

	void Workbooks::OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Origin;
		param[2] = StartRow;
		param[3] = DataType;
		param[4].vt = VT_I2;
		param[4].iVal = TextQualifier;
		Invoke(5, 1924, L"OpenText", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::WorkbookX Workbooks::OpenXML(wstring Filename, _variant_t Stylesheets, _variant_t LoadOption)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Stylesheets;
		param[2] = LoadOption;
		Invoke(3, 2280, L"OpenXML", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::OpenXML(wstring Filename)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2280, L"OpenXML", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Workbooks::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::get__Default(_variant_t Index)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Workbooks::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	Excel::WorkbookX Workbooks::_Open(wstring Filename, _variant_t UpdateLinks, _variant_t ReadOnly, _variant_t Format, _variant_t Password, _variant_t WriteResPassword, _variant_t IgnoreReadOnlyRecommended, _variant_t Origin, _variant_t Delimiter, _variant_t Editable, _variant_t Notify, _variant_t Converter, _variant_t AddToMru)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(13);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = UpdateLinks;
		param[2] = ReadOnly;
		param[3] = Format;
		param[4] = Password;
		param[5] = WriteResPassword;
		param[6] = IgnoreReadOnlyRecommended;
		param[7] = Origin;
		param[8] = Delimiter;
		param[9] = Editable;
		param[10] = Notify;
		param[11] = Converter;
		param[12] = AddToMru;
		Invoke(13, 682, L"_Open", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::_Open(wstring Filename)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 682, L"_Open", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Workbooks::_OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier, _variant_t ConsecutiveDelimiter, _variant_t Tab, _variant_t Semicolon, _variant_t Comma, _variant_t Space, _variant_t Other, _variant_t OtherChar, _variant_t FieldInfo, _variant_t TextVisualLayout, _variant_t DecimalSeparator, _variant_t ThousandsSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(16);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Origin;
		param[2] = StartRow;
		param[3] = DataType;
		param[4].vt = VT_I2;
		param[4].iVal = TextQualifier;
		param[5] = ConsecutiveDelimiter;
		param[6] = Tab;
		param[7] = Semicolon;
		param[8] = Comma;
		param[9] = Space;
		param[10] = Other;
		param[11] = OtherChar;
		param[12] = FieldInfo;
		param[13] = TextVisualLayout;
		param[14] = DecimalSeparator;
		param[15] = ThousandsSeparator;
		Invoke(16, 1773, L"_OpenText", param, returnedValue, DISPATCH_METHOD);
	}

	void Workbooks::_OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Origin;
		param[2] = StartRow;
		param[3] = DataType;
		param[4].vt = VT_I2;
		param[4].iVal = TextQualifier;
		Invoke(5, 1773, L"_OpenText", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::WorkbookX Workbooks::_OpenXML(wstring Filename, _variant_t Stylesheets)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Stylesheets;
		Invoke(2, 2071, L"_OpenXML", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookX Workbooks::_OpenXML(wstring Filename)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2071, L"_OpenXML", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Workbooks::__OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier, _variant_t ConsecutiveDelimiter, _variant_t Tab, _variant_t Semicolon, _variant_t Comma, _variant_t Space, _variant_t Other, _variant_t OtherChar, _variant_t FieldInfo, _variant_t TextVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(14);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Origin;
		param[2] = StartRow;
		param[3] = DataType;
		param[4].vt = VT_I2;
		param[4].iVal = TextQualifier;
		param[5] = ConsecutiveDelimiter;
		param[6] = Tab;
		param[7] = Semicolon;
		param[8] = Comma;
		param[9] = Space;
		param[10] = Other;
		param[11] = OtherChar;
		param[12] = FieldInfo;
		param[13] = TextVisualLayout;
		Invoke(14, 683, L"__OpenText", param, returnedValue, DISPATCH_METHOD);
	}

	void Workbooks::__OpenText(wstring Filename, _variant_t Origin, _variant_t StartRow, _variant_t DataType, Excel::XlTextQualifier TextQualifier)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Origin;
		param[2] = StartRow;
		param[3] = DataType;
		param[4].vt = VT_I2;
		param[4].iVal = TextQualifier;
		Invoke(5, 683, L"__OpenText", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________PublishObject
	PublishObject::PublishObject()
	{
	}

	PublishObject::~PublishObject()
	{
	}

	Excel::ApplicationX PublishObject::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PublishObject::get_AutoRepublish()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2178, L"AutoRepublish", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PublishObject::put_AutoRepublish(bool AutoRepublish)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoRepublish == true) ? 1 : 0;
		Invoke(1, 2178, L"AutoRepublish", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator PublishObject::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void PublishObject::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PublishObject::get_DivID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1894, L"DivID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring PublishObject::get_Filename()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1415, L"Filename", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PublishObject::put_Filename(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1415, L"Filename", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlHtmlType PublishObject::get_HtmlType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1893, L"HtmlType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlHtmlType)returnedValue.iVal;
	}

	void PublishObject::put_HtmlType(Excel::XlHtmlType HtmlType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = HtmlType;
		Invoke(1, 1893, L"HtmlType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PublishObject::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PublishObject::Publish(_variant_t Create)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Create;
		Invoke(1, 1895, L"Publish", param, returnedValue, DISPATCH_METHOD);
	}

	void PublishObject::Publish()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1895, L"Publish", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PublishObject::get_Sheet()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 751, L"Sheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring PublishObject::get_Source()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 222, L"Source", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlSourceType PublishObject::get_SourceType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 685, L"SourceType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSourceType)returnedValue.iVal;
	}

	wstring PublishObject::get_Title()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PublishObject::put_Title(wstring Title)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		Invoke(1, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________DefaultWebOptions
	DefaultWebOptions::DefaultWebOptions()
	{
	}

	DefaultWebOptions::~DefaultWebOptions()
	{
	}

	bool DefaultWebOptions::get_AllowPNG()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1908, L"AllowPNG", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_AllowPNG(bool AllowPNG)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AllowPNG == true) ? 1 : 0;
		Invoke(1, 1908, L"AllowPNG", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultWebOptions::get_AlwaysSaveInDefaultEncoding()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1912, L"AlwaysSaveInDefaultEncoding", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_AlwaysSaveInDefaultEncoding(bool AlwaysSaveInDefaultEncoding)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AlwaysSaveInDefaultEncoding == true) ? 1 : 0;
		Invoke(1, 1912, L"AlwaysSaveInDefaultEncoding", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX DefaultWebOptions::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DefaultWebOptions::get_CheckIfOfficeIsHTMLEditor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1905, L"CheckIfOfficeIsHTMLEditor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_CheckIfOfficeIsHTMLEditor(bool CheckIfOfficeIsHTMLEditor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CheckIfOfficeIsHTMLEditor == true) ? 1 : 0;
		Invoke(1, 1905, L"CheckIfOfficeIsHTMLEditor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator DefaultWebOptions::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool DefaultWebOptions::get_DownloadComponents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1906, L"DownloadComponents", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_DownloadComponents(bool DownloadComponents)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DownloadComponents == true) ? 1 : 0;
		Invoke(1, 1906, L"DownloadComponents", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoEncoding*/ short DefaultWebOptions::get_Encoding()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1822, L"Encoding", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoEncoding*/ short)returnedValue.iVal;
	}

	void DefaultWebOptions::put_Encoding(/* MsoEncoding*/ short Encoding)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Encoding;
		Invoke(1, 1822, L"Encoding", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DefaultWebOptions::get_FolderSuffix()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1914, L"FolderSuffix", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object DefaultWebOptions::get_Fonts()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1913, L"Fonts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DefaultWebOptions::get_LoadPictures()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1901, L"LoadPictures", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_LoadPictures(bool LoadPictures)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LoadPictures == true) ? 1 : 0;
		Invoke(1, 1901, L"LoadPictures", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DefaultWebOptions::get_LocationOfComponents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1911, L"LocationOfComponents", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DefaultWebOptions::put_LocationOfComponents(wstring LocationOfComponents)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LocationOfComponents.c_str());
		Invoke(1, 1911, L"LocationOfComponents", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultWebOptions::get_OrganizeInFolder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1902, L"OrganizeInFolder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_OrganizeInFolder(bool OrganizeInFolder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (OrganizeInFolder == true) ? 1 : 0;
		Invoke(1, 1902, L"OrganizeInFolder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DefaultWebOptions::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long DefaultWebOptions::get_PixelsPerInch()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1910, L"PixelsPerInch", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DefaultWebOptions::put_PixelsPerInch(long PixelsPerInch)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PixelsPerInch;
		Invoke(1, 1910, L"PixelsPerInch", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultWebOptions::get_RelyOnCSS()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1899, L"RelyOnCSS", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_RelyOnCSS(bool RelyOnCSS)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RelyOnCSS == true) ? 1 : 0;
		Invoke(1, 1899, L"RelyOnCSS", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultWebOptions::get_RelyOnVML()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1907, L"RelyOnVML", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_RelyOnVML(bool RelyOnVML)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RelyOnVML == true) ? 1 : 0;
		Invoke(1, 1907, L"RelyOnVML", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultWebOptions::get_SaveHiddenData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1900, L"SaveHiddenData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_SaveHiddenData(bool SaveHiddenData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveHiddenData == true) ? 1 : 0;
		Invoke(1, 1900, L"SaveHiddenData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultWebOptions::get_SaveNewWebPagesAsWebArchives()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2180, L"SaveNewWebPagesAsWebArchives", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_SaveNewWebPagesAsWebArchives(bool SaveNewWebPagesAsWebArchives)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveNewWebPagesAsWebArchives == true) ? 1 : 0;
		Invoke(1, 2180, L"SaveNewWebPagesAsWebArchives", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoScreenSize*/ short DefaultWebOptions::get_ScreenSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1909, L"ScreenSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoScreenSize*/ short)returnedValue.iVal;
	}

	void DefaultWebOptions::put_ScreenSize(/* MsoScreenSize*/ short ScreenSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScreenSize;
		Invoke(1, 1909, L"ScreenSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTargetBrowser*/ short DefaultWebOptions::get_TargetBrowser()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2179, L"TargetBrowser", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTargetBrowser*/ short)returnedValue.iVal;
	}

	void DefaultWebOptions::put_TargetBrowser(/* MsoTargetBrowser*/ short TargetBrowser)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TargetBrowser;
		Invoke(1, 2179, L"TargetBrowser", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultWebOptions::get_UpdateLinksOnSave()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1903, L"UpdateLinksOnSave", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_UpdateLinksOnSave(bool UpdateLinksOnSave)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UpdateLinksOnSave == true) ? 1 : 0;
		Invoke(1, 1903, L"UpdateLinksOnSave", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultWebOptions::get_UseLongFileNames()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1904, L"UseLongFileNames", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultWebOptions::put_UseLongFileNames(bool UseLongFileNames)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseLongFileNames == true) ? 1 : 0;
		Invoke(1, 1904, L"UseLongFileNames", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________WebOptions
	WebOptions::WebOptions()
	{
	}

	WebOptions::~WebOptions()
	{
	}

	bool WebOptions::get_AllowPNG()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1908, L"AllowPNG", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WebOptions::put_AllowPNG(bool AllowPNG)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AllowPNG == true) ? 1 : 0;
		Invoke(1, 1908, L"AllowPNG", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX WebOptions::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator WebOptions::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool WebOptions::get_DownloadComponents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1906, L"DownloadComponents", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WebOptions::put_DownloadComponents(bool DownloadComponents)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DownloadComponents == true) ? 1 : 0;
		Invoke(1, 1906, L"DownloadComponents", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoEncoding*/ short WebOptions::get_Encoding()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1822, L"Encoding", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoEncoding*/ short)returnedValue.iVal;
	}

	void WebOptions::put_Encoding(/* MsoEncoding*/ short Encoding)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Encoding;
		Invoke(1, 1822, L"Encoding", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WebOptions::get_FolderSuffix()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1914, L"FolderSuffix", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring WebOptions::get_LocationOfComponents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1911, L"LocationOfComponents", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WebOptions::put_LocationOfComponents(wstring LocationOfComponents)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LocationOfComponents.c_str());
		Invoke(1, 1911, L"LocationOfComponents", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WebOptions::get_OrganizeInFolder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1902, L"OrganizeInFolder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WebOptions::put_OrganizeInFolder(bool OrganizeInFolder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (OrganizeInFolder == true) ? 1 : 0;
		Invoke(1, 1902, L"OrganizeInFolder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WebOptions::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long WebOptions::get_PixelsPerInch()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1910, L"PixelsPerInch", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void WebOptions::put_PixelsPerInch(long PixelsPerInch)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PixelsPerInch;
		Invoke(1, 1910, L"PixelsPerInch", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WebOptions::get_RelyOnCSS()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1899, L"RelyOnCSS", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WebOptions::put_RelyOnCSS(bool RelyOnCSS)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RelyOnCSS == true) ? 1 : 0;
		Invoke(1, 1899, L"RelyOnCSS", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WebOptions::get_RelyOnVML()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1907, L"RelyOnVML", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WebOptions::put_RelyOnVML(bool RelyOnVML)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RelyOnVML == true) ? 1 : 0;
		Invoke(1, 1907, L"RelyOnVML", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoScreenSize*/ short WebOptions::get_ScreenSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1909, L"ScreenSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoScreenSize*/ short)returnedValue.iVal;
	}

	void WebOptions::put_ScreenSize(/* MsoScreenSize*/ short ScreenSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScreenSize;
		Invoke(1, 1909, L"ScreenSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTargetBrowser*/ short WebOptions::get_TargetBrowser()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2179, L"TargetBrowser", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTargetBrowser*/ short)returnedValue.iVal;
	}

	void WebOptions::put_TargetBrowser(/* MsoTargetBrowser*/ short TargetBrowser)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TargetBrowser;
		Invoke(1, 2179, L"TargetBrowser", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void WebOptions::UseDefaultFolderSuffix()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1915, L"UseDefaultFolderSuffix", param, returnedValue, DISPATCH_METHOD);
	}

	bool WebOptions::get_UseLongFileNames()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1904, L"UseLongFileNames", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WebOptions::put_UseLongFileNames(bool UseLongFileNames)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseLongFileNames == true) ? 1 : 0;
		Invoke(1, 1904, L"UseLongFileNames", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________TreeviewControl
	TreeviewControl::TreeviewControl()
	{
	}

	TreeviewControl::~TreeviewControl()
	{
	}

	Excel::ApplicationX TreeviewControl::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator TreeviewControl::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t TreeviewControl::get_Drilled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1917, L"Drilled", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TreeviewControl::put_Drilled(_variant_t Drilled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Drilled;
		Invoke(1, 1917, L"Drilled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TreeviewControl::get_Hidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TreeviewControl::put_Hidden(_variant_t Hidden)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Hidden;
		Invoke(1, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TreeviewControl::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________CubeField
	CubeField::CubeField()
	{
	}

	CubeField::~CubeField()
	{
	}

	void CubeField::AddMemberPropertyField(wstring Property, _variant_t PropertyOrder, _variant_t PropertyDisplayedIn)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Property.c_str());
		param[1] = PropertyOrder;
		param[2] = PropertyDisplayedIn;
		Invoke(3, 2668, L"AddMemberPropertyField", param, returnedValue, DISPATCH_METHOD);
	}

	void CubeField::AddMemberPropertyField(wstring Property)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Property.c_str());
		Invoke(1, 2668, L"AddMemberPropertyField", param, returnedValue, DISPATCH_METHOD);
	}

	bool CubeField::get_AllItemsVisible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2593, L"AllItemsVisible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::ApplicationX CubeField::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CubeField::AutoGroup(_variant_t Orientation, _variant_t Position)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Orientation;
		param[1] = Position;
		Invoke(2, 3165, L"AutoGroup", param, returnedValue, DISPATCH_METHOD);
	}

	void CubeField::AutoGroup()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 3165, L"AutoGroup", param, returnedValue, DISPATCH_METHOD);
	}

	wstring CubeField::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CubeField::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void CubeField::ClearManualFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2594, L"ClearManualFilter", param, returnedValue, DISPATCH_METHOD);
	}

	void CubeField::CreatePivotFields()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2671, L"CreatePivotFields", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator CubeField::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlCubeFieldSubType CubeField::get_CubeFieldSubType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2670, L"CubeFieldSubType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCubeFieldSubType)returnedValue.iVal;
	}

	Excel::XlCubeFieldType CubeField::get_CubeFieldType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1918, L"CubeFieldType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCubeFieldType)returnedValue.iVal;
	}

	wstring CubeField::get_CurrentPageName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1852, L"CurrentPageName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CubeField::put_CurrentPageName(wstring CurrentPageName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(CurrentPageName.c_str());
		Invoke(1, 1852, L"CurrentPageName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void CubeField::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	bool CubeField::get_DragToColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1508, L"DragToColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_DragToColumn(bool DragToColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToColumn == true) ? 1 : 0;
		Invoke(1, 1508, L"DragToColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_DragToData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1844, L"DragToData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_DragToData(bool DragToData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToData == true) ? 1 : 0;
		Invoke(1, 1844, L"DragToData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_DragToHide()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1509, L"DragToHide", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_DragToHide(bool DragToHide)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToHide == true) ? 1 : 0;
		Invoke(1, 1509, L"DragToHide", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_DragToPage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1510, L"DragToPage", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_DragToPage(bool DragToPage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToPage == true) ? 1 : 0;
		Invoke(1, 1510, L"DragToPage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_DragToRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1511, L"DragToRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_DragToRow(bool DragToRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToRow == true) ? 1 : 0;
		Invoke(1, 1511, L"DragToRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_EnableMultiplePageItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2184, L"EnableMultiplePageItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_EnableMultiplePageItems(bool EnableMultiplePageItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableMultiplePageItems == true) ? 1 : 0;
		Invoke(1, 2184, L"EnableMultiplePageItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_FlattenHierarchies()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2924, L"FlattenHierarchies", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_FlattenHierarchies(bool FlattenHierarchies)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FlattenHierarchies == true) ? 1 : 0;
		Invoke(1, 2924, L"FlattenHierarchies", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_HasMemberProperties()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2181, L"HasMemberProperties", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long CubeField::get_HiddenLevels()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1920, L"HiddenLevels", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void CubeField::put_HiddenLevels(long HiddenLevels)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = HiddenLevels;
		Invoke(1, 1920, L"HiddenLevels", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_HierarchizeDistinct()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2925, L"HierarchizeDistinct", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_HierarchizeDistinct(bool HierarchizeDistinct)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HierarchizeDistinct == true) ? 1 : 0;
		Invoke(1, 2925, L"HierarchizeDistinct", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_IncludeNewItemsInFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2587, L"IncludeNewItemsInFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_IncludeNewItemsInFilter(bool IncludeNewItemsInFilter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeNewItemsInFilter == true) ? 1 : 0;
		Invoke(1, 2587, L"IncludeNewItemsInFilter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_IsDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2672, L"IsDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlLayoutFormType CubeField::get_LayoutForm()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1848, L"LayoutForm", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlLayoutFormType)returnedValue.iVal;
	}

	void CubeField::put_LayoutForm(Excel::XlLayoutFormType LayoutForm)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = LayoutForm;
		Invoke(1, 1848, L"LayoutForm", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSubtototalLocationType CubeField::get_LayoutSubtotalLocation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1846, L"LayoutSubtotalLocation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSubtototalLocationType)returnedValue.iVal;
	}

	void CubeField::put_LayoutSubtotalLocation(Excel::XlSubtototalLocationType LayoutSubtotalLocation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = LayoutSubtotalLocation;
		Invoke(1, 1846, L"LayoutSubtotalLocation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring CubeField::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlPivotFieldOrientation CubeField::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotFieldOrientation)returnedValue.iVal;
	}

	void CubeField::put_Orientation(Excel::XlPivotFieldOrientation Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object CubeField::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotFields CubeField::get_PivotFields()
	{
		Excel::PivotFields returnedValue;
		Com::Param param;
		Invoke(0, 718, L"PivotFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long CubeField::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void CubeField::put_Position(long Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CubeField::get_ShowInFieldList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2185, L"ShowInFieldList", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CubeField::put_ShowInFieldList(bool ShowInFieldList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowInFieldList == true) ? 1 : 0;
		Invoke(1, 2185, L"ShowInFieldList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::TreeviewControl CubeField::get_TreeviewControl()
	{
		Excel::TreeviewControl returnedValue;
		Com::Param param;
		Invoke(0, 1919, L"TreeviewControl", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring CubeField::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CubeField::_AddMemberPropertyField(wstring Property, _variant_t PropertyOrder)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Property.c_str());
		param[1] = PropertyOrder;
		Invoke(2, 2182, L"_AddMemberPropertyField", param, returnedValue, DISPATCH_METHOD);
	}

	void CubeField::_AddMemberPropertyField(wstring Property)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Property.c_str());
		Invoke(1, 2182, L"_AddMemberPropertyField", param, returnedValue, DISPATCH_METHOD);
	}

	wstring CubeField::get__Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2667, L"_Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________CubeFields
	CubeFields::CubeFields()
	{
	}

	CubeFields::~CubeFields()
	{
	}

	Excel::CubeField CubeFields::AddSet(wstring Name, wstring Caption)
	{
		Excel::CubeField returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Caption.c_str());
		Invoke(2, 2186, L"AddSet", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX CubeFields::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long CubeFields::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator CubeFields::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CubeField CubeFields::GetMeasure(_variant_t AttributeHierarchy, Excel::XlConsolidationFunction Function, _variant_t Caption)
	{
		Excel::CubeField returnedValue;
		Com::Param param(3);
		param[0] = AttributeHierarchy;
		param[1].vt = VT_I2;
		param[1].iVal = Function;
		param[2] = Caption;
		Invoke(3, 3089, L"GetMeasure", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CubeField CubeFields::GetMeasure(_variant_t AttributeHierarchy, Excel::XlConsolidationFunction Function)
	{
		Excel::CubeField returnedValue;
		Com::Param param(2);
		param[0] = AttributeHierarchy;
		param[1].vt = VT_I2;
		param[1].iVal = Function;
		Invoke(2, 3089, L"GetMeasure", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CubeField CubeFields::get_Item(_variant_t Index)
	{
		Excel::CubeField returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object CubeFields::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::CubeField CubeFields::get__Default(_variant_t Index)
	{
		Excel::CubeField returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr CubeFields::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Font
	Font::Font()
	{
	}

	Font::~Font()
	{
	}

	Excel::ApplicationX Font::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Font::get_Background()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 180, L"Background", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Background(_variant_t Background)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Background;
		Invoke(1, 180, L"Background", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Bold()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 96, L"Bold", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Bold(_variant_t Bold)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Bold;
		Invoke(1, 96, L"Bold", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Color()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Color(_variant_t Color)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Color;
		Invoke(1, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_ColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_ColorIndex(_variant_t ColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ColorIndex;
		Invoke(1, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Font::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Font::get_FontStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 177, L"FontStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_FontStyle(_variant_t FontStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FontStyle;
		Invoke(1, 177, L"FontStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Italic()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 101, L"Italic", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Italic(_variant_t Italic)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Italic;
		Invoke(1, 101, L"Italic", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Name(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_OutlineFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 221, L"OutlineFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_OutlineFont(_variant_t OutlineFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = OutlineFont;
		Invoke(1, 221, L"OutlineFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Font::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Font::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Shadow(_variant_t Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Shadow;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Size()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 104, L"Size", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Size(_variant_t Size)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Size;
		Invoke(1, 104, L"Size", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Strikethrough()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 105, L"Strikethrough", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Strikethrough(_variant_t Strikethrough)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Strikethrough;
		Invoke(1, 105, L"Strikethrough", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Subscript()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 179, L"Subscript", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Subscript(_variant_t Subscript)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Subscript;
		Invoke(1, 179, L"Subscript", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Superscript()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 178, L"Superscript", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Superscript(_variant_t Superscript)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Superscript;
		Invoke(1, 178, L"Superscript", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_ThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_ThemeColor(_variant_t ThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ThemeColor;
		Invoke(1, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlThemeFont Font::get_ThemeFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2367, L"ThemeFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlThemeFont)returnedValue.iVal;
	}

	void Font::put_ThemeFont(Excel::XlThemeFont ThemeFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ThemeFont;
		Invoke(1, 2367, L"ThemeFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_TintAndShade(_variant_t TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TintAndShade;
		Invoke(1, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Font::get_Underline()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 106, L"Underline", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Font::put_Underline(_variant_t Underline)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Underline;
		Invoke(1, 106, L"Underline", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Window
	Window::Window()
	{
	}

	Window::~Window()
	{
	}

	_variant_t Window::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::ActivateNext()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1115, L"ActivateNext", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::ActivatePrevious()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1116, L"ActivatePrevious", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Window::get_ActiveCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 305, L"ActiveCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartX Window::get_ActiveChart()
	{
		Excel::ChartX returnedValue;
		Com::Param param;
		Invoke(0, 183, L"ActiveChart", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Pane Window::get_ActivePane()
	{
		Excel::Pane returnedValue;
		Com::Param param;
		Invoke(0, 642, L"ActivePane", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Window::get_ActiveSheet()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 307, L"ActiveSheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Window::get_ActiveSheetView()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2369, L"ActiveSheetView", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX Window::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Window::get_AutoFilterDateGrouping()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2371, L"AutoFilterDateGrouping", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_AutoFilterDateGrouping(bool AutoFilterDateGrouping)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoFilterDateGrouping == true) ? 1 : 0;
		Invoke(1, 2371, L"AutoFilterDateGrouping", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Window::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Window::put_Caption(_variant_t Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Caption;
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::Close(_variant_t SaveChanges, _variant_t Filename, _variant_t RouteWorkbook)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = SaveChanges;
		param[1] = Filename;
		param[2] = RouteWorkbook;
		Invoke(3, 277, L"Close", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool Window::Close()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 277, L"Close", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlCreator Window::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool Window::get_DisplayFormulas()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 644, L"DisplayFormulas", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayFormulas(bool DisplayFormulas)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayFormulas == true) ? 1 : 0;
		Invoke(1, 644, L"DisplayFormulas", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayGridlines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 645, L"DisplayGridlines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayGridlines(bool DisplayGridlines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayGridlines == true) ? 1 : 0;
		Invoke(1, 645, L"DisplayGridlines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayHeadings()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 646, L"DisplayHeadings", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayHeadings(bool DisplayHeadings)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayHeadings == true) ? 1 : 0;
		Invoke(1, 646, L"DisplayHeadings", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayHorizontalScrollBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 921, L"DisplayHorizontalScrollBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayHorizontalScrollBar(bool DisplayHorizontalScrollBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayHorizontalScrollBar == true) ? 1 : 0;
		Invoke(1, 921, L"DisplayHorizontalScrollBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayOutline()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 647, L"DisplayOutline", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayOutline(bool DisplayOutline)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayOutline == true) ? 1 : 0;
		Invoke(1, 647, L"DisplayOutline", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayRightToLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1774, L"DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayRightToLeft(bool DisplayRightToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayRightToLeft == true) ? 1 : 0;
		Invoke(1, 1774, L"DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayRuler()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2370, L"DisplayRuler", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayRuler(bool DisplayRuler)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayRuler == true) ? 1 : 0;
		Invoke(1, 2370, L"DisplayRuler", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayVerticalScrollBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 922, L"DisplayVerticalScrollBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayVerticalScrollBar(bool DisplayVerticalScrollBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayVerticalScrollBar == true) ? 1 : 0;
		Invoke(1, 922, L"DisplayVerticalScrollBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayWhitespace()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2372, L"DisplayWhitespace", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayWhitespace(bool DisplayWhitespace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayWhitespace == true) ? 1 : 0;
		Invoke(1, 2372, L"DisplayWhitespace", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayWorkbookTabs()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 923, L"DisplayWorkbookTabs", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayWorkbookTabs(bool DisplayWorkbookTabs)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayWorkbookTabs == true) ? 1 : 0;
		Invoke(1, 923, L"DisplayWorkbookTabs", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_DisplayZeros()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 649, L"DisplayZeros", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_DisplayZeros(bool DisplayZeros)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayZeros == true) ? 1 : 0;
		Invoke(1, 649, L"DisplayZeros", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_EnableResize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1192, L"EnableResize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_EnableResize(bool EnableResize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableResize == true) ? 1 : 0;
		Invoke(1, 1192, L"EnableResize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_FreezePanes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 650, L"FreezePanes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_FreezePanes(bool FreezePanes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FreezePanes == true) ? 1 : 0;
		Invoke(1, 650, L"FreezePanes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Window::get_GridlineColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 651, L"GridlineColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Window::put_GridlineColor(long GridlineColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = GridlineColor;
		Invoke(1, 651, L"GridlineColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex Window::get_GridlineColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 652, L"GridlineColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void Window::put_GridlineColorIndex(Excel::XlColorIndex GridlineColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = GridlineColorIndex;
		Invoke(1, 652, L"GridlineColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Window::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Window::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Window::get_Hwnd()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1950, L"Hwnd", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long Window::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t Window::LargeScroll(_variant_t Down, _variant_t Up, _variant_t ToRight, _variant_t ToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Down;
		param[1] = Up;
		param[2] = ToRight;
		param[3] = ToLeft;
		Invoke(4, 547, L"LargeScroll", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::LargeScroll()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 547, L"LargeScroll", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Window::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Window::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Window Window::NewWindow()
	{
		Excel::Window returnedValue;
		Com::Param param;
		Invoke(0, 280, L"NewWindow", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Window::get_OnWindow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 623, L"OnWindow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Window::put_OnWindow(wstring OnWindow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnWindow.c_str());
		Invoke(1, 623, L"OnWindow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Panes Window::get_Panes()
	{
		Excel::Panes returnedValue;
		Com::Param param;
		Invoke(0, 653, L"Panes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Window::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Window::PointsToScreenPixelsX(long Points)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Points;
		Invoke(1, 1776, L"PointsToScreenPixelsX", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	long Window::PointsToScreenPixelsY(long Points)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Points;
		Invoke(1, 1777, L"PointsToScreenPixelsY", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	_variant_t Window::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Window::RangeFromPoint(long x, long y)
	{
		Com::Object returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = x;
		param[1].vt = VT_I4;
		param[1].lVal = y;
		Invoke(2, 1778, L"RangeFromPoint", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Window::get_RangeSelection()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1189, L"RangeSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Window::get_ScrollColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 654, L"ScrollColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Window::put_ScrollColumn(long ScrollColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ScrollColumn;
		Invoke(1, 654, L"ScrollColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Window::ScrollIntoView(long Left, long Top, long Width, long Height, _variant_t Start)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I4;
		param[0].lVal = Left;
		param[1].vt = VT_I4;
		param[1].lVal = Top;
		param[2].vt = VT_I4;
		param[2].lVal = Width;
		param[3].vt = VT_I4;
		param[3].lVal = Height;
		param[4] = Start;
		Invoke(5, 1781, L"ScrollIntoView", param, returnedValue, DISPATCH_METHOD);
	}

	void Window::ScrollIntoView(long Left, long Top, long Width, long Height)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Left;
		param[1].vt = VT_I4;
		param[1].lVal = Top;
		param[2].vt = VT_I4;
		param[2].lVal = Width;
		param[3].vt = VT_I4;
		param[3].lVal = Height;
		Invoke(4, 1781, L"ScrollIntoView", param, returnedValue, DISPATCH_METHOD);
	}

	long Window::get_ScrollRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 655, L"ScrollRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Window::put_ScrollRow(long ScrollRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ScrollRow;
		Invoke(1, 655, L"ScrollRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Window::ScrollWorkbookTabs(_variant_t Sheets, _variant_t Position)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Sheets;
		param[1] = Position;
		Invoke(2, 662, L"ScrollWorkbookTabs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::ScrollWorkbookTabs()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 662, L"ScrollWorkbookTabs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Sheets Window::get_SelectedSheets()
	{
		Excel::Sheets returnedValue;
		Com::Param param;
		Invoke(0, 656, L"SelectedSheets", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Window::get_Selection()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 147, L"Selection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SheetViews Window::get_SheetViews()
	{
		Excel::SheetViews returnedValue;
		Com::Param param;
		Invoke(0, 2368, L"SheetViews", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Window::SmallScroll(_variant_t Down, _variant_t Up, _variant_t ToRight, _variant_t ToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Down;
		param[1] = Up;
		param[2] = ToRight;
		param[3] = ToLeft;
		Invoke(4, 548, L"SmallScroll", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::SmallScroll()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 548, L"SmallScroll", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Window::get_Split()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 657, L"Split", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_Split(bool Split)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Split == true) ? 1 : 0;
		Invoke(1, 657, L"Split", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Window::get_SplitColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 658, L"SplitColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Window::put_SplitColumn(long SplitColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SplitColumn;
		Invoke(1, 658, L"SplitColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Window::get_SplitHorizontal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 659, L"SplitHorizontal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Window::put_SplitHorizontal(double SplitHorizontal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = SplitHorizontal;
		Invoke(1, 659, L"SplitHorizontal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Window::get_SplitRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 660, L"SplitRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Window::put_SplitRow(long SplitRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SplitRow;
		Invoke(1, 660, L"SplitRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Window::get_SplitVertical()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 661, L"SplitVertical", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Window::put_SplitVertical(double SplitVertical)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = SplitVertical;
		Invoke(1, 661, L"SplitVertical", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Window::get_TabRatio()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 673, L"TabRatio", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Window::put_TabRatio(double TabRatio)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = TabRatio;
		Invoke(1, 673, L"TabRatio", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Window::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Window::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlWindowType Window::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlWindowType)returnedValue.iVal;
	}

	double Window::get_UsableHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 389, L"UsableHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double Window::get_UsableWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 390, L"UsableWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	Excel::XlWindowView Window::get_View()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1194, L"View", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlWindowView)returnedValue.iVal;
	}

	void Window::put_View(Excel::XlWindowView View)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = View;
		Invoke(1, 1194, L"View", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Window::get_VisibleRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1118, L"VisibleRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Window::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Window::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Window::get_WindowNumber()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1119, L"WindowNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlWindowState Window::get_WindowState()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 396, L"WindowState", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlWindowState)returnedValue.iVal;
	}

	void Window::put_WindowState(Excel::XlWindowState WindowState)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = WindowState;
		Invoke(1, 396, L"WindowState", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Window::get_Zoom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 663, L"Zoom", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Window::put_Zoom(_variant_t Zoom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Zoom;
		Invoke(1, 663, L"Zoom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Window::get__DisplayRightToLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 648, L"_DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Window::put__DisplayRightToLeft(bool _DisplayRightToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (_DisplayRightToLeft == true) ? 1 : 0;
		Invoke(1, 648, L"_DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Window::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Window::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________Windows
	Windows::Windows()
	{
	}

	Windows::~Windows()
	{
	}

	Excel::ApplicationX Windows::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Windows::Arrange(Excel::XlArrangeStyle ArrangeStyle, _variant_t ActiveWorkbook, _variant_t SyncHorizontal, _variant_t SyncVertical)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = ArrangeStyle;
		param[1] = ActiveWorkbook;
		param[2] = SyncHorizontal;
		param[3] = SyncVertical;
		Invoke(4, 638, L"Arrange", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Windows::Arrange(Excel::XlArrangeStyle ArrangeStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ArrangeStyle;
		Invoke(1, 638, L"Arrange", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Windows::BreakSideBySide()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2248, L"BreakSideBySide", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool Windows::CompareSideBySideWith(_variant_t WindowName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = WindowName;
		Invoke(1, 2246, L"CompareSideBySideWith", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	long Windows::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Windows::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Window Windows::get_Item(_variant_t Index)
	{
		Excel::Window returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Windows::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Windows::ResetPositionsSideBySide()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2250, L"ResetPositionsSideBySide", param, returnedValue, DISPATCH_METHOD);
	}

	bool Windows::get_SyncScrollingSideBySide()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2249, L"SyncScrollingSideBySide", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Windows::put_SyncScrollingSideBySide(bool SyncScrollingSideBySide)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SyncScrollingSideBySide == true) ? 1 : 0;
		Invoke(1, 2249, L"SyncScrollingSideBySide", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Window Windows::get__Default(_variant_t Index)
	{
		Excel::Window returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Windows::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________AppEvents
	AppEvents::AppEvents()
	{
	}

	AppEvents::~AppEvents()
	{
	}

	void AppEvents::AfterCalculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2612, L"AfterCalculate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::NewWorkbook(Excel::WorkbookX& Wb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		Invoke(1, 1565, L"NewWorkbook", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::ProtectedViewWindowActivate(Excel::ProtectedViewWindow& Pvw)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Pvw.dispatch.GetInterfacePtr();
		Invoke(1, 2909, L"ProtectedViewWindowActivate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::ProtectedViewWindowBeforeClose(Excel::ProtectedViewWindow& Pvw, Excel::XlProtectedViewCloseReason Reason, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Pvw.dispatch.GetInterfacePtr();
		param[1].vt = VT_I2;
		param[1].iVal = Reason;
		param[2].vt = VT_BOOL | VT_BYREF;
		param[2].pboolVal = &Cancel;
		Invoke(3, 2906, L"ProtectedViewWindowBeforeClose", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::ProtectedViewWindowBeforeEdit(Excel::ProtectedViewWindow& Pvw, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Pvw.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL | VT_BYREF;
		param[1].pboolVal = &Cancel;
		Invoke(2, 2905, L"ProtectedViewWindowBeforeEdit", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::ProtectedViewWindowDeactivate(Excel::ProtectedViewWindow& Pvw)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Pvw.dispatch.GetInterfacePtr();
		Invoke(1, 2910, L"ProtectedViewWindowDeactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::ProtectedViewWindowOpen(Excel::ProtectedViewWindow& Pvw)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Pvw.dispatch.GetInterfacePtr();
		Invoke(1, 2903, L"ProtectedViewWindowOpen", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::ProtectedViewWindowResize(Excel::ProtectedViewWindow& Pvw)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Pvw.dispatch.GetInterfacePtr();
		Invoke(1, 2908, L"ProtectedViewWindowResize", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::RemoteSheetBeforeDelete(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 3292, L"RemoteSheetBeforeDelete", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::RemoteSheetChange(Com::Object Sh, Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 3289, L"RemoteSheetChange", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::RemoteSheetPivotTableUpdate(Com::Object Sh, Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 3293, L"RemoteSheetPivotTableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::RemoteWorkbookNewChart(Excel::WorkbookX& Wb, Excel::ChartX& Ch)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Ch.dispatch.GetInterfacePtr();
		Invoke(2, 3298, L"RemoteWorkbookNewChart", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::RemoteWorkbookNewSheet(Excel::WorkbookX& Wb, Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(2, 3297, L"RemoteWorkbookNewSheet", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetActivate(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 1561, L"SheetActivate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetBeforeDelete(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 3079, L"SheetBeforeDelete", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetBeforeDoubleClick(Com::Object Sh, Excel::Range& Target, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		param[2].vt = VT_BOOL | VT_BYREF;
		param[2].pboolVal = &Cancel;
		Invoke(3, 1559, L"SheetBeforeDoubleClick", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetBeforeRightClick(Com::Object Sh, Excel::Range& Target, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		param[2].vt = VT_BOOL | VT_BYREF;
		param[2].pboolVal = &Cancel;
		Invoke(3, 1560, L"SheetBeforeRightClick", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetCalculate(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 1563, L"SheetCalculate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetChange(Com::Object Sh, Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 1564, L"SheetChange", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetDeactivate(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 1562, L"SheetDeactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetFollowHyperlink(Com::Object Sh, Excel::Hyperlink& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 1854, L"SheetFollowHyperlink", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetLensGalleryRenderComplete(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 3075, L"SheetLensGalleryRenderComplete", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetPivotTableAfterValueChange(Com::Object Sh, Excel::PivotTable& TargetPivotTable, Excel::Range& TargetRange)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_DISPATCH;
		param[2].pdispVal = TargetRange.dispatch.GetInterfacePtr();
		Invoke(3, 2895, L"SheetPivotTableAfterValueChange", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetPivotTableBeforeAllocateChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeStart;
		param[3].vt = VT_I4;
		param[3].lVal = ValueChangeEnd;
		param[4].vt = VT_BOOL | VT_BYREF;
		param[4].pboolVal = &Cancel;
		Invoke(5, 2896, L"SheetPivotTableBeforeAllocateChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetPivotTableBeforeCommitChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeStart;
		param[3].vt = VT_I4;
		param[3].lVal = ValueChangeEnd;
		param[4].vt = VT_BOOL | VT_BYREF;
		param[4].pboolVal = &Cancel;
		Invoke(5, 2897, L"SheetPivotTableBeforeCommitChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetPivotTableBeforeDiscardChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeStart;
		param[3].vt = VT_I4;
		param[3].lVal = ValueChangeEnd;
		Invoke(4, 2898, L"SheetPivotTableBeforeDiscardChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetPivotTableUpdate(Com::Object Sh, Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 2157, L"SheetPivotTableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetSelectionChange(Com::Object Sh, Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 1558, L"SheetSelectionChange", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::SheetTableUpdate(Com::Object Sh, Excel::TableObject& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 3076, L"SheetTableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WindowActivate(Excel::WorkbookX& Wb, Excel::Window& Wn)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Wn.dispatch.GetInterfacePtr();
		Invoke(2, 1556, L"WindowActivate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WindowDeactivate(Excel::WorkbookX& Wb, Excel::Window& Wn)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Wn.dispatch.GetInterfacePtr();
		Invoke(2, 1557, L"WindowDeactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WindowResize(Excel::WorkbookX& Wb, Excel::Window& Wn)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Wn.dispatch.GetInterfacePtr();
		Invoke(2, 1554, L"WindowResize", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookActivate(Excel::WorkbookX& Wb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		Invoke(1, 1568, L"WorkbookActivate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookAddinInstall(Excel::WorkbookX& Wb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		Invoke(1, 1574, L"WorkbookAddinInstall", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookAddinUninstall(Excel::WorkbookX& Wb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		Invoke(1, 1575, L"WorkbookAddinUninstall", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookAfterRemoteChange(Excel::WorkbookX& Wb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		Invoke(1, 3296, L"WorkbookAfterRemoteChange", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookAfterSave(Excel::WorkbookX& Wb, bool Success)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL;
		param[1].boolVal = (Success == true) ? 1 : 0;
		Invoke(2, 2911, L"WorkbookAfterSave", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookAfterXmlExport(Excel::WorkbookX& Wb, Excel::XmlMap& Map, wstring Url, Excel::XlXmlExportResult Result)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Map.dispatch.GetInterfacePtr();
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Url.c_str());
		param[3].vt = VT_I2;
		param[3].iVal = Result;
		Invoke(4, 2293, L"WorkbookAfterXmlExport", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookAfterXmlImport(Excel::WorkbookX& Wb, Excel::XmlMap& Map, bool IsRefresh, Excel::XlXmlImportResult Result)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Map.dispatch.GetInterfacePtr();
		param[2].vt = VT_BOOL;
		param[2].boolVal = (IsRefresh == true) ? 1 : 0;
		param[3].vt = VT_I2;
		param[3].iVal = Result;
		Invoke(4, 2291, L"WorkbookAfterXmlImport", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookBeforeClose(Excel::WorkbookX& Wb, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL | VT_BYREF;
		param[1].pboolVal = &Cancel;
		Invoke(2, 1570, L"WorkbookBeforeClose", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookBeforePrint(Excel::WorkbookX& Wb, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL | VT_BYREF;
		param[1].pboolVal = &Cancel;
		Invoke(2, 1572, L"WorkbookBeforePrint", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookBeforeRemoteChange(Excel::WorkbookX& Wb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		Invoke(1, 3295, L"WorkbookBeforeRemoteChange", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookBeforeSave(Excel::WorkbookX& Wb, bool SaveAsUI, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL;
		param[1].boolVal = (SaveAsUI == true) ? 1 : 0;
		param[2].vt = VT_BOOL | VT_BYREF;
		param[2].pboolVal = &Cancel;
		Invoke(3, 1571, L"WorkbookBeforeSave", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookBeforeXmlExport(Excel::WorkbookX& Wb, Excel::XmlMap& Map, wstring Url, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Map.dispatch.GetInterfacePtr();
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Url.c_str());
		param[3].vt = VT_BOOL | VT_BYREF;
		param[3].pboolVal = &Cancel;
		Invoke(4, 2292, L"WorkbookBeforeXmlExport", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookBeforeXmlImport(Excel::WorkbookX& Wb, Excel::XmlMap& Map, wstring Url, bool IsRefresh, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Map.dispatch.GetInterfacePtr();
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Url.c_str());
		param[3].vt = VT_BOOL;
		param[3].boolVal = (IsRefresh == true) ? 1 : 0;
		param[4].vt = VT_BOOL | VT_BYREF;
		param[4].pboolVal = &Cancel;
		Invoke(5, 2290, L"WorkbookBeforeXmlImport", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookDeactivate(Excel::WorkbookX& Wb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		Invoke(1, 1569, L"WorkbookDeactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookModelChange(Excel::WorkbookX& Wb, Excel::ModelChanges& Changes)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Changes.dispatch.GetInterfacePtr();
		Invoke(2, 3080, L"WorkbookModelChange", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookNewChart(Excel::WorkbookX& Wb, Excel::ChartX& Ch)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Ch.dispatch.GetInterfacePtr();
		Invoke(2, 2912, L"WorkbookNewChart", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookNewSheet(Excel::WorkbookX& Wb, Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(2, 1573, L"WorkbookNewSheet", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookOpen(Excel::WorkbookX& Wb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		Invoke(1, 1567, L"WorkbookOpen", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookPivotTableCloseConnection(Excel::WorkbookX& Wb, Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 2160, L"WorkbookPivotTableCloseConnection", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookPivotTableOpenConnection(Excel::WorkbookX& Wb, Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 2161, L"WorkbookPivotTableOpenConnection", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookRowsetComplete(Excel::WorkbookX& Wb, wstring Description, wstring Sheet, bool Success)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Description.c_str());
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Sheet.c_str());
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Success == true) ? 1 : 0;
		Invoke(4, 2611, L"WorkbookRowsetComplete", param, returnedValue, DISPATCH_METHOD);
	}

	void AppEvents::WorkbookSync(Excel::WorkbookX& Wb, /* MsoSyncEventType*/ short SyncEventType)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wb.dispatch.GetInterfacePtr();
		param[1].vt = VT_I2;
		param[1].iVal = SyncEventType;
		Invoke(2, 2289, L"WorkbookSync", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________WorksheetFunction
	WorksheetFunction::WorksheetFunction()
	{
	}

	WorksheetFunction::~WorksheetFunction()
	{
	}

	double WorksheetFunction::AccrInt(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		Invoke(7, 16853, L"AccrInt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AccrInt(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16853, L"AccrInt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AccrIntM(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16854, L"AccrIntM", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AccrIntM(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16854, L"AccrIntM", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Acos(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16483, L"Acos", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Acosh(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16617, L"Acosh", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Acot(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16932, L"Acot", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Acoth(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16933, L"Acoth", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Aggregate(double Arg1, double Arg2, Excel::Range& Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_DISPATCH;
		param[2].pdispVal = Arg3.dispatch.GetInterfacePtr();
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16869, L"Aggregate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Aggregate(double Arg1, double Arg2, Excel::Range& Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_DISPATCH;
		param[2].pdispVal = Arg3.dispatch.GetInterfacePtr();
		Invoke(3, 16869, L"Aggregate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AmorDegrc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		Invoke(7, 16850, L"AmorDegrc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AmorDegrc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16850, L"AmorDegrc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AmorLinc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		Invoke(7, 16851, L"AmorLinc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AmorLinc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16851, L"AmorLinc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	bool WorksheetFunction::And(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16420, L"And", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::And(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16420, L"And", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::ApplicationX WorksheetFunction::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double WorksheetFunction::Arabic(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16967, L"Arabic", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Asc(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16598, L"Asc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Asin(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16482, L"Asin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Asinh(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16616, L"Asinh", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Atan2(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16481, L"Atan2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Atanh(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16618, L"Atanh", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AveDev(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16653, L"AveDev", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AveDev(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16653, L"AveDev", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Average(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16389, L"Average", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Average(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16389, L"Average", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AverageIf(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16867, L"AverageIf", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AverageIf(Excel::Range& Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		Invoke(2, 16867, L"AverageIf", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AverageIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29)
	{
		_variant_t returnedValue;
		Com::Param param(29);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		Invoke(29, 16868, L"AverageIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::AverageIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		Invoke(3, 16868, L"AverageIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::BahtText(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16752, L"BahtText", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Base(double Arg1, double Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2] = Arg3;
		Invoke(3, 16955, L"Base", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Base(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16955, L"Base", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::BesselI(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16812, L"BesselI", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::BesselJ(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16809, L"BesselJ", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::BesselK(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16810, L"BesselK", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::BesselY(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16811, L"BesselY", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::BetaDist(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16654, L"BetaDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::BetaDist(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16654, L"BetaDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::BetaInv(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16656, L"BetaInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::BetaInv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16656, L"BetaInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Beta_Dist(double Arg1, double Arg2, double Arg3, bool Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16909, L"Beta_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Beta_Dist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16909, L"Beta_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Beta_Inv(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16910, L"Beta_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Beta_Inv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16910, L"Beta_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Bin2Dec(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16777, L"Bin2Dec", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Bin2Hex(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16779, L"Bin2Hex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Bin2Hex(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16779, L"Bin2Hex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Bin2Oct(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16778, L"Bin2Oct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Bin2Oct(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16778, L"Bin2Oct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16657, L"BinomDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16870, L"Binom_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Binom_Dist_Range(double Arg1, double Arg2, double Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		Invoke(4, 16958, L"Binom_Dist_Range", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Binom_Dist_Range(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16958, L"Binom_Dist_Range", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Binom_Inv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16871, L"Binom_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Bitand(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16946, L"Bitand", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Bitlshift(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16949, L"Bitlshift", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Bitor(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16947, L"Bitor", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Bitrshift(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16950, L"Bitrshift", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Bitxor(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16948, L"Bitxor", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ceiling(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16672, L"Ceiling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ceiling_Math(double Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16975, L"Ceiling_Math", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ceiling_Math(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16975, L"Ceiling_Math", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ceiling_Precise(double Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		Invoke(2, 16930, L"Ceiling_Precise", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ceiling_Precise(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16930, L"Ceiling_Precise", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ChiDist(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16658, L"ChiDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ChiInv(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16659, L"ChiInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ChiSq_Dist(double Arg1, double Arg2, bool Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_BOOL;
		param[2].boolVal = (Arg3 == true) ? 1 : 0;
		Invoke(3, 16911, L"ChiSq_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ChiSq_Dist_RT(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16912, L"ChiSq_Dist_RT", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ChiSq_Inv(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16913, L"ChiSq_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ChiSq_Inv_RT(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16914, L"ChiSq_Inv_RT", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ChiSq_Test(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16874, L"ChiSq_Test", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ChiTest(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16690, L"ChiTest", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Choose(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16484, L"Choose", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::Choose(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16484, L"Choose", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring WorksheetFunction::Clean(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16546, L"Clean", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Combin(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16660, L"Combin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Combina(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16952, L"Combina", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Complex(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16795, L"Complex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Complex(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16795, L"Complex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Concat(_bstr_t& Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29)
	{
		_variant_t returnedValue;
		Com::Param param(29);
		param[0].vt = VT_BSTR | VT_BYREF;
		param[0].pbstrVal = &Arg1.GetBSTR();
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		Invoke(29, 16990, L"Concat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Concat(_bstr_t& Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR | VT_BYREF;
		param[0].pbstrVal = &Arg1.GetBSTR();
		Invoke(1, 16990, L"Concat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Confidence(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16661, L"Confidence", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Confidence_Norm(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16872, L"Confidence_Norm", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Confidence_T(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16873, L"Confidence_T", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Convert(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16852, L"Convert", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Correl(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16691, L"Correl", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Cosh(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16614, L"Cosh", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Cot(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16934, L"Cot", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Coth(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16935, L"Coth", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Count(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16384, L"Count", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Count(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16384, L"Count", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CountA(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16553, L"CountA", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CountA(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16553, L"CountA", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CountBlank(Excel::Range& Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		Invoke(1, 16731, L"CountBlank", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CountIf(Excel::Range& Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		Invoke(2, 16730, L"CountIf", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CountIfs(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16865, L"CountIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CountIfs(Excel::Range& Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		Invoke(2, 16865, L"CountIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupDayBs(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16836, L"CoupDayBs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupDayBs(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16836, L"CoupDayBs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupDays(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16837, L"CoupDays", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupDays(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16837, L"CoupDays", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupDaysNc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16838, L"CoupDaysNc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupDaysNc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16838, L"CoupDaysNc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupNcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16839, L"CoupNcd", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupNcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16839, L"CoupNcd", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupNum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16840, L"CoupNum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupNum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16840, L"CoupNum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupPcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16841, L"CoupPcd", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CoupPcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16841, L"CoupPcd", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Covar(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16692, L"Covar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Covariance_P(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16876, L"Covariance_P", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Covariance_S(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16877, L"Covariance_S", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	Excel::XlCreator WorksheetFunction::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	double WorksheetFunction::CritBinom(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16662, L"CritBinom", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Csc(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16936, L"Csc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Csch(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16937, L"Csch", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CumIPmt(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16832, L"CumIPmt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::CumPrinc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16831, L"CumPrinc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DAverage(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16426, L"DAverage", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DCount(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16424, L"DCount", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DCountA(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16583, L"DCountA", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::DGet(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16619, L"DGet", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::DMax(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16428, L"DMax", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DMin(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16427, L"DMin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DProduct(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16573, L"DProduct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DStDev(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16429, L"DStDev", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DStDevP(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16579, L"DStDevP", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DSum(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16425, L"DSum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DVar(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16431, L"DVar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DVarP(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16580, L"DVarP", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Days(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16957, L"Days", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Days360(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16604, L"Days360", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Days360(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16604, L"Days360", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Db(double Arg1, double Arg2, double Arg3, double Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		param[4] = Arg5;
		Invoke(5, 16631, L"Db", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Db(double Arg1, double Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16631, L"Db", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Dbcs(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16599, L"Dbcs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Ddb(double Arg1, double Arg2, double Arg3, double Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		param[4] = Arg5;
		Invoke(5, 16528, L"Ddb", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ddb(double Arg1, double Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16528, L"Ddb", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Dec2Bin(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16771, L"Dec2Bin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Dec2Bin(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16771, L"Dec2Bin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Dec2Hex(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16772, L"Dec2Hex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Dec2Hex(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16772, L"Dec2Hex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Dec2Oct(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16773, L"Dec2Oct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Dec2Oct(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16773, L"Dec2Oct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Decimal(wstring Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16956, L"Decimal", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Degrees(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16727, L"Degrees", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Delta(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16802, L"Delta", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Delta(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16802, L"Delta", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DevSq(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16702, L"DevSq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DevSq(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16702, L"DevSq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Disc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16819, L"Disc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Disc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16819, L"Disc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Dollar(double Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		Invoke(2, 16397, L"Dollar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Dollar(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16397, L"Dollar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::DollarDe(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16827, L"DollarDe", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::DollarFr(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16828, L"DollarFr", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Dummy19(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 2827, L"Dummy19", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::Dummy19(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 2827, L"Dummy19", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::Dummy21(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 2826, L"Dummy21", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Duration(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16842, L"Duration", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Duration(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16842, L"Duration", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::EDate(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16833, L"EDate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Effect(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16830, L"Effect", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::EncodeURL(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16981, L"EncodeURL", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::EoMonth(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16834, L"EoMonth", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Erf(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16807, L"Erf", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Erf(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16807, L"Erf", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ErfC(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16808, L"ErfC", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ErfC_Precise(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16928, L"ErfC_Precise", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Erf_Precise(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16927, L"Erf_Precise", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Even(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16663, L"Even", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ExponDist(double Arg1, double Arg2, bool Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_BOOL;
		param[2].boolVal = (Arg3 == true) ? 1 : 0;
		Invoke(3, 16664, L"ExponDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Expon_Dist(double Arg1, double Arg2, bool Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_BOOL;
		param[2].boolVal = (Arg3 == true) ? 1 : 0;
		Invoke(3, 16878, L"Expon_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::FDist(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16665, L"FDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::FInv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16666, L"FInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::FTest(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16694, L"FTest", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::FVSchedule(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16860, L"FVSchedule", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16915, L"F_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::F_Dist_RT(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16916, L"F_Dist_RT", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::F_Inv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16917, L"F_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::F_Inv_RT(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16918, L"F_Inv_RT", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::F_Test(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16875, L"F_Test", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Fact(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16568, L"Fact", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::FactDouble(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16799, L"FactDouble", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::FilterXML(wstring Arg1, wstring Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		Invoke(2, 16979, L"FilterXML", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::Find(wstring Arg1, wstring Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		param[2] = Arg3;
		Invoke(3, 16508, L"Find", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Find(wstring Arg1, wstring Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		Invoke(2, 16508, L"Find", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::FindB(wstring Arg1, wstring Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		param[2] = Arg3;
		Invoke(3, 16589, L"FindB", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::FindB(wstring Arg1, wstring Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		Invoke(2, 16589, L"FindB", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Fisher(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16667, L"Fisher", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::FisherInv(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16668, L"FisherInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Fixed(double Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16398, L"Fixed", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Fixed(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16398, L"Fixed", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Floor(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16669, L"Floor", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Floor_Math(double Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16976, L"Floor_Math", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Floor_Math(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16976, L"Floor_Math", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Floor_Precise(double Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		Invoke(2, 16931, L"Floor_Precise", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Floor_Precise(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16931, L"Floor_Precise", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast(double Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16693, L"Forecast", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_ETS(double Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16982, L"Forecast_ETS", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_ETS(double Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16982, L"Forecast_ETS", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_ETS_ConfInt(double Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		Invoke(7, 16983, L"Forecast_ETS_ConfInt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_ETS_ConfInt(double Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16983, L"Forecast_ETS_ConfInt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_ETS_STAT(_variant_t Arg1, _variant_t Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16986, L"Forecast_ETS_STAT", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_ETS_STAT(_variant_t Arg1, _variant_t Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16986, L"Forecast_ETS_STAT", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_ETS_Seasonality(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16984, L"Forecast_ETS_Seasonality", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_ETS_Seasonality(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16984, L"Forecast_ETS_Seasonality", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Forecast_Linear(double Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16985, L"Forecast_Linear", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Frequency(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16636, L"Frequency", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::Fv(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16441, L"Fv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Fv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16441, L"Fv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Gamma(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16959, L"Gamma", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16670, L"GammaDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::GammaInv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16671, L"GammaInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::GammaLn(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16655, L"GammaLn", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::GammaLn_Precise(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16929, L"GammaLn_Precise", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16879, L"Gamma_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Gamma_Inv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16880, L"Gamma_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Gauss(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16961, L"Gauss", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Gcd(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16857, L"Gcd", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Gcd(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16857, L"Gcd", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::GeStep(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16803, L"GeStep", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::GeStep(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16803, L"GeStep", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::GeoMean(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16703, L"GeoMean", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::GeoMean(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16703, L"GeoMean", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Growth(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16436, L"Growth", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::Growth(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16436, L"Growth", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::HLookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16485, L"HLookup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::HLookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16485, L"HLookup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::HarMean(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16704, L"HarMean", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::HarMean(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16704, L"HarMean", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Hex2Bin(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16768, L"Hex2Bin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Hex2Bin(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16768, L"Hex2Bin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Hex2Dec(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16769, L"Hex2Dec", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Hex2Oct(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16770, L"Hex2Oct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Hex2Oct(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16770, L"Hex2Oct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16673, L"HypGeomDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		param[4].vt = VT_BOOL;
		param[4].boolVal = (Arg5 == true) ? 1 : 0;
		Invoke(5, 16919, L"HypGeom_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ISO_Ceiling(double Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		Invoke(2, 16907, L"ISO_Ceiling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ISO_Ceiling(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16907, L"ISO_Ceiling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::IfError(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16864, L"IfError", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::IfNa(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16974, L"IfNa", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring WorksheetFunction::ImAbs(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16783, L"ImAbs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImArgument(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16791, L"ImArgument", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImConjugate(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16792, L"ImConjugate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImCos(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16789, L"ImCos", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImCosh(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16978, L"ImCosh", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImCot(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16941, L"ImCot", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImCsc(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16942, L"ImCsc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImCsch(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16943, L"ImCsch", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImDiv(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16781, L"ImDiv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImExp(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16790, L"ImExp", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImLn(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16785, L"ImLn", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImLog10(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16787, L"ImLog10", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImLog2(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16786, L"ImLog2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImPower(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16782, L"ImPower", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImProduct(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16797, L"ImProduct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImProduct(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16797, L"ImProduct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::ImReal(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16794, L"ImReal", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::ImSec(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16944, L"ImSec", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImSech(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16945, L"ImSech", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImSin(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16788, L"ImSin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImSinh(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16977, L"ImSinh", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImSqrt(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16784, L"ImSqrt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImSub(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16780, L"ImSub", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImSum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16796, L"ImSum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImSum(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16796, L"ImSum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ImTan(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16940, L"ImTan", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Imaginary(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16793, L"Imaginary", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Index(_variant_t Arg1, double Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16413, L"Index", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::Index(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16413, L"Index", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::IntRate(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16817, L"IntRate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::IntRate(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16817, L"IntRate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Intercept(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16695, L"Intercept", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ipmt(double Arg1, double Arg2, double Arg3, double Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16551, L"Ipmt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ipmt(double Arg1, double Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16551, L"Ipmt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Irr(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16446, L"Irr", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Irr(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16446, L"Irr", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	bool WorksheetFunction::IsErr(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16510, L"IsErr", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsError(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16387, L"IsError", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsEven(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16804, L"IsEven", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsFormula(Excel::Range& Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		Invoke(1, 16973, L"IsFormula", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsLogical(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16582, L"IsLogical", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsNA(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16386, L"IsNA", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsNonText(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16574, L"IsNonText", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsNumber(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16512, L"IsNumber", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsOdd(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16805, L"IsOdd", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsText(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16511, L"IsText", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::IsThaiDigit(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16759, L"IsThaiDigit", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	double WorksheetFunction::IsoWeekNum(double Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		Invoke(2, 16968, L"IsoWeekNum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::IsoWeekNum(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16968, L"IsoWeekNum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ispmt(double Arg1, double Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16734, L"Ispmt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Kurt(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16706, L"Kurt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Kurt(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16706, L"Kurt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Large(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16709, L"Large", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Lcm(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16859, L"Lcm", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Lcm(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16859, L"Lcm", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::LinEst(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16433, L"LinEst", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::LinEst(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16433, L"LinEst", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::Ln(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16406, L"Ln", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Log(double Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		Invoke(2, 16493, L"Log", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Log(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16493, L"Log", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Log10(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16407, L"Log10", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::LogEst(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16435, L"LogEst", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::LogEst(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16435, L"LogEst", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::LogInv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16675, L"LogInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::LogNormDist(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16674, L"LogNormDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16920, L"LogNorm_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::LogNorm_Inv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16921, L"LogNorm_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Lookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16412, L"Lookup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::Lookup(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16412, L"Lookup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::MDeterm(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16547, L"MDeterm", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::MDuration(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16843, L"MDuration", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::MDuration(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16843, L"MDuration", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::MInverse(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16548, L"MInverse", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::MIrr(_variant_t Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16445, L"MIrr", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::MMult(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16549, L"MMult", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::MRound(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16806, L"MRound", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Match(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16448, L"Match", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Match(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16448, L"Match", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Max(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16391, L"Max", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Max(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16391, L"Max", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::MaxIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29)
	{
		_variant_t returnedValue;
		Com::Param param(29);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		Invoke(29, 16987, L"MaxIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::MaxIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		Invoke(3, 16987, L"MaxIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Median(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16611, L"Median", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Median(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16611, L"Median", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Min(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16390, L"Min", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Min(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16390, L"Min", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::MinIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29)
	{
		_variant_t returnedValue;
		Com::Param param(29);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		Invoke(29, 16988, L"MinIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::MinIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		Invoke(3, 16988, L"MinIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Mode(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16714, L"Mode", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Mode(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16714, L"Mode", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Mode_Mult(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16881, L"Mode_Mult", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::Mode_Mult(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16881, L"Mode_Mult", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::Mode_Sngl(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16882, L"Mode_Sngl", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Mode_Sngl(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16882, L"Mode_Sngl", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::MultiNomial(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16858, L"MultiNomial", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::MultiNomial(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16858, L"MultiNomial", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Munit(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16966, L"Munit", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::NPer(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16442, L"NPer", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NPer(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16442, L"NPer", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NegBinomDist(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16676, L"NegBinomDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16922, L"NegBinom_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NetworkDays(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16856, L"NetworkDays", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NetworkDays(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16856, L"NetworkDays", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NetworkDays_Intl(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16904, L"NetworkDays_Intl", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NetworkDays_Intl(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16904, L"NetworkDays_Intl", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Nominal(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16829, L"Nominal", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NormDist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16677, L"NormDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NormInv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16679, L"NormInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NormSDist(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16678, L"NormSDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NormSInv(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16680, L"NormSInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16883, L"Norm_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Norm_Inv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16884, L"Norm_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Norm_S_Dist(double Arg1, bool Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_BOOL;
		param[1].boolVal = (Arg2 == true) ? 1 : 0;
		Invoke(2, 16923, L"Norm_S_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Norm_S_Inv(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16924, L"Norm_S_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Npv(double Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16395, L"Npv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Npv(double Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		Invoke(2, 16395, L"Npv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::NumberValue(wstring Arg1, wstring Arg2, wstring Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Arg3.c_str());
		Invoke(3, 16969, L"NumberValue", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Oct2Bin(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16774, L"Oct2Bin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Oct2Bin(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16774, L"Oct2Bin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Oct2Dec(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16776, L"Oct2Dec", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Oct2Hex(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16775, L"Oct2Hex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Oct2Hex(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16775, L"Oct2Hex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Odd(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16682, L"Odd", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::OddFPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		Invoke(9, 16846, L"OddFPrice", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::OddFPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		Invoke(8, 16846, L"OddFPrice", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::OddFYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		Invoke(9, 16847, L"OddFYield", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::OddFYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		Invoke(8, 16847, L"OddFYield", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::OddLPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		Invoke(8, 16844, L"OddLPrice", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::OddLPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		Invoke(7, 16844, L"OddLPrice", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::OddLYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		Invoke(8, 16845, L"OddLYield", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::OddLYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		Invoke(7, 16845, L"OddLYield", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	bool WorksheetFunction::Or(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16421, L"Or", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::Or(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16421, L"Or", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	double WorksheetFunction::PDuration(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16954, L"PDuration", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	Com::Object WorksheetFunction::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double WorksheetFunction::Pearson(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16696, L"Pearson", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PercentRank(_variant_t Arg1, double Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2] = Arg3;
		Invoke(3, 16713, L"PercentRank", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PercentRank(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16713, L"PercentRank", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PercentRank_Exc(_variant_t Arg1, double Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2] = Arg3;
		Invoke(3, 16887, L"PercentRank_Exc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PercentRank_Exc(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16887, L"PercentRank_Exc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PercentRank_Inc(_variant_t Arg1, double Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2] = Arg3;
		Invoke(3, 16888, L"PercentRank_Inc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PercentRank_Inc(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16888, L"PercentRank_Inc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Percentile(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16712, L"Percentile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Percentile_Exc(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16885, L"Percentile_Exc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Percentile_Inc(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16886, L"Percentile_Inc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Permut(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16683, L"Permut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Permutationa(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16951, L"Permutationa", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Phi(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16962, L"Phi", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Phonetic(Excel::Range& Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		Invoke(1, 16744, L"Phonetic", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Pi()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 16403, L"Pi", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Pmt(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16443, L"Pmt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Pmt(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16443, L"Pmt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Poisson(double Arg1, double Arg2, bool Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_BOOL;
		param[2].boolVal = (Arg3 == true) ? 1 : 0;
		Invoke(3, 16684, L"Poisson", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Poisson_Dist(double Arg1, double Arg2, bool Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_BOOL;
		param[2].boolVal = (Arg3 == true) ? 1 : 0;
		Invoke(3, 16889, L"Poisson_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Power(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16721, L"Power", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ppmt(double Arg1, double Arg2, double Arg3, double Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16552, L"Ppmt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Ppmt(double Arg1, double Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16552, L"Ppmt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Price(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		Invoke(7, 16825, L"Price", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Price(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16825, L"Price", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PriceDisc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16820, L"PriceDisc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PriceDisc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16820, L"PriceDisc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PriceMat(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16815, L"PriceMat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::PriceMat(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16815, L"PriceMat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Prob(_variant_t Arg1, _variant_t Arg2, double Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		Invoke(4, 16701, L"Prob", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Prob(_variant_t Arg1, _variant_t Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16701, L"Prob", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Product(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16567, L"Product", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Product(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16567, L"Product", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Proper(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16498, L"Proper", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Pv(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16440, L"Pv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Pv(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16440, L"Pv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Quartile(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16711, L"Quartile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Quartile_Exc(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16890, L"Quartile_Exc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Quartile_Inc(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16891, L"Quartile_Inc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Quotient(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16801, L"Quotient", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::RSq(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16697, L"RSq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::RTD(_variant_t progID, _variant_t server, _variant_t topic1, _variant_t topic2, _variant_t topic3, _variant_t topic4, _variant_t topic5, _variant_t topic6, _variant_t topic7, _variant_t topic8, _variant_t topic9, _variant_t topic10, _variant_t topic11, _variant_t topic12, _variant_t topic13, _variant_t topic14, _variant_t topic15, _variant_t topic16, _variant_t topic17, _variant_t topic18, _variant_t topic19, _variant_t topic20, _variant_t topic21, _variant_t topic22, _variant_t topic23, _variant_t topic24, _variant_t topic25, _variant_t topic26, _variant_t topic27, _variant_t topic28)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = progID;
		param[1] = server;
		param[2] = topic1;
		param[3] = topic2;
		param[4] = topic3;
		param[5] = topic4;
		param[6] = topic5;
		param[7] = topic6;
		param[8] = topic7;
		param[9] = topic8;
		param[10] = topic9;
		param[11] = topic10;
		param[12] = topic11;
		param[13] = topic12;
		param[14] = topic13;
		param[15] = topic14;
		param[16] = topic15;
		param[17] = topic16;
		param[18] = topic17;
		param[19] = topic18;
		param[20] = topic19;
		param[21] = topic20;
		param[22] = topic21;
		param[23] = topic22;
		param[24] = topic23;
		param[25] = topic24;
		param[26] = topic25;
		param[27] = topic26;
		param[28] = topic27;
		param[29] = topic28;
		Invoke(30, 16763, L"RTD", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::RTD(_variant_t progID, _variant_t server, _variant_t topic1)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = progID;
		param[1] = server;
		param[2] = topic1;
		Invoke(3, 16763, L"RTD", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::Radians(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16726, L"Radians", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::RandBetween(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16848, L"RandBetween", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rank(double Arg1, Excel::Range& Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		Invoke(3, 16600, L"Rank", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rank(double Arg1, Excel::Range& Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		Invoke(2, 16600, L"Rank", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rank_Avg(double Arg1, Excel::Range& Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		Invoke(3, 16892, L"Rank_Avg", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rank_Avg(double Arg1, Excel::Range& Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		Invoke(2, 16892, L"Rank_Avg", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rank_Eq(double Arg1, Excel::Range& Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		Invoke(3, 16893, L"Rank_Eq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rank_Eq(double Arg1, Excel::Range& Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		Invoke(2, 16893, L"Rank_Eq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rate(double Arg1, double Arg2, double Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16444, L"Rate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rate(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16444, L"Rate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Received(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16818, L"Received", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Received(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16818, L"Received", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Replace(wstring Arg1, double Arg2, double Arg3, wstring Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BSTR;
		param[3].bstrVal = _bstr_t(Arg4.c_str());
		Invoke(4, 16503, L"Replace", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ReplaceB(wstring Arg1, double Arg2, double Arg3, wstring Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BSTR;
		param[3].bstrVal = _bstr_t(Arg4.c_str());
		Invoke(4, 16591, L"ReplaceB", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Rept(wstring Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16414, L"Rept", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Roman(double Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1] = Arg2;
		Invoke(2, 16738, L"Roman", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Roman(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16738, L"Roman", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Round(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16411, L"Round", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::RoundBahtDown(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16760, L"RoundBahtDown", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::RoundBahtUp(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16761, L"RoundBahtUp", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::RoundDown(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16597, L"RoundDown", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::RoundUp(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16596, L"RoundUp", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Rri(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16963, L"Rri", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Search(wstring Arg1, wstring Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		param[2] = Arg3;
		Invoke(3, 16466, L"Search", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Search(wstring Arg1, wstring Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		Invoke(2, 16466, L"Search", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SearchB(wstring Arg1, wstring Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		param[2] = Arg3;
		Invoke(3, 16590, L"SearchB", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SearchB(wstring Arg1, wstring Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		Invoke(2, 16590, L"SearchB", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Sec(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16938, L"Sec", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Sech(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16939, L"Sech", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SeriesSum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16798, L"SeriesSum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Sinh(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16613, L"Sinh", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Skew(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16707, L"Skew", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Skew(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16707, L"Skew", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Skew_p(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16960, L"Skew_p", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Skew_p(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16960, L"Skew_p", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Sln(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16526, L"Sln", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Slope(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16699, L"Slope", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Small(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16710, L"Small", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SqrtPi(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16800, L"SqrtPi", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StDev(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16396, L"StDev", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StDev(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16396, L"StDev", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StDevP(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16577, L"StDevP", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StDevP(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16577, L"StDevP", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StDev_P(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16895, L"StDev_P", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StDev_P(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16895, L"StDev_P", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StDev_S(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16894, L"StDev_S", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StDev_S(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16894, L"StDev_S", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::StEyx(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16698, L"StEyx", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Standardize(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16681, L"Standardize", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Substitute(wstring Arg1, wstring Arg2, wstring Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Arg3.c_str());
		param[3] = Arg4;
		Invoke(4, 16504, L"Substitute", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Substitute(wstring Arg1, wstring Arg2, wstring Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Arg3.c_str());
		Invoke(3, 16504, L"Substitute", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Subtotal(double Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16728, L"Subtotal", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Subtotal(double Arg1, Excel::Range& Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		Invoke(2, 16728, L"Subtotal", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Sum(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16388, L"Sum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Sum(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16388, L"Sum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumIf(Excel::Range& Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16729, L"SumIf", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumIf(Excel::Range& Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1] = Arg2;
		Invoke(2, 16729, L"SumIf", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29)
	{
		_variant_t returnedValue;
		Com::Param param(29);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		Invoke(29, 16866, L"SumIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumIfs(Excel::Range& Arg1, Excel::Range& Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Arg1.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Arg2.dispatch.GetInterfacePtr();
		param[2] = Arg3;
		Invoke(3, 16866, L"SumIfs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumProduct(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16612, L"SumProduct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumProduct(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16612, L"SumProduct", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumSq(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16705, L"SumSq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumSq(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16705, L"SumSq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumX2MY2(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16688, L"SumX2MY2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumX2PY2(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16689, L"SumX2PY2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::SumXMY2(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16687, L"SumXMY2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Syd(double Arg1, double Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16527, L"Syd", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TBillEq(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16822, L"TBillEq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TBillEq(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16822, L"TBillEq", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TBillPrice(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16823, L"TBillPrice", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TBillPrice(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16823, L"TBillPrice", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TBillYield(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16824, L"TBillYield", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TBillYield(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16824, L"TBillYield", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TDist(double Arg1, double Arg2, double Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		Invoke(3, 16685, L"TDist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TInv(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16716, L"TInv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::TTest(_variant_t Arg1, _variant_t Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16700, L"TTest", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::T_Dist(double Arg1, double Arg2, bool Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_BOOL;
		param[2].boolVal = (Arg3 == true) ? 1 : 0;
		Invoke(3, 16896, L"T_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::T_Dist_2T(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16897, L"T_Dist_2T", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::T_Dist_RT(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16898, L"T_Dist_RT", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::T_Inv(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16899, L"T_Inv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::T_Inv_2T(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16900, L"T_Inv_2T", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::T_Test(_variant_t Arg1, _variant_t Arg2, double Arg3, double Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		Invoke(4, 16925, L"T_Test", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Tanh(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16615, L"Tanh", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::Text(_variant_t Arg1, wstring Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Arg2.c_str());
		Invoke(2, 16432, L"Text", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::TextJoin(_bstr_t& Arg1, bool Arg2, _bstr_t& Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29)
	{
		_variant_t returnedValue;
		Com::Param param(29);
		param[0].vt = VT_BSTR | VT_BYREF;
		param[0].pbstrVal = &Arg1.GetBSTR();
		param[1].vt = VT_BOOL;
		param[1].boolVal = (Arg2 == true) ? 1 : 0;
		param[2].vt = VT_BSTR | VT_BYREF;
		param[2].pbstrVal = &Arg3.GetBSTR();
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		Invoke(29, 16989, L"TextJoin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::TextJoin(_bstr_t& Arg1, bool Arg2, _bstr_t& Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR | VT_BYREF;
		param[0].pbstrVal = &Arg1.GetBSTR();
		param[1].vt = VT_BOOL;
		param[1].boolVal = (Arg2 == true) ? 1 : 0;
		param[2].vt = VT_BSTR | VT_BYREF;
		param[2].pbstrVal = &Arg3.GetBSTR();
		Invoke(3, 16989, L"TextJoin", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ThaiDayOfWeek(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16753, L"ThaiDayOfWeek", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ThaiDigit(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16754, L"ThaiDigit", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ThaiMonthOfYear(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16755, L"ThaiMonthOfYear", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ThaiNumSound(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16756, L"ThaiNumSound", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::ThaiNumString(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16757, L"ThaiNumString", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::ThaiStringLength(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16758, L"ThaiStringLength", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ThaiYear(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16762, L"ThaiYear", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::Transpose(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16467, L"Transpose", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::Trend(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16434, L"Trend", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::Trend(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16434, L"Trend", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring WorksheetFunction::Trim(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16502, L"Trim", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::TrimMean(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16715, L"TrimMean", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	wstring WorksheetFunction::USDollar(double Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16588, L"USDollar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring WorksheetFunction::Unichar(double Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		Invoke(1, 16964, L"Unichar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	double WorksheetFunction::Unicode(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16965, L"Unicode", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::VLookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16486, L"VLookup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::VLookup(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16486, L"VLookup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::Var(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16430, L"Var", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Var(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16430, L"Var", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::VarP(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16578, L"VarP", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::VarP(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16578, L"VarP", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Var_P(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16902, L"Var_P", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Var_P(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16902, L"Var_P", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Var_S(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16901, L"Var_S", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Var_S(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16901, L"Var_S", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Vdb(double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, _variant_t Arg6, _variant_t Arg7)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		param[4].vt = VT_R8;
		param[4].dblVal = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		Invoke(7, 16606, L"Vdb", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Vdb(double Arg1, double Arg2, double Arg3, double Arg4, double Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_R8;
		param[3].dblVal = Arg4;
		param[4].vt = VT_R8;
		param[4].dblVal = Arg5;
		Invoke(5, 16606, L"Vdb", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::WebService(wstring Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Arg1.c_str());
		Invoke(1, 16980, L"WebService", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double WorksheetFunction::WeekNum(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16849, L"WeekNum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::WeekNum(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16849, L"WeekNum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Weekday(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16454, L"Weekday", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Weekday(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16454, L"Weekday", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Weibull(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16686, L"Weibull", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2].vt = VT_R8;
		param[2].dblVal = Arg3;
		param[3].vt = VT_BOOL;
		param[3].boolVal = (Arg4 == true) ? 1 : 0;
		Invoke(4, 16903, L"Weibull_Dist", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::WorkDay(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16855, L"WorkDay", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::WorkDay(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16855, L"WorkDay", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::WorkDay_Intl(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16905, L"WorkDay_Intl", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::WorkDay_Intl(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16905, L"WorkDay_Intl", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Xirr(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16813, L"Xirr", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Xirr(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16813, L"Xirr", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Xnpv(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16814, L"Xnpv", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	bool WorksheetFunction::Xor(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 16953, L"Xor", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool WorksheetFunction::Xor(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 16953, L"Xor", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	double WorksheetFunction::YearFrac(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		Invoke(3, 16835, L"YearFrac", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::YearFrac(_variant_t Arg1, _variant_t Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1] = Arg2;
		Invoke(2, 16835, L"YearFrac", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::YieldDisc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16821, L"YieldDisc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::YieldDisc(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 16821, L"YieldDisc", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::YieldMat(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		Invoke(6, 16816, L"YieldMat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::YieldMat(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		Invoke(5, 16816, L"YieldMat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ZTest(_variant_t Arg1, double Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2] = Arg3;
		Invoke(3, 16708, L"ZTest", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::ZTest(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16708, L"ZTest", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Z_Test(_variant_t Arg1, double Arg2, _variant_t Arg3)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		param[2] = Arg3;
		Invoke(3, 16926, L"Z_Test", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	double WorksheetFunction::Z_Test(_variant_t Arg1, double Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Arg1;
		param[1].vt = VT_R8;
		param[1].dblVal = Arg2;
		Invoke(2, 16926, L"Z_Test", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	_variant_t WorksheetFunction::_WSFunction(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 169, L"_WSFunction", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t WorksheetFunction::_WSFunction()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 169, L"_WSFunction", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________Range
	Range::Range()
	{
	}

	Range::~Range()
	{
	}

	_variant_t Range::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Comment Range::AddComment(_variant_t Text)
	{
		Excel::Comment returnedValue;
		Com::Param param(1);
		param[0] = Text;
		Invoke(1, 1389, L"AddComment", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Comment Range::AddComment()
	{
		Excel::Comment returnedValue;
		Com::Param param(0);
		Invoke(0, 1389, L"AddComment", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_AddIndent(_variant_t AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AddIndent;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Range::get_Address(_variant_t RowAbsolute, _variant_t ColumnAbsolute, Excel::XlReferenceStyle ReferenceStyle, _variant_t External, _variant_t RelativeTo)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = RowAbsolute;
		param[1] = ColumnAbsolute;
		param[2].vt = VT_I2;
		param[2].iVal = ReferenceStyle;
		param[3] = External;
		param[4] = RelativeTo;
		Invoke(5, 236, L"Address", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Range::get_Address(_variant_t RowAbsolute, _variant_t ColumnAbsolute, Excel::XlReferenceStyle ReferenceStyle)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = RowAbsolute;
		param[1] = ColumnAbsolute;
		param[2].vt = VT_I2;
		param[2].iVal = ReferenceStyle;
		Invoke(3, 236, L"Address", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Range::get_AddressLocal(_variant_t RowAbsolute, _variant_t ColumnAbsolute, Excel::XlReferenceStyle ReferenceStyle, _variant_t External, _variant_t RelativeTo)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = RowAbsolute;
		param[1] = ColumnAbsolute;
		param[2].vt = VT_I2;
		param[2].iVal = ReferenceStyle;
		param[3] = External;
		param[4] = RelativeTo;
		Invoke(5, 437, L"AddressLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Range::get_AddressLocal(_variant_t RowAbsolute, _variant_t ColumnAbsolute, Excel::XlReferenceStyle ReferenceStyle)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = RowAbsolute;
		param[1] = ColumnAbsolute;
		param[2].vt = VT_I2;
		param[2].iVal = ReferenceStyle;
		Invoke(3, 437, L"AddressLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	_variant_t Range::AdvancedFilter(Excel::XlFilterAction Action, _variant_t CriteriaRange, _variant_t CopyToRange, _variant_t Unique)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = Action;
		param[1] = CriteriaRange;
		param[2] = CopyToRange;
		param[3] = Unique;
		Invoke(4, 876, L"AdvancedFilter", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::AdvancedFilter(Excel::XlFilterAction Action)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Action;
		Invoke(1, 876, L"AdvancedFilter", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Range::AllocateChanges()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2855, L"AllocateChanges", param, returnedValue, DISPATCH_METHOD);
	}

	bool Range::get_AllowEdit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2020, L"AllowEdit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::ApplicationX Range::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::ApplyNames(_variant_t Names, _variant_t IgnoreRelativeAbsolute, _variant_t UseRowColumnNames, _variant_t OmitColumn, _variant_t OmitRow, Excel::XlApplyNamesOrder Order, _variant_t AppendLast)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Names;
		param[1] = IgnoreRelativeAbsolute;
		param[2] = UseRowColumnNames;
		param[3] = OmitColumn;
		param[4] = OmitRow;
		param[5].vt = VT_I2;
		param[5].iVal = Order;
		param[6] = AppendLast;
		Invoke(7, 441, L"ApplyNames", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::ApplyNames(_variant_t Names, _variant_t IgnoreRelativeAbsolute, _variant_t UseRowColumnNames, _variant_t OmitColumn, _variant_t OmitRow, Excel::XlApplyNamesOrder Order)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Names;
		param[1] = IgnoreRelativeAbsolute;
		param[2] = UseRowColumnNames;
		param[3] = OmitColumn;
		param[4] = OmitRow;
		param[5].vt = VT_I2;
		param[5].iVal = Order;
		Invoke(6, 441, L"ApplyNames", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::ApplyOutlineStyles()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 448, L"ApplyOutlineStyles", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Areas Range::get_Areas()
	{
		Excel::Areas returnedValue;
		Com::Param param;
		Invoke(0, 568, L"Areas", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Range::AutoComplete(wstring String)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(String.c_str());
		Invoke(1, 1185, L"AutoComplete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	_variant_t Range::AutoFill(Excel::Range& Destination, Excel::XlAutoFillType Type)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Destination.dispatch.GetInterfacePtr();
		param[1].vt = VT_I2;
		param[1].iVal = Type;
		Invoke(2, 449, L"AutoFill", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::AutoFilter(_variant_t Field, _variant_t Criteria1, Excel::XlAutoFilterOperator Operator, _variant_t Criteria2, _variant_t VisibleDropDown)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Field;
		param[1] = Criteria1;
		param[2].vt = VT_I2;
		param[2].iVal = Operator;
		param[3] = Criteria2;
		param[4] = VisibleDropDown;
		Invoke(5, 793, L"AutoFilter", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::AutoFilter(_variant_t Field, _variant_t Criteria1, Excel::XlAutoFilterOperator Operator)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Field;
		param[1] = Criteria1;
		param[2].vt = VT_I2;
		param[2].iVal = Operator;
		Invoke(3, 793, L"AutoFilter", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::AutoFit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 237, L"AutoFit", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::AutoFormat(Excel::XlRangeAutoFormat Format, _variant_t Number, _variant_t Font, _variant_t Alignment, _variant_t Border, _variant_t Pattern, _variant_t Width)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0].vt = VT_I2;
		param[0].iVal = Format;
		param[1] = Number;
		param[2] = Font;
		param[3] = Alignment;
		param[4] = Border;
		param[5] = Pattern;
		param[6] = Width;
		Invoke(7, 114, L"AutoFormat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::AutoFormat(Excel::XlRangeAutoFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Format;
		Invoke(1, 114, L"AutoFormat", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::AutoOutline()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1036, L"AutoOutline", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::BorderAround(_variant_t LineStyle, Excel::XlBorderWeight Weight, Excel::XlColorIndex ColorIndex, _variant_t Color, _variant_t ThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = LineStyle;
		param[1].vt = VT_I2;
		param[1].iVal = Weight;
		param[2].vt = VT_I2;
		param[2].iVal = ColorIndex;
		param[3] = Color;
		param[4] = ThemeColor;
		Invoke(5, 2771, L"BorderAround", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::BorderAround(_variant_t LineStyle, Excel::XlBorderWeight Weight, Excel::XlColorIndex ColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = LineStyle;
		param[1].vt = VT_I2;
		param[1].iVal = Weight;
		param[2].vt = VT_I2;
		param[2].iVal = ColorIndex;
		Invoke(3, 2771, L"BorderAround", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Borders Range::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::Calculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 279, L"Calculate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::CalculateRowMajorOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2364, L"CalculateRowMajorOrder", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::get_Cells()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 238, L"Cells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Range::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Range::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Range::ClearComments()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1390, L"ClearComments", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Range::ClearContents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 113, L"ClearContents", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Range::ClearHyperlinks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2854, L"ClearHyperlinks", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Range::ClearNotes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 239, L"ClearNotes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::ClearOutline()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1037, L"ClearOutline", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Range::get_Column()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 240, L"Column", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Range Range::ColumnDifferences(_variant_t Comparison)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = Comparison;
		Invoke(1, 510, L"ColumnDifferences", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_ColumnWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 242, L"ColumnWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_ColumnWidth(_variant_t ColumnWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ColumnWidth;
		Invoke(1, 242, L"ColumnWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Range::get_Columns()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 241, L"Columns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Comment Range::get_Comment()
	{
		Excel::Comment returnedValue;
		Com::Param param;
		Invoke(0, 910, L"Comment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::Consolidate(_variant_t Sources, _variant_t Function, _variant_t TopRow, _variant_t LeftColumn, _variant_t CreateLinks)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Sources;
		param[1] = Function;
		param[2] = TopRow;
		param[3] = LeftColumn;
		param[4] = CreateLinks;
		Invoke(5, 482, L"Consolidate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Consolidate()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 482, L"Consolidate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Copy(_variant_t Destination)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Destination;
		Invoke(1, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Range::CopyFromRecordset(IUnknownPtr Data, _variant_t MaxRows, _variant_t MaxColumns)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_UNKNOWN;
		param[0].punkVal = Data;
		param[1] = MaxRows;
		param[2] = MaxColumns;
		Invoke(3, 1152, L"CopyFromRecordset", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	long Range::CopyFromRecordset(IUnknownPtr Data)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_UNKNOWN;
		param[0].punkVal = Data;
		Invoke(1, 1152, L"CopyFromRecordset", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	_variant_t Range::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Range::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t Range::get_CountLarge()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2499, L"CountLarge", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::CreateNames(_variant_t Top, _variant_t Left, _variant_t Bottom, _variant_t Right)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Top;
		param[1] = Left;
		param[2] = Bottom;
		param[3] = Right;
		Invoke(4, 457, L"CreateNames", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::CreateNames()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 457, L"CreateNames", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::CreatePublisher(_variant_t Edition, Excel::XlPictureAppearance Appearance, _variant_t ContainsPICT, _variant_t ContainsBIFF, _variant_t ContainsRTF, _variant_t ContainsVALU)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Edition;
		param[1].vt = VT_I2;
		param[1].iVal = Appearance;
		param[2] = ContainsPICT;
		param[3] = ContainsBIFF;
		param[4] = ContainsRTF;
		param[5] = ContainsVALU;
		Invoke(6, 458, L"CreatePublisher", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::CreatePublisher(_variant_t Edition, Excel::XlPictureAppearance Appearance)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Edition;
		param[1].vt = VT_I2;
		param[1].iVal = Appearance;
		Invoke(2, 458, L"CreatePublisher", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Range::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Range Range::get_CurrentArray()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 501, L"CurrentArray", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_CurrentRegion()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 243, L"CurrentRegion", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::Cut(_variant_t Destination)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Destination;
		Invoke(1, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Cut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::DataSeries(_variant_t Rowcol, Excel::XlDataSeriesType Type, Excel::XlDataSeriesDate Date, _variant_t Step, _variant_t Stop, _variant_t Trend)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Rowcol;
		param[1].vt = VT_I2;
		param[1].iVal = Type;
		param[2].vt = VT_I2;
		param[2].iVal = Date;
		param[3] = Step;
		param[4] = Stop;
		param[5] = Trend;
		Invoke(6, 464, L"DataSeries", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::DataSeries(_variant_t Rowcol, Excel::XlDataSeriesType Type, Excel::XlDataSeriesDate Date)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Rowcol;
		param[1].vt = VT_I2;
		param[1].iVal = Type;
		param[2].vt = VT_I2;
		param[2].iVal = Date;
		Invoke(3, 464, L"DataSeries", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Delete(_variant_t Shift)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Shift;
		Invoke(1, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Delete()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::get_Dependents()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 543, L"Dependents", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::DialogBox_()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 245, L"DialogBox", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::get_DirectDependents()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 545, L"DirectDependents", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_DirectPrecedents()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 546, L"DirectPrecedents", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::Dirty()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2014, L"Dirty", param, returnedValue, DISPATCH_METHOD);
	}

	void Range::DiscardChanges()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2856, L"DiscardChanges", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::DisplayFormat Range::get_DisplayFormat()
	{
		Excel::DisplayFormat returnedValue;
		Com::Param param;
		Invoke(0, 666, L"DisplayFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Dummy28()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3277, L"Dummy28", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::Dummy29()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3275, L"Dummy29", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Range::EditionOptions(Excel::XlEditionType Type, Excel::XlEditionOptionsOption Option, _variant_t Name, _variant_t Reference, Excel::XlPictureAppearance Appearance, Excel::XlPictureAppearance ChartSize, _variant_t Format)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_I2;
		param[1].iVal = Option;
		param[2] = Name;
		param[3] = Reference;
		param[4].vt = VT_I2;
		param[4].iVal = Appearance;
		param[5].vt = VT_I2;
		param[5].iVal = ChartSize;
		param[6] = Format;
		Invoke(7, 1131, L"EditionOptions", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::EditionOptions(Excel::XlEditionType Type, Excel::XlEditionOptionsOption Option, _variant_t Name, _variant_t Reference, Excel::XlPictureAppearance Appearance, Excel::XlPictureAppearance ChartSize)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_I2;
		param[1].iVal = Option;
		param[2] = Name;
		param[3] = Reference;
		param[4].vt = VT_I2;
		param[4].iVal = Appearance;
		param[5].vt = VT_I2;
		param[5].iVal = ChartSize;
		Invoke(6, 1131, L"EditionOptions", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::get_End(Excel::XlDirection Direction)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Direction;
		Invoke(1, 500, L"End", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_EntireColumn()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 246, L"EntireColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_EntireRow()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 247, L"EntireRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Errors Range::get_Errors()
	{
		Excel::Errors returnedValue;
		Com::Param param;
		Invoke(0, 2015, L"Errors", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		param[9] = WorkIdentity;
		Invoke(10, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void Range::ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Range::FillDown()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 248, L"FillDown", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::FillLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 249, L"FillLeft", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::FillRight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 250, L"FillRight", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::FillUp()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 251, L"FillUp", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::Find(_variant_t What, _variant_t After, _variant_t LookIn, _variant_t LookAt, _variant_t SearchOrder, Excel::XlSearchDirection SearchDirection, _variant_t MatchCase, _variant_t MatchByte, _variant_t SearchFormat)
	{
		Excel::Range returnedValue;
		Com::Param param(9);
		param[0] = What;
		param[1] = After;
		param[2] = LookIn;
		param[3] = LookAt;
		param[4] = SearchOrder;
		param[5].vt = VT_I2;
		param[5].iVal = SearchDirection;
		param[6] = MatchCase;
		param[7] = MatchByte;
		param[8] = SearchFormat;
		Invoke(9, 398, L"Find", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::Find(_variant_t What, _variant_t After, _variant_t LookIn, _variant_t LookAt, _variant_t SearchOrder, Excel::XlSearchDirection SearchDirection)
	{
		Excel::Range returnedValue;
		Com::Param param(6);
		param[0] = What;
		param[1] = After;
		param[2] = LookIn;
		param[3] = LookAt;
		param[4] = SearchOrder;
		param[5].vt = VT_I2;
		param[5].iVal = SearchDirection;
		Invoke(6, 398, L"Find", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::FindNext(_variant_t After)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = After;
		Invoke(1, 399, L"FindNext", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::FindNext()
	{
		Excel::Range returnedValue;
		Com::Param param(0);
		Invoke(0, 399, L"FindNext", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::FindPrevious(_variant_t After)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = After;
		Invoke(1, 400, L"FindPrevious", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::FindPrevious()
	{
		Excel::Range returnedValue;
		Com::Param param(0);
		Invoke(0, 400, L"FindPrevious", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Range::FlashFill()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2996, L"FlashFill", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Font Range::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::FormatConditions Range::get_FormatConditions()
	{
		Excel::FormatConditions returnedValue;
		Com::Param param;
		Invoke(0, 1392, L"FormatConditions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Formula(_variant_t Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Formula;
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_FormulaArray()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 586, L"FormulaArray", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_FormulaArray(_variant_t FormulaArray)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FormulaArray;
		Invoke(1, 586, L"FormulaArray", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_FormulaHidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 262, L"FormulaHidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_FormulaHidden(_variant_t FormulaHidden)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FormulaHidden;
		Invoke(1, 262, L"FormulaHidden", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlFormulaLabel Range::get_FormulaLabel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1380, L"FormulaLabel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlFormulaLabel)returnedValue.iVal;
	}

	void Range::put_FormulaLabel(Excel::XlFormulaLabel FormulaLabel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = FormulaLabel;
		Invoke(1, 1380, L"FormulaLabel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_FormulaLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_FormulaLocal(_variant_t FormulaLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FormulaLocal;
		Invoke(1, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_FormulaR1C1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_FormulaR1C1(_variant_t FormulaR1C1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FormulaR1C1;
		Invoke(1, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_FormulaR1C1Local()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_FormulaR1C1Local(_variant_t FormulaR1C1Local)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FormulaR1C1Local;
		Invoke(1, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::FunctionWizard()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 571, L"FunctionWizard", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Range::GoalSeek(_variant_t Goal, Excel::Range& ChangingCell)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Goal;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = ChangingCell.dispatch.GetInterfacePtr();
		Invoke(2, 472, L"GoalSeek", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	_variant_t Range::Group(_variant_t Start, _variant_t End, _variant_t By, _variant_t Periods)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Start;
		param[1] = End;
		param[2] = By;
		param[3] = Periods;
		Invoke(4, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Group()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_HasArray()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 266, L"HasArray", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_HasFormula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 267, L"HasFormula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Hidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Hidden(_variant_t Hidden)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Hidden;
		Invoke(1, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Hyperlinks Range::get_Hyperlinks()
	{
		Excel::Hyperlinks returnedValue;
		Com::Param param;
		Invoke(0, 1393, L"Hyperlinks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Range::get_ID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1813, L"ID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Range::put_ID(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 1813, L"ID", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_IndentLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 201, L"IndentLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_IndentLevel(_variant_t IndentLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = IndentLevel;
		Invoke(1, 201, L"IndentLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::Insert(_variant_t Shift, _variant_t CopyOrigin)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Shift;
		param[1] = CopyOrigin;
		Invoke(2, 252, L"Insert", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Insert()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 252, L"Insert", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Range::InsertIndent(long InsertAmount)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = InsertAmount;
		Invoke(1, 1381, L"InsertIndent", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Interior Range::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Item(_variant_t RowIndex, _variant_t ColumnIndex)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = RowIndex;
		param[1] = ColumnIndex;
		Invoke(2, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Item(_variant_t RowIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = RowIndex;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Item(_variant_t Item, _variant_t RowIndex, _variant_t ColumnIndex)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Item;
		param[1] = RowIndex;
		param[2] = ColumnIndex;
		Invoke(3, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Range::put_Item(_variant_t Item, _variant_t RowIndex)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Item;
		param[1] = RowIndex;
		Invoke(2, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::Justify()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 495, L"Justify", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Range::get_ListHeaderRows()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1187, L"ListHeaderRows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t Range::ListNames()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 253, L"ListNames", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListObject Range::get_ListObject()
	{
		Excel::ListObject returnedValue;
		Com::Param param;
		Invoke(0, 2257, L"ListObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlLocationInTable Range::get_LocationInTable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 691, L"LocationInTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlLocationInTable)returnedValue.iVal;
	}

	_variant_t Range::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Locked(_variant_t Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Locked;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Range::get_MDX()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2123, L"MDX", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Range::Merge(_variant_t Across)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Across;
		Invoke(1, 564, L"Merge", param, returnedValue, DISPATCH_METHOD);
	}

	void Range::Merge()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 564, L"Merge", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range Range::get_MergeArea()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1385, L"MergeArea", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_MergeCells()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 208, L"MergeCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_MergeCells(_variant_t MergeCells)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = MergeCells;
		Invoke(1, 208, L"MergeCells", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Name(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::NavigateArrow(_variant_t TowardPrecedent, _variant_t ArrowNumber, _variant_t LinkNumber)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = TowardPrecedent;
		param[1] = ArrowNumber;
		param[2] = LinkNumber;
		Invoke(3, 1032, L"NavigateArrow", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::NavigateArrow()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1032, L"NavigateArrow", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::get_Next()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 502, L"Next", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Range::NoteText(_variant_t Text, _variant_t Start, _variant_t Length)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Text;
		param[1] = Start;
		param[2] = Length;
		Invoke(3, 1127, L"NoteText", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring Range::NoteText()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1127, L"NoteText", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	_variant_t Range::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_NumberFormat(_variant_t NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormat;
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_NumberFormatLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_NumberFormatLocal(_variant_t NumberFormatLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormatLocal;
		Invoke(1, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Range::get_Offset(_variant_t RowOffset, _variant_t ColumnOffset)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0] = RowOffset;
		param[1] = ColumnOffset;
		Invoke(2, 254, L"Offset", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_Offset()
	{
		Excel::Range returnedValue;
		Com::Param param(0);
		Invoke(0, 254, L"Offset", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_OutlineLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 271, L"OutlineLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_OutlineLevel(_variant_t OutlineLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = OutlineLevel;
		Invoke(1, 271, L"OutlineLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Range::get_PageBreak()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 255, L"PageBreak", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Range::put_PageBreak(long PageBreak)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PageBreak;
		Invoke(1, 255, L"PageBreak", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Range::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::Parse(_variant_t ParseLine, _variant_t Destination)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = ParseLine;
		param[1] = Destination;
		Invoke(2, 477, L"Parse", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Parse()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 477, L"Parse", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::PasteSpecial(Excel::XlPasteType Paste, Excel::XlPasteSpecialOperation Operation, _variant_t SkipBlanks, _variant_t Transpose)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = Paste;
		param[1].vt = VT_I2;
		param[1].iVal = Operation;
		param[2] = SkipBlanks;
		param[3] = Transpose;
		Invoke(4, 1928, L"PasteSpecial", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::PasteSpecial(Excel::XlPasteType Paste, Excel::XlPasteSpecialOperation Operation)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Paste;
		param[1].vt = VT_I2;
		param[1].iVal = Operation;
		Invoke(2, 1928, L"PasteSpecial", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Phonetic Range::get_Phonetic()
	{
		Excel::Phonetic returnedValue;
		Com::Param param;
		Invoke(0, 1391, L"Phonetic", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Phonetics Range::get_Phonetics()
	{
		Excel::Phonetics returnedValue;
		Com::Param param;
		Invoke(0, 1811, L"Phonetics", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotCell Range::get_PivotCell()
	{
		Excel::PivotCell returnedValue;
		Com::Param param;
		Invoke(0, 2013, L"PivotCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotField Range::get_PivotField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 731, L"PivotField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotItem Range::get_PivotItem()
	{
		Excel::PivotItem returnedValue;
		Com::Param param;
		Invoke(0, 740, L"PivotItem", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotTable Range::get_PivotTable()
	{
		Excel::PivotTable returnedValue;
		Com::Param param;
		Invoke(0, 716, L"PivotTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_Precedents()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 544, L"Precedents", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_PrefixCharacter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 504, L"PrefixCharacter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_Previous()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 503, L"Previous", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::QueryTableX Range::get_QueryTable()
	{
		Excel::QueryTableX returnedValue;
		Com::Param param;
		Invoke(0, 1386, L"QueryTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_Range(_variant_t Cell1, _variant_t Cell2)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0] = Cell1;
		param[1] = Cell2;
		Invoke(2, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_Range(_variant_t Cell1)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = Cell1;
		Invoke(1, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Range::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Range::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Range::RemoveDuplicates(_variant_t Columns, Excel::XlYesNoGuess Header)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Columns;
		param[1].vt = VT_I2;
		param[1].iVal = Header;
		Invoke(2, 2492, L"RemoveDuplicates", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Range::RemoveSubtotal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 883, L"RemoveSubtotal", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Range::Replace(_variant_t What, _variant_t Replacement, _variant_t LookAt, _variant_t SearchOrder, _variant_t MatchCase, _variant_t MatchByte, _variant_t SearchFormat, _variant_t ReplaceFormat)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = What;
		param[1] = Replacement;
		param[2] = LookAt;
		param[3] = SearchOrder;
		param[4] = MatchCase;
		param[5] = MatchByte;
		param[6] = SearchFormat;
		param[7] = ReplaceFormat;
		Invoke(8, 226, L"Replace", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool Range::Replace(_variant_t What, _variant_t Replacement)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = What;
		param[1] = Replacement;
		Invoke(2, 226, L"Replace", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::Range Range::get_Resize(_variant_t RowSize, _variant_t ColumnSize)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0] = RowSize;
		param[1] = ColumnSize;
		Invoke(2, 256, L"Resize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Range::get_Resize()
	{
		Excel::Range returnedValue;
		Com::Param param(0);
		Invoke(0, 256, L"Resize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Range::get_Row()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 257, L"Row", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Range Range::RowDifferences(_variant_t Comparison)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = Comparison;
		Invoke(1, 511, L"RowDifferences", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_RowHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 272, L"RowHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_RowHeight(_variant_t RowHeight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = RowHeight;
		Invoke(1, 272, L"RowHeight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Range::get_Rows()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 258, L"Rows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::Run(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 259, L"Run", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Run()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 259, L"Run", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Actions Range::get_ServerActions()
	{
		Excel::Actions returnedValue;
		Com::Param param;
		Invoke(0, 2491, L"ServerActions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::SetPhonetic()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1812, L"SetPhonetic", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Range::Show()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 496, L"Show", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::ShowDependents(_variant_t Remove)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Remove;
		Invoke(1, 877, L"ShowDependents", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::ShowDependents()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 877, L"ShowDependents", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_ShowDetail()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 585, L"ShowDetail", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_ShowDetail(_variant_t ShowDetail)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ShowDetail;
		Invoke(1, 585, L"ShowDetail", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::ShowErrors()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 878, L"ShowErrors", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::ShowPrecedents(_variant_t Remove)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Remove;
		Invoke(1, 879, L"ShowPrecedents", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::ShowPrecedents()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 879, L"ShowPrecedents", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_ShrinkToFit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 209, L"ShrinkToFit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_ShrinkToFit(_variant_t ShrinkToFit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ShrinkToFit;
		Invoke(1, 209, L"ShrinkToFit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::SmartTags Range::get_SmartTags()
	{
		Excel::SmartTags returnedValue;
		Com::Param param;
		Invoke(0, 2016, L"SmartTags", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::Sort(_variant_t Key1, Excel::XlSortOrder Order1, _variant_t Key2, _variant_t Type, Excel::XlSortOrder Order2, _variant_t Key3, Excel::XlSortOrder Order3, Excel::XlYesNoGuess Header, _variant_t OrderCustom, _variant_t MatchCase, Excel::XlSortOrientation Orientation, Excel::XlSortMethod SortMethod, Excel::XlSortDataOption DataOption1, Excel::XlSortDataOption DataOption2, Excel::XlSortDataOption DataOption3)
	{
		_variant_t returnedValue;
		Com::Param param(15);
		param[0] = Key1;
		param[1].vt = VT_I2;
		param[1].iVal = Order1;
		param[2] = Key2;
		param[3] = Type;
		param[4].vt = VT_I2;
		param[4].iVal = Order2;
		param[5] = Key3;
		param[6].vt = VT_I2;
		param[6].iVal = Order3;
		param[7].vt = VT_I2;
		param[7].iVal = Header;
		param[8] = OrderCustom;
		param[9] = MatchCase;
		param[10].vt = VT_I2;
		param[10].iVal = Orientation;
		param[11].vt = VT_I2;
		param[11].iVal = SortMethod;
		param[12].vt = VT_I2;
		param[12].iVal = DataOption1;
		param[13].vt = VT_I2;
		param[13].iVal = DataOption2;
		param[14].vt = VT_I2;
		param[14].iVal = DataOption3;
		Invoke(15, 880, L"Sort", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::SortSpecial(Excel::XlSortMethod SortMethod, _variant_t Key1, Excel::XlSortOrder Order1, _variant_t Type, _variant_t Key2, Excel::XlSortOrder Order2, _variant_t Key3, Excel::XlSortOrder Order3, Excel::XlYesNoGuess Header, _variant_t OrderCustom, _variant_t MatchCase, Excel::XlSortOrientation Orientation, Excel::XlSortDataOption DataOption1, Excel::XlSortDataOption DataOption2, Excel::XlSortDataOption DataOption3)
	{
		_variant_t returnedValue;
		Com::Param param(15);
		param[0].vt = VT_I2;
		param[0].iVal = SortMethod;
		param[1] = Key1;
		param[2].vt = VT_I2;
		param[2].iVal = Order1;
		param[3] = Type;
		param[4] = Key2;
		param[5].vt = VT_I2;
		param[5].iVal = Order2;
		param[6] = Key3;
		param[7].vt = VT_I2;
		param[7].iVal = Order3;
		param[8].vt = VT_I2;
		param[8].iVal = Header;
		param[9] = OrderCustom;
		param[10] = MatchCase;
		param[11].vt = VT_I2;
		param[11].iVal = Orientation;
		param[12].vt = VT_I2;
		param[12].iVal = DataOption1;
		param[13].vt = VT_I2;
		param[13].iVal = DataOption2;
		param[14].vt = VT_I2;
		param[14].iVal = DataOption3;
		Invoke(15, 881, L"SortSpecial", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::SoundNote Range::get_SoundNote()
	{
		Excel::SoundNote returnedValue;
		Com::Param param;
		Invoke(0, 916, L"SoundNote", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparklineGroups Range::get_SparklineGroups()
	{
		Excel::SparklineGroups returnedValue;
		Com::Param param;
		Invoke(0, 2853, L"SparklineGroups", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::Speak(_variant_t SpeakDirection, _variant_t SpeakFormulas)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = SpeakDirection;
		param[1] = SpeakFormulas;
		Invoke(2, 2017, L"Speak", param, returnedValue, DISPATCH_METHOD);
	}

	void Range::Speak()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2017, L"Speak", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range Range::SpecialCells(Excel::XlCellType Type, _variant_t Value)
	{
		Excel::Range returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Value;
		Invoke(2, 410, L"SpecialCells", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Range::SpecialCells(Excel::XlCellType Type)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 410, L"SpecialCells", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_Style()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 260, L"Style", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Style(_variant_t Style)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Style;
		Invoke(1, 260, L"Style", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::SubscribeTo(wstring Edition, Excel::XlSubscribeToFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Edition.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 481, L"SubscribeTo", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Subtotal(long GroupBy, Excel::XlConsolidationFunction Function, _variant_t TotalList, _variant_t Replace, _variant_t PageBreaks, Excel::XlSummaryRow SummaryBelowData)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0].vt = VT_I4;
		param[0].lVal = GroupBy;
		param[1].vt = VT_I2;
		param[1].iVal = Function;
		param[2] = TotalList;
		param[3] = Replace;
		param[4] = PageBreaks;
		param[5].vt = VT_I2;
		param[5].iVal = SummaryBelowData;
		Invoke(6, 882, L"Subtotal", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_Summary()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 273, L"Summary", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::Table(_variant_t RowInput, _variant_t ColumnInput)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = RowInput;
		param[1] = ColumnInput;
		Invoke(2, 497, L"Table", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::Table()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 497, L"Table", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::TextToColumns(_variant_t Destination, Excel::XlTextParsingType DataType, Excel::XlTextQualifier TextQualifier, _variant_t ConsecutiveDelimiter, _variant_t Tab, _variant_t Semicolon, _variant_t Comma, _variant_t Space, _variant_t Other, _variant_t OtherChar, _variant_t FieldInfo, _variant_t DecimalSeparator, _variant_t ThousandsSeparator, _variant_t TrailingMinusNumbers)
	{
		_variant_t returnedValue;
		Com::Param param(14);
		param[0] = Destination;
		param[1].vt = VT_I2;
		param[1].iVal = DataType;
		param[2].vt = VT_I2;
		param[2].iVal = TextQualifier;
		param[3] = ConsecutiveDelimiter;
		param[4] = Tab;
		param[5] = Semicolon;
		param[6] = Comma;
		param[7] = Space;
		param[8] = Other;
		param[9] = OtherChar;
		param[10] = FieldInfo;
		param[11] = DecimalSeparator;
		param[12] = ThousandsSeparator;
		param[13] = TrailingMinusNumbers;
		Invoke(14, 1040, L"TextToColumns", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::TextToColumns(_variant_t Destination, Excel::XlTextParsingType DataType, Excel::XlTextQualifier TextQualifier)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Destination;
		param[1].vt = VT_I2;
		param[1].iVal = DataType;
		param[2].vt = VT_I2;
		param[2].iVal = TextQualifier;
		Invoke(3, 1040, L"TextToColumns", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::UnMerge()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1384, L"UnMerge", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Range::Ungroup()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 244, L"Ungroup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get_UseStandardHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 274, L"UseStandardHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_UseStandardHeight(_variant_t UseStandardHeight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = UseStandardHeight;
		Invoke(1, 274, L"UseStandardHeight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_UseStandardWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 275, L"UseStandardWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_UseStandardWidth(_variant_t UseStandardWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = UseStandardWidth;
		Invoke(1, 275, L"UseStandardWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Validation Range::get_Validation()
	{
		Excel::Validation returnedValue;
		Com::Param param;
		Invoke(0, 1387, L"Validation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Value(_variant_t RangeValueDataType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = RangeValueDataType;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Value(_variant_t Value, _variant_t RangeValueDataType)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Value;
		param[1] = RangeValueDataType;
		Invoke(2, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Range::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_Value2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1388, L"Value2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_Value2(_variant_t Value2)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value2;
		Invoke(1, 1388, L"Value2", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Range::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorksheetX Range::get_Worksheet()
	{
		Excel::WorksheetX returnedValue;
		Com::Param param;
		Invoke(0, 348, L"Worksheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get_WrapText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 276, L"WrapText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put_WrapText(_variant_t WrapText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = WrapText;
		Invoke(1, 276, L"WrapText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XPath Range::get_XPath()
	{
		Excel::XPath returnedValue;
		Com::Param param;
		Invoke(0, 2258, L"XPath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::_BorderAround(_variant_t LineStyle, Excel::XlBorderWeight Weight, Excel::XlColorIndex ColorIndex, _variant_t Color)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = LineStyle;
		param[1].vt = VT_I2;
		param[1].iVal = Weight;
		param[2].vt = VT_I2;
		param[2].iVal = ColorIndex;
		param[3] = Color;
		Invoke(4, 1067, L"_BorderAround", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::_BorderAround(_variant_t LineStyle, Excel::XlBorderWeight Weight, Excel::XlColorIndex ColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = LineStyle;
		param[1].vt = VT_I2;
		param[1].iVal = Weight;
		param[2].vt = VT_I2;
		param[2].iVal = ColorIndex;
		Invoke(3, 1067, L"_BorderAround", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::get__Default(_variant_t RowIndex, _variant_t ColumnIndex)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = RowIndex;
		param[1] = ColumnIndex;
		Invoke(2, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Range::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Range::put__Default(_variant_t _Default, _variant_t RowIndex, _variant_t ColumnIndex)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = _Default;
		param[1] = RowIndex;
		param[2] = ColumnIndex;
		Invoke(3, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Range::put__Default(_variant_t _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Range::_ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		Invoke(9, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void Range::_ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Range::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	_variant_t Range::_PasteSpecial(Excel::XlPasteType Paste, Excel::XlPasteSpecialOperation Operation, _variant_t SkipBlanks, _variant_t Transpose)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = Paste;
		param[1].vt = VT_I2;
		param[1].iVal = Operation;
		param[2] = SkipBlanks;
		param[3] = Transpose;
		Invoke(4, 1027, L"_PasteSpecial", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::_PasteSpecial(Excel::XlPasteType Paste, Excel::XlPasteSpecialOperation Operation)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Paste;
		param[1].vt = VT_I2;
		param[1].iVal = Operation;
		Invoke(2, 1027, L"_PasteSpecial", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Range::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________ChartEvents
	ChartEvents::ChartEvents()
	{
	}

	ChartEvents::~ChartEvents()
	{
	}

	void ChartEvents::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::BeforeDoubleClick(long ElementID, long Arg1, long Arg2, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = ElementID;
		param[1].vt = VT_I4;
		param[1].lVal = Arg1;
		param[2].vt = VT_I4;
		param[2].lVal = Arg2;
		param[3].vt = VT_BOOL | VT_BYREF;
		param[3].pboolVal = &Cancel;
		Invoke(4, 1537, L"BeforeDoubleClick", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::BeforeRightClick(VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL | VT_BYREF;
		param[0].pboolVal = &Cancel;
		Invoke(1, 1534, L"BeforeRightClick", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::Calculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 279, L"Calculate", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::Deactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1530, L"Deactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::DragOver()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1536, L"DragOver", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::DragPlot()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1535, L"DragPlot", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::MouseDown(long Button, long Shift, long x, long y)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Button;
		param[1].vt = VT_I4;
		param[1].lVal = Shift;
		param[2].vt = VT_I4;
		param[2].lVal = x;
		param[3].vt = VT_I4;
		param[3].lVal = y;
		Invoke(4, 1531, L"MouseDown", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::MouseMove(long Button, long Shift, long x, long y)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Button;
		param[1].vt = VT_I4;
		param[1].lVal = Shift;
		param[2].vt = VT_I4;
		param[2].lVal = x;
		param[3].vt = VT_I4;
		param[3].lVal = y;
		Invoke(4, 1533, L"MouseMove", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::MouseUp(long Button, long Shift, long x, long y)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Button;
		param[1].vt = VT_I4;
		param[1].lVal = Shift;
		param[2].vt = VT_I4;
		param[2].lVal = x;
		param[3].vt = VT_I4;
		param[3].lVal = y;
		Invoke(4, 1532, L"MouseUp", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::RemoteResize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3281, L"RemoteResize", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::RemoteSeriesChange(long SeriesIndex, long PointIndex)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = SeriesIndex;
		param[1].vt = VT_I4;
		param[1].lVal = PointIndex;
		Invoke(2, 3282, L"RemoteSeriesChange", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::Resize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 256, L"Resize", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::Select(long ElementID, long Arg1, long Arg2)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I4;
		param[0].lVal = ElementID;
		param[1].vt = VT_I4;
		param[1].lVal = Arg1;
		param[2].vt = VT_I4;
		param[2].lVal = Arg2;
		Invoke(3, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartEvents::SeriesChange(long SeriesIndex, long PointIndex)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = SeriesIndex;
		param[1].vt = VT_I4;
		param[1].lVal = PointIndex;
		Invoke(2, 1538, L"SeriesChange", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________VPageBreak
	VPageBreak::VPageBreak()
	{
	}

	VPageBreak::~VPageBreak()
	{
	}

	Excel::ApplicationX VPageBreak::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator VPageBreak::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void VPageBreak::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void VPageBreak::DragOff(Excel::XlDirection Direction, long RegionIndex)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Direction;
		param[1].vt = VT_I4;
		param[1].lVal = RegionIndex;
		Invoke(2, 1420, L"DragOff", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlPageBreakExtent VPageBreak::get_Extent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1422, L"Extent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPageBreakExtent)returnedValue.iVal;
	}

	Excel::Range VPageBreak::get_Location()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void VPageBreak::put_Location(Excel::Range& Location)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Location.dispatch.GetInterfacePtr();
		Invoke(1, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	Excel::WorksheetX VPageBreak::get_Parent()
	{
		Excel::WorksheetX returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlPageBreak VPageBreak::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPageBreak)returnedValue.iVal;
	}

	void VPageBreak::put_Type(Excel::XlPageBreak Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________HPageBreak
	HPageBreak::HPageBreak()
	{
	}

	HPageBreak::~HPageBreak()
	{
	}

	Excel::ApplicationX HPageBreak::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator HPageBreak::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void HPageBreak::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void HPageBreak::DragOff(Excel::XlDirection Direction, long RegionIndex)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Direction;
		param[1].vt = VT_I4;
		param[1].lVal = RegionIndex;
		Invoke(2, 1420, L"DragOff", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlPageBreakExtent HPageBreak::get_Extent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1422, L"Extent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPageBreakExtent)returnedValue.iVal;
	}

	Excel::Range HPageBreak::get_Location()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void HPageBreak::put_Location(Excel::Range& Location)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Location.dispatch.GetInterfacePtr();
		Invoke(1, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	Excel::WorksheetX HPageBreak::get_Parent()
	{
		Excel::WorksheetX returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlPageBreak HPageBreak::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPageBreak)returnedValue.iVal;
	}

	void HPageBreak::put_Type(Excel::XlPageBreak Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________HPageBreaks
	HPageBreaks::HPageBreaks()
	{
	}

	HPageBreaks::~HPageBreaks()
	{
	}

	Excel::HPageBreak HPageBreaks::Add(Com::Object Before)
	{
		Excel::HPageBreak returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Before.dispatch.GetInterfacePtr();
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX HPageBreaks::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long HPageBreaks::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator HPageBreaks::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::HPageBreak HPageBreaks::get_Item(long Index)
	{
		Excel::HPageBreak returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object HPageBreaks::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::HPageBreak HPageBreaks::get__Default(long Index)
	{
		Excel::HPageBreak returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr HPageBreaks::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________VPageBreaks
	VPageBreaks::VPageBreaks()
	{
	}

	VPageBreaks::~VPageBreaks()
	{
	}

	Excel::VPageBreak VPageBreaks::Add(Com::Object Before)
	{
		Excel::VPageBreak returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Before.dispatch.GetInterfacePtr();
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX VPageBreaks::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long VPageBreaks::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator VPageBreaks::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::VPageBreak VPageBreaks::get_Item(long Index)
	{
		Excel::VPageBreak returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object VPageBreaks::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::VPageBreak VPageBreaks::get__Default(long Index)
	{
		Excel::VPageBreak returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr VPageBreaks::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________RecentFile
	RecentFile::RecentFile()
	{
	}

	RecentFile::~RecentFile()
	{
	}

	Excel::ApplicationX RecentFile::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator RecentFile::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void RecentFile::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long RecentFile::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring RecentFile::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::WorkbookX RecentFile::Open()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param;
		Invoke(0, 1923, L"Open", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object RecentFile::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring RecentFile::get_Path()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 291, L"Path", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________RecentFiles
	RecentFiles::RecentFiles()
	{
	}

	RecentFiles::~RecentFiles()
	{
	}

	Excel::RecentFile RecentFiles::Add(wstring Name)
	{
		Excel::RecentFile returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX RecentFiles::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long RecentFiles::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator RecentFiles::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::RecentFile RecentFiles::get_Item(long Index)
	{
		Excel::RecentFile returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long RecentFiles::get_Maximum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1423, L"Maximum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void RecentFiles::put_Maximum(long Maximum)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Maximum;
		Invoke(1, 1423, L"Maximum", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object RecentFiles::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::RecentFile RecentFiles::get__Default(long Index)
	{
		Excel::RecentFile returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr RecentFiles::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________DocEvents
	DocEvents::DocEvents()
	{
	}

	DocEvents::~DocEvents()
	{
	}

	void DocEvents::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::BeforeDelete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3074, L"BeforeDelete", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::BeforeDoubleClick(Excel::Range& Target, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL | VT_BYREF;
		param[1].pboolVal = &Cancel;
		Invoke(2, 1537, L"BeforeDoubleClick", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::BeforeRightClick(Excel::Range& Target, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL | VT_BYREF;
		param[1].pboolVal = &Cancel;
		Invoke(2, 1534, L"BeforeRightClick", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::Calculate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 279, L"Calculate", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::Change(Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 1545, L"Change", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::Deactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1530, L"Deactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::FollowHyperlink(Excel::Hyperlink& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 1470, L"FollowHyperlink", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::LensGalleryRenderComplete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3072, L"LensGalleryRenderComplete", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::PivotTableAfterValueChange(Excel::PivotTable& TargetPivotTable, Excel::Range& TargetRange)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetRange.dispatch.GetInterfacePtr();
		Invoke(2, 2886, L"PivotTableAfterValueChange", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::PivotTableBeforeAllocateChanges(Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = ValueChangeStart;
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeEnd;
		param[3].vt = VT_BOOL | VT_BYREF;
		param[3].pboolVal = &Cancel;
		Invoke(4, 2889, L"PivotTableBeforeAllocateChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::PivotTableBeforeCommitChanges(Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = ValueChangeStart;
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeEnd;
		param[3].vt = VT_BOOL | VT_BYREF;
		param[3].pboolVal = &Cancel;
		Invoke(4, 2892, L"PivotTableBeforeCommitChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::PivotTableBeforeDiscardChanges(Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = ValueChangeStart;
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeEnd;
		Invoke(3, 2893, L"PivotTableBeforeDiscardChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::PivotTableChangeSync(Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 2894, L"PivotTableChangeSync", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::PivotTableUpdate(Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 2156, L"PivotTableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::RemoteBeforeDelete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3284, L"RemoteBeforeDelete", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::RemoteChange(Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 3283, L"RemoteChange", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::RemotePivotTableChangeSync(Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 3286, L"RemotePivotTableChangeSync", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::RemotePivotTableUpdate(Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 3285, L"RemotePivotTableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::SelectionChange(Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 1543, L"SelectionChange", param, returnedValue, DISPATCH_METHOD);
	}

	void DocEvents::TableUpdate(Excel::TableObject& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 3073, L"TableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Style
	Style::Style()
	{
	}

	Style::~Style()
	{
	}

	bool Style::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Style::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Borders Style::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Style::get_BuiltIn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 553, L"BuiltIn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlCreator Style::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Style::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Font Style::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Style::get_FormulaHidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 262, L"FormulaHidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_FormulaHidden(bool FormulaHidden)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FormulaHidden == true) ? 1 : 0;
		Invoke(1, 262, L"FormulaHidden", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlHAlign Style::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlHAlign)returnedValue.iVal;
	}

	void Style::put_HorizontalAlignment(Excel::XlHAlign HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Style::get_IncludeAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 413, L"IncludeAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_IncludeAlignment(bool IncludeAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeAlignment == true) ? 1 : 0;
		Invoke(1, 413, L"IncludeAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Style::get_IncludeBorder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 414, L"IncludeBorder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_IncludeBorder(bool IncludeBorder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeBorder == true) ? 1 : 0;
		Invoke(1, 414, L"IncludeBorder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Style::get_IncludeFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 415, L"IncludeFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_IncludeFont(bool IncludeFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeFont == true) ? 1 : 0;
		Invoke(1, 415, L"IncludeFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Style::get_IncludeNumber()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 416, L"IncludeNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_IncludeNumber(bool IncludeNumber)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeNumber == true) ? 1 : 0;
		Invoke(1, 416, L"IncludeNumber", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Style::get_IncludePatterns()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 417, L"IncludePatterns", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_IncludePatterns(bool IncludePatterns)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludePatterns == true) ? 1 : 0;
		Invoke(1, 417, L"IncludePatterns", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Style::get_IncludeProtection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 418, L"IncludeProtection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_IncludeProtection(bool IncludeProtection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeProtection == true) ? 1 : 0;
		Invoke(1, 418, L"IncludeProtection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Style::get_IndentLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 201, L"IndentLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Style::put_IndentLevel(long IndentLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = IndentLevel;
		Invoke(1, 201, L"IndentLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior Style::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Style::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Style::get_MergeCells()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 208, L"MergeCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Style::put_MergeCells(_variant_t MergeCells)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = MergeCells;
		Invoke(1, 208, L"MergeCells", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Style::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Style::get_NameLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 937, L"NameLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Style::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Style::put_NumberFormat(wstring NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NumberFormat.c_str());
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Style::get_NumberFormatLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Style::put_NumberFormatLocal(wstring NumberFormatLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NumberFormatLocal.c_str());
		Invoke(1, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlOrientation Style::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlOrientation)returnedValue.iVal;
	}

	void Style::put_Orientation(Excel::XlOrientation Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Style::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Style::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Style::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Style::get_ShrinkToFit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 209, L"ShrinkToFit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_ShrinkToFit(bool ShrinkToFit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShrinkToFit == true) ? 1 : 0;
		Invoke(1, 209, L"ShrinkToFit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Style::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlVAlign Style::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlVAlign)returnedValue.iVal;
	}

	void Style::put_VerticalAlignment(Excel::XlVAlign VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Style::get_WrapText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 276, L"WrapText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Style::put_WrapText(bool WrapText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WrapText == true) ? 1 : 0;
		Invoke(1, 276, L"WrapText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Style::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________Styles
	Styles::Styles()
	{
	}

	Styles::~Styles()
	{
	}

	Excel::Style Styles::Add(wstring Name, _variant_t BasedOn)
	{
		Excel::Style returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = BasedOn;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Style Styles::Add(wstring Name)
	{
		Excel::Style returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Styles::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Styles::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Styles::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Style Styles::get_Item(_variant_t Index)
	{
		Excel::Style returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Styles::Merge(_variant_t Workbook)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Workbook;
		Invoke(1, 564, L"Merge", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Styles::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Style Styles::get__Default(_variant_t Index)
	{
		Excel::Style returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Styles::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Borders
	Borders::Borders()
	{
	}

	Borders::~Borders()
	{
	}

	Excel::ApplicationX Borders::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Borders::get_Color()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Borders::put_Color(_variant_t Color)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Color;
		Invoke(1, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Borders::get_ColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Borders::put_ColorIndex(_variant_t ColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ColorIndex;
		Invoke(1, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Borders::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Borders::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Border Borders::get_Item(Excel::XlBordersIndex Index)
	{
		Excel::Border returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Borders::get_LineStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 119, L"LineStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Borders::put_LineStyle(_variant_t LineStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = LineStyle;
		Invoke(1, 119, L"LineStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Borders::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Borders::get_ThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Borders::put_ThemeColor(_variant_t ThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ThemeColor;
		Invoke(1, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Borders::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Borders::put_TintAndShade(_variant_t TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TintAndShade;
		Invoke(1, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Borders::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Borders::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Borders::get_Weight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 120, L"Weight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Borders::put_Weight(_variant_t Weight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Weight;
		Invoke(1, 120, L"Weight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Borders::get__Default(Excel::XlBordersIndex Index)
	{
		Excel::Border returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Borders::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________AddIn
	AddIn::AddIn()
	{
	}

	AddIn::~AddIn()
	{
	}

	Excel::ApplicationX AddIn::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring AddIn::get_Author()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 574, L"Author", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring AddIn::get_CLSID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2043, L"CLSID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring AddIn::get_Comments()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 575, L"Comments", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlCreator AddIn::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring AddIn::get_FullName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 289, L"FullName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool AddIn::get_Installed()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 550, L"Installed", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AddIn::put_Installed(bool Installed)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Installed == true) ? 1 : 0;
		Invoke(1, 550, L"Installed", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool AddIn::get_IsOpen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2865, L"IsOpen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring AddIn::get_Keywords()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 577, L"Keywords", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring AddIn::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object AddIn::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring AddIn::get_Path()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 291, L"Path", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring AddIn::get_Subject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 953, L"Subject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring AddIn::get_Title()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring AddIn::get_progID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1523, L"progID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________AddIns
	AddIns::AddIns()
	{
	}

	AddIns::~AddIns()
	{
	}

	Excel::AddIn AddIns::Add(wstring Filename, _variant_t CopyFile)
	{
		Excel::AddIn returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = CopyFile;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::AddIn AddIns::Add(wstring Filename)
	{
		Excel::AddIn returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX AddIns::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long AddIns::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator AddIns::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::AddIn AddIns::get_Item(_variant_t Index)
	{
		Excel::AddIn returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object AddIns::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::AddIn AddIns::get__Default(_variant_t Index)
	{
		Excel::AddIn returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr AddIns::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Toolbar
	Toolbar::Toolbar()
	{
	}

	Toolbar::~Toolbar()
	{
	}

	Excel::ApplicationX Toolbar::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Toolbar::get_BuiltIn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 553, L"BuiltIn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlCreator Toolbar::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Toolbar::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long Toolbar::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Toolbar::put_Height(long Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Toolbar::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Toolbar::put_Left(long Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Toolbar::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Toolbar::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Toolbar::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Toolbar::put_Position(long Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlToolbarProtection Toolbar::get_Protection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 176, L"Protection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlToolbarProtection)returnedValue.iVal;
	}

	void Toolbar::put_Protection(Excel::XlToolbarProtection Protection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Protection;
		Invoke(1, 176, L"Protection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Toolbar::Reset()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 555, L"Reset", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ToolbarButtons Toolbar::get_ToolbarButtons()
	{
		Excel::ToolbarButtons returnedValue;
		Com::Param param;
		Invoke(0, 964, L"ToolbarButtons", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Toolbar::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Toolbar::put_Top(long Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Toolbar::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Toolbar::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Toolbar::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Toolbar::put_Width(long Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Toolbars
	Toolbars::Toolbars()
	{
	}

	Toolbars::~Toolbars()
	{
	}

	Excel::Toolbar Toolbars::Add(_variant_t Name)
	{
		Excel::Toolbar returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Toolbar Toolbars::Add()
	{
		Excel::Toolbar returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Toolbars::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Toolbars::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Toolbars::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Toolbar Toolbars::get_Item(_variant_t Index)
	{
		Excel::Toolbar returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Toolbars::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Toolbar Toolbars::get__Default(_variant_t Index)
	{
		Excel::Toolbar returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Toolbars::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ToolbarButton
	ToolbarButton::ToolbarButton()
	{
	}

	ToolbarButton::~ToolbarButton()
	{
	}

	Excel::ApplicationX ToolbarButton::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ToolbarButton::get_BuiltIn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 553, L"BuiltIn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ToolbarButton::get_BuiltInFace()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 554, L"BuiltInFace", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ToolbarButton::put_BuiltInFace(bool BuiltInFace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BuiltInFace == true) ? 1 : 0;
		Invoke(1, 554, L"BuiltInFace", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ToolbarButton::Copy(Excel::Toolbar& Toolbar, long Before)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Toolbar.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = Before;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void ToolbarButton::CopyFace()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 966, L"CopyFace", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator ToolbarButton::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ToolbarButton::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void ToolbarButton::Edit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 562, L"Edit", param, returnedValue, DISPATCH_METHOD);
	}

	bool ToolbarButton::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ToolbarButton::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ToolbarButton::get_HelpContextID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 355, L"HelpContextID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ToolbarButton::put_HelpContextID(long HelpContextID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = HelpContextID;
		Invoke(1, 355, L"HelpContextID", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ToolbarButton::get_HelpFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 360, L"HelpFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ToolbarButton::put_HelpFile(wstring HelpFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(HelpFile.c_str());
		Invoke(1, 360, L"HelpFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ToolbarButton::get_ID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 570, L"ID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool ToolbarButton::get_IsGap()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 561, L"IsGap", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ToolbarButton::Move(Excel::Toolbar& Toolbar, long Before)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Toolbar.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = Before;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ToolbarButton::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ToolbarButton::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ToolbarButton::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ToolbarButton::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ToolbarButton::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ToolbarButton::PasteFace()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 967, L"PasteFace", param, returnedValue, DISPATCH_METHOD);
	}

	bool ToolbarButton::get_Pushed()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 560, L"Pushed", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ToolbarButton::put_Pushed(bool Pushed)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Pushed == true) ? 1 : 0;
		Invoke(1, 560, L"Pushed", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ToolbarButton::Reset()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 555, L"Reset", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ToolbarButton::get_StatusBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 386, L"StatusBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ToolbarButton::put_StatusBar(wstring StatusBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(StatusBar.c_str());
		Invoke(1, 386, L"StatusBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ToolbarButton::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ToolbarButton::put_Width(long Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ToolbarButtons
	ToolbarButtons::ToolbarButtons()
	{
	}

	ToolbarButtons::~ToolbarButtons()
	{
	}

	Excel::ToolbarButton ToolbarButtons::Add(_variant_t Button, _variant_t Before, _variant_t OnAction, _variant_t Pushed, _variant_t Enabled, _variant_t StatusBar, _variant_t HelpFile, _variant_t HelpContextID)
	{
		Excel::ToolbarButton returnedValue;
		Com::Param param(8);
		param[0] = Button;
		param[1] = Before;
		param[2] = OnAction;
		param[3] = Pushed;
		param[4] = Enabled;
		param[5] = StatusBar;
		param[6] = HelpFile;
		param[7] = HelpContextID;
		Invoke(8, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ToolbarButton ToolbarButtons::Add()
	{
		Excel::ToolbarButton returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ToolbarButtons::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ToolbarButtons::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ToolbarButtons::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ToolbarButton ToolbarButtons::get_Item(long Index)
	{
		Excel::ToolbarButton returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ToolbarButtons::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ToolbarButton ToolbarButtons::get__Default(long Index)
	{
		Excel::ToolbarButton returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ToolbarButtons::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Areas
	Areas::Areas()
	{
	}

	Areas::~Areas()
	{
	}

	Excel::ApplicationX Areas::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Areas::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Areas::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Range Areas::get_Item(long Index)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Areas::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Areas::get__Default(long Index)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Areas::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________WorkbookEvents
	WorkbookEvents::WorkbookEvents()
	{
	}

	WorkbookEvents::~WorkbookEvents()
	{
	}

	void WorkbookEvents::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::AddinInstall()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1552, L"AddinInstall", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::AddinUninstall()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1553, L"AddinUninstall", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::AfterRemoteChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3288, L"AfterRemoteChange", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::AfterSave(bool Success)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Success == true) ? 1 : 0;
		Invoke(1, 2900, L"AfterSave", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::AfterXmlExport(Excel::XmlMap& Map, wstring Url, Excel::XlXmlExportResult Result)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Map.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Url.c_str());
		param[2].vt = VT_I2;
		param[2].iVal = Result;
		Invoke(3, 2288, L"AfterXmlExport", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::AfterXmlImport(Excel::XmlMap& Map, bool IsRefresh, Excel::XlXmlImportResult Result)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Map.dispatch.GetInterfacePtr();
		param[1].vt = VT_BOOL;
		param[1].boolVal = (IsRefresh == true) ? 1 : 0;
		param[2].vt = VT_I2;
		param[2].iVal = Result;
		Invoke(3, 2285, L"AfterXmlImport", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::BeforeClose(VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL | VT_BYREF;
		param[0].pboolVal = &Cancel;
		Invoke(1, 1546, L"BeforeClose", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::BeforePrint(VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL | VT_BYREF;
		param[0].pboolVal = &Cancel;
		Invoke(1, 1549, L"BeforePrint", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::BeforeRemoteChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3287, L"BeforeRemoteChange", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::BeforeSave(bool SaveAsUI, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveAsUI == true) ? 1 : 0;
		param[1].vt = VT_BOOL | VT_BYREF;
		param[1].pboolVal = &Cancel;
		Invoke(2, 1547, L"BeforeSave", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::BeforeXmlExport(Excel::XmlMap& Map, wstring Url, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Map.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Url.c_str());
		param[2].vt = VT_BOOL | VT_BYREF;
		param[2].pboolVal = &Cancel;
		Invoke(3, 2287, L"BeforeXmlExport", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::BeforeXmlImport(Excel::XmlMap& Map, wstring Url, bool IsRefresh, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Map.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Url.c_str());
		param[2].vt = VT_BOOL;
		param[2].boolVal = (IsRefresh == true) ? 1 : 0;
		param[3].vt = VT_BOOL | VT_BYREF;
		param[3].pboolVal = &Cancel;
		Invoke(4, 2283, L"BeforeXmlImport", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::Deactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1530, L"Deactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::ModelChange(Excel::ModelChanges& Changes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Changes.dispatch.GetInterfacePtr();
		Invoke(1, 3077, L"ModelChange", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::NewChart(Excel::ChartX& Ch)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Ch.dispatch.GetInterfacePtr();
		Invoke(1, 2901, L"NewChart", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::NewSheet(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 1550, L"NewSheet", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::Open()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1923, L"Open", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::PivotTableCloseConnection(Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 2158, L"PivotTableCloseConnection", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::PivotTableOpenConnection(Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(1, 2159, L"PivotTableOpenConnection", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::RemoteNewChart(Excel::ChartX& Ch)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Ch.dispatch.GetInterfacePtr();
		Invoke(1, 3291, L"RemoteNewChart", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::RemoteNewSheet(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 3290, L"RemoteNewSheet", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::RemoteSheetBeforeDelete(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 3292, L"RemoteSheetBeforeDelete", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::RemoteSheetChange(Com::Object Sh, Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 3289, L"RemoteSheetChange", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::RemoteSheetPivotTableChangeSync(Com::Object Sh, Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 3294, L"RemoteSheetPivotTableChangeSync", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::RemoteSheetPivotTableUpdate(Com::Object Sh, Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 3293, L"RemoteSheetPivotTableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::RowsetComplete(wstring Description, wstring Sheet, bool Success)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Description.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Sheet.c_str());
		param[2].vt = VT_BOOL;
		param[2].boolVal = (Success == true) ? 1 : 0;
		Invoke(3, 2610, L"RowsetComplete", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetActivate(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 1561, L"SheetActivate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetBeforeDelete(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 3079, L"SheetBeforeDelete", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetBeforeDoubleClick(Com::Object Sh, Excel::Range& Target, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		param[2].vt = VT_BOOL | VT_BYREF;
		param[2].pboolVal = &Cancel;
		Invoke(3, 1559, L"SheetBeforeDoubleClick", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetBeforeRightClick(Com::Object Sh, Excel::Range& Target, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		param[2].vt = VT_BOOL | VT_BYREF;
		param[2].pboolVal = &Cancel;
		Invoke(3, 1560, L"SheetBeforeRightClick", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetCalculate(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 1563, L"SheetCalculate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetChange(Com::Object Sh, Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 1564, L"SheetChange", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetDeactivate(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 1562, L"SheetDeactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetFollowHyperlink(Com::Object Sh, Excel::Hyperlink& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 1854, L"SheetFollowHyperlink", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetLensGalleryRenderComplete(Com::Object Sh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		Invoke(1, 3075, L"SheetLensGalleryRenderComplete", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetPivotTableAfterValueChange(Com::Object Sh, Excel::PivotTable& TargetPivotTable, Excel::Range& TargetRange)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_DISPATCH;
		param[2].pdispVal = TargetRange.dispatch.GetInterfacePtr();
		Invoke(3, 2895, L"SheetPivotTableAfterValueChange", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetPivotTableBeforeAllocateChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeStart;
		param[3].vt = VT_I4;
		param[3].lVal = ValueChangeEnd;
		param[4].vt = VT_BOOL | VT_BYREF;
		param[4].pboolVal = &Cancel;
		Invoke(5, 2896, L"SheetPivotTableBeforeAllocateChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetPivotTableBeforeCommitChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd, VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeStart;
		param[3].vt = VT_I4;
		param[3].lVal = ValueChangeEnd;
		param[4].vt = VT_BOOL | VT_BYREF;
		param[4].pboolVal = &Cancel;
		Invoke(5, 2897, L"SheetPivotTableBeforeCommitChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetPivotTableBeforeDiscardChanges(Com::Object Sh, Excel::PivotTable& TargetPivotTable, long ValueChangeStart, long ValueChangeEnd)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = TargetPivotTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_I4;
		param[2].lVal = ValueChangeStart;
		param[3].vt = VT_I4;
		param[3].lVal = ValueChangeEnd;
		Invoke(4, 2898, L"SheetPivotTableBeforeDiscardChanges", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetPivotTableChangeSync(Com::Object Sh, Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 2899, L"SheetPivotTableChangeSync", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetPivotTableUpdate(Com::Object Sh, Excel::PivotTable& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 2157, L"SheetPivotTableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetSelectionChange(Com::Object Sh, Excel::Range& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 1558, L"SheetSelectionChange", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::SheetTableUpdate(Com::Object Sh, Excel::TableObject& Target)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Sh.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Target.dispatch.GetInterfacePtr();
		Invoke(2, 3076, L"SheetTableUpdate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::Sync(/* MsoSyncEventType*/ short SyncEventType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SyncEventType;
		Invoke(1, 2266, L"Sync", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::WindowActivate(Excel::Window& Wn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wn.dispatch.GetInterfacePtr();
		Invoke(1, 1556, L"WindowActivate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::WindowDeactivate(Excel::Window& Wn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wn.dispatch.GetInterfacePtr();
		Invoke(1, 1557, L"WindowDeactivate", param, returnedValue, DISPATCH_METHOD);
	}

	void WorkbookEvents::WindowResize(Excel::Window& Wn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Wn.dispatch.GetInterfacePtr();
		Invoke(1, 1554, L"WindowResize", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________MenuBars
	MenuBars::MenuBars()
	{
	}

	MenuBars::~MenuBars()
	{
	}

	Excel::MenuBar MenuBars::Add(_variant_t Name)
	{
		Excel::MenuBar returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::MenuBar MenuBars::Add()
	{
		Excel::MenuBar returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX MenuBars::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long MenuBars::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator MenuBars::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::MenuBar MenuBars::get_Item(_variant_t Index)
	{
		Excel::MenuBar returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object MenuBars::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::MenuBar MenuBars::get__Default(_variant_t Index)
	{
		Excel::MenuBar returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr MenuBars::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________MenuBar
	MenuBar::MenuBar()
	{
	}

	MenuBar::~MenuBar()
	{
	}

	void MenuBar::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX MenuBar::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool MenuBar::get_BuiltIn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 553, L"BuiltIn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring MenuBar::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void MenuBar::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator MenuBar::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void MenuBar::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long MenuBar::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Menus MenuBar::get_Menus()
	{
		Excel::Menus returnedValue;
		Com::Param param;
		Invoke(0, 591, L"Menus", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object MenuBar::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void MenuBar::Reset()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 555, L"Reset", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Menus
	Menus::Menus()
	{
	}

	Menus::~Menus()
	{
	}

	Excel::Menu Menus::Add(wstring Caption, _variant_t Before, _variant_t Restore)
	{
		Excel::Menu returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		param[1] = Before;
		param[2] = Restore;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Menu Menus::Add(wstring Caption)
	{
		Excel::Menu returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Menus::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Menus::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Menus::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Menu Menus::get_Item(_variant_t Index)
	{
		Excel::Menu returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Menus::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Menu Menus::get__Default(_variant_t Index)
	{
		Excel::Menu returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Menus::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Menu
	Menu::Menu()
	{
	}

	Menu::~Menu()
	{
	}

	Excel::ApplicationX Menu::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Menu::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Menu::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Menu::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Menu::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	bool Menu::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Menu::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Menu::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::MenuItems Menu::get_MenuItems()
	{
		Excel::MenuItems returnedValue;
		Com::Param param;
		Invoke(0, 593, L"MenuItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Menu::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________MenuItems
	MenuItems::MenuItems()
	{
	}

	MenuItems::~MenuItems()
	{
	}

	Excel::MenuItem MenuItems::Add(wstring Caption, _variant_t OnAction, _variant_t ShortcutKey, _variant_t Before, _variant_t Restore, _variant_t StatusBar, _variant_t HelpFile, _variant_t HelpContextID)
	{
		Excel::MenuItem returnedValue;
		Com::Param param(8);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		param[1] = OnAction;
		param[2] = ShortcutKey;
		param[3] = Before;
		param[4] = Restore;
		param[5] = StatusBar;
		param[6] = HelpFile;
		param[7] = HelpContextID;
		Invoke(8, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::MenuItem MenuItems::Add(wstring Caption)
	{
		Excel::MenuItem returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Menu MenuItems::AddMenu(wstring Caption, _variant_t Before, _variant_t Restore)
	{
		Excel::Menu returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		param[1] = Before;
		param[2] = Restore;
		Invoke(3, 598, L"AddMenu", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Menu MenuItems::AddMenu(wstring Caption)
	{
		Excel::Menu returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 598, L"AddMenu", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX MenuItems::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long MenuItems::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator MenuItems::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object MenuItems::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object MenuItems::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object MenuItems::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr MenuItems::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________MenuItem
	MenuItem::MenuItem()
	{
	}

	MenuItem::~MenuItem()
	{
	}

	Excel::ApplicationX MenuItem::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring MenuItem::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void MenuItem::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool MenuItem::get_Checked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 599, L"Checked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void MenuItem::put_Checked(bool Checked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Checked == true) ? 1 : 0;
		Invoke(1, 599, L"Checked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator MenuItem::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void MenuItem::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	bool MenuItem::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void MenuItem::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long MenuItem::get_HelpContextID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 355, L"HelpContextID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void MenuItem::put_HelpContextID(long HelpContextID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = HelpContextID;
		Invoke(1, 355, L"HelpContextID", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring MenuItem::get_HelpFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 360, L"HelpFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void MenuItem::put_HelpFile(wstring HelpFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(HelpFile.c_str());
		Invoke(1, 360, L"HelpFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long MenuItem::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring MenuItem::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void MenuItem::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object MenuItem::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring MenuItem::get_StatusBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 386, L"StatusBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void MenuItem::put_StatusBar(wstring StatusBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(StatusBar.c_str());
		Invoke(1, 386, L"StatusBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Charts
	Charts::Charts()
	{
	}

	Charts::~Charts()
	{
	}

	Excel::ChartX Charts::Add(_variant_t Before, _variant_t After, _variant_t Count)
	{
		Excel::ChartX returnedValue;
		Com::Param param(3);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartX Charts::Add()
	{
		Excel::ChartX returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartX Charts::Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout)
	{
		Excel::ChartX returnedValue;
		Com::Param param(4);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		param[3] = NewLayout;
		Invoke(4, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartX Charts::Add2()
	{
		Excel::ChartX returnedValue;
		Com::Param param(0);
		Invoke(0, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Charts::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Charts::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	long Charts::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Charts::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Charts::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::HPageBreaks Charts::get_HPageBreaks()
	{
		Excel::HPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1418, L"HPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Charts::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Charts::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object Charts::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Charts::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::VPageBreaks Charts::get_VPageBreaks()
	{
		Excel::VPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1419, L"VPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Charts::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Charts::put_Visible(_variant_t Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Charts::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Charts::_Dummy7()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65543, L"_Dummy7", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Charts::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	void Charts::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Charts::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________DrawingObjects
	DrawingObjects::DrawingObjects()
	{
	}

	DrawingObjects::~DrawingObjects()
	{
	}

	_variant_t DrawingObjects::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::AddItem(_variant_t Text, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Text;
		param[1] = Index;
		Invoke(2, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::AddItem(_variant_t Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Text;
		Invoke(1, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX DrawingObjects::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DrawingObjects::get_ArrowHeadLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_ArrowHeadLength(_variant_t ArrowHeadLength)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadLength;
		Invoke(1, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::get_ArrowHeadStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_ArrowHeadStyle(_variant_t ArrowHeadStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadStyle;
		Invoke(1, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::get_ArrowHeadWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_ArrowHeadWidth(_variant_t ArrowHeadWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadWidth;
		Invoke(1, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border DrawingObjects::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DrawingObjects::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DrawingObjects::get_CancelButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 858, L"CancelButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_CancelButton(bool CancelButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CancelButton == true) ? 1 : 0;
		Invoke(1, 858, L"CancelButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DrawingObjects::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DrawingObjects::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters DrawingObjects::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters DrawingObjects::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DrawingObjects::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long DrawingObjects::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator DrawingObjects::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t DrawingObjects::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DrawingObjects::get_DefaultButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 857, L"DefaultButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_DefaultButton(bool DefaultButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DefaultButton == true) ? 1 : 0;
		Invoke(1, 857, L"DefaultButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DrawingObjects::get_DismissButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 859, L"DismissButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_DismissButton(bool DismissButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DismissButton == true) ? 1 : 0;
		Invoke(1, 859, L"DismissButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_DisplayVerticalScrollBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 922, L"DisplayVerticalScrollBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_DisplayVerticalScrollBar(bool DisplayVerticalScrollBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayVerticalScrollBar == true) ? 1 : 0;
		Invoke(1, 922, L"DisplayVerticalScrollBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DrawingObjects::get_DropDownLines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 848, L"DropDownLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_DropDownLines(long DropDownLines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DropDownLines;
		Invoke(1, 848, L"DropDownLines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DrawingObjects::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DrawingObjects::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font DrawingObjects::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::GroupObject DrawingObjects::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double DrawingObjects::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DrawingObjects::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_HelpButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 860, L"HelpButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_HelpButton(bool HelpButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HelpButton == true) ? 1 : 0;
		Invoke(1, 860, L"HelpButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DrawingObjects::get_InputType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 854, L"InputType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_InputType(long InputType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = InputType;
		Invoke(1, 854, L"InputType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior DrawingObjects::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DrawingObjects::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long DrawingObjects::get_LargeChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 845, L"LargeChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_LargeChange(long LargeChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = LargeChange;
		Invoke(1, 845, L"LargeChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DrawingObjects::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DrawingObjects::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::LinkCombo(_variant_t Link)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Link;
		Invoke(1, 856, L"LinkCombo", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::LinkCombo()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 856, L"LinkCombo", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring DrawingObjects::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DrawingObjects::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::List(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::List()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 861, L"List", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring DrawingObjects::get_ListFillRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DrawingObjects::put_ListFillRange(wstring ListFillRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ListFillRange.c_str());
		Invoke(1, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DrawingObjects::get_ListIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_ListIndex(long ListIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListIndex;
		Invoke(1, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DrawingObjects::get_Max()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_Max(long Max)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Max;
		Invoke(1, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DrawingObjects::get_Min()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_Min(long Min)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Min;
		Invoke(1, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_MultiLine()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 855, L"MultiLine", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_MultiLine(bool MultiLine)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MultiLine == true) ? 1 : 0;
		Invoke(1, 855, L"MultiLine", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_MultiSelect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 32, L"MultiSelect", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_MultiSelect(bool MultiSelect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MultiSelect == true) ? 1 : 0;
		Invoke(1, 32, L"MultiSelect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DrawingObjects::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DrawingObjects::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DrawingObjects::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DrawingObjects::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DrawingObjects::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DrawingObjects::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::RemoveAllItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 853, L"RemoveAllItems", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::RemoveItem(long Index, _variant_t Count)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		param[1] = Count;
		Invoke(2, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::RemoveItem(long Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::Reshape(long Vertex, _variant_t Insert, _variant_t Left, _variant_t Top)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Vertex;
		param[1] = Insert;
		param[2] = Left;
		param[3] = Top;
		Invoke(4, 604, L"Reshape", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::Reshape(long Vertex, _variant_t Insert)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Vertex;
		param[1] = Insert;
		Invoke(2, 604, L"Reshape", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DrawingObjects::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::Selected(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::Selected()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1123, L"Selected", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DrawingObjects::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange DrawingObjects::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long DrawingObjects::get_SmallChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_SmallChange(long SmallChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SmallChange;
		Invoke(1, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DrawingObjects::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DrawingObjects::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DrawingObjects::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DrawingObjects::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DrawingObjects::Ungroup()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 244, L"Ungroup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long DrawingObjects::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DrawingObjects::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DrawingObjects::Vertices(_variant_t Index1, _variant_t Index2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Index1;
		param[1] = Index2;
		Invoke(2, 621, L"Vertices", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DrawingObjects::Vertices()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 621, L"Vertices", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DrawingObjects::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DrawingObjects::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DrawingObjects::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DrawingObjects::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DrawingObjects::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long DrawingObjects::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DrawingObjects::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DrawingObjects::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void DrawingObjects::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void DrawingObjects::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void DrawingObjects::_Dummy28()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65564, L"_Dummy28", param, returnedValue, DISPATCH_METHOD);
	}

	void DrawingObjects::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void DrawingObjects::_Dummy47()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65583, L"_Dummy47", param, returnedValue, DISPATCH_METHOD);
	}

	void DrawingObjects::_Dummy54()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65590, L"_Dummy54", param, returnedValue, DISPATCH_METHOD);
	}

	void DrawingObjects::_Dummy56()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65592, L"_Dummy56", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr DrawingObjects::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________PivotCache
	PivotCache::PivotCache()
	{
	}

	PivotCache::~PivotCache()
	{
	}

	Com::Object PivotCache::get_ADOConnection()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2074, L"ADOConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX PivotCache::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotCache::get_BackgroundQuery()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1427, L"BackgroundQuery", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotCache::put_BackgroundQuery(bool BackgroundQuery)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BackgroundQuery == true) ? 1 : 0;
		Invoke(1, 1427, L"BackgroundQuery", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotCache::get_CommandText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotCache::put_CommandText(_variant_t CommandText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CommandText;
		Invoke(1, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCmdType PivotCache::get_CommandType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCmdType)returnedValue.iVal;
	}

	void PivotCache::put_CommandType(Excel::XlCmdType CommandType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CommandType;
		Invoke(1, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotCache::get_Connection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotCache::put_Connection(_variant_t Connection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Connection;
		Invoke(1, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Shape PivotCache::CreatePivotChart(_variant_t ChartDestination, _variant_t XlChartType, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(6);
		param[0] = ChartDestination;
		param[1] = XlChartType;
		param[2] = Left;
		param[3] = Top;
		param[4] = Width;
		param[5] = Height;
		Invoke(6, 3062, L"CreatePivotChart", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape PivotCache::CreatePivotChart(_variant_t ChartDestination)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = ChartDestination;
		Invoke(1, 3062, L"CreatePivotChart", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotTable PivotCache::CreatePivotTable(_variant_t TableDestination, _variant_t TableName, _variant_t ReadData, _variant_t DefaultVersion)
	{
		Excel::PivotTable returnedValue;
		Com::Param param(4);
		param[0] = TableDestination;
		param[1] = TableName;
		param[2] = ReadData;
		param[3] = DefaultVersion;
		Invoke(4, 1836, L"CreatePivotTable", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotTable PivotCache::CreatePivotTable(_variant_t TableDestination)
	{
		Excel::PivotTable returnedValue;
		Com::Param param(1);
		param[0] = TableDestination;
		Invoke(1, 1836, L"CreatePivotTable", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator PivotCache::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool PivotCache::get_EnableRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotCache::put_EnableRefresh(bool EnableRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableRefresh == true) ? 1 : 0;
		Invoke(1, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotCache::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool PivotCache::get_IsConnected()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2075, L"IsConnected", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	_variant_t PivotCache::get_LocalConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1835, L"LocalConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotCache::put_LocalConnection(_variant_t LocalConnection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = LocalConnection;
		Invoke(1, 1835, L"LocalConnection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotCache::get_MaintainConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1832, L"MaintainConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotCache::put_MaintainConnection(bool MaintainConnection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MaintainConnection == true) ? 1 : 0;
		Invoke(1, 1832, L"MaintainConnection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotCache::MakeConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2076, L"MakeConnection", param, returnedValue, DISPATCH_METHOD);
	}

	long PivotCache::get_MemoryUsed()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 372, L"MemoryUsed", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlPivotTableMissingItems PivotCache::get_MissingItemsLimit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2078, L"MissingItemsLimit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotTableMissingItems)returnedValue.iVal;
	}

	void PivotCache::put_MissingItemsLimit(Excel::XlPivotTableMissingItems MissingItemsLimit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MissingItemsLimit;
		Invoke(1, 2078, L"MissingItemsLimit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotCache::get_OLAP()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2077, L"OLAP", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool PivotCache::get_OptimizeCache()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1428, L"OptimizeCache", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotCache::put_OptimizeCache(bool OptimizeCache)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (OptimizeCache == true) ? 1 : 0;
		Invoke(1, 1428, L"OptimizeCache", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PivotCache::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlQueryType PivotCache::get_QueryType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1831, L"QueryType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlQueryType)returnedValue.iVal;
	}

	long PivotCache::get_RecordCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1478, L"RecordCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object PivotCache::get_Recordset()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1165, L"Recordset", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotCache::put_Recordset(Com::Object Recordset)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Recordset.dispatch.GetInterfacePtr();
		Invoke(1, 1165, L"Recordset", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	void PivotCache::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	Sys::Time PivotCache::get_RefreshDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 696, L"RefreshDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return Sys::Convert::VariantToTime(returnedValue);
	}

	wstring PivotCache::get_RefreshName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 697, L"RefreshName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool PivotCache::get_RefreshOnFileOpen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotCache::put_RefreshOnFileOpen(bool RefreshOnFileOpen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RefreshOnFileOpen == true) ? 1 : 0;
		Invoke(1, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotCache::get_RefreshPeriod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotCache::put_RefreshPeriod(long RefreshPeriod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = RefreshPeriod;
		Invoke(1, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotCache::ResetTimer()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1834, L"ResetTimer", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlRobustConnect PivotCache::get_RobustConnect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2081, L"RobustConnect", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlRobustConnect)returnedValue.iVal;
	}

	void PivotCache::put_RobustConnect(Excel::XlRobustConnect RobustConnect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RobustConnect;
		Invoke(1, 2081, L"RobustConnect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotCache::SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		param[1] = Description;
		param[2] = Keywords;
		Invoke(3, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotCache::SaveAsODC(wstring ODCFileName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		Invoke(1, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	bool PivotCache::get_SavePassword()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotCache::put_SavePassword(bool SavePassword)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SavePassword == true) ? 1 : 0;
		Invoke(1, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotCache::get_SourceConnectionFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotCache::put_SourceConnectionFile(wstring SourceConnectionFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceConnectionFile.c_str());
		Invoke(1, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotCache::get_SourceData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotCache::put_SourceData(_variant_t SourceData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = SourceData;
		Invoke(1, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotCache::get_SourceDataFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlPivotTableSourceType PivotCache::get_SourceType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 685, L"SourceType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotTableSourceType)returnedValue.iVal;
	}

	_variant_t PivotCache::get_Sql()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1480, L"Sql", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotCache::put_Sql(_variant_t Sql)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Sql;
		Invoke(1, 1480, L"Sql", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotCache::get_UpgradeOnRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2545, L"UpgradeOnRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotCache::put_UpgradeOnRefresh(bool UpgradeOnRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UpgradeOnRefresh == true) ? 1 : 0;
		Invoke(1, 2545, L"UpgradeOnRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotCache::get_UseLocalConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1837, L"UseLocalConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotCache::put_UseLocalConnection(bool UseLocalConnection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseLocalConnection == true) ? 1 : 0;
		Invoke(1, 1837, L"UseLocalConnection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotTableVersionList PivotCache::get_Version()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 392, L"Version", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotTableVersionList)returnedValue.iVal;
	}

	Excel::WorkbookConnection PivotCache::get_WorkbookConnection()
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param;
		Invoke(0, 2544, L"WorkbookConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________PivotCaches
	PivotCaches::PivotCaches()
	{
	}

	PivotCaches::~PivotCaches()
	{
	}

	Excel::PivotCache PivotCaches::Add(Excel::XlPivotTableSourceType SourceType, _variant_t SourceData)
	{
		Excel::PivotCache returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		param[1] = SourceData;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotCache PivotCaches::Add(Excel::XlPivotTableSourceType SourceType)
	{
		Excel::PivotCache returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX PivotCaches::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotCaches::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::PivotCache PivotCaches::Create(Excel::XlPivotTableSourceType SourceType, _variant_t SourceData, _variant_t Version)
	{
		Excel::PivotCache returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		param[1] = SourceData;
		param[2] = Version;
		Invoke(3, 1896, L"Create", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotCache PivotCaches::Create(Excel::XlPivotTableSourceType SourceType)
	{
		Excel::PivotCache returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		Invoke(1, 1896, L"Create", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator PivotCaches::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotCache PivotCaches::Item(_variant_t Index)
	{
		Excel::PivotCache returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object PivotCaches::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotCache PivotCaches::get__Default(_variant_t Index)
	{
		Excel::PivotCache returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotCaches::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________PivotFormula
	PivotFormula::PivotFormula()
	{
	}

	PivotFormula::~PivotFormula()
	{
	}

	Excel::ApplicationX PivotFormula::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PivotFormula::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void PivotFormula::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotFormula::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotFormula::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotFormula::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotFormula::put_Index(long Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PivotFormula::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PivotFormula::get_StandardFormula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2084, L"StandardFormula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotFormula::put_StandardFormula(wstring StandardFormula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(StandardFormula.c_str());
		Invoke(1, 2084, L"StandardFormula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotFormula::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotFormula::put_Value(wstring Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Value.c_str());
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotFormula::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotFormula::put__Default(wstring _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_Default.c_str());
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________PivotFormulas
	PivotFormulas::PivotFormulas()
	{
	}

	PivotFormulas::~PivotFormulas()
	{
	}

	Excel::PivotFormula PivotFormulas::Add(wstring Formula, _variant_t UseStandardFormula)
	{
		Excel::PivotFormula returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		param[1] = UseStandardFormula;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotFormula PivotFormulas::Add(wstring Formula)
	{
		Excel::PivotFormula returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX PivotFormulas::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotFormulas::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotFormulas::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotFormula PivotFormulas::Item(_variant_t Index)
	{
		Excel::PivotFormula returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object PivotFormulas::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotFormula PivotFormulas::_Add(wstring Formula)
	{
		Excel::PivotFormula returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotFormula PivotFormulas::get__Default(_variant_t Index)
	{
		Excel::PivotFormula returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotFormulas::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________PivotTable
	PivotTable::PivotTable()
	{
	}

	PivotTable::~PivotTable()
	{
	}

	Excel::PivotFilters PivotTable::get_ActiveFilters()
	{
		Excel::PivotFilters returnedValue;
		Com::Param param;
		Invoke(0, 2559, L"ActiveFilters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotField PivotTable::AddDataField(Com::Object Field, _variant_t Caption, _variant_t Function)
	{
		Excel::PivotField returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Field.dispatch.GetInterfacePtr();
		param[1] = Caption;
		param[2] = Function;
		Invoke(3, 2122, L"AddDataField", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotField PivotTable::AddDataField(Com::Object Field)
	{
		Excel::PivotField returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Field.dispatch.GetInterfacePtr();
		Invoke(1, 2122, L"AddDataField", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t PivotTable::AddFields(_variant_t RowFields, _variant_t ColumnFields, _variant_t PageFields, _variant_t AddToTable)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = RowFields;
		param[1] = ColumnFields;
		param[2] = PageFields;
		param[3] = AddToTable;
		Invoke(4, 708, L"AddFields", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t PivotTable::AddFields()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 708, L"AddFields", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void PivotTable::AllocateChanges()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2855, L"AllocateChanges", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlAllocation PivotTable::get_Allocation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2873, L"Allocation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAllocation)returnedValue.iVal;
	}

	void PivotTable::put_Allocation(Excel::XlAllocation Allocation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Allocation;
		Invoke(1, 2873, L"Allocation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlAllocationMethod PivotTable::get_AllocationMethod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2875, L"AllocationMethod", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAllocationMethod)returnedValue.iVal;
	}

	void PivotTable::put_AllocationMethod(Excel::XlAllocationMethod AllocationMethod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AllocationMethod;
		Invoke(1, 2875, L"AllocationMethod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlAllocationValue PivotTable::get_AllocationValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2874, L"AllocationValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAllocationValue)returnedValue.iVal;
	}

	void PivotTable::put_AllocationValue(Excel::XlAllocationValue AllocationValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AllocationValue;
		Invoke(1, 2874, L"AllocationValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_AllocationWeightExpression()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2876, L"AllocationWeightExpression", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_AllocationWeightExpression(wstring AllocationWeightExpression)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(AllocationWeightExpression.c_str());
		Invoke(1, 2876, L"AllocationWeightExpression", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_AllowMultipleFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2570, L"AllowMultipleFilters", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_AllowMultipleFilters(bool AllowMultipleFilters)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AllowMultipleFilters == true) ? 1 : 0;
		Invoke(1, 2570, L"AllowMultipleFilters", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_AlternativeText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1891, L"AlternativeText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_AlternativeText(wstring AlternativeText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(AlternativeText.c_str());
		Invoke(1, 1891, L"AlternativeText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX PivotTable::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotTable::ApplyLayout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2500, L"ApplyLayout", param, returnedValue, DISPATCH_METHOD);
	}

	long PivotTable::get_CacheIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1483, L"CacheIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotTable::put_CacheIndex(long CacheIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = CacheIndex;
		Invoke(1, 1483, L"CacheIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::CalculatedFields PivotTable::CalculatedFields()
	{
		Excel::CalculatedFields returnedValue;
		Com::Param param;
		Invoke(0, 1484, L"CalculatedFields", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CalculatedMembers PivotTable::get_CalculatedMembers()
	{
		Excel::CalculatedMembers returnedValue;
		Com::Param param;
		Invoke(0, 2125, L"CalculatedMembers", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotTable::get_CalculatedMembersInFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2884, L"CalculatedMembersInFilters", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_CalculatedMembersInFilters(bool CalculatedMembersInFilters)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CalculatedMembersInFilters == true) ? 1 : 0;
		Invoke(1, 2884, L"CalculatedMembersInFilters", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::ChangeConnection(Excel::WorkbookConnection& conn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = conn.dispatch.GetInterfacePtr();
		Invoke(1, 2575, L"ChangeConnection", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::PivotTableChangeList PivotTable::get_ChangeList()
	{
		Excel::PivotTableChangeList returnedValue;
		Com::Param param;
		Invoke(0, 2880, L"ChangeList", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotTable::ChangePivotCache(_variant_t PivotCache)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PivotCache;
		Invoke(1, 2577, L"ChangePivotCache", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::ClearAllFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2561, L"ClearAllFilters", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::ClearTable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2552, L"ClearTable", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object PivotTable::get_ColumnFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 713, L"ColumnFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::get_ColumnFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 713, L"ColumnFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotTable::get_ColumnGrand()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 694, L"ColumnGrand", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ColumnGrand(bool ColumnGrand)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ColumnGrand == true) ? 1 : 0;
		Invoke(1, 694, L"ColumnGrand", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range PivotTable::get_ColumnRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 702, L"ColumnRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotTable::CommitChanges()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2877, L"CommitChanges", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotTable::get_CompactLayoutColumnHeader()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2572, L"CompactLayoutColumnHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_CompactLayoutColumnHeader(wstring CompactLayoutColumnHeader)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(CompactLayoutColumnHeader.c_str());
		Invoke(1, 2572, L"CompactLayoutColumnHeader", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_CompactLayoutRowHeader()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2571, L"CompactLayoutRowHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_CompactLayoutRowHeader(wstring CompactLayoutRowHeader)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(CompactLayoutRowHeader.c_str());
		Invoke(1, 2571, L"CompactLayoutRowHeader", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotTable::get_CompactRowIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2553, L"CompactRowIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotTable::put_CompactRowIndent(long CompactRowIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = CompactRowIndent;
		Invoke(1, 2553, L"CompactRowIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::ConvertToFormulas(bool ConvertFilters)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ConvertFilters == true) ? 1 : 0;
		Invoke(1, 2568, L"ConvertToFormulas", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotTable::CreateCubeFile(wstring File, _variant_t Measures, _variant_t Levels, _variant_t Members, _variant_t Properties)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(File.c_str());
		param[1] = Measures;
		param[2] = Levels;
		param[3] = Members;
		param[4] = Properties;
		Invoke(5, 2131, L"CreateCubeFile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring PivotTable::CreateCubeFile(wstring File)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(File.c_str());
		Invoke(1, 2131, L"CreateCubeFile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	Excel::XlCreator PivotTable::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CubeFields PivotTable::get_CubeFields()
	{
		Excel::CubeFields returnedValue;
		Com::Param param;
		Invoke(0, 1839, L"CubeFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range PivotTable::get_DataBodyRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 705, L"DataBodyRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::get_DataFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 715, L"DataFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::get_DataFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 715, L"DataFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range PivotTable::get_DataLabelRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 704, L"DataLabelRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotField PivotTable::get_DataPivotField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 2120, L"DataPivotField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotTable::DiscardChanges()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2856, L"DiscardChanges", param, returnedValue, DISPATCH_METHOD);
	}

	bool PivotTable::get_DisplayContextTooltips()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2551, L"DisplayContextTooltips", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_DisplayContextTooltips(bool DisplayContextTooltips)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayContextTooltips == true) ? 1 : 0;
		Invoke(1, 2551, L"DisplayContextTooltips", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_DisplayEmptyColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2137, L"DisplayEmptyColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_DisplayEmptyColumn(bool DisplayEmptyColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayEmptyColumn == true) ? 1 : 0;
		Invoke(1, 2137, L"DisplayEmptyColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_DisplayEmptyRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2136, L"DisplayEmptyRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_DisplayEmptyRow(bool DisplayEmptyRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayEmptyRow == true) ? 1 : 0;
		Invoke(1, 2136, L"DisplayEmptyRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_DisplayErrorString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1485, L"DisplayErrorString", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_DisplayErrorString(bool DisplayErrorString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayErrorString == true) ? 1 : 0;
		Invoke(1, 1485, L"DisplayErrorString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_DisplayFieldCaptions()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2555, L"DisplayFieldCaptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_DisplayFieldCaptions(bool DisplayFieldCaptions)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayFieldCaptions == true) ? 1 : 0;
		Invoke(1, 2555, L"DisplayFieldCaptions", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_DisplayImmediateItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2126, L"DisplayImmediateItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_DisplayImmediateItems(bool DisplayImmediateItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayImmediateItems == true) ? 1 : 0;
		Invoke(1, 2126, L"DisplayImmediateItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_DisplayMemberPropertyTooltips()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2550, L"DisplayMemberPropertyTooltips", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_DisplayMemberPropertyTooltips(bool DisplayMemberPropertyTooltips)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayMemberPropertyTooltips == true) ? 1 : 0;
		Invoke(1, 2550, L"DisplayMemberPropertyTooltips", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_DisplayNullString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1486, L"DisplayNullString", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_DisplayNullString(bool DisplayNullString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayNullString == true) ? 1 : 0;
		Invoke(1, 1486, L"DisplayNullString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::DrillDown(Excel::PivotItem& PivotItem, _variant_t PivotLine)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotItem.dispatch.GetInterfacePtr();
		param[1] = PivotLine;
		Invoke(2, 3068, L"DrillDown", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::DrillDown(Excel::PivotItem& PivotItem)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotItem.dispatch.GetInterfacePtr();
		Invoke(1, 3068, L"DrillDown", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::DrillTo(Excel::PivotItem& PivotItem, Excel::CubeField& CubeField, _variant_t PivotLine)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotItem.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = CubeField.dispatch.GetInterfacePtr();
		param[2] = PivotLine;
		Invoke(3, 2580, L"DrillTo", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::DrillTo(Excel::PivotItem& PivotItem, Excel::CubeField& CubeField)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotItem.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = CubeField.dispatch.GetInterfacePtr();
		Invoke(2, 2580, L"DrillTo", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::DrillUp(Excel::PivotItem& PivotItem, _variant_t PivotLine, _variant_t LevelUniqueName)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotItem.dispatch.GetInterfacePtr();
		param[1] = PivotLine;
		param[2] = LevelUniqueName;
		Invoke(3, 3069, L"DrillUp", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::DrillUp(Excel::PivotItem& PivotItem)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotItem.dispatch.GetInterfacePtr();
		Invoke(1, 3069, L"DrillUp", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t PivotTable::Dummy15(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 2127, L"Dummy15", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t PivotTable::Dummy15(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 2127, L"Dummy15", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t PivotTable::Dummy2(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		Invoke(4, 1783, L"Dummy2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t PivotTable::Dummy2(_variant_t Arg1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Arg1;
		Invoke(1, 1783, L"Dummy2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool PivotTable::get_EnableDataValueEditing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2121, L"EnableDataValueEditing", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_EnableDataValueEditing(bool EnableDataValueEditing)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableDataValueEditing == true) ? 1 : 0;
		Invoke(1, 2121, L"EnableDataValueEditing", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_EnableDrilldown()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1487, L"EnableDrilldown", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_EnableDrilldown(bool EnableDrilldown)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableDrilldown == true) ? 1 : 0;
		Invoke(1, 1487, L"EnableDrilldown", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_EnableFieldDialog()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1488, L"EnableFieldDialog", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_EnableFieldDialog(bool EnableFieldDialog)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableFieldDialog == true) ? 1 : 0;
		Invoke(1, 1488, L"EnableFieldDialog", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_EnableFieldList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2128, L"EnableFieldList", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_EnableFieldList(bool EnableFieldList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableFieldList == true) ? 1 : 0;
		Invoke(1, 2128, L"EnableFieldList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_EnableWizard()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1489, L"EnableWizard", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_EnableWizard(bool EnableWizard)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableWizard == true) ? 1 : 0;
		Invoke(1, 1489, L"EnableWizard", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_EnableWriteback()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2872, L"EnableWriteback", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_EnableWriteback(bool EnableWriteback)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableWriteback == true) ? 1 : 0;
		Invoke(1, 2872, L"EnableWriteback", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_ErrorString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1490, L"ErrorString", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_ErrorString(wstring ErrorString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ErrorString.c_str());
		Invoke(1, 1490, L"ErrorString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_FieldListSortAscending()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2573, L"FieldListSortAscending", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_FieldListSortAscending(bool FieldListSortAscending)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FieldListSortAscending == true) ? 1 : 0;
		Invoke(1, 2573, L"FieldListSortAscending", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::Format(Excel::XlPivotFormatType Format)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Format;
		Invoke(1, 116, L"Format", param, returnedValue, DISPATCH_METHOD);
	}

	double PivotTable::GetData(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 1491, L"GetData", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	Excel::Range PivotTable::GetPivotData(_variant_t DataField, _variant_t Field1, _variant_t Item1, _variant_t Field2, _variant_t Item2, _variant_t Field3, _variant_t Item3, _variant_t Field4, _variant_t Item4, _variant_t Field5, _variant_t Item5, _variant_t Field6, _variant_t Item6, _variant_t Field7, _variant_t Item7, _variant_t Field8, _variant_t Item8, _variant_t Field9, _variant_t Item9, _variant_t Field10, _variant_t Item10, _variant_t Field11, _variant_t Item11, _variant_t Field12, _variant_t Item12, _variant_t Field13, _variant_t Item13, _variant_t Field14, _variant_t Item14)
	{
		Excel::Range returnedValue;
		Com::Param param(29);
		param[0] = DataField;
		param[1] = Field1;
		param[2] = Item1;
		param[3] = Field2;
		param[4] = Item2;
		param[5] = Field3;
		param[6] = Item3;
		param[7] = Field4;
		param[8] = Item4;
		param[9] = Field5;
		param[10] = Item5;
		param[11] = Field6;
		param[12] = Item6;
		param[13] = Field7;
		param[14] = Item7;
		param[15] = Field8;
		param[16] = Item8;
		param[17] = Field9;
		param[18] = Item9;
		param[19] = Field10;
		param[20] = Item10;
		param[21] = Field11;
		param[22] = Item11;
		param[23] = Field12;
		param[24] = Item12;
		param[25] = Field13;
		param[26] = Item13;
		param[27] = Field14;
		param[28] = Item14;
		Invoke(29, 2090, L"GetPivotData", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range PivotTable::GetPivotData()
	{
		Excel::Range returnedValue;
		Com::Param param(0);
		Invoke(0, 2090, L"GetPivotData", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring PivotTable::get_GrandTotalName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1840, L"GrandTotalName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_GrandTotalName(wstring GrandTotalName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(GrandTotalName.c_str());
		Invoke(1, 1840, L"GrandTotalName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_HasAutoFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 695, L"HasAutoFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_HasAutoFormat(bool HasAutoFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasAutoFormat == true) ? 1 : 0;
		Invoke(1, 695, L"HasAutoFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_Hidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object PivotTable::get_HiddenFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 711, L"HiddenFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::get_HiddenFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 711, L"HiddenFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotTable::get_InGridDropZones()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2560, L"InGridDropZones", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_InGridDropZones(bool InGridDropZones)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InGridDropZones == true) ? 1 : 0;
		Invoke(1, 2560, L"InGridDropZones", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_InnerDetail()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 698, L"InnerDetail", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_InnerDetail(wstring InnerDetail)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(InnerDetail.c_str());
		Invoke(1, 698, L"InnerDetail", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlLayoutRowType PivotTable::get_LayoutRowDefault()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2554, L"LayoutRowDefault", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlLayoutRowType)returnedValue.iVal;
	}

	void PivotTable::put_LayoutRowDefault(Excel::XlLayoutRowType LayoutRowDefault)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = LayoutRowDefault;
		Invoke(1, 2554, L"LayoutRowDefault", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::ListFormulas()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1492, L"ListFormulas", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotTable::get_Location()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_Location(wstring Location)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Location.c_str());
		Invoke(1, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_MDX()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2123, L"MDX", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool PivotTable::get_ManualUpdate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1493, L"ManualUpdate", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ManualUpdate(bool ManualUpdate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ManualUpdate == true) ? 1 : 0;
		Invoke(1, 1493, L"ManualUpdate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_MergeLabels()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1494, L"MergeLabels", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_MergeLabels(bool MergeLabels)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MergeLabels == true) ? 1 : 0;
		Invoke(1, 1494, L"MergeLabels", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_NullString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1495, L"NullString", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_NullString(wstring NullString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NullString.c_str());
		Invoke(1, 1495, L"NullString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotTable::get_PageFieldOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1429, L"PageFieldOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotTable::put_PageFieldOrder(long PageFieldOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PageFieldOrder;
		Invoke(1, 1429, L"PageFieldOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_PageFieldStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1499, L"PageFieldStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_PageFieldStyle(wstring PageFieldStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PageFieldStyle.c_str());
		Invoke(1, 1499, L"PageFieldStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotTable::get_PageFieldWrapCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1430, L"PageFieldWrapCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotTable::put_PageFieldWrapCount(long PageFieldWrapCount)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PageFieldWrapCount;
		Invoke(1, 1430, L"PageFieldWrapCount", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PivotTable::get_PageFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 714, L"PageFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::get_PageFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 714, L"PageFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range PivotTable::get_PageRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 703, L"PageRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range PivotTable::get_PageRangeCells()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1482, L"PageRangeCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotCache PivotTable::PivotCache()
	{
		Excel::PivotCache returnedValue;
		Com::Param param;
		Invoke(0, 1496, L"PivotCache", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape PivotTable::get_PivotChart()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 3067, L"PivotChart", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotAxis PivotTable::get_PivotColumnAxis()
	{
		Excel::PivotAxis returnedValue;
		Com::Param param;
		Invoke(0, 2546, L"PivotColumnAxis", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::PivotFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 718, L"PivotFields", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object PivotTable::PivotFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 718, L"PivotFields", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotFormulas PivotTable::get_PivotFormulas()
	{
		Excel::PivotFormulas returnedValue;
		Com::Param param;
		Invoke(0, 1497, L"PivotFormulas", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotAxis PivotTable::get_PivotRowAxis()
	{
		Excel::PivotAxis returnedValue;
		Com::Param param;
		Invoke(0, 2547, L"PivotRowAxis", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotTable::PivotSelect(wstring Name, Excel::XlPTSelectionMode Mode, _variant_t UseStandardName)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = Mode;
		param[2] = UseStandardName;
		Invoke(3, 1501, L"PivotSelect", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::PivotSelect(wstring Name, Excel::XlPTSelectionMode Mode)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = Mode;
		Invoke(2, 1501, L"PivotSelect", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotTable::get_PivotSelection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1502, L"PivotSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_PivotSelection(wstring PivotSelection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PivotSelection.c_str());
		Invoke(1, 1502, L"PivotSelection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_PivotSelectionStandard()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2089, L"PivotSelectionStandard", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_PivotSelectionStandard(wstring PivotSelectionStandard)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PivotSelectionStandard.c_str());
		Invoke(1, 2089, L"PivotSelectionStandard", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::PivotTableWizard(_variant_t SourceType, _variant_t SourceData, _variant_t TableDestination, _variant_t TableName, _variant_t RowGrand, _variant_t ColumnGrand, _variant_t SaveData, _variant_t HasAutoFormat, _variant_t AutoPage, _variant_t Reserved, _variant_t BackgroundQuery, _variant_t OptimizeCache, _variant_t PageFieldOrder, _variant_t PageFieldWrapCount, _variant_t ReadData, _variant_t Connection)
	{
		_variant_t returnedValue;
		Com::Param param(16);
		param[0] = SourceType;
		param[1] = SourceData;
		param[2] = TableDestination;
		param[3] = TableName;
		param[4] = RowGrand;
		param[5] = ColumnGrand;
		param[6] = SaveData;
		param[7] = HasAutoFormat;
		param[8] = AutoPage;
		param[9] = Reserved;
		param[10] = BackgroundQuery;
		param[11] = OptimizeCache;
		param[12] = PageFieldOrder;
		param[13] = PageFieldWrapCount;
		param[14] = ReadData;
		param[15] = Connection;
		Invoke(16, 684, L"PivotTableWizard", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotTable::PivotTableWizard()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 684, L"PivotTableWizard", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::PivotValueCell PivotTable::PivotValueCell(_variant_t rowline, _variant_t columnline)
	{
		Excel::PivotValueCell returnedValue;
		Com::Param param(2);
		param[0] = rowline;
		param[1] = columnline;
		Invoke(2, 3064, L"PivotValueCell", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotValueCell PivotTable::PivotValueCell()
	{
		Excel::PivotValueCell returnedValue;
		Com::Param param(0);
		Invoke(0, 3064, L"PivotValueCell", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool PivotTable::get_PreserveFormatting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1500, L"PreserveFormatting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_PreserveFormatting(bool PreserveFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PreserveFormatting == true) ? 1 : 0;
		Invoke(1, 1500, L"PreserveFormatting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_PrintDrillIndicators()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2549, L"PrintDrillIndicators", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_PrintDrillIndicators(bool PrintDrillIndicators)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintDrillIndicators == true) ? 1 : 0;
		Invoke(1, 2549, L"PrintDrillIndicators", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_PrintTitles()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1838, L"PrintTitles", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_PrintTitles(bool PrintTitles)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintTitles == true) ? 1 : 0;
		Invoke(1, 1838, L"PrintTitles", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::RefreshDataSourceValues()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2878, L"RefreshDataSourceValues", param, returnedValue, DISPATCH_METHOD);
	}

	Sys::Time PivotTable::get_RefreshDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 696, L"RefreshDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return Sys::Convert::VariantToTime(returnedValue);
	}

	wstring PivotTable::get_RefreshName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 697, L"RefreshName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool PivotTable::RefreshTable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 717, L"RefreshTable", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::RepeatAllLabels(Excel::XlPivotFieldRepeatLabels Repeat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Repeat;
		Invoke(1, 2879, L"RepeatAllLabels", param, returnedValue, DISPATCH_METHOD);
	}

	bool PivotTable::get_RepeatItemsOnEachPrintedPage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1842, L"RepeatItemsOnEachPrintedPage", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_RepeatItemsOnEachPrintedPage(bool RepeatItemsOnEachPrintedPage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RepeatItemsOnEachPrintedPage == true) ? 1 : 0;
		Invoke(1, 1842, L"RepeatItemsOnEachPrintedPage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::RowAxisLayout(Excel::XlLayoutRowType RowLayout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RowLayout;
		Invoke(1, 2556, L"RowAxisLayout", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object PivotTable::get_RowFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 712, L"RowFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::get_RowFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 712, L"RowFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotTable::get_RowGrand()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 693, L"RowGrand", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_RowGrand(bool RowGrand)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RowGrand == true) ? 1 : 0;
		Invoke(1, 693, L"RowGrand", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range PivotTable::get_RowRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 701, L"RowRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotTable::get_SaveData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 692, L"SaveData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_SaveData(bool SaveData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveData == true) ? 1 : 0;
		Invoke(1, 692, L"SaveData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPTSelectionMode PivotTable::get_SelectionMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1503, L"SelectionMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPTSelectionMode)returnedValue.iVal;
	}

	void PivotTable::put_SelectionMode(Excel::XlPTSelectionMode SelectionMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SelectionMode;
		Invoke(1, 1503, L"SelectionMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_ShowCellBackgroundFromOLAP()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2138, L"ShowCellBackgroundFromOLAP", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowCellBackgroundFromOLAP(bool ShowCellBackgroundFromOLAP)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowCellBackgroundFromOLAP == true) ? 1 : 0;
		Invoke(1, 2138, L"ShowCellBackgroundFromOLAP", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_ShowDrillIndicators()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2548, L"ShowDrillIndicators", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowDrillIndicators(bool ShowDrillIndicators)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowDrillIndicators == true) ? 1 : 0;
		Invoke(1, 2548, L"ShowDrillIndicators", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_ShowPageMultipleItemLabel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2130, L"ShowPageMultipleItemLabel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowPageMultipleItemLabel(bool ShowPageMultipleItemLabel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowPageMultipleItemLabel == true) ? 1 : 0;
		Invoke(1, 2130, L"ShowPageMultipleItemLabel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotTable::ShowPages(_variant_t PageField)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PageField;
		Invoke(1, 706, L"ShowPages", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t PivotTable::ShowPages()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 706, L"ShowPages", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool PivotTable::get_ShowTableStyleColumnHeaders()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2567, L"ShowTableStyleColumnHeaders", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowTableStyleColumnHeaders(bool ShowTableStyleColumnHeaders)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleColumnHeaders == true) ? 1 : 0;
		Invoke(1, 2567, L"ShowTableStyleColumnHeaders", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_ShowTableStyleColumnStripes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2565, L"ShowTableStyleColumnStripes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowTableStyleColumnStripes(bool ShowTableStyleColumnStripes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleColumnStripes == true) ? 1 : 0;
		Invoke(1, 2565, L"ShowTableStyleColumnStripes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_ShowTableStyleLastColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2563, L"ShowTableStyleLastColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowTableStyleLastColumn(bool ShowTableStyleLastColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleLastColumn == true) ? 1 : 0;
		Invoke(1, 2563, L"ShowTableStyleLastColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_ShowTableStyleRowHeaders()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2566, L"ShowTableStyleRowHeaders", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowTableStyleRowHeaders(bool ShowTableStyleRowHeaders)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleRowHeaders == true) ? 1 : 0;
		Invoke(1, 2566, L"ShowTableStyleRowHeaders", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_ShowTableStyleRowStripes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2564, L"ShowTableStyleRowStripes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowTableStyleRowStripes(bool ShowTableStyleRowStripes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleRowStripes == true) ? 1 : 0;
		Invoke(1, 2564, L"ShowTableStyleRowStripes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_ShowValuesRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2883, L"ShowValuesRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ShowValuesRow(bool ShowValuesRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowValuesRow == true) ? 1 : 0;
		Invoke(1, 2883, L"ShowValuesRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Slicers PivotTable::get_Slicers()
	{
		Excel::Slicers returnedValue;
		Com::Param param;
		Invoke(0, 2881, L"Slicers", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotTable::get_SmallGrid()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1841, L"SmallGrid", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_SmallGrid(bool SmallGrid)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SmallGrid == true) ? 1 : 0;
		Invoke(1, 1841, L"SmallGrid", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_SortUsingCustomLists()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2574, L"SortUsingCustomLists", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_SortUsingCustomLists(bool SortUsingCustomLists)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SortUsingCustomLists == true) ? 1 : 0;
		Invoke(1, 2574, L"SortUsingCustomLists", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotTable::get_SourceData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotTable::put_SourceData(_variant_t SourceData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = SourceData;
		Invoke(1, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_SubtotalHiddenPageItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1498, L"SubtotalHiddenPageItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_SubtotalHiddenPageItems(bool SubtotalHiddenPageItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SubtotalHiddenPageItems == true) ? 1 : 0;
		Invoke(1, 1498, L"SubtotalHiddenPageItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::SubtotalLocation(Excel::XlSubtototalLocationType Location)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Location;
		Invoke(1, 2558, L"SubtotalLocation", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotTable::get_Summary()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 273, L"Summary", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_Summary(wstring Summary)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Summary.c_str());
		Invoke(1, 273, L"Summary", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range PivotTable::get_TableRange1()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 699, L"TableRange1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range PivotTable::get_TableRange2()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 700, L"TableRange2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PivotTable::get_TableStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1504, L"TableStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_TableStyle(wstring TableStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TableStyle.c_str());
		Invoke(1, 1504, L"TableStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotTable::get_TableStyle2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2562, L"TableStyle2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotTable::put_TableStyle2(_variant_t TableStyle2)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TableStyle2;
		Invoke(1, 2562, L"TableStyle2", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_Tag()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1505, L"Tag", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_Tag(wstring Tag)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Tag.c_str());
		Invoke(1, 1505, L"Tag", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_TotalsAnnotation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1843, L"TotalsAnnotation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_TotalsAnnotation(bool TotalsAnnotation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TotalsAnnotation == true) ? 1 : 0;
		Invoke(1, 1843, L"TotalsAnnotation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::Update()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 680, L"Update", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotTable::get_VacatedStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1506, L"VacatedStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_VacatedStyle(wstring VacatedStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(VacatedStyle.c_str());
		Invoke(1, 1506, L"VacatedStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put_Value(wstring Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Value.c_str());
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotTableVersionList PivotTable::get_Version()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 392, L"Version", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotTableVersionList)returnedValue.iVal;
	}

	bool PivotTable::get_ViewCalculatedMembers()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2124, L"ViewCalculatedMembers", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_ViewCalculatedMembers(bool ViewCalculatedMembers)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ViewCalculatedMembers == true) ? 1 : 0;
		Invoke(1, 2124, L"ViewCalculatedMembers", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PivotTable::get_VisibleFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 710, L"VisibleFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTable::get_VisibleFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 710, L"VisibleFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotTable::get_VisualTotals()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2129, L"VisualTotals", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_VisualTotals(bool VisualTotals)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (VisualTotals == true) ? 1 : 0;
		Invoke(1, 2129, L"VisualTotals", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotTable::get_VisualTotalsForSets()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2882, L"VisualTotalsForSets", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotTable::put_VisualTotalsForSets(bool VisualTotalsForSets)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (VisualTotalsForSets == true) ? 1 : 0;
		Invoke(1, 2882, L"VisualTotalsForSets", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotTable::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotTable::put__Default(wstring _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_Default.c_str());
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotTable::_PivotSelect(wstring Name, Excel::XlPTSelectionMode Mode)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = Mode;
		Invoke(2, 2087, L"_PivotSelect", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________PivotTables
	PivotTables::PivotTables()
	{
	}

	PivotTables::~PivotTables()
	{
	}

	Excel::PivotTable PivotTables::Add(Excel::PivotCache& PivotCache, _variant_t TableDestination, _variant_t TableName, _variant_t ReadData, _variant_t DefaultVersion)
	{
		Excel::PivotTable returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotCache.dispatch.GetInterfacePtr();
		param[1] = TableDestination;
		param[2] = TableName;
		param[3] = ReadData;
		param[4] = DefaultVersion;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotTable PivotTables::Add(Excel::PivotCache& PivotCache, _variant_t TableDestination)
	{
		Excel::PivotTable returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotCache.dispatch.GetInterfacePtr();
		param[1] = TableDestination;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX PivotTables::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotTables::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotTables::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotTable PivotTables::Item(_variant_t Index)
	{
		Excel::PivotTable returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object PivotTables::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotTables::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________PivotField
	PivotField::PivotField()
	{
	}

	PivotField::~PivotField()
	{
	}

	void PivotField::AddPageItem(wstring Item, _variant_t ClearList)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Item.c_str());
		param[1] = ClearList;
		Invoke(2, 2146, L"AddPageItem", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotField::AddPageItem(wstring Item)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Item.c_str());
		Invoke(1, 2146, L"AddPageItem", param, returnedValue, DISPATCH_METHOD);
	}

	bool PivotField::get_AllItemsVisible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2593, L"AllItemsVisible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::ApplicationX PivotField::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::AutoGroup()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3165, L"AutoGroup", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotField::AutoShow(long Type, long Range, long Count, wstring Field)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Type;
		param[1].vt = VT_I4;
		param[1].lVal = Range;
		param[2].vt = VT_I4;
		param[2].lVal = Count;
		param[3].vt = VT_BSTR;
		param[3].bstrVal = _bstr_t(Field.c_str());
		Invoke(4, 1515, L"AutoShow", param, returnedValue, DISPATCH_METHOD);
	}

	long PivotField::get_AutoShowCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1520, L"AutoShowCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring PivotField::get_AutoShowField()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1521, L"AutoShowField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long PivotField::get_AutoShowRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1519, L"AutoShowRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long PivotField::get_AutoShowType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1518, L"AutoShowType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotField::AutoSort(long Order, wstring Field, _variant_t PivotLine, _variant_t CustomSubtotal)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Order;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Field.c_str());
		param[2] = PivotLine;
		param[3] = CustomSubtotal;
		Invoke(4, 1514, L"AutoSort", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotField::AutoSort(long Order, wstring Field)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Order;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Field.c_str());
		Invoke(2, 1514, L"AutoSort", param, returnedValue, DISPATCH_METHOD);
	}

	long PivotField::get_AutoSortCustomSubtotal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2591, L"AutoSortCustomSubtotal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring PivotField::get_AutoSortField()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1517, L"AutoSortField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long PivotField::get_AutoSortOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1516, L"AutoSortOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::PivotLine PivotField::get_AutoSortPivotLine()
	{
		Excel::PivotLine returnedValue;
		Com::Param param;
		Invoke(0, 2590, L"AutoSortPivotLine", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_BaseField()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 734, L"BaseField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::put_BaseField(_variant_t BaseField)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = BaseField;
		Invoke(1, 734, L"BaseField", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotField::get_BaseItem()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 735, L"BaseItem", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::put_BaseItem(_variant_t BaseItem)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = BaseItem;
		Invoke(1, 735, L"BaseItem", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::CalculatedItems PivotField::CalculatedItems()
	{
		Excel::CalculatedItems returnedValue;
		Com::Param param;
		Invoke(0, 1507, L"CalculatedItems", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlPivotFieldCalculation PivotField::get_Calculation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 316, L"Calculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotFieldCalculation)returnedValue.iVal;
	}

	void PivotField::put_Calculation(Excel::XlPivotFieldCalculation Calculation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Calculation;
		Invoke(1, 316, L"Calculation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotField::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::PivotField PivotField::get_ChildField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 736, L"ChildField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_ChildItems(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 730, L"ChildItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_ChildItems()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 730, L"ChildItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::ClearAllFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2561, L"ClearAllFilters", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotField::ClearLabelFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2596, L"ClearLabelFilters", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotField::ClearManualFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2594, L"ClearManualFilter", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotField::ClearValueFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2595, L"ClearValueFilters", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator PivotField::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CubeField PivotField::get_CubeField()
	{
		Excel::CubeField returnedValue;
		Com::Param param;
		Invoke(0, 1851, L"CubeField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_CurrentPage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 738, L"CurrentPage", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::put_CurrentPage(_variant_t CurrentPage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CurrentPage;
		Invoke(1, 738, L"CurrentPage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotField::get_CurrentPageList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2145, L"CurrentPageList", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::put_CurrentPageList(_variant_t CurrentPageList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CurrentPageList;
		Invoke(1, 2145, L"CurrentPageList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotField::get_CurrentPageName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1852, L"CurrentPageName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_CurrentPageName(wstring CurrentPageName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(CurrentPageName.c_str());
		Invoke(1, 1852, L"CurrentPageName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range PivotField::get_DataRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 720, L"DataRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlPivotFieldDataType PivotField::get_DataType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 722, L"DataType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotFieldDataType)returnedValue.iVal;
	}

	bool PivotField::get_DatabaseSort()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2140, L"DatabaseSort", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DatabaseSort(bool DatabaseSort)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DatabaseSort == true) ? 1 : 0;
		Invoke(1, 2140, L"DatabaseSort", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotField::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	bool PivotField::get_DisplayAsCaption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2585, L"DisplayAsCaption", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool PivotField::get_DisplayAsTooltip()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2583, L"DisplayAsTooltip", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DisplayAsTooltip(bool DisplayAsTooltip)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayAsTooltip == true) ? 1 : 0;
		Invoke(1, 2583, L"DisplayAsTooltip", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_DisplayInReport()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2584, L"DisplayInReport", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DisplayInReport(bool DisplayInReport)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayInReport == true) ? 1 : 0;
		Invoke(1, 2584, L"DisplayInReport", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_DragToColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1508, L"DragToColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DragToColumn(bool DragToColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToColumn == true) ? 1 : 0;
		Invoke(1, 1508, L"DragToColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_DragToData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1844, L"DragToData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DragToData(bool DragToData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToData == true) ? 1 : 0;
		Invoke(1, 1844, L"DragToData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_DragToHide()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1509, L"DragToHide", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DragToHide(bool DragToHide)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToHide == true) ? 1 : 0;
		Invoke(1, 1509, L"DragToHide", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_DragToPage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1510, L"DragToPage", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DragToPage(bool DragToPage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToPage == true) ? 1 : 0;
		Invoke(1, 1510, L"DragToPage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_DragToRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1511, L"DragToRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DragToRow(bool DragToRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DragToRow == true) ? 1 : 0;
		Invoke(1, 1511, L"DragToRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotField::DrillTo(wstring Field)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Field.c_str());
		Invoke(1, 2580, L"DrillTo", param, returnedValue, DISPATCH_METHOD);
	}

	bool PivotField::get_DrilledDown()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1850, L"DrilledDown", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_DrilledDown(bool DrilledDown)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DrilledDown == true) ? 1 : 0;
		Invoke(1, 1850, L"DrilledDown", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_EnableItemSelection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2144, L"EnableItemSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_EnableItemSelection(bool EnableItemSelection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableItemSelection == true) ? 1 : 0;
		Invoke(1, 2144, L"EnableItemSelection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_EnableMultiplePageItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2184, L"EnableMultiplePageItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_EnableMultiplePageItems(bool EnableMultiplePageItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableMultiplePageItems == true) ? 1 : 0;
		Invoke(1, 2184, L"EnableMultiplePageItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotField::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlConsolidationFunction PivotField::get_Function()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 899, L"Function", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlConsolidationFunction)returnedValue.iVal;
	}

	void PivotField::put_Function(Excel::XlConsolidationFunction Function)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Function;
		Invoke(1, 899, L"Function", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotField::get_GroupLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 723, L"GroupLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotField::get_Hidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_Hidden(bool Hidden)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Hidden == true) ? 1 : 0;
		Invoke(1, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotField::get_HiddenItems(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 728, L"HiddenItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_HiddenItems()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 728, L"HiddenItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_HiddenItemsList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2139, L"HiddenItemsList", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::put_HiddenItemsList(_variant_t HiddenItemsList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HiddenItemsList;
		Invoke(1, 2139, L"HiddenItemsList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_IncludeNewItemsInFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2587, L"IncludeNewItemsInFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_IncludeNewItemsInFilter(bool IncludeNewItemsInFilter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeNewItemsInFilter == true) ? 1 : 0;
		Invoke(1, 2587, L"IncludeNewItemsInFilter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_IsCalculated()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1512, L"IsCalculated", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool PivotField::get_IsMemberProperty()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2141, L"IsMemberProperty", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::Range PivotField::get_LabelRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 719, L"LabelRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotField::get_LayoutBlankLine()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1845, L"LayoutBlankLine", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_LayoutBlankLine(bool LayoutBlankLine)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LayoutBlankLine == true) ? 1 : 0;
		Invoke(1, 1845, L"LayoutBlankLine", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_LayoutCompactRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2586, L"LayoutCompactRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_LayoutCompactRow(bool LayoutCompactRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LayoutCompactRow == true) ? 1 : 0;
		Invoke(1, 2586, L"LayoutCompactRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlLayoutFormType PivotField::get_LayoutForm()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1848, L"LayoutForm", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlLayoutFormType)returnedValue.iVal;
	}

	void PivotField::put_LayoutForm(Excel::XlLayoutFormType LayoutForm)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = LayoutForm;
		Invoke(1, 1848, L"LayoutForm", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_LayoutPageBreak()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1847, L"LayoutPageBreak", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_LayoutPageBreak(bool LayoutPageBreak)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LayoutPageBreak == true) ? 1 : 0;
		Invoke(1, 1847, L"LayoutPageBreak", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSubtototalLocationType PivotField::get_LayoutSubtotalLocation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1846, L"LayoutSubtotalLocation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSubtototalLocationType)returnedValue.iVal;
	}

	void PivotField::put_LayoutSubtotalLocation(Excel::XlSubtototalLocationType LayoutSubtotalLocation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = LayoutSubtotalLocation;
		Invoke(1, 1846, L"LayoutSubtotalLocation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotField::get_MemberPropertyCaption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2582, L"MemberPropertyCaption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_MemberPropertyCaption(wstring MemberPropertyCaption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(MemberPropertyCaption.c_str());
		Invoke(1, 2582, L"MemberPropertyCaption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotField::get_MemoryUsed()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 372, L"MemoryUsed", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring PivotField::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotField::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_NumberFormat(wstring NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NumberFormat.c_str());
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotFieldOrientation PivotField::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotFieldOrientation)returnedValue.iVal;
	}

	void PivotField::put_Orientation(Excel::XlPivotFieldOrientation Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PivotField::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotField PivotField::get_ParentField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 732, L"ParentField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_ParentItems(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 729, L"ParentItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_ParentItems()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 729, L"ParentItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotFilters PivotField::get_PivotFilters()
	{
		Excel::PivotFilters returnedValue;
		Com::Param param;
		Invoke(0, 2589, L"PivotFilters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::PivotItems(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 737, L"PivotItems", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t PivotField::PivotItems()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 737, L"PivotItems", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t PivotField::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::put_Position(_variant_t Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotField::get_PropertyOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2143, L"PropertyOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotField::put_PropertyOrder(long PropertyOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PropertyOrder;
		Invoke(1, 2143, L"PropertyOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::PivotField PivotField::get_PropertyParentField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 2142, L"PropertyParentField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotField::get_RepeatLabels()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2885, L"RepeatLabels", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_RepeatLabels(bool RepeatLabels)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RepeatLabels == true) ? 1 : 0;
		Invoke(1, 2885, L"RepeatLabels", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_ServerBased()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1513, L"ServerBased", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_ServerBased(bool ServerBased)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ServerBased == true) ? 1 : 0;
		Invoke(1, 1513, L"ServerBased", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_ShowAllItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 452, L"ShowAllItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_ShowAllItems(bool ShowAllItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAllItems == true) ? 1 : 0;
		Invoke(1, 452, L"ShowAllItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_ShowDetail()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 585, L"ShowDetail", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_ShowDetail(bool ShowDetail)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowDetail == true) ? 1 : 0;
		Invoke(1, 585, L"ShowDetail", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotField::get_ShowingInAxis()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2592, L"ShowingInAxis", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring PivotField::get_SourceCaption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2599, L"SourceCaption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring PivotField::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring PivotField::get_StandardFormula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2084, L"StandardFormula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_StandardFormula(wstring StandardFormula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(StandardFormula.c_str());
		Invoke(1, 2084, L"StandardFormula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotField::get_SubtotalName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1849, L"SubtotalName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_SubtotalName(wstring SubtotalName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SubtotalName.c_str());
		Invoke(1, 1849, L"SubtotalName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotField::get_Subtotals(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 733, L"Subtotals", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_Subtotals()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 733, L"Subtotals", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::put_Subtotals(_variant_t Subtotals, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Subtotals;
		param[1] = Index;
		Invoke(2, 733, L"Subtotals", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotField::put_Subtotals(_variant_t Subtotals)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Subtotals;
		Invoke(1, 733, L"Subtotals", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotField::get_TotalLevels()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 724, L"TotalLevels", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotField::get_UseMemberPropertyAsCaption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2581, L"UseMemberPropertyAsCaption", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotField::put_UseMemberPropertyAsCaption(bool UseMemberPropertyAsCaption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseMemberPropertyAsCaption == true) ? 1 : 0;
		Invoke(1, 2581, L"UseMemberPropertyAsCaption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotField::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put_Value(wstring Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Value.c_str());
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotField::get_VisibleItems(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 727, L"VisibleItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_VisibleItems()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 727, L"VisibleItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotField::get_VisibleItemsList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2588, L"VisibleItemsList", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotField::put_VisibleItemsList(_variant_t VisibleItemsList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VisibleItemsList;
		Invoke(1, 2588, L"VisibleItemsList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PivotField::_AutoSort(long Order, wstring Field)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Order;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Field.c_str());
		Invoke(2, 2579, L"_AutoSort", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotField::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotField::put__Default(wstring _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_Default.c_str());
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________PivotFields
	PivotFields::PivotFields()
	{
	}

	PivotFields::~PivotFields()
	{
	}

	Excel::ApplicationX PivotFields::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotFields::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotFields::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object PivotFields::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotTable PivotFields::get_Parent()
	{
		Excel::PivotTable returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotFields::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________CalculatedFields
	CalculatedFields::CalculatedFields()
	{
	}

	CalculatedFields::~CalculatedFields()
	{
	}

	Excel::PivotField CalculatedFields::Add(wstring Name, wstring Formula, _variant_t UseStandardFormula)
	{
		Excel::PivotField returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		param[2] = UseStandardFormula;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotField CalculatedFields::Add(wstring Name, wstring Formula)
	{
		Excel::PivotField returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX CalculatedFields::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long CalculatedFields::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator CalculatedFields::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotField CalculatedFields::Item(_variant_t Index)
	{
		Excel::PivotField returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object CalculatedFields::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotField CalculatedFields::_Add(wstring Name, wstring Formula)
	{
		Excel::PivotField returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		Invoke(2, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotField CalculatedFields::get__Default(_variant_t Field)
	{
		Excel::PivotField returnedValue;
		Com::Param param(1);
		param[0] = Field;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr CalculatedFields::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________PivotItem
	PivotItem::PivotItem()
	{
	}

	PivotItem::~PivotItem()
	{
	}

	Excel::ApplicationX PivotItem::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PivotItem::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotItem::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotItem::get_ChildItems(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 730, L"ChildItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotItem::get_ChildItems()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 730, L"ChildItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PivotItem::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Range PivotItem::get_DataRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 720, L"DataRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotItem::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotItem::DrillTo(wstring Field)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Field.c_str());
		Invoke(1, 2580, L"DrillTo", param, returnedValue, DISPATCH_METHOD);
	}

	bool PivotItem::get_DrilledDown()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1850, L"DrilledDown", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotItem::put_DrilledDown(bool DrilledDown)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DrilledDown == true) ? 1 : 0;
		Invoke(1, 1850, L"DrilledDown", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotItem::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotItem::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotItem::get_IsCalculated()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1512, L"IsCalculated", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::Range PivotItem::get_LabelRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 719, L"LabelRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PivotItem::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotItem::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::PivotField PivotItem::get_Parent()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotItem PivotItem::get_ParentItem()
	{
		Excel::PivotItem returnedValue;
		Com::Param param;
		Invoke(0, 741, L"ParentItem", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotItem::get_ParentShowDetail()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 739, L"ParentShowDetail", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long PivotItem::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotItem::put_Position(long Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long PivotItem::get_RecordCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1478, L"RecordCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool PivotItem::get_ShowDetail()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 585, L"ShowDetail", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotItem::put_ShowDetail(bool ShowDetail)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowDetail == true) ? 1 : 0;
		Invoke(1, 585, L"ShowDetail", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PivotItem::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PivotItem::get_SourceNameStandard()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2148, L"SourceNameStandard", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring PivotItem::get_StandardFormula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2084, L"StandardFormula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotItem::put_StandardFormula(wstring StandardFormula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(StandardFormula.c_str());
		Invoke(1, 2084, L"StandardFormula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotItem::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotItem::put_Value(wstring Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Value.c_str());
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PivotItem::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotItem::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PivotItem::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotItem::put__Default(wstring _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_Default.c_str());
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________PivotItems
	PivotItems::PivotItems()
	{
	}

	PivotItems::~PivotItems()
	{
	}

	void PivotItems::Add(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX PivotItems::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotItems::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotItems::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object PivotItems::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotField PivotItems::get_Parent()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotItems::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________CalculatedItems
	CalculatedItems::CalculatedItems()
	{
	}

	CalculatedItems::~CalculatedItems()
	{
	}

	Excel::PivotItem CalculatedItems::Add(wstring Name, wstring Formula, _variant_t UseStandardFormula)
	{
		Excel::PivotItem returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		param[2] = UseStandardFormula;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotItem CalculatedItems::Add(wstring Name, wstring Formula)
	{
		Excel::PivotItem returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX CalculatedItems::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long CalculatedItems::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator CalculatedItems::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotItem CalculatedItems::Item(_variant_t Index)
	{
		Excel::PivotItem returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object CalculatedItems::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotItem CalculatedItems::_Add(wstring Name, wstring Formula)
	{
		Excel::PivotItem returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		Invoke(2, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotItem CalculatedItems::get__Default(_variant_t Field)
	{
		Excel::PivotItem returnedValue;
		Com::Param param(1);
		param[0] = Field;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr CalculatedItems::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Characters
	Characters::Characters()
	{
	}

	Characters::~Characters()
	{
	}

	Excel::ApplicationX Characters::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Characters::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Characters::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Characters::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Characters::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Characters::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Font Characters::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Characters::Insert(wstring String)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(String.c_str());
		Invoke(1, 252, L"Insert", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Characters::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Characters::get_PhoneticCharacters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1522, L"PhoneticCharacters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Characters::put_PhoneticCharacters(wstring PhoneticCharacters)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PhoneticCharacters.c_str());
		Invoke(1, 1522, L"PhoneticCharacters", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Characters::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Characters::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Dialogs
	Dialogs::Dialogs()
	{
	}

	Dialogs::~Dialogs()
	{
	}

	Excel::ApplicationX Dialogs::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Dialogs::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Dialogs::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Dialog Dialogs::get_Item(Excel::XlBuiltInDialog Index)
	{
		Excel::Dialog returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Dialogs::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Dialog Dialogs::get__Default(Excel::XlBuiltInDialog Index)
	{
		Excel::Dialog returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Dialogs::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Dialog
	Dialog::Dialog()
	{
	}

	Dialog::~Dialog()
	{
	}

	Excel::ApplicationX Dialog::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Dialog::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object Dialog::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Dialog::Show(_variant_t Arg1, _variant_t Arg2, _variant_t Arg3, _variant_t Arg4, _variant_t Arg5, _variant_t Arg6, _variant_t Arg7, _variant_t Arg8, _variant_t Arg9, _variant_t Arg10, _variant_t Arg11, _variant_t Arg12, _variant_t Arg13, _variant_t Arg14, _variant_t Arg15, _variant_t Arg16, _variant_t Arg17, _variant_t Arg18, _variant_t Arg19, _variant_t Arg20, _variant_t Arg21, _variant_t Arg22, _variant_t Arg23, _variant_t Arg24, _variant_t Arg25, _variant_t Arg26, _variant_t Arg27, _variant_t Arg28, _variant_t Arg29, _variant_t Arg30)
	{
		_variant_t returnedValue;
		Com::Param param(30);
		param[0] = Arg1;
		param[1] = Arg2;
		param[2] = Arg3;
		param[3] = Arg4;
		param[4] = Arg5;
		param[5] = Arg6;
		param[6] = Arg7;
		param[7] = Arg8;
		param[8] = Arg9;
		param[9] = Arg10;
		param[10] = Arg11;
		param[11] = Arg12;
		param[12] = Arg13;
		param[13] = Arg14;
		param[14] = Arg15;
		param[15] = Arg16;
		param[16] = Arg17;
		param[17] = Arg18;
		param[18] = Arg19;
		param[19] = Arg20;
		param[20] = Arg21;
		param[21] = Arg22;
		param[22] = Arg23;
		param[23] = Arg24;
		param[24] = Arg25;
		param[25] = Arg26;
		param[26] = Arg27;
		param[27] = Arg28;
		param[28] = Arg29;
		param[29] = Arg30;
		Invoke(30, 496, L"Show", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool Dialog::Show()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 496, L"Show", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	//________________________________________________________SoundNote
	SoundNote::SoundNote()
	{
	}

	SoundNote::~SoundNote()
	{
	}

	Excel::ApplicationX SoundNote::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SoundNote::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t SoundNote::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t SoundNote::Import(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 917, L"Import", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object SoundNote::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t SoundNote::Play()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 918, L"Play", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t SoundNote::Record()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 919, L"Record", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________Button
	Button::Button()
	{
	}

	Button::~Button()
	{
	}

	_variant_t Button::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Button::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Button::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Button::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Button::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Button::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Button::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Button::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Button::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Button::get_CancelButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 858, L"CancelButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_CancelButton(bool CancelButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CancelButton == true) ? 1 : 0;
		Invoke(1, 858, L"CancelButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Button::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Button::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Button::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Button::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Button::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Button::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Button::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Button::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Button::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Button::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Button::get_DefaultButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 857, L"DefaultButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_DefaultButton(bool DefaultButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DefaultButton == true) ? 1 : 0;
		Invoke(1, 857, L"DefaultButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Button::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Button::get_DismissButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 859, L"DismissButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_DismissButton(bool DismissButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DismissButton == true) ? 1 : 0;
		Invoke(1, 859, L"DismissButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Button::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Button::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Button::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Button::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Button::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Button::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Button::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Button::get_HelpButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 860, L"HelpButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_HelpButton(bool HelpButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HelpButton == true) ? 1 : 0;
		Invoke(1, 860, L"HelpButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Button::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Button::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Button::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double Button::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Button::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Button::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Button::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Button::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Button::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Button::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Button::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Button::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Button::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Button::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Button::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Button::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Button::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Button::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Button::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Button::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Button::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Button::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Button::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Button::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Button::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Button::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Button::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Button::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Button::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Button::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Button::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Button::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Button::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Button::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Button::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Button::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Button::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Buttons
	Buttons::Buttons()
	{
	}

	Buttons::~Buttons()
	{
	}

	_variant_t Buttons::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Buttons::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Button Buttons::Add(double Left, double Top, double Width, double Height)
	{
		Excel::Button returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Buttons::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Buttons::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Buttons::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Buttons::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Buttons::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Buttons::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Buttons::get_CancelButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 858, L"CancelButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_CancelButton(bool CancelButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CancelButton == true) ? 1 : 0;
		Invoke(1, 858, L"CancelButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Buttons::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Buttons::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Buttons::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Buttons::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Buttons::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Buttons::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Buttons::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Buttons::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Buttons::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Buttons::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Buttons::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Buttons::get_DefaultButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 857, L"DefaultButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_DefaultButton(bool DefaultButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DefaultButton == true) ? 1 : 0;
		Invoke(1, 857, L"DefaultButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Buttons::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Buttons::get_DismissButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 859, L"DismissButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_DismissButton(bool DismissButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DismissButton == true) ? 1 : 0;
		Invoke(1, 859, L"DismissButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Buttons::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Buttons::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Buttons::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Buttons::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Buttons::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Buttons::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Buttons::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Buttons::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Buttons::get_HelpButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 860, L"HelpButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_HelpButton(bool HelpButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HelpButton == true) ? 1 : 0;
		Invoke(1, 860, L"HelpButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Buttons::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Buttons::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Buttons::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Buttons::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Buttons::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Buttons::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Buttons::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Buttons::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Buttons::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Buttons::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Buttons::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Buttons::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Buttons::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Buttons::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Buttons::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Buttons::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Buttons::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Buttons::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Buttons::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Buttons::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Buttons::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Buttons::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Buttons::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Buttons::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Buttons::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Buttons::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Buttons::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Buttons::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Buttons::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Buttons::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Buttons::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Buttons::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Buttons::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Buttons::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Buttons::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Buttons::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Buttons::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Buttons::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Buttons::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________CheckBox
	CheckBox::CheckBox()
	{
	}

	CheckBox::~CheckBox()
	{
	}

	_variant_t CheckBox::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CheckBox::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX CheckBox::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border CheckBox::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range CheckBox::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CheckBox::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring CheckBox::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBox::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters CheckBox::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters CheckBox::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CheckBox::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBox::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBox::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBox::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator CheckBox::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t CheckBox::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBox::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool CheckBox::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBox::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object CheckBox::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool CheckBox::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBox::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double CheckBox::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void CheckBox::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long CheckBox::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior CheckBox::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double CheckBox::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void CheckBox::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring CheckBox::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBox::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CheckBox::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBox::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CheckBox::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBox::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring CheckBox::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBox::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring CheckBox::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBox::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object CheckBox::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CheckBox::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CheckBox::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CheckBox::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CheckBox::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CheckBox::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBox::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CheckBox::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBox::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBox::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange CheckBox::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring CheckBox::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBox::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double CheckBox::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void CheckBox::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range CheckBox::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CheckBox::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CheckBox::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CheckBox::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBox::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double CheckBox::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void CheckBox::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long CheckBox::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long CheckBox::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void CheckBox::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________CheckBoxes
	CheckBoxes::CheckBoxes()
	{
	}

	CheckBoxes::~CheckBoxes()
	{
	}

	_variant_t CheckBoxes::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CheckBoxes::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::CheckBox CheckBoxes::Add(double Left, double Top, double Width, double Height)
	{
		Excel::CheckBox returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX CheckBoxes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border CheckBoxes::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CheckBoxes::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring CheckBoxes::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBoxes::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters CheckBoxes::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters CheckBoxes::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CheckBoxes::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBoxes::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBoxes::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBoxes::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long CheckBoxes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator CheckBoxes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t CheckBoxes::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBoxes::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool CheckBoxes::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBoxes::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object CheckBoxes::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool CheckBoxes::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBoxes::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject CheckBoxes::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double CheckBoxes::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void CheckBoxes::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior CheckBoxes::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object CheckBoxes::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double CheckBoxes::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void CheckBoxes::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring CheckBoxes::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBoxes::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CheckBoxes::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBoxes::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CheckBoxes::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBoxes::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring CheckBoxes::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBoxes::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object CheckBoxes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CheckBoxes::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CheckBoxes::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CheckBoxes::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CheckBoxes::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CheckBoxes::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBoxes::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CheckBoxes::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBoxes::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t CheckBoxes::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange CheckBoxes::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring CheckBoxes::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CheckBoxes::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double CheckBoxes::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void CheckBoxes::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CheckBoxes::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CheckBoxes::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CheckBoxes::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CheckBoxes::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double CheckBoxes::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void CheckBoxes::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long CheckBoxes::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long CheckBoxes::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void CheckBoxes::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void CheckBoxes::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void CheckBoxes::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void CheckBoxes::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void CheckBoxes::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr CheckBoxes::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________OptionButton
	OptionButton::OptionButton()
	{
	}

	OptionButton::~OptionButton()
	{
	}

	_variant_t OptionButton::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OptionButton::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX OptionButton::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border OptionButton::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range OptionButton::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OptionButton::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring OptionButton::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButton::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters OptionButton::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters OptionButton::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OptionButton::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButton::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButton::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButton::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator OptionButton::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t OptionButton::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButton::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OptionButton::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButton::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object OptionButton::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OptionButton::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButton::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupBox OptionButton::get_GroupBox()
	{
		Excel::GroupBox returnedValue;
		Com::Param param;
		Invoke(0, 833, L"GroupBox", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double OptionButton::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OptionButton::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long OptionButton::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior OptionButton::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double OptionButton::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OptionButton::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OptionButton::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButton::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OptionButton::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButton::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OptionButton::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButton::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OptionButton::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButton::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OptionButton::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButton::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object OptionButton::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OptionButton::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OptionButton::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OptionButton::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OptionButton::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OptionButton::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButton::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OptionButton::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButton::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButton::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange OptionButton::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring OptionButton::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButton::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OptionButton::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OptionButton::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range OptionButton::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OptionButton::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OptionButton::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OptionButton::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButton::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OptionButton::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OptionButton::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long OptionButton::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long OptionButton::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void OptionButton::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________OptionButtons
	OptionButtons::OptionButtons()
	{
	}

	OptionButtons::~OptionButtons()
	{
	}

	_variant_t OptionButtons::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OptionButtons::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::OptionButton OptionButtons::Add(double Left, double Top, double Width, double Height)
	{
		Excel::OptionButton returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX OptionButtons::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border OptionButtons::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OptionButtons::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring OptionButtons::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButtons::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters OptionButtons::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters OptionButtons::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OptionButtons::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButtons::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButtons::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButtons::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long OptionButtons::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator OptionButtons::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t OptionButtons::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButtons::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OptionButtons::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButtons::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object OptionButtons::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OptionButtons::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButtons::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject OptionButtons::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::GroupBox OptionButtons::get_GroupBox()
	{
		Excel::GroupBox returnedValue;
		Com::Param param;
		Invoke(0, 833, L"GroupBox", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double OptionButtons::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OptionButtons::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior OptionButtons::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object OptionButtons::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double OptionButtons::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OptionButtons::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OptionButtons::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButtons::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OptionButtons::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButtons::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OptionButtons::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButtons::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OptionButtons::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButtons::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object OptionButtons::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OptionButtons::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OptionButtons::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OptionButtons::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OptionButtons::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OptionButtons::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButtons::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OptionButtons::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButtons::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OptionButtons::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange OptionButtons::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring OptionButtons::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OptionButtons::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OptionButtons::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OptionButtons::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OptionButtons::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OptionButtons::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OptionButtons::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OptionButtons::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OptionButtons::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OptionButtons::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long OptionButtons::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long OptionButtons::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void OptionButtons::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void OptionButtons::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void OptionButtons::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void OptionButtons::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void OptionButtons::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr OptionButtons::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________EditBox
	EditBox::EditBox()
	{
	}

	EditBox::~EditBox()
	{
	}

	Excel::ApplicationX EditBox::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range EditBox::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t EditBox::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring EditBox::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void EditBox::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters EditBox::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters EditBox::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t EditBox::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBox::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBox::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBox::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator EditBox::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t EditBox::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBox::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool EditBox::get_DisplayVerticalScrollBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 922, L"DisplayVerticalScrollBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBox::put_DisplayVerticalScrollBar(bool DisplayVerticalScrollBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayVerticalScrollBar == true) ? 1 : 0;
		Invoke(1, 922, L"DisplayVerticalScrollBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object EditBox::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool EditBox::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBox::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double EditBox::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void EditBox::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long EditBox::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long EditBox::get_InputType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 854, L"InputType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void EditBox::put_InputType(long InputType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = InputType;
		Invoke(1, 854, L"InputType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double EditBox::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void EditBox::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring EditBox::get_LinkedObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 862, L"LinkedObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool EditBox::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBox::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool EditBox::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBox::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool EditBox::get_MultiLine()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 855, L"MultiLine", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBox::put_MultiLine(bool MultiLine)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MultiLine == true) ? 1 : 0;
		Invoke(1, 855, L"MultiLine", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring EditBox::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void EditBox::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring EditBox::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void EditBox::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object EditBox::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool EditBox::get_PasswordEdit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1162, L"PasswordEdit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBox::put_PasswordEdit(bool PasswordEdit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PasswordEdit == true) ? 1 : 0;
		Invoke(1, 1162, L"PasswordEdit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t EditBox::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void EditBox::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool EditBox::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBox::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t EditBox::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBox::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBox::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange EditBox::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring EditBox::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void EditBox::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double EditBox::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void EditBox::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range EditBox::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool EditBox::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBox::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double EditBox::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void EditBox::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long EditBox::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________EditBoxes
	EditBoxes::EditBoxes()
	{
	}

	EditBoxes::~EditBoxes()
	{
	}

	Excel::EditBox EditBoxes::Add(double Left, double Top, double Width, double Height)
	{
		Excel::EditBox returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX EditBoxes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t EditBoxes::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring EditBoxes::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void EditBoxes::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters EditBoxes::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters EditBoxes::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t EditBoxes::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBoxes::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBoxes::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBoxes::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long EditBoxes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator EditBoxes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t EditBoxes::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBoxes::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool EditBoxes::get_DisplayVerticalScrollBar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 922, L"DisplayVerticalScrollBar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBoxes::put_DisplayVerticalScrollBar(bool DisplayVerticalScrollBar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayVerticalScrollBar == true) ? 1 : 0;
		Invoke(1, 922, L"DisplayVerticalScrollBar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object EditBoxes::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool EditBoxes::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBoxes::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject EditBoxes::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double EditBoxes::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void EditBoxes::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long EditBoxes::get_InputType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 854, L"InputType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void EditBoxes::put_InputType(long InputType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = InputType;
		Invoke(1, 854, L"InputType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t EditBoxes::Item(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double EditBoxes::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void EditBoxes::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool EditBoxes::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBoxes::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool EditBoxes::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBoxes::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool EditBoxes::get_MultiLine()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 855, L"MultiLine", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBoxes::put_MultiLine(bool MultiLine)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MultiLine == true) ? 1 : 0;
		Invoke(1, 855, L"MultiLine", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring EditBoxes::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void EditBoxes::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object EditBoxes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool EditBoxes::get_PasswordEdit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1162, L"PasswordEdit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBoxes::put_PasswordEdit(bool PasswordEdit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PasswordEdit == true) ? 1 : 0;
		Invoke(1, 1162, L"PasswordEdit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t EditBoxes::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void EditBoxes::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool EditBoxes::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBoxes::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t EditBoxes::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBoxes::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t EditBoxes::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange EditBoxes::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring EditBoxes::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void EditBoxes::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double EditBoxes::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void EditBoxes::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool EditBoxes::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void EditBoxes::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double EditBoxes::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void EditBoxes::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long EditBoxes::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void EditBoxes::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void EditBoxes::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void EditBoxes::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void EditBoxes::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void EditBoxes::_Dummy34()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65570, L"_Dummy34", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr EditBoxes::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________ScrollBar
	ScrollBar::ScrollBar()
	{
	}

	ScrollBar::~ScrollBar()
	{
	}

	Excel::ApplicationX ScrollBar::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ScrollBar::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ScrollBar::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBar::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBar::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator ScrollBar::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t ScrollBar::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBar::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ScrollBar::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBar::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ScrollBar::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ScrollBar::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBar::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ScrollBar::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ScrollBar::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ScrollBar::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ScrollBar::get_LargeChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 845, L"LargeChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBar::put_LargeChange(long LargeChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = LargeChange;
		Invoke(1, 845, L"LargeChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ScrollBar::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ScrollBar::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ScrollBar::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ScrollBar::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ScrollBar::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBar::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ScrollBar::get_Max()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBar::put_Max(long Max)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Max;
		Invoke(1, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ScrollBar::get_Min()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBar::put_Min(long Min)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Min;
		Invoke(1, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ScrollBar::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ScrollBar::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ScrollBar::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ScrollBar::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ScrollBar::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ScrollBar::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ScrollBar::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ScrollBar::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBar::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ScrollBar::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBar::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBar::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange ScrollBar::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ScrollBar::get_SmallChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBar::put_SmallChange(long SmallChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SmallChange;
		Invoke(1, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ScrollBar::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ScrollBar::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range ScrollBar::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ScrollBar::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBar::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ScrollBar::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBar::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ScrollBar::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ScrollBar::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ScrollBar::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ScrollBar::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBar::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ScrollBars
	ScrollBars::ScrollBars()
	{
	}

	ScrollBars::~ScrollBars()
	{
	}

	Excel::ScrollBar ScrollBars::Add(double Left, double Top, double Width, double Height)
	{
		Excel::ScrollBar returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ScrollBars::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ScrollBars::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBars::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBars::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ScrollBars::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ScrollBars::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t ScrollBars::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBars::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ScrollBars::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBars::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ScrollBars::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ScrollBars::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBars::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject ScrollBars::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double ScrollBars::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ScrollBars::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ScrollBars::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ScrollBars::get_LargeChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 845, L"LargeChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBars::put_LargeChange(long LargeChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = LargeChange;
		Invoke(1, 845, L"LargeChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ScrollBars::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ScrollBars::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ScrollBars::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ScrollBars::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ScrollBars::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBars::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ScrollBars::get_Max()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBars::put_Max(long Max)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Max;
		Invoke(1, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ScrollBars::get_Min()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBars::put_Min(long Min)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Min;
		Invoke(1, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ScrollBars::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ScrollBars::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ScrollBars::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ScrollBars::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ScrollBars::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ScrollBars::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBars::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ScrollBars::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBars::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ScrollBars::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange ScrollBars::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ScrollBars::get_SmallChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBars::put_SmallChange(long SmallChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SmallChange;
		Invoke(1, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ScrollBars::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ScrollBars::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ScrollBars::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBars::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ScrollBars::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ScrollBars::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ScrollBars::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ScrollBars::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ScrollBars::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ScrollBars::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ScrollBars::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ScrollBars::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void ScrollBars::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void ScrollBars::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void ScrollBars::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr ScrollBars::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________ListBox
	ListBox::ListBox()
	{
	}

	ListBox::~ListBox()
	{
	}

	_variant_t ListBox::AddItem(_variant_t Text, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Text;
		param[1] = Index;
		Invoke(2, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::AddItem(_variant_t Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Text;
		Invoke(1, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ListBox::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ListBox::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBox::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator ListBox::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t ListBox::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ListBox::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBox::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ListBox::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ListBox::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBox::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ListBox::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ListBox::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBox::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double ListBox::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ListBox::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ListBox::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListBox::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ListBox::get_LinkedObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 862, L"LinkedObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBox::get_List(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBox::get_List()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListBox::put_List(_variant_t List, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = List;
		param[1] = Index;
		Invoke(2, 861, L"List", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ListBox::put_List(_variant_t List)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = List;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBox::get_ListCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 849, L"ListCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring ListBox::get_ListFillRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListBox::put_ListFillRange(wstring ListFillRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ListFillRange.c_str());
		Invoke(1, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBox::get_ListIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ListBox::put_ListIndex(long ListIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListIndex;
		Invoke(1, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListBox::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBox::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBox::get_MultiSelect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 32, L"MultiSelect", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ListBox::put_MultiSelect(long MultiSelect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MultiSelect;
		Invoke(1, 32, L"MultiSelect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ListBox::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListBox::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ListBox::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListBox::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ListBox::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBox::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListBox::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListBox::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBox::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ListBox::RemoveAllItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 853, L"RemoveAllItems", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::RemoveItem(long Index, _variant_t Count)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		param[1] = Count;
		Invoke(2, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::RemoveItem(long Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBox::get_Selected(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBox::get_Selected()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListBox::put_Selected(_variant_t Selected, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Selected;
		param[1] = Index;
		Invoke(2, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ListBox::put_Selected(_variant_t Selected)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Selected;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ListBox::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange ListBox::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ListBox::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ListBox::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range ListBox::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ListBox::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ListBox::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListBox::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBox::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ListBox::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ListBox::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBox::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ListBox::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ListBox::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ListBoxes
	ListBoxes::ListBoxes()
	{
	}

	ListBoxes::~ListBoxes()
	{
	}

	Excel::ListBox ListBoxes::Add(double Left, double Top, double Width, double Height)
	{
		Excel::ListBox returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::AddItem(_variant_t Text, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Text;
		param[1] = Index;
		Invoke(2, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::AddItem(_variant_t Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Text;
		Invoke(1, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ListBoxes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBoxes::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ListBoxes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ListBoxes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t ListBoxes::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ListBoxes::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBoxes::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ListBoxes::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ListBoxes::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBoxes::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject ListBoxes::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double ListBoxes::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ListBoxes::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ListBoxes::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double ListBoxes::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ListBoxes::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ListBoxes::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListBoxes::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ListBoxes::get_List(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBoxes::get_List()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListBoxes::put_List(_variant_t List, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = List;
		param[1] = Index;
		Invoke(2, 861, L"List", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ListBoxes::put_List(_variant_t List)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = List;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ListBoxes::get_ListFillRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListBoxes::put_ListFillRange(wstring ListFillRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ListFillRange.c_str());
		Invoke(1, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBoxes::get_ListIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ListBoxes::put_ListIndex(long ListIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListIndex;
		Invoke(1, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListBoxes::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBoxes::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBoxes::get_MultiSelect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 32, L"MultiSelect", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ListBoxes::put_MultiSelect(long MultiSelect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MultiSelect;
		Invoke(1, 32, L"MultiSelect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ListBoxes::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListBoxes::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ListBoxes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBoxes::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListBoxes::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListBoxes::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBoxes::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ListBoxes::RemoveAllItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 853, L"RemoveAllItems", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::RemoveItem(long Index, _variant_t Count)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		param[1] = Count;
		Invoke(2, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::RemoveItem(long Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ListBoxes::get_Selected(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListBoxes::get_Selected()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListBoxes::put_Selected(_variant_t Selected, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Selected;
		param[1] = Index;
		Invoke(2, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ListBoxes::put_Selected(_variant_t Selected)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Selected;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ListBoxes::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange ListBoxes::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ListBoxes::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ListBoxes::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBoxes::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ListBoxes::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListBoxes::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListBoxes::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ListBoxes::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ListBoxes::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ListBoxes::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ListBoxes::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ListBoxes::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ListBoxes::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void ListBoxes::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void ListBoxes::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void ListBoxes::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void ListBoxes::_Dummy31()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65567, L"_Dummy31", param, returnedValue, DISPATCH_METHOD);
	}

	void ListBoxes::_Dummy33()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65569, L"_Dummy33", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr ListBoxes::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________GroupBox
	GroupBox::GroupBox()
	{
	}

	GroupBox::~GroupBox()
	{
	}

	_variant_t GroupBox::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupBox::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX GroupBox::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range GroupBox::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupBox::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring GroupBox::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupBox::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters GroupBox::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters GroupBox::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupBox::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBox::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBox::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBox::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator GroupBox::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t GroupBox::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBox::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool GroupBox::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBox::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GroupBox::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool GroupBox::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBox::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double GroupBox::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupBox::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long GroupBox::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double GroupBox::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupBox::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupBox::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBox::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupBox::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBox::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring GroupBox::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupBox::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring GroupBox::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupBox::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GroupBox::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupBox::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupBox::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupBox::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupBox::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupBox::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBox::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupBox::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBox::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBox::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange GroupBox::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring GroupBox::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupBox::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double GroupBox::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupBox::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range GroupBox::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool GroupBox::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBox::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double GroupBox::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupBox::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long GroupBox::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________GroupBoxes
	GroupBoxes::GroupBoxes()
	{
	}

	GroupBoxes::~GroupBoxes()
	{
	}

	_variant_t GroupBoxes::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupBoxes::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupBox GroupBoxes::Add(double Left, double Top, double Width, double Height)
	{
		Excel::GroupBox returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX GroupBoxes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupBoxes::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring GroupBoxes::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupBoxes::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters GroupBoxes::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters GroupBoxes::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupBoxes::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBoxes::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBoxes::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBoxes::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long GroupBoxes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator GroupBoxes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t GroupBoxes::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBoxes::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool GroupBoxes::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBoxes::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GroupBoxes::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool GroupBoxes::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBoxes::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject GroupBoxes::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double GroupBoxes::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupBoxes::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GroupBoxes::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double GroupBoxes::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupBoxes::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupBoxes::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBoxes::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupBoxes::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBoxes::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring GroupBoxes::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupBoxes::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GroupBoxes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupBoxes::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupBoxes::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupBoxes::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupBoxes::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupBoxes::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBoxes::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupBoxes::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBoxes::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupBoxes::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange GroupBoxes::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring GroupBoxes::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupBoxes::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double GroupBoxes::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupBoxes::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupBoxes::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupBoxes::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double GroupBoxes::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupBoxes::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long GroupBoxes::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void GroupBoxes::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupBoxes::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupBoxes::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupBoxes::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr GroupBoxes::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________DropDown
	DropDown::DropDown()
	{
	}

	DropDown::~DropDown()
	{
	}

	_variant_t DropDown::AddItem(_variant_t Text, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Text;
		param[1] = Index;
		Invoke(2, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDown::AddItem(_variant_t Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Text;
		Invoke(1, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX DropDown::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range DropDown::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDown::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring DropDown::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDown::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters DropDown::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters DropDown::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDown::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDown::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator DropDown::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t DropDown::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDown::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DropDown::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDown::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDown::get_DropDownLines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 848, L"DropDownLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DropDown::put_DropDownLines(long DropDownLines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DropDownLines;
		Invoke(1, 848, L"DropDownLines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DropDown::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DropDown::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDown::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DropDown::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DropDown::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDown::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double DropDown::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DropDown::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DropDown::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDown::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DropDown::get_LinkedObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 862, L"LinkedObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDown::get_List(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDown::get_List()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DropDown::put_List(_variant_t List, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = List;
		param[1] = Index;
		Invoke(2, 861, L"List", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DropDown::put_List(_variant_t List)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = List;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDown::get_ListCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 849, L"ListCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring DropDown::get_ListFillRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDown::put_ListFillRange(wstring ListFillRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ListFillRange.c_str());
		Invoke(1, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDown::get_ListIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DropDown::put_ListIndex(long ListIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListIndex;
		Invoke(1, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DropDown::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDown::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DropDown::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDown::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DropDown::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDown::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DropDown::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDown::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DropDown::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DropDown::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDown::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DropDown::RemoveAllItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 853, L"RemoveAllItems", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDown::RemoveItem(long Index, _variant_t Count)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		param[1] = Count;
		Invoke(2, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDown::RemoveItem(long Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDown::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDown::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDown::get_Selected(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDown::get_Selected()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DropDown::put_Selected(_variant_t Selected, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Selected;
		param[1] = Index;
		Invoke(2, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DropDown::put_Selected(_variant_t Selected)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Selected;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DropDown::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange DropDown::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DropDown::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDown::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DropDown::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DropDown::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range DropDown::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long DropDown::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DropDown::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DropDown::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDown::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DropDown::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DropDown::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDown::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long DropDown::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DropDown::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DropDown::_Dummy36()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65572, L"_Dummy36", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________DropDowns
	DropDowns::DropDowns()
	{
	}

	DropDowns::~DropDowns()
	{
	}

	Excel::DropDown DropDowns::Add(double Left, double Top, double Width, double Height, _variant_t Editable)
	{
		Excel::DropDown returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		param[4] = Editable;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::DropDown DropDowns::Add(double Left, double Top, double Width, double Height)
	{
		Excel::DropDown returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::AddItem(_variant_t Text, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Text;
		param[1] = Index;
		Invoke(2, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::AddItem(_variant_t Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Text;
		Invoke(1, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX DropDowns::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDowns::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring DropDowns::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDowns::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters DropDowns::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters DropDowns::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDowns::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long DropDowns::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator DropDowns::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t DropDowns::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DropDowns::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDowns::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDowns::get_DropDownLines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 848, L"DropDownLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DropDowns::put_DropDownLines(long DropDownLines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DropDownLines;
		Invoke(1, 848, L"DropDownLines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DropDowns::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DropDowns::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDowns::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject DropDowns::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double DropDowns::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DropDowns::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DropDowns::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double DropDowns::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DropDowns::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DropDowns::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDowns::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DropDowns::get_List(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDowns::get_List()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DropDowns::put_List(_variant_t List, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = List;
		param[1] = Index;
		Invoke(2, 861, L"List", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DropDowns::put_List(_variant_t List)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = List;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DropDowns::get_ListFillRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDowns::put_ListFillRange(wstring ListFillRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ListFillRange.c_str());
		Invoke(1, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDowns::get_ListIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DropDowns::put_ListIndex(long ListIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListIndex;
		Invoke(1, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DropDowns::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDowns::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DropDowns::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDowns::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DropDowns::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDowns::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DropDowns::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DropDowns::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDowns::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DropDowns::RemoveAllItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 853, L"RemoveAllItems", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::RemoveItem(long Index, _variant_t Count)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		param[1] = Count;
		Invoke(2, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::RemoveItem(long Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DropDowns::get_Selected(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropDowns::get_Selected()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DropDowns::put_Selected(_variant_t Selected, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Selected;
		param[1] = Index;
		Invoke(2, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DropDowns::put_Selected(_variant_t Selected)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Selected;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DropDowns::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange DropDowns::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DropDowns::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DropDowns::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DropDowns::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DropDowns::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDowns::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DropDowns::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DropDowns::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DropDowns::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DropDowns::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DropDowns::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DropDowns::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long DropDowns::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DropDowns::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DropDowns::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void DropDowns::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void DropDowns::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void DropDowns::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void DropDowns::_Dummy31()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65567, L"_Dummy31", param, returnedValue, DISPATCH_METHOD);
	}

	void DropDowns::_Dummy33()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65569, L"_Dummy33", param, returnedValue, DISPATCH_METHOD);
	}

	void DropDowns::_Dummy36()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65572, L"_Dummy36", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr DropDowns::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Spinner
	Spinner::Spinner()
	{
	}

	Spinner::~Spinner()
	{
	}

	Excel::ApplicationX Spinner::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Spinner::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Spinner::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinner::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinner::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Spinner::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Spinner::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinner::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Spinner::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinner::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Spinner::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Spinner::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinner::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Spinner::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Spinner::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Spinner::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double Spinner::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Spinner::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Spinner::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Spinner::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Spinner::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinner::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Spinner::get_Max()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinner::put_Max(long Max)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Max;
		Invoke(1, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Spinner::get_Min()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinner::put_Min(long Min)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Min;
		Invoke(1, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Spinner::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Spinner::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Spinner::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Spinner::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Spinner::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Spinner::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Spinner::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Spinner::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinner::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Spinner::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinner::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinner::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Spinner::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Spinner::get_SmallChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinner::put_SmallChange(long SmallChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SmallChange;
		Invoke(1, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Spinner::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Spinner::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Spinner::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Spinner::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinner::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Spinner::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinner::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Spinner::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Spinner::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Spinner::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long Spinner::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinner::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Spinners
	Spinners::Spinners()
	{
	}

	Spinners::~Spinners()
	{
	}

	Excel::Spinner Spinners::Add(double Left, double Top, double Width, double Height)
	{
		Excel::Spinner returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Spinners::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Spinners::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinners::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinners::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Spinners::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Spinners::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Spinners::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinners::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Spinners::get_Display3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinners::put_Display3DShading(bool Display3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Display3DShading == true) ? 1 : 0;
		Invoke(1, 1122, L"Display3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Spinners::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Spinners::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinners::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Spinners::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Spinners::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Spinners::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Spinners::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Spinners::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Spinners::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Spinners::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Spinners::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Spinners::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinners::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Spinners::get_Max()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinners::put_Max(long Max)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Max;
		Invoke(1, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Spinners::get_Min()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinners::put_Min(long Min)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Min;
		Invoke(1, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Spinners::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Spinners::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Spinners::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Spinners::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Spinners::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Spinners::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinners::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Spinners::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinners::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Spinners::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Spinners::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Spinners::get_SmallChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinners::put_SmallChange(long SmallChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SmallChange;
		Invoke(1, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Spinners::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Spinners::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Spinners::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinners::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Spinners::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Spinners::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Spinners::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Spinners::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Spinners::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long Spinners::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Spinners::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Spinners::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Spinners::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Spinners::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Spinners::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Spinners::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________DialogFrame
	DialogFrame::DialogFrame()
	{
	}

	DialogFrame::~DialogFrame()
	{
	}

	Excel::ApplicationX DialogFrame::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DialogFrame::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogFrame::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters DialogFrame::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters DialogFrame::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DialogFrame::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DialogFrame::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DialogFrame::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator DialogFrame::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	double DialogFrame::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DialogFrame::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DialogFrame::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DialogFrame::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DialogFrame::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogFrame::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DialogFrame::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogFrame::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DialogFrame::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogFrame::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DialogFrame::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogFrame::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DialogFrame::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DialogFrame::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DialogFrame::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange DialogFrame::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DialogFrame::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogFrame::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DialogFrame::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DialogFrame::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DialogFrame::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DialogFrame::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DialogFrame::_Dummy10()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65546, L"_Dummy10", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy17()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65553, L"_Dummy17", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy18()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65554, L"_Dummy18", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy20()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65556, L"_Dummy20", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy23()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65559, L"_Dummy23", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy25()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65561, L"_Dummy25", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy4()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65540, L"_Dummy4", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy5()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65541, L"_Dummy5", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy7()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65543, L"_Dummy7", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy8()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65544, L"_Dummy8", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogFrame::_Dummy9()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65545, L"_Dummy9", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Label
	Label::Label()
	{
	}

	Label::~Label()
	{
	}

	_variant_t Label::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Label::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Label::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Label::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Label::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Label::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Label::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Label::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Label::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Label::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Label::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Label::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Label::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Label::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Label::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Label::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Label::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Label::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Label::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Label::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Label::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Label::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double Label::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Label::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Label::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Label::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Label::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Label::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Label::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Label::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Label::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Label::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Label::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Label::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Label::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Label::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Label::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Label::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Label::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Label::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Label::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Label::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Label::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Label::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Label::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Label::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Label::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Label::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Label::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Label::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Label::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Label::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Label::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Label::_Dummy33()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65569, L"_Dummy33", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Labels
	Labels::Labels()
	{
	}

	Labels::~Labels()
	{
	}

	_variant_t Labels::get_Accelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Labels::put_Accelerator(_variant_t Accelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Accelerator;
		Invoke(1, 846, L"Accelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Label Labels::Add(double Left, double Top, double Width, double Height)
	{
		Excel::Label returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Labels::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Labels::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Labels::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Labels::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Labels::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Labels::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Labels::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Labels::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Labels::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Labels::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Labels::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Labels::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Labels::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Labels::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Labels::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Labels::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Labels::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Labels::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Labels::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Labels::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Labels::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Labels::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Labels::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Labels::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Labels::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Labels::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Labels::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Labels::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Labels::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Labels::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Labels::get_PhoneticAccelerator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Labels::put_PhoneticAccelerator(_variant_t PhoneticAccelerator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PhoneticAccelerator;
		Invoke(1, 1121, L"PhoneticAccelerator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Labels::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Labels::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Labels::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Labels::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Labels::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Labels::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Labels::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Labels::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Labels::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Labels::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Labels::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Labels::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Labels::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Labels::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Labels::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Labels::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Labels::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Labels::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Labels::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Labels::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Labels::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void Labels::_Dummy33()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65569, L"_Dummy33", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Labels::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Panes
	Panes::Panes()
	{
	}

	Panes::~Panes()
	{
	}

	Excel::ApplicationX Panes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Panes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Panes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Pane Panes::get_Item(long Index)
	{
		Excel::Pane returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Panes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Pane Panes::get__Default(long Index)
	{
		Excel::Pane returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Pane
	Pane::Pane()
	{
	}

	Pane::~Pane()
	{
	}

	bool Pane::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::ApplicationX Pane::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Pane::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long Pane::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t Pane::LargeScroll(_variant_t Down, _variant_t Up, _variant_t ToRight, _variant_t ToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Down;
		param[1] = Up;
		param[2] = ToRight;
		param[3] = ToLeft;
		Invoke(4, 547, L"LargeScroll", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Pane::LargeScroll()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 547, L"LargeScroll", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Pane::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Pane::PointsToScreenPixelsX(long Points)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Points;
		Invoke(1, 1776, L"PointsToScreenPixelsX", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	long Pane::PointsToScreenPixelsY(long Points)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Points;
		Invoke(1, 1777, L"PointsToScreenPixelsY", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.lVal;
	}

	long Pane::get_ScrollColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 654, L"ScrollColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Pane::put_ScrollColumn(long ScrollColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ScrollColumn;
		Invoke(1, 654, L"ScrollColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Pane::ScrollIntoView(long Left, long Top, long Width, long Height, _variant_t Start)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I4;
		param[0].lVal = Left;
		param[1].vt = VT_I4;
		param[1].lVal = Top;
		param[2].vt = VT_I4;
		param[2].lVal = Width;
		param[3].vt = VT_I4;
		param[3].lVal = Height;
		param[4] = Start;
		Invoke(5, 1781, L"ScrollIntoView", param, returnedValue, DISPATCH_METHOD);
	}

	void Pane::ScrollIntoView(long Left, long Top, long Width, long Height)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Left;
		param[1].vt = VT_I4;
		param[1].lVal = Top;
		param[2].vt = VT_I4;
		param[2].lVal = Width;
		param[3].vt = VT_I4;
		param[3].lVal = Height;
		Invoke(4, 1781, L"ScrollIntoView", param, returnedValue, DISPATCH_METHOD);
	}

	long Pane::get_ScrollRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 655, L"ScrollRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Pane::put_ScrollRow(long ScrollRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ScrollRow;
		Invoke(1, 655, L"ScrollRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Pane::SmallScroll(_variant_t Down, _variant_t Up, _variant_t ToRight, _variant_t ToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = Down;
		param[1] = Up;
		param[2] = ToRight;
		param[3] = ToLeft;
		Invoke(4, 548, L"SmallScroll", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Pane::SmallScroll()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 548, L"SmallScroll", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Pane::get_VisibleRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1118, L"VisibleRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Scenarios
	Scenarios::Scenarios()
	{
	}

	Scenarios::~Scenarios()
	{
	}

	Excel::Scenario Scenarios::Add(wstring Name, _variant_t ChangingCells, _variant_t Values, _variant_t Comment, _variant_t Locked, _variant_t Hidden)
	{
		Excel::Scenario returnedValue;
		Com::Param param(6);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = ChangingCells;
		param[2] = Values;
		param[3] = Comment;
		param[4] = Locked;
		param[5] = Hidden;
		Invoke(6, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Scenario Scenarios::Add(wstring Name, _variant_t ChangingCells)
	{
		Excel::Scenario returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = ChangingCells;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Scenarios::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Scenarios::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t Scenarios::CreateSummary(Excel::XlSummaryReportType ReportType, _variant_t ResultCells)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = ReportType;
		param[1] = ResultCells;
		Invoke(2, 913, L"CreateSummary", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Scenarios::CreateSummary(Excel::XlSummaryReportType ReportType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ReportType;
		Invoke(1, 913, L"CreateSummary", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Scenarios::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Scenario Scenarios::Item(_variant_t Index)
	{
		Excel::Scenario returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Scenarios::Merge(_variant_t Source)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Source;
		Invoke(1, 564, L"Merge", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Scenarios::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Scenarios::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Scenario
	Scenario::Scenario()
	{
	}

	Scenario::~Scenario()
	{
	}

	Excel::ApplicationX Scenario::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Scenario::ChangeScenario(_variant_t ChangingCells, _variant_t Values)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = ChangingCells;
		param[1] = Values;
		Invoke(2, 912, L"ChangeScenario", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Scenario::ChangeScenario(_variant_t ChangingCells)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ChangingCells;
		Invoke(1, 912, L"ChangeScenario", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Range Scenario::get_ChangingCells()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 911, L"ChangingCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Scenario::get_Comment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 910, L"Comment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Scenario::put_Comment(wstring Comment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Comment.c_str());
		Invoke(1, 910, L"Comment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Scenario::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Scenario::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Scenario::get_Hidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Scenario::put_Hidden(bool Hidden)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Hidden == true) ? 1 : 0;
		Invoke(1, 268, L"Hidden", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Scenario::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool Scenario::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Scenario::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Scenario::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Scenario::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Scenario::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Scenario::Show()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 496, L"Show", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Scenario::get_Values(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 164, L"Values", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Scenario::get_Values()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 164, L"Values", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________GroupObject
	GroupObject::GroupObject()
	{
	}

	GroupObject::~GroupObject()
	{
	}

	bool GroupObject::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObject::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX GroupObject::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupObject::get_ArrowHeadLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObject::put_ArrowHeadLength(_variant_t ArrowHeadLength)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadLength;
		Invoke(1, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObject::get_ArrowHeadStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObject::put_ArrowHeadStyle(_variant_t ArrowHeadStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadStyle;
		Invoke(1, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObject::get_ArrowHeadWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObject::put_ArrowHeadWidth(_variant_t ArrowHeadWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadWidth;
		Invoke(1, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObject::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObject::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border GroupObject::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range GroupObject::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupObject::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObject::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObject::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObject::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObject::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator GroupObject::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t GroupObject::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObject::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object GroupObject::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool GroupObject::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObject::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font GroupObject::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double GroupObject::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupObject::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObject::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObject::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long GroupObject::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior GroupObject::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double GroupObject::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupObject::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObject::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObject::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring GroupObject::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupObject::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring GroupObject::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupObject::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObject::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObject::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GroupObject::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupObject::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObject::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObject::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObject::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long GroupObject::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void GroupObject::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObject::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObject::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObject::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObject::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObject::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool GroupObject::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObject::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange GroupObject::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double GroupObject::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupObject::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range GroupObject::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object GroupObject::Ungroup()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 244, L"Ungroup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObject::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObject::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObject::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObject::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double GroupObject::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupObject::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long GroupObject::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long GroupObject::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void GroupObject::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void GroupObject::_Dummy27()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65563, L"_Dummy27", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy28()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65564, L"_Dummy28", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy30()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65566, L"_Dummy30", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy36()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65572, L"_Dummy36", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy37()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65573, L"_Dummy37", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy38()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65574, L"_Dummy38", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy41()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65577, L"_Dummy41", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy42()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65578, L"_Dummy42", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy43()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65579, L"_Dummy43", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy44()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65580, L"_Dummy44", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy45()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65581, L"_Dummy45", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy47()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65583, L"_Dummy47", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy48()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65584, L"_Dummy48", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy50()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65586, L"_Dummy50", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy52()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65588, L"_Dummy52", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy53()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65589, L"_Dummy53", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy54()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65590, L"_Dummy54", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy55()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65591, L"_Dummy55", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy56()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65592, L"_Dummy56", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy57()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65593, L"_Dummy57", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy58()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65594, L"_Dummy58", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy59()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65595, L"_Dummy59", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy60()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65596, L"_Dummy60", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy61()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65597, L"_Dummy61", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy62()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65598, L"_Dummy62", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy63()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65599, L"_Dummy63", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy65()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65601, L"_Dummy65", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy66()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65602, L"_Dummy66", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy67()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65603, L"_Dummy67", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy68()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65604, L"_Dummy68", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy70()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65606, L"_Dummy70", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy72()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65608, L"_Dummy72", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy73()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65609, L"_Dummy73", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy75()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65611, L"_Dummy75", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObject::_Dummy77()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65613, L"_Dummy77", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________GroupObjects
	GroupObjects::GroupObjects()
	{
	}

	GroupObjects::~GroupObjects()
	{
	}

	bool GroupObjects::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObjects::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX GroupObjects::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupObjects::get_ArrowHeadLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObjects::put_ArrowHeadLength(_variant_t ArrowHeadLength)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadLength;
		Invoke(1, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObjects::get_ArrowHeadStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObjects::put_ArrowHeadStyle(_variant_t ArrowHeadStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadStyle;
		Invoke(1, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObjects::get_ArrowHeadWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObjects::put_ArrowHeadWidth(_variant_t ArrowHeadWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadWidth;
		Invoke(1, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObjects::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObjects::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border GroupObjects::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupObjects::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObjects::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObjects::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObjects::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObjects::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long GroupObjects::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator GroupObjects::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t GroupObjects::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObjects::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object GroupObjects::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool GroupObjects::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObjects::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font GroupObjects::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::GroupObject GroupObjects::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double GroupObjects::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupObjects::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObjects::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObjects::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior GroupObjects::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object GroupObjects::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double GroupObjects::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupObjects::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObjects::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObjects::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring GroupObjects::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void GroupObjects::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObjects::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObjects::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GroupObjects::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t GroupObjects::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObjects::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObjects::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObjects::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long GroupObjects::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void GroupObjects::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObjects::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObjects::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t GroupObjects::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObjects::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObjects::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool GroupObjects::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObjects::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange GroupObjects::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double GroupObjects::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupObjects::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object GroupObjects::Ungroup()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 244, L"Ungroup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t GroupObjects::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void GroupObjects::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool GroupObjects::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void GroupObjects::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double GroupObjects::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void GroupObjects::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long GroupObjects::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long GroupObjects::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void GroupObjects::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void GroupObjects::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy27()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65563, L"_Dummy27", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy28()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65564, L"_Dummy28", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy30()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65566, L"_Dummy30", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy36()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65572, L"_Dummy36", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy37()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65573, L"_Dummy37", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy38()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65574, L"_Dummy38", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy41()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65577, L"_Dummy41", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy42()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65578, L"_Dummy42", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy43()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65579, L"_Dummy43", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy44()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65580, L"_Dummy44", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy45()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65581, L"_Dummy45", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy47()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65583, L"_Dummy47", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy48()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65584, L"_Dummy48", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy50()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65586, L"_Dummy50", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy52()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65588, L"_Dummy52", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy53()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65589, L"_Dummy53", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy54()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65590, L"_Dummy54", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy55()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65591, L"_Dummy55", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy56()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65592, L"_Dummy56", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy57()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65593, L"_Dummy57", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy58()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65594, L"_Dummy58", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy59()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65595, L"_Dummy59", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy60()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65596, L"_Dummy60", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy61()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65597, L"_Dummy61", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy62()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65598, L"_Dummy62", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy63()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65599, L"_Dummy63", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy65()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65601, L"_Dummy65", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy66()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65602, L"_Dummy66", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy67()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65603, L"_Dummy67", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy68()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65604, L"_Dummy68", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy70()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65606, L"_Dummy70", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy72()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65608, L"_Dummy72", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy73()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65609, L"_Dummy73", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy75()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65611, L"_Dummy75", param, returnedValue, DISPATCH_METHOD);
	}

	void GroupObjects::_Dummy77()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65613, L"_Dummy77", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr GroupObjects::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Line
	Line::Line()
	{
	}

	Line::~Line()
	{
	}

	Excel::ApplicationX Line::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Line::get_ArrowHeadLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Line::put_ArrowHeadLength(_variant_t ArrowHeadLength)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadLength;
		Invoke(1, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Line::get_ArrowHeadStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Line::put_ArrowHeadStyle(_variant_t ArrowHeadStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadStyle;
		Invoke(1, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Line::get_ArrowHeadWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Line::put_ArrowHeadWidth(_variant_t ArrowHeadWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadWidth;
		Invoke(1, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Line::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Line::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Line::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Line::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Line::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Line::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Line::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Line::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Line::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Line::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Line::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Line::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Line::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Line::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double Line::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Line::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Line::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Line::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Line::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Line::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Line::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Line::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Line::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Line::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Line::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Line::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Line::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Line::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Line::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Line::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Line::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Line::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Line::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Line::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Line::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Line::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Line::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Line::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Line::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Lines
	Lines::Lines()
	{
	}

	Lines::~Lines()
	{
	}

	Excel::Line Lines::Add(double X1, double Y1, double X2, double Y2)
	{
		Excel::Line returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = X1;
		param[1].vt = VT_R8;
		param[1].dblVal = Y1;
		param[2].vt = VT_R8;
		param[2].dblVal = X2;
		param[3].vt = VT_R8;
		param[3].dblVal = Y2;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Lines::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Lines::get_ArrowHeadLength()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Lines::put_ArrowHeadLength(_variant_t ArrowHeadLength)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadLength;
		Invoke(1, 611, L"ArrowHeadLength", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Lines::get_ArrowHeadStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Lines::put_ArrowHeadStyle(_variant_t ArrowHeadStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadStyle;
		Invoke(1, 612, L"ArrowHeadStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Lines::get_ArrowHeadWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Lines::put_ArrowHeadWidth(_variant_t ArrowHeadWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ArrowHeadWidth;
		Invoke(1, 613, L"ArrowHeadWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Lines::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Lines::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Lines::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Lines::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Lines::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Lines::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Lines::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Lines::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Lines::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Lines::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Lines::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Lines::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Lines::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Lines::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Lines::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Lines::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Lines::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Lines::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Lines::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Lines::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Lines::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Lines::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Lines::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Lines::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Lines::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Lines::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Lines::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Lines::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Lines::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Lines::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Lines::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Lines::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Lines::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Lines::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Lines::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Lines::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Lines::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Lines::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Lines::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Lines::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Lines::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Lines::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Rectangle
	Rectangle::Rectangle()
	{
	}

	Rectangle::~Rectangle()
	{
	}

	bool Rectangle::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Rectangle::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangle::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangle::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangle::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Rectangle::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Rectangle::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangle::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Rectangle::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangle::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Rectangle::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Rectangle::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangle::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangle::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangle::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangle::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Rectangle::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Rectangle::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangle::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Rectangle::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Rectangle::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Rectangle::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Rectangle::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangle::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Rectangle::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Rectangle::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Rectangle::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangle::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Rectangle::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior Rectangle::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Rectangle::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Rectangle::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangle::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangle::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Rectangle::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangle::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Rectangle::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangle::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Rectangle::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangle::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Rectangle::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangle::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangle::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangle::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Rectangle::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Rectangle::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangle::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Rectangle::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangle::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangle::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Rectangle::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange Rectangle::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Rectangle::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangle::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Rectangle::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Rectangle::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Rectangle::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangle::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangle::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangle::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangle::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Rectangle::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Rectangle::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Rectangle::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Rectangles
	Rectangles::Rectangles()
	{
	}

	Rectangles::~Rectangles()
	{
	}

	Excel::Rectangle Rectangles::Add(double Left, double Top, double Width, double Height)
	{
		Excel::Rectangle returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Rectangles::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Rectangles::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangles::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangles::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangles::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Rectangles::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangles::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Rectangles::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangles::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Rectangles::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Rectangles::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangles::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangles::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangles::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangles::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Rectangles::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Rectangles::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Rectangles::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangles::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Rectangles::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Rectangles::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Rectangles::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Rectangles::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangles::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Rectangles::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Rectangles::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Rectangles::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Rectangles::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangles::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior Rectangles::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Rectangles::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Rectangles::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Rectangles::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangles::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangles::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Rectangles::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangles::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Rectangles::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangles::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Rectangles::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Rectangles::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangles::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangles::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Rectangles::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Rectangles::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangles::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Rectangles::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangles::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Rectangles::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Rectangles::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange Rectangles::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Rectangles::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Rectangles::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Rectangles::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Rectangles::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Rectangles::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Rectangles::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Rectangles::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Rectangles::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Rectangles::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Rectangles::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Rectangles::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Rectangles::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Rectangles::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Rectangles::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Rectangles::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Rectangles::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Oval
	Oval::Oval()
	{
	}

	Oval::~Oval()
	{
	}

	bool Oval::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Oval::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Oval::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Oval::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Oval::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Oval::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Oval::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Oval::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Oval::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Oval::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Oval::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Oval::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Oval::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Oval::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Oval::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Oval::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Oval::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Oval::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Oval::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Oval::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Oval::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Oval::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Oval::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Oval::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Oval::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Oval::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Oval::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Oval::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Oval::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Oval::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Oval::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Oval::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior Oval::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Oval::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Oval::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Oval::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Oval::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Oval::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Oval::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Oval::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Oval::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Oval::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Oval::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Oval::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Oval::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Oval::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Oval::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Oval::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Oval::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Oval::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Oval::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Oval::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Oval::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Oval::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Oval::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Oval::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Oval::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange Oval::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Oval::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Oval::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Oval::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Oval::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Oval::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Oval::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Oval::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Oval::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Oval::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Oval::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Oval::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Oval::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Ovals
	Ovals::Ovals()
	{
	}

	Ovals::~Ovals()
	{
	}

	Excel::Oval Ovals::Add(double Left, double Top, double Width, double Height)
	{
		Excel::Oval returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Ovals::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Ovals::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Ovals::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Ovals::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Ovals::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Ovals::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Ovals::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Ovals::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Ovals::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Ovals::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Ovals::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Ovals::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Ovals::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Ovals::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Ovals::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Ovals::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Ovals::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Ovals::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Ovals::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Ovals::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Ovals::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Ovals::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Ovals::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Ovals::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Ovals::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Ovals::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Ovals::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Ovals::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Ovals::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Ovals::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Ovals::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Ovals::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior Ovals::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Ovals::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Ovals::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Ovals::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Ovals::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Ovals::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Ovals::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Ovals::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Ovals::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Ovals::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Ovals::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Ovals::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Ovals::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Ovals::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Ovals::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Ovals::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Ovals::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Ovals::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Ovals::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Ovals::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Ovals::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Ovals::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Ovals::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Ovals::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange Ovals::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Ovals::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Ovals::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Ovals::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Ovals::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Ovals::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Ovals::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Ovals::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Ovals::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Ovals::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Ovals::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Ovals::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Ovals::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Ovals::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Ovals::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Ovals::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Ovals::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Arc
	Arc::Arc()
	{
	}

	Arc::~Arc()
	{
	}

	bool Arc::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arc::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Arc::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arc::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arc::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arc::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arc::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Arc::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Arc::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arc::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Arc::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arc::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Arc::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Arc::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arc::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arc::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arc::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arc::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Arc::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Arc::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arc::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Arc::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Arc::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arc::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Arc::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Arc::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arc::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Arc::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Arc::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Arc::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arc::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Arc::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior Arc::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Arc::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Arc::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arc::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arc::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arc::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arc::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Arc::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arc::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Arc::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arc::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Arc::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arc::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Arc::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arc::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arc::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arc::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arc::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Arc::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Arc::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Arc::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arc::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arc::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Arc::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Arc::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arc::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Arc::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Arc::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Arc::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arc::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arc::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arc::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arc::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Arc::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Arc::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Arc::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Arc::_Dummy43()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65579, L"_Dummy43", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Arcs
	Arcs::Arcs()
	{
	}

	Arcs::~Arcs()
	{
	}

	Excel::Arc Arcs::Add(double X1, double Y1, double X2, double Y2)
	{
		Excel::Arc returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = X1;
		param[1].vt = VT_R8;
		param[1].dblVal = Y1;
		param[2].vt = VT_R8;
		param[2].dblVal = X2;
		param[3].vt = VT_R8;
		param[3].dblVal = Y2;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Arcs::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arcs::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Arcs::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arcs::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arcs::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arcs::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arcs::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Arcs::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arcs::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Arcs::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arcs::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Arcs::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Arcs::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arcs::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arcs::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arcs::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arcs::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Arcs::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Arcs::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Arcs::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arcs::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Arcs::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Arcs::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arcs::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Arcs::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Arcs::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arcs::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Arcs::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Arcs::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Arcs::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Arcs::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arcs::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior Arcs::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Arcs::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Arcs::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Arcs::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arcs::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arcs::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arcs::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arcs::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Arcs::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arcs::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Arcs::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arcs::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Arcs::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Arcs::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arcs::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arcs::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arcs::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Arcs::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Arcs::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Arcs::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arcs::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Arcs::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ShapeRange Arcs::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Arcs::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Arcs::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Arcs::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Arcs::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Arcs::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Arcs::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Arcs::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Arcs::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Arcs::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Arcs::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Arcs::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Arcs::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Arcs::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Arcs::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Arcs::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void Arcs::_Dummy43()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65579, L"_Dummy43", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Arcs::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________OLEObjectEvents
	OLEObjectEvents::OLEObjectEvents()
	{
	}

	OLEObjectEvents::~OLEObjectEvents()
	{
	}

	void OLEObjectEvents::GotFocus()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1541, L"GotFocus", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjectEvents::LostFocus()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1542, L"LostFocus", param, returnedValue, DISPATCH_METHOD);
	}

	//_________________________________________________________OLEObject
	OLEObjectX::OLEObjectX()
	{
	}

	OLEObjectX::~OLEObjectX()
	{
	}

	_variant_t OLEObjectX::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417808, L"Activate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring OLEObjectX::get_AltHTML()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147416259, L"AltHTML", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEObjectX::put_AltHTML(wstring AltHTML)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(AltHTML.c_str());
		Invoke(1, -2147416259, L"AltHTML", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX OLEObjectX::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, -2147417964, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool OLEObjectX::get_AutoLoad()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147416926, L"AutoLoad", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjectX::put_AutoLoad(bool AutoLoad)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoLoad == true) ? 1 : 0;
		Invoke(1, -2147416926, L"AutoLoad", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEObjectX::get_AutoUpdate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417064, L"AutoUpdate", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjectX::put_AutoUpdate(bool AutoUpdate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoUpdate == true) ? 1 : 0;
		Invoke(1, -2147417064, L"AutoUpdate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border OLEObjectX::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, -2147417984, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range OLEObjectX::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, -2147417497, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OLEObjectX::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417510, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjectX::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417561, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjectX::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, -2147417899, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator OLEObjectX::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417963, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t OLEObjectX::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417547, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjectX::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417995, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object OLEObjectX::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, -2147417073, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OLEObjectX::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417512, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjectX::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, -2147417512, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OLEObjectX::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417989, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OLEObjectX::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, -2147417989, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long OLEObjectX::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417626, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior OLEObjectX::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, -2147417983, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double OLEObjectX::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417985, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OLEObjectX::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, -2147417985, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OLEObjectX::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417054, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEObjectX::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, -2147417054, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OLEObjectX::get_ListFillRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417265, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEObjectX::put_ListFillRange(wstring ListFillRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ListFillRange.c_str());
		Invoke(1, -2147417265, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEObjectX::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417843, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjectX::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, -2147417843, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OLEObjectX::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147418002, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEObjectX::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, -2147418002, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OLEObjectX::get_OLEType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417058, L"OLEType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object OLEObjectX::get_Object()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, -2147417063, L"Object", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring OLEObjectX::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417516, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEObjectX::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, -2147417516, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object OLEObjectX::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, -2147417962, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OLEObjectX::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417495, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OLEObjectX::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, -2147417495, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEObjectX::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417494, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjectX::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, -2147417494, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OLEObjectX::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, -2147417877, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjectX::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, -2147417877, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjectX::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417507, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OLEObjectX::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147418009, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjectX::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, -2147418009, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange OLEObjectX::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, -2147416584, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring OLEObjectX::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417391, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEObjectX::put_SourceName(wstring SourceName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceName.c_str());
		Invoke(1, -2147417391, L"SourceName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OLEObjectX::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417986, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OLEObjectX::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, -2147417986, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range OLEObjectX::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, -2147417492, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OLEObjectX::Update()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417432, L"Update", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjectX::Verb(Excel::XlOLEVerb Verb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Verb;
		Invoke(1, -2147417506, L"Verb", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OLEObjectX::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417554, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjectX::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, -2147417554, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OLEObjectX::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417990, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OLEObjectX::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, -2147417990, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long OLEObjectX::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147417490, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring OLEObjectX::get_progID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147416589, L"progID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________OLEObjects
	OLEObjects::OLEObjects()
	{
	}

	OLEObjects::~OLEObjects()
	{
	}

	Excel::OLEObjectX OLEObjects::Add(_variant_t ClassType, _variant_t Filename, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height)
	{
		Excel::OLEObjectX returnedValue;
		Com::Param param(11);
		param[0] = ClassType;
		param[1] = Filename;
		param[2] = Link;
		param[3] = DisplayAsIcon;
		param[4] = IconFileName;
		param[5] = IconIndex;
		param[6] = IconLabel;
		param[7] = Left;
		param[8] = Top;
		param[9] = Width;
		param[10] = Height;
		Invoke(11, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::OLEObjectX OLEObjects::Add()
	{
		Excel::OLEObjectX returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX OLEObjects::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool OLEObjects::get_AutoLoad()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1186, L"AutoLoad", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjects::put_AutoLoad(bool AutoLoad)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoLoad == true) ? 1 : 0;
		Invoke(1, 1186, L"AutoLoad", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border OLEObjects::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OLEObjects::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjects::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjects::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long OLEObjects::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator OLEObjects::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t OLEObjects::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjects::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object OLEObjects::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OLEObjects::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjects::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject OLEObjects::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double OLEObjects::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OLEObjects::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior OLEObjects::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object OLEObjects::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double OLEObjects::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OLEObjects::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEObjects::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjects::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OLEObjects::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEObjects::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object OLEObjects::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t OLEObjects::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OLEObjects::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEObjects::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjects::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OLEObjects::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjects::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t OLEObjects::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool OLEObjects::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjects::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange OLEObjects::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring OLEObjects::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEObjects::put_SourceName(wstring SourceName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceName.c_str());
		Invoke(1, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OLEObjects::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OLEObjects::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEObjects::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEObjects::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double OLEObjects::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void OLEObjects::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long OLEObjects::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void OLEObjects::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy30()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65566, L"_Dummy30", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy32()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65568, L"_Dummy32", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy33()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65569, L"_Dummy33", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy34()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65570, L"_Dummy34", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy36()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65572, L"_Dummy36", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy37()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65573, L"_Dummy37", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy38()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65574, L"_Dummy38", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy39()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65575, L"_Dummy39", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy40()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65576, L"_Dummy40", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEObjects::_Dummy41()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65577, L"_Dummy41", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr OLEObjects::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________TextBox
	TextBox::TextBox()
	{
	}

	TextBox::~TextBox()
	{
	}

	bool TextBox::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX TextBox::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBox::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBox::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBox::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border TextBox::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range TextBox::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBox::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring TextBox::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBox::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters TextBox::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters TextBox::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBox::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBox::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBox::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBox::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator TextBox::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t TextBox::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBox::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object TextBox::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool TextBox::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font TextBox::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring TextBox::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBox::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double TextBox::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void TextBox::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TextBox::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBox::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long TextBox::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior TextBox::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double TextBox::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void TextBox::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBox::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBox::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TextBox::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBox::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TextBox::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBox::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TextBox::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBox::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TextBox::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBox::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBox::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBox::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long TextBox::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TextBox::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBox::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TextBox::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBox::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBox::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool TextBox::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange TextBox::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring TextBox::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBox::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double TextBox::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void TextBox::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range TextBox::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBox::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBox::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBox::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBox::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double TextBox::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void TextBox::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long TextBox::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________TextBoxes
	TextBoxes::TextBoxes()
	{
	}

	TextBoxes::~TextBoxes()
	{
	}

	Excel::TextBox TextBoxes::Add(double Left, double Top, double Width, double Height)
	{
		Excel::TextBox returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool TextBoxes::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX TextBoxes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBoxes::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBoxes::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBoxes::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border TextBoxes::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBoxes::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring TextBoxes::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBoxes::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters TextBoxes::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters TextBoxes::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBoxes::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBoxes::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBoxes::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBoxes::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long TextBoxes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator TextBoxes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t TextBoxes::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBoxes::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object TextBoxes::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool TextBoxes::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font TextBoxes::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring TextBoxes::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBoxes::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject TextBoxes::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double TextBoxes::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void TextBoxes::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TextBoxes::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBoxes::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior TextBoxes::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object TextBoxes::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double TextBoxes::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void TextBoxes::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBoxes::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBoxes::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TextBoxes::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBoxes::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TextBoxes::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBoxes::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TextBoxes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextBoxes::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBoxes::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBoxes::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long TextBoxes::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TextBoxes::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBoxes::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TextBoxes::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBoxes::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t TextBoxes::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool TextBoxes::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange TextBoxes::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring TextBoxes::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextBoxes::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double TextBoxes::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void TextBoxes::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TextBoxes::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextBoxes::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextBoxes::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextBoxes::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double TextBoxes::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void TextBoxes::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long TextBoxes::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TextBoxes::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void TextBoxes::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void TextBoxes::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void TextBoxes::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr TextBoxes::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Picture
	Picture::Picture()
	{
	}

	Picture::~Picture()
	{
	}

	Excel::ApplicationX Picture::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border Picture::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Picture::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Picture::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Picture::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Picture::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Picture::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Picture::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Picture::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Picture::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Picture::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Picture::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Picture::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Picture::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Picture::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Picture::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Picture::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior Picture::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Picture::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Picture::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Picture::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Picture::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Picture::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Picture::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Picture::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Picture::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Picture::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Picture::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Picture::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Picture::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Picture::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Picture::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Picture::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Picture::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Picture::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Picture::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange Picture::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Picture::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Picture::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Picture::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Picture::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Picture::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Picture::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Picture::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Picture::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Pictures
	Pictures::Pictures()
	{
	}

	Pictures::~Pictures()
	{
	}

	Excel::Picture Pictures::Add(double Left, double Top, double Width, double Height)
	{
		Excel::Picture returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Pictures::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border Pictures::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Pictures::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Pictures::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Pictures::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Pictures::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Pictures::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Pictures::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Pictures::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Pictures::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Pictures::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Pictures::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Pictures::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Pictures::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Pictures::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Pictures::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Pictures::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Picture Pictures::Insert(wstring Filename, _variant_t Converter)
	{
		Excel::Picture returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Converter;
		Invoke(2, 252, L"Insert", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Picture Pictures::Insert(wstring Filename)
	{
		Excel::Picture returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 252, L"Insert", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Interior Pictures::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Pictures::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Pictures::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Pictures::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Pictures::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Pictures::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Pictures::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Pictures::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Pictures::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Picture Pictures::Paste(_variant_t Link)
	{
		Excel::Picture returnedValue;
		Com::Param param(1);
		param[0] = Link;
		Invoke(1, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Picture Pictures::Paste()
	{
		Excel::Picture returnedValue;
		Com::Param param(0);
		Invoke(0, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Pictures::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Pictures::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Pictures::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Pictures::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Pictures::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Pictures::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Pictures::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Pictures::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Pictures::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange Pictures::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Pictures::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Pictures::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Pictures::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Pictures::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Pictures::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Pictures::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Pictures::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Pictures::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Pictures::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Pictures::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Pictures::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Pictures::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Drawing
	Drawing::Drawing()
	{
	}

	Drawing::~Drawing()
	{
	}

	bool Drawing::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawing::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawing::AddVertex(double Left, double Top)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		Invoke(2, 601, L"AddVertex", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Drawing::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawing::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawing::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawing::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawing::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Drawing::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Drawing::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawing::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Drawing::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawing::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Drawing::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Drawing::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawing::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawing::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawing::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawing::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Drawing::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Drawing::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawing::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Drawing::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Drawing::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawing::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Drawing::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Drawing::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawing::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Drawing::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Drawing::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawing::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawing::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Drawing::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior Drawing::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Drawing::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Drawing::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawing::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawing::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawing::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawing::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Drawing::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawing::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Drawing::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawing::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawing::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawing::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Drawing::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawing::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawing::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawing::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawing::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Drawing::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Drawing::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawing::Reshape(long Vertex, bool Insert, _variant_t Left, _variant_t Top)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Vertex;
		param[1].vt = VT_BOOL;
		param[1].boolVal = (Insert == true) ? 1 : 0;
		param[2] = Left;
		param[3] = Top;
		Invoke(4, 604, L"Reshape", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawing::Reshape(long Vertex, bool Insert)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Vertex;
		param[1].vt = VT_BOOL;
		param[1].boolVal = (Insert == true) ? 1 : 0;
		Invoke(2, 604, L"Reshape", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawing::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawing::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawing::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Drawing::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawing::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange Drawing::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Drawing::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawing::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Drawing::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Drawing::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Drawing::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawing::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawing::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawing::get_Vertices(_variant_t Index1, _variant_t Index2)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Index1;
		param[1] = Index2;
		Invoke(2, 621, L"Vertices", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawing::get_Vertices()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 621, L"Vertices", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Drawing::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawing::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Drawing::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Drawing::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Drawing::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Drawings
	Drawings::Drawings()
	{
	}

	Drawings::~Drawings()
	{
	}

	Excel::Drawing Drawings::Add(double X1, double Y1, double X2, double Y2, bool Closed)
	{
		Excel::Drawing returnedValue;
		Com::Param param(5);
		param[0].vt = VT_R8;
		param[0].dblVal = X1;
		param[1].vt = VT_R8;
		param[1].dblVal = Y1;
		param[2].vt = VT_R8;
		param[2].dblVal = X2;
		param[3].vt = VT_R8;
		param[3].dblVal = Y2;
		param[4].vt = VT_BOOL;
		param[4].boolVal = (Closed == true) ? 1 : 0;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Drawings::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawings::put_AddIndent(bool AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AddIndent == true) ? 1 : 0;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Drawings::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawings::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawings::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawings::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawings::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Drawings::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawings::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Drawings::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawings::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters Drawings::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters Drawings::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawings::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawings::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawings::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawings::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Drawings::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Drawings::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Drawings::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawings::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Drawings::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Drawings::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawings::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font Drawings::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Drawings::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawings::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject Drawings::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Drawings::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Drawings::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawings::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawings::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior Drawings::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Drawings::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Drawings::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Drawings::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawings::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawings::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawings::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawings::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Drawings::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawings::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawings::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawings::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Drawings::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Drawings::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawings::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawings::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawings::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Drawings::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Drawings::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawings::Reshape(long Vertex, bool Insert, _variant_t Left, _variant_t Top)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I4;
		param[0].lVal = Vertex;
		param[1].vt = VT_BOOL;
		param[1].boolVal = (Insert == true) ? 1 : 0;
		param[2] = Left;
		param[3] = Top;
		Invoke(4, 604, L"Reshape", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawings::Reshape(long Vertex, bool Insert)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Vertex;
		param[1].vt = VT_BOOL;
		param[1].boolVal = (Insert == true) ? 1 : 0;
		Invoke(2, 604, L"Reshape", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawings::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawings::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Drawings::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Drawings::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawings::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange Drawings::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Drawings::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Drawings::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Drawings::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Drawings::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Drawings::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Drawings::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Drawings::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Drawings::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Drawings::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Drawings::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Drawings::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Drawings::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Drawings::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void Drawings::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void Drawings::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	void Drawings::_Dummy44()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65580, L"_Dummy44", param, returnedValue, DISPATCH_METHOD);
	}

	void Drawings::_Dummy46()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65582, L"_Dummy46", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Drawings::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________RoutingSlip
	RoutingSlip::RoutingSlip()
	{
	}

	RoutingSlip::~RoutingSlip()
	{
	}

	Excel::ApplicationX RoutingSlip::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator RoutingSlip::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlRoutingSlipDelivery RoutingSlip::get_Delivery()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 955, L"Delivery", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlRoutingSlipDelivery)returnedValue.iVal;
	}

	void RoutingSlip::put_Delivery(Excel::XlRoutingSlipDelivery Delivery)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Delivery;
		Invoke(1, 955, L"Delivery", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t RoutingSlip::get_Message()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 954, L"Message", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void RoutingSlip::put_Message(_variant_t Message)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Message;
		Invoke(1, 954, L"Message", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object RoutingSlip::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t RoutingSlip::get_Recipients(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 952, L"Recipients", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t RoutingSlip::get_Recipients()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 952, L"Recipients", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void RoutingSlip::put_Recipients(_variant_t Recipients, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Recipients;
		param[1] = Index;
		Invoke(2, 952, L"Recipients", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void RoutingSlip::put_Recipients(_variant_t Recipients)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Recipients;
		Invoke(1, 952, L"Recipients", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t RoutingSlip::Reset()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 555, L"Reset", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool RoutingSlip::get_ReturnWhenDone()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 956, L"ReturnWhenDone", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void RoutingSlip::put_ReturnWhenDone(bool ReturnWhenDone)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ReturnWhenDone == true) ? 1 : 0;
		Invoke(1, 956, L"ReturnWhenDone", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlRoutingSlipStatus RoutingSlip::get_Status()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 958, L"Status", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlRoutingSlipStatus)returnedValue.iVal;
	}

	_variant_t RoutingSlip::get_Subject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 953, L"Subject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void RoutingSlip::put_Subject(_variant_t Subject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Subject;
		Invoke(1, 953, L"Subject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool RoutingSlip::get_TrackStatus()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 957, L"TrackStatus", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void RoutingSlip::put_TrackStatus(bool TrackStatus)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TrackStatus == true) ? 1 : 0;
		Invoke(1, 957, L"TrackStatus", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Outline
	Outline::Outline()
	{
	}

	Outline::~Outline()
	{
	}

	Excel::ApplicationX Outline::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Outline::get_AutomaticStyles()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 959, L"AutomaticStyles", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Outline::put_AutomaticStyles(bool AutomaticStyles)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutomaticStyles == true) ? 1 : 0;
		Invoke(1, 959, L"AutomaticStyles", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Outline::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object Outline::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Outline::ShowLevels(_variant_t RowLevels, _variant_t ColumnLevels)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = RowLevels;
		param[1] = ColumnLevels;
		Invoke(2, 960, L"ShowLevels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Outline::ShowLevels()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 960, L"ShowLevels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlSummaryColumn Outline::get_SummaryColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 961, L"SummaryColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSummaryColumn)returnedValue.iVal;
	}

	void Outline::put_SummaryColumn(Excel::XlSummaryColumn SummaryColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SummaryColumn;
		Invoke(1, 961, L"SummaryColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSummaryRow Outline::get_SummaryRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 902, L"SummaryRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSummaryRow)returnedValue.iVal;
	}

	void Outline::put_SummaryRow(Excel::XlSummaryRow SummaryRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SummaryRow;
		Invoke(1, 902, L"SummaryRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Module
	Module::Module()
	{
	}

	Module::~Module()
	{
	}

	void Module::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX Module::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Module::get_CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1373, L"CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Module::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator Module::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Module::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long Module::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t Module::InsertFile(_variant_t Filename, _variant_t Merge)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Filename;
		param[1] = Merge;
		Invoke(2, 584, L"InsertFile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Module::InsertFile(_variant_t Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Filename;
		Invoke(1, 584, L"InsertFile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Module::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	wstring Module::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Module::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Module::get_Next()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 502, L"Next", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Module::get_OnDoubleClick()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Module::put_OnDoubleClick(wstring OnDoubleClick)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnDoubleClick.c_str());
		Invoke(1, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Module::get_OnSheetActivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Module::put_OnSheetActivate(wstring OnSheetActivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetActivate.c_str());
		Invoke(1, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Module::get_OnSheetDeactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Module::put_OnSheetDeactivate(wstring OnSheetDeactivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetDeactivate.c_str());
		Invoke(1, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::PageSetup Module::get_PageSetup()
	{
		Excel::PageSetup returnedValue;
		Com::Param param;
		Invoke(0, 998, L"PageSetup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Module::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Module::get_Previous()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 503, L"Previous", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Module::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Password;
		param[1] = DrawingObjects;
		param[2] = Contents;
		param[3] = Scenarios;
		param[4] = UserInterfaceOnly;
		Invoke(5, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	bool Module::get_ProtectContents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 292, L"ProtectContents", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Module::get_ProtectionMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1159, L"ProtectionMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Module::SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		Invoke(9, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Shapes Module::get_Shapes()
	{
		Excel::Shapes returnedValue;
		Com::Param param;
		Invoke(0, 1377, L"Shapes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Module::Unprotect(_variant_t Password)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Password;
		Invoke(1, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::Unprotect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlSheetVisibility Module::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSheetVisibility)returnedValue.iVal;
	}

	void Module::put_Visible(Excel::XlSheetVisibility Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Module::get__CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Module::put__CodeName(wstring _CodeName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_CodeName.c_str());
		Invoke(1, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Module::_Dummy18()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65554, L"_Dummy18", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::_Dummy21()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65557, L"_Dummy21", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::_Dummy23()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65559, L"_Dummy23", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::_Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Password;
		param[1] = DrawingObjects;
		param[2] = Contents;
		param[3] = Scenarios;
		param[4] = UserInterfaceOnly;
		Invoke(5, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::_Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::_SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		Invoke(9, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::_SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::__SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		Invoke(9, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void Module::__SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Modules
	Modules::Modules()
	{
	}

	Modules::~Modules()
	{
	}

	Excel::Module Modules::Add(_variant_t Before, _variant_t After, _variant_t Count)
	{
		Excel::Module returnedValue;
		Com::Param param(3);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Module Modules::Add()
	{
		Excel::Module returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Modules::Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout)
	{
		Com::Object returnedValue;
		Com::Param param(4);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		param[3] = NewLayout;
		Invoke(4, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Modules::Add2()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Modules::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Modules::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	long Modules::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Modules::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Modules::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::HPageBreaks Modules::get_HPageBreaks()
	{
		Excel::HPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1418, L"HPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Modules::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Modules::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object Modules::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Modules::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		param[8] = IgnorePrintAreas;
		Invoke(9, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::VPageBreaks Modules::get_VPageBreaks()
	{
		Excel::VPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1419, L"VPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Modules::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Modules::put_Visible(_variant_t Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Modules::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Modules::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::_Dummy7()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65543, L"_Dummy7", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr Modules::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	void Modules::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Modules::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________DialogSheet
	DialogSheet::DialogSheet()
	{
	}

	DialogSheet::~DialogSheet()
	{
	}

	void DialogSheet::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX DialogSheet::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheet::Arcs(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 760, L"Arcs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Arcs()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 760, L"Arcs", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::AutoFilter DialogSheet::get_AutoFilter()
	{
		Excel::AutoFilter returnedValue;
		Com::Param param;
		Invoke(0, 793, L"AutoFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheet::Buttons(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 557, L"Buttons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Buttons()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 557, L"Buttons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::ChartObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1060, L"ChartObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::ChartObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 1060, L"ChartObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::CheckBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 824, L"CheckBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::CheckBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 824, L"CheckBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DialogSheet::CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		Invoke(4, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 505, L"CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::CircleInvalid()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1437, L"CircleInvalid", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::ClearCircles()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1436, L"ClearCircles", param, returnedValue, DISPATCH_METHOD);
	}

	wstring DialogSheet::get_CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1373, L"CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::Comments DialogSheet::get_Comments()
	{
		Excel::Comments returnedValue;
		Com::Param param;
		Invoke(0, 575, L"Comments", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheet::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator DialogSheet::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CustomProperties DialogSheet::get_CustomProperties()
	{
		Excel::CustomProperties returnedValue;
		Com::Param param;
		Invoke(0, 2030, L"CustomProperties", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DialogSheet::get_DefaultButton()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 857, L"DefaultButton", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheet::put_DefaultButton(_variant_t DefaultButton)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = DefaultButton;
		Invoke(1, 857, L"DefaultButton", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DialogSheet::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::DialogFrame DialogSheet::get_DialogFrame()
	{
		Excel::DialogFrame returnedValue;
		Com::Param param;
		Invoke(0, 839, L"DialogFrame", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DialogSheet::get_DisplayAutomaticPageBreaks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 643, L"DisplayAutomaticPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogSheet::put_DisplayAutomaticPageBreaks(bool DisplayAutomaticPageBreaks)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayAutomaticPageBreaks == true) ? 1 : 0;
		Invoke(1, 643, L"DisplayAutomaticPageBreaks", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DialogSheet::get_DisplayPageBreaks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1435, L"DisplayPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogSheet::put_DisplayPageBreaks(bool DisplayPageBreaks)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayPageBreaks == true) ? 1 : 0;
		Invoke(1, 1435, L"DisplayPageBreaks", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DialogSheet::get_DisplayRightToLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1774, L"DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogSheet::put_DisplayRightToLeft(bool DisplayRightToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayRightToLeft == true) ? 1 : 0;
		Invoke(1, 1774, L"DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DialogSheet::DrawingObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 88, L"DrawingObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::DrawingObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 88, L"DrawingObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Drawings(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 772, L"Drawings", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Drawings()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 772, L"Drawings", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::DropDowns(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 836, L"DropDowns", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::DropDowns()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 836, L"DropDowns", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::EditBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 828, L"EditBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::EditBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 828, L"EditBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool DialogSheet::get_EnableAutoFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1156, L"EnableAutoFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogSheet::put_EnableAutoFilter(bool EnableAutoFilter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableAutoFilter == true) ? 1 : 0;
		Invoke(1, 1156, L"EnableAutoFilter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DialogSheet::get_EnableCalculation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1424, L"EnableCalculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogSheet::put_EnableCalculation(bool EnableCalculation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableCalculation == true) ? 1 : 0;
		Invoke(1, 1424, L"EnableCalculation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DialogSheet::get_EnableFormatConditionsCalculation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2511, L"EnableFormatConditionsCalculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogSheet::put_EnableFormatConditionsCalculation(bool EnableFormatConditionsCalculation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableFormatConditionsCalculation == true) ? 1 : 0;
		Invoke(1, 2511, L"EnableFormatConditionsCalculation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DialogSheet::get_EnableOutlining()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1157, L"EnableOutlining", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogSheet::put_EnableOutlining(bool EnableOutlining)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableOutlining == true) ? 1 : 0;
		Invoke(1, 1157, L"EnableOutlining", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DialogSheet::get_EnablePivotTable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1158, L"EnablePivotTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DialogSheet::put_EnablePivotTable(bool EnablePivotTable)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnablePivotTable == true) ? 1 : 0;
		Invoke(1, 1158, L"EnablePivotTable", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlEnableSelection DialogSheet::get_EnableSelection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1425, L"EnableSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlEnableSelection)returnedValue.iVal;
	}

	void DialogSheet::put_EnableSelection(Excel::XlEnableSelection EnableSelection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = EnableSelection;
		Invoke(1, 1425, L"EnableSelection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DialogSheet::Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, 1, L"Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DialogSheet::ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr, _variant_t WorkIdentity)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		param[9] = WorkIdentity;
		Invoke(10, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 3175, L"ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t DialogSheet::get_Focus()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 814, L"Focus", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheet::put_Focus(_variant_t Focus)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Focus;
		Invoke(1, 814, L"Focus", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DialogSheet::GroupBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 834, L"GroupBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::GroupBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 834, L"GroupBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::GroupObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1113, L"GroupObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::GroupObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 1113, L"GroupObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::HPageBreaks DialogSheet::get_HPageBreaks()
	{
		Excel::HPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1418, L"HPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DialogSheet::Hide(_variant_t Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Cancel;
		Invoke(1, 813, L"Hide", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool DialogSheet::Hide()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 813, L"Hide", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::Hyperlinks DialogSheet::get_Hyperlinks()
	{
		Excel::Hyperlinks returnedValue;
		Com::Param param;
		Invoke(0, 1393, L"Hyperlinks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long DialogSheet::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object DialogSheet::Labels(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 841, L"Labels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Labels()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 841, L"Labels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Lines(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 767, L"Lines", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Lines()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 767, L"Lines", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::ListBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 832, L"ListBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::ListBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 832, L"ListBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::get_MailEnvelope()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2021, L"MailEnvelope", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheet::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	wstring DialogSheet::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogSheet::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Names DialogSheet::get_Names()
	{
		Excel::Names returnedValue;
		Com::Param param;
		Invoke(0, 442, L"Names", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheet::get_Next()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 502, L"Next", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheet::OLEObjects(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 799, L"OLEObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::OLEObjects()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 799, L"OLEObjects", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring DialogSheet::get_OnDoubleClick()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogSheet::put_OnDoubleClick(wstring OnDoubleClick)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnDoubleClick.c_str());
		Invoke(1, 628, L"OnDoubleClick", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DialogSheet::get_OnSheetActivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogSheet::put_OnSheetActivate(wstring OnSheetActivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetActivate.c_str());
		Invoke(1, 1031, L"OnSheetActivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DialogSheet::get_OnSheetDeactivate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogSheet::put_OnSheetDeactivate(wstring OnSheetDeactivate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnSheetDeactivate.c_str());
		Invoke(1, 1081, L"OnSheetDeactivate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DialogSheet::OptionButtons(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 826, L"OptionButtons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::OptionButtons()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 826, L"OptionButtons", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Ovals(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 801, L"Ovals", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Ovals()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 801, L"Ovals", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PageSetup DialogSheet::get_PageSetup()
	{
		Excel::PageSetup returnedValue;
		Com::Param param;
		Invoke(0, 998, L"PageSetup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheet::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheet::Paste(_variant_t Destination, _variant_t Link)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Destination;
		param[1] = Link;
		Invoke(2, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::Paste()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::PasteSpecial(_variant_t Format, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel, _variant_t NoHTMLFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = Format;
		param[1] = Link;
		param[2] = DisplayAsIcon;
		param[3] = IconFileName;
		param[4] = IconIndex;
		param[5] = IconLabel;
		param[6] = NoHTMLFormatting;
		Invoke(7, 1928, L"PasteSpecial", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::PasteSpecial()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1928, L"PasteSpecial", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object DialogSheet::Pictures(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 771, L"Pictures", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Pictures()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 771, L"Pictures", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::get_Previous()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 503, L"Previous", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheet::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	long DialogSheet::get_PrintedCommentPages()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2857, L"PrintedCommentPages", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DialogSheet::Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly, _variant_t AllowFormattingCells, _variant_t AllowFormattingColumns, _variant_t AllowFormattingRows, _variant_t AllowInsertingColumns, _variant_t AllowInsertingRows, _variant_t AllowInsertingHyperlinks, _variant_t AllowDeletingColumns, _variant_t AllowDeletingRows, _variant_t AllowSorting, _variant_t AllowFiltering, _variant_t AllowUsingPivotTables)
	{
		_variant_t returnedValue;
		Com::Param param(16);
		param[0] = Password;
		param[1] = DrawingObjects;
		param[2] = Contents;
		param[3] = Scenarios;
		param[4] = UserInterfaceOnly;
		param[5] = AllowFormattingCells;
		param[6] = AllowFormattingColumns;
		param[7] = AllowFormattingRows;
		param[8] = AllowInsertingColumns;
		param[9] = AllowInsertingRows;
		param[10] = AllowInsertingHyperlinks;
		param[11] = AllowDeletingColumns;
		param[12] = AllowDeletingRows;
		param[13] = AllowSorting;
		param[14] = AllowFiltering;
		param[15] = AllowUsingPivotTables;
		Invoke(16, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2029, L"Protect", param, returnedValue, DISPATCH_METHOD);
	}

	bool DialogSheet::get_ProtectContents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 292, L"ProtectContents", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool DialogSheet::get_ProtectDrawingObjects()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 293, L"ProtectDrawingObjects", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool DialogSheet::get_ProtectScenarios()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 294, L"ProtectScenarios", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::Protection DialogSheet::get_Protection()
	{
		Excel::Protection returnedValue;
		Com::Param param;
		Invoke(0, 176, L"Protection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DialogSheet::get_ProtectionMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1159, L"ProtectionMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::QueryTables DialogSheet::get_QueryTables()
	{
		Excel::QueryTables returnedValue;
		Com::Param param;
		Invoke(0, 1434, L"QueryTables", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheet::Rectangles(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 774, L"Rectangles", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Rectangles()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 774, L"Rectangles", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DialogSheet::ResetAllPageBreaks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1426, L"ResetAllPageBreaks", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		param[9] = Local;
		Invoke(10, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 3174, L"SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object DialogSheet::get_Scripts()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1816, L"Scripts", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DialogSheet::get_ScrollArea()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1433, L"ScrollArea", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogSheet::put_ScrollArea(wstring ScrollArea)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ScrollArea.c_str());
		Invoke(1, 1433, L"ScrollArea", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DialogSheet::ScrollBars(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 830, L"ScrollBars", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::ScrollBars()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 830, L"ScrollBars", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DialogSheet::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Shapes DialogSheet::get_Shapes()
	{
		Excel::Shapes returnedValue;
		Com::Param param;
		Invoke(0, 1377, L"Shapes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DialogSheet::Show()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 496, L"Show", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::SmartTags DialogSheet::get_SmartTags()
	{
		Excel::SmartTags returnedValue;
		Com::Param param;
		Invoke(0, 2016, L"SmartTags", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sort DialogSheet::get_Sort()
	{
		Excel::Sort returnedValue;
		Com::Param param;
		Invoke(0, 880, L"Sort", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheet::Spinners(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 838, L"Spinners", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::Spinners()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 838, L"Spinners", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Tab DialogSheet::get_Tab()
	{
		Excel::Tab returnedValue;
		Com::Param param;
		Invoke(0, 1041, L"Tab", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheet::TextBoxes(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 777, L"TextBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheet::TextBoxes()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 777, L"TextBoxes", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DialogSheet::Unprotect(_variant_t Password)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Password;
		Invoke(1, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::Unprotect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::VPageBreaks DialogSheet::get_VPageBreaks()
	{
		Excel::VPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1419, L"VPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlSheetVisibility DialogSheet::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSheetVisibility)returnedValue.iVal;
	}

	void DialogSheet::put_Visible(Excel::XlSheetVisibility Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DialogSheet::_CheckSpelling(_variant_t CustomDictionary, _variant_t IgnoreUppercase, _variant_t AlwaysSuggest, _variant_t SpellLang, _variant_t IgnoreFinalYaa, _variant_t SpellScript)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = CustomDictionary;
		param[1] = IgnoreUppercase;
		param[2] = AlwaysSuggest;
		param[3] = SpellLang;
		param[4] = IgnoreFinalYaa;
		param[5] = SpellScript;
		Invoke(6, 1817, L"_CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_CheckSpelling()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1817, L"_CheckSpelling", param, returnedValue, DISPATCH_METHOD);
	}

	wstring DialogSheet::get__CodeName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DialogSheet::put__CodeName(wstring _CodeName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_CodeName.c_str());
		Invoke(1, -2147418112, L"_CodeName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DialogSheet::get__DisplayRightToLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 648, L"_DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DialogSheet::put__DisplayRightToLeft(long _DisplayRightToLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _DisplayRightToLeft;
		Invoke(1, 648, L"_DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DialogSheet::_Dummy113()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65649, L"_Dummy113", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy114()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65650, L"_Dummy114", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy115()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65651, L"_Dummy115", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy29()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65565, L"_Dummy29", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy31()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65567, L"_Dummy31", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy32()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65568, L"_Dummy32", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy34()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65570, L"_Dummy34", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy36()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65572, L"_Dummy36", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy40()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65576, L"_Dummy40", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy41()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65577, L"_Dummy41", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy42()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65578, L"_Dummy42", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy43()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65579, L"_Dummy43", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy44()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65580, L"_Dummy44", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy45()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65581, L"_Dummy45", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy56()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65592, L"_Dummy56", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy65()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65601, L"_Dummy65", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy66()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65602, L"_Dummy66", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy67()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65603, L"_Dummy67", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy69()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65605, L"_Dummy69", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy74()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65610, L"_Dummy74", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy75()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65611, L"_Dummy75", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy76()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65612, L"_Dummy76", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy78()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65614, L"_Dummy78", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy79()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65615, L"_Dummy79", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy82()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65618, L"_Dummy82", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy83()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65619, L"_Dummy83", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy85()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65621, L"_Dummy85", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy86()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65622, L"_Dummy86", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy88()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65624, L"_Dummy88", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy89()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65625, L"_Dummy89", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Dummy90()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65626, L"_Dummy90", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t DialogSheet::_Evaluate(_variant_t Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Name;
		Invoke(1, -5, L"_Evaluate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DialogSheet::_ExportAsFixedFormat(Excel::XlFixedFormatType Type, _variant_t Filename, _variant_t Quality, _variant_t IncludeDocProperties, _variant_t IgnorePrintAreas, _variant_t From, _variant_t To, _variant_t OpenAfterPublish, _variant_t FixedFormatExtClassPtr)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Filename;
		param[2] = Quality;
		param[3] = IncludeDocProperties;
		param[4] = IgnorePrintAreas;
		param[5] = From;
		param[6] = To;
		param[7] = OpenAfterPublish;
		param[8] = FixedFormatExtClassPtr;
		Invoke(9, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_ExportAsFixedFormat(Excel::XlFixedFormatType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 2493, L"_ExportAsFixedFormat", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_PasteSpecial(_variant_t Format, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0] = Format;
		param[1] = Link;
		param[2] = DisplayAsIcon;
		param[3] = IconFileName;
		param[4] = IconIndex;
		param[5] = IconLabel;
		Invoke(6, 1027, L"_PasteSpecial", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_PasteSpecial()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1027, L"_PasteSpecial", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Protect(_variant_t Password, _variant_t DrawingObjects, _variant_t Contents, _variant_t Scenarios, _variant_t UserInterfaceOnly)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Password;
		param[1] = DrawingObjects;
		param[2] = Contents;
		param[3] = Scenarios;
		param[4] = UserInterfaceOnly;
		Invoke(5, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_Protect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 282, L"_Protect", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout, _variant_t Local)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		param[9] = Local;
		Invoke(10, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::_SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1925, L"_SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::__SaveAs(wstring Filename, _variant_t FileFormat, _variant_t Password, _variant_t WriteResPassword, _variant_t ReadOnlyRecommended, _variant_t CreateBackup, _variant_t AddToMru, _variant_t TextCodepage, _variant_t TextVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = FileFormat;
		param[2] = Password;
		param[3] = WriteResPassword;
		param[4] = ReadOnlyRecommended;
		param[5] = CreateBackup;
		param[6] = AddToMru;
		param[7] = TextCodepage;
		param[8] = TextVisualLayout;
		Invoke(9, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheet::__SaveAs(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 284, L"__SaveAs", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________DialogSheets
	DialogSheets::DialogSheets()
	{
	}

	DialogSheets::~DialogSheets()
	{
	}

	Excel::DialogSheet DialogSheets::Add(_variant_t Before, _variant_t After, _variant_t Count)
	{
		Excel::DialogSheet returnedValue;
		Com::Param param(3);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::DialogSheet DialogSheets::Add()
	{
		Excel::DialogSheet returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheets::Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout)
	{
		Com::Object returnedValue;
		Com::Param param(4);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		param[3] = NewLayout;
		Invoke(4, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object DialogSheets::Add2()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX DialogSheets::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheets::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	long DialogSheets::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator DialogSheets::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void DialogSheets::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::HPageBreaks DialogSheets::get_HPageBreaks()
	{
		Excel::HPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1418, L"HPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheets::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheets::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object DialogSheets::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheets::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::VPageBreaks DialogSheets::get_VPageBreaks()
	{
		Excel::VPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1419, L"VPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DialogSheets::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheets::put_Visible(_variant_t Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DialogSheets::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DialogSheets::_Dummy7()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65543, L"_Dummy7", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr DialogSheets::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	void DialogSheets::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void DialogSheets::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Worksheets
	Worksheets::Worksheets()
	{
	}

	Worksheets::~Worksheets()
	{
	}

	Com::Object Worksheets::Add(_variant_t Before, _variant_t After, _variant_t Count, _variant_t Type)
	{
		Com::Object returnedValue;
		Com::Param param(4);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		param[3] = Type;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Worksheets::Add()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Worksheets::Add2(_variant_t Before, _variant_t After, _variant_t Count, _variant_t NewLayout)
	{
		Com::Object returnedValue;
		Com::Param param(4);
		param[0] = Before;
		param[1] = After;
		param[2] = Count;
		param[3] = NewLayout;
		Invoke(4, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Worksheets::Add2()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Worksheets::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Worksheets::Copy(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::Copy()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	long Worksheets::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Worksheets::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Worksheets::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::FillAcrossSheets(Excel::Range& Range, Excel::XlFillWith Type)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		param[1].vt = VT_I2;
		param[1].iVal = Type;
		Invoke(2, 469, L"FillAcrossSheets", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::HPageBreaks Worksheets::get_HPageBreaks()
	{
		Excel::HPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1418, L"HPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Worksheets::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Worksheets::Move(_variant_t Before, _variant_t After)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Before;
		param[1] = After;
		Invoke(2, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::Move()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 637, L"Move", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object Worksheets::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Worksheets::PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName, _variant_t IgnorePrintAreas)
	{
		_variant_t returnedValue;
		Com::Param param(9);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		param[8] = IgnorePrintAreas;
		Invoke(9, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 2361, L"PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::PrintPreview(_variant_t EnableChanges)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EnableChanges;
		Invoke(1, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::PrintPreview()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 281, L"PrintPreview", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::VPageBreaks Worksheets::get_VPageBreaks()
	{
		Excel::VPageBreaks returnedValue;
		Com::Param param;
		Invoke(0, 1419, L"VPageBreaks", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Worksheets::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Worksheets::put_Visible(_variant_t Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Worksheets::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Worksheets::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	void Worksheets::_PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate, _variant_t PrToFileName)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		param[7] = PrToFileName;
		Invoke(8, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::_PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1772, L"_PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::__PrintOut(_variant_t From, _variant_t To, _variant_t Copies, _variant_t Preview, _variant_t ActivePrinter, _variant_t PrintToFile, _variant_t Collate)
	{
		_variant_t returnedValue;
		Com::Param param(7);
		param[0] = From;
		param[1] = To;
		param[2] = Copies;
		param[3] = Preview;
		param[4] = ActivePrinter;
		param[5] = PrintToFile;
		param[6] = Collate;
		Invoke(7, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	void Worksheets::__PrintOut()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 905, L"__PrintOut", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________PageSetup
	PageSetup::PageSetup()
	{
	}

	PageSetup::~PageSetup()
	{
	}

	bool PageSetup::get_AlignMarginsHeaderFooter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2603, L"AlignMarginsHeaderFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_AlignMarginsHeaderFooter(bool AlignMarginsHeaderFooter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AlignMarginsHeaderFooter == true) ? 1 : 0;
		Invoke(1, 2603, L"AlignMarginsHeaderFooter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX PageSetup::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PageSetup::get_BlackAndWhite()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1009, L"BlackAndWhite", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_BlackAndWhite(bool BlackAndWhite)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BlackAndWhite == true) ? 1 : 0;
		Invoke(1, 1009, L"BlackAndWhite", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PageSetup::get_BottomMargin()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1002, L"BottomMargin", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PageSetup::put_BottomMargin(double BottomMargin)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = BottomMargin;
		Invoke(1, 1002, L"BottomMargin", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PageSetup::get_CenterFooter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1010, L"CenterFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_CenterFooter(wstring CenterFooter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(CenterFooter.c_str());
		Invoke(1, 1010, L"CenterFooter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Graphic PageSetup::get_CenterFooterPicture()
	{
		Excel::Graphic returnedValue;
		Com::Param param;
		Invoke(0, 2151, L"CenterFooterPicture", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PageSetup::get_CenterHeader()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1011, L"CenterHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_CenterHeader(wstring CenterHeader)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(CenterHeader.c_str());
		Invoke(1, 1011, L"CenterHeader", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Graphic PageSetup::get_CenterHeaderPicture()
	{
		Excel::Graphic returnedValue;
		Com::Param param;
		Invoke(0, 2150, L"CenterHeaderPicture", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PageSetup::get_CenterHorizontally()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1005, L"CenterHorizontally", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_CenterHorizontally(bool CenterHorizontally)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CenterHorizontally == true) ? 1 : 0;
		Invoke(1, 1005, L"CenterHorizontally", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PageSetup::get_CenterVertically()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1006, L"CenterVertically", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_CenterVertically(bool CenterVertically)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CenterVertically == true) ? 1 : 0;
		Invoke(1, 1006, L"CenterVertically", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlObjectSize PageSetup::get_ChartSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1012, L"ChartSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlObjectSize)returnedValue.iVal;
	}

	void PageSetup::put_ChartSize(Excel::XlObjectSize ChartSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ChartSize;
		Invoke(1, 1012, L"ChartSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator PageSetup::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool PageSetup::get_DifferentFirstPageHeaderFooter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2601, L"DifferentFirstPageHeaderFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_DifferentFirstPageHeaderFooter(bool DifferentFirstPageHeaderFooter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DifferentFirstPageHeaderFooter == true) ? 1 : 0;
		Invoke(1, 2601, L"DifferentFirstPageHeaderFooter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PageSetup::get_Draft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1020, L"Draft", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_Draft(bool Draft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Draft == true) ? 1 : 0;
		Invoke(1, 1020, L"Draft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Page PageSetup::get_EvenPage()
	{
		Excel::Page returnedValue;
		Com::Param param;
		Invoke(0, 2605, L"EvenPage", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Page PageSetup::get_FirstPage()
	{
		Excel::Page returnedValue;
		Com::Param param;
		Invoke(0, 2606, L"FirstPage", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PageSetup::get_FirstPageNumber()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1008, L"FirstPageNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PageSetup::put_FirstPageNumber(long FirstPageNumber)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = FirstPageNumber;
		Invoke(1, 1008, L"FirstPageNumber", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PageSetup::get_FitToPagesTall()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1013, L"FitToPagesTall", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PageSetup::put_FitToPagesTall(_variant_t FitToPagesTall)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FitToPagesTall;
		Invoke(1, 1013, L"FitToPagesTall", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PageSetup::get_FitToPagesWide()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1014, L"FitToPagesWide", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PageSetup::put_FitToPagesWide(_variant_t FitToPagesWide)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FitToPagesWide;
		Invoke(1, 1014, L"FitToPagesWide", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PageSetup::get_FooterMargin()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1015, L"FooterMargin", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PageSetup::put_FooterMargin(double FooterMargin)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = FooterMargin;
		Invoke(1, 1015, L"FooterMargin", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PageSetup::get_HeaderMargin()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1016, L"HeaderMargin", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PageSetup::put_HeaderMargin(double HeaderMargin)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = HeaderMargin;
		Invoke(1, 1016, L"HeaderMargin", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PageSetup::get_LeftFooter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1017, L"LeftFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_LeftFooter(wstring LeftFooter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LeftFooter.c_str());
		Invoke(1, 1017, L"LeftFooter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Graphic PageSetup::get_LeftFooterPicture()
	{
		Excel::Graphic returnedValue;
		Com::Param param;
		Invoke(0, 2153, L"LeftFooterPicture", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PageSetup::get_LeftHeader()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1018, L"LeftHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_LeftHeader(wstring LeftHeader)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LeftHeader.c_str());
		Invoke(1, 1018, L"LeftHeader", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Graphic PageSetup::get_LeftHeaderPicture()
	{
		Excel::Graphic returnedValue;
		Com::Param param;
		Invoke(0, 2152, L"LeftHeaderPicture", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double PageSetup::get_LeftMargin()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 999, L"LeftMargin", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PageSetup::put_LeftMargin(double LeftMargin)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = LeftMargin;
		Invoke(1, 999, L"LeftMargin", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PageSetup::get_OddAndEvenPagesHeaderFooter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2600, L"OddAndEvenPagesHeaderFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_OddAndEvenPagesHeaderFooter(bool OddAndEvenPagesHeaderFooter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (OddAndEvenPagesHeaderFooter == true) ? 1 : 0;
		Invoke(1, 2600, L"OddAndEvenPagesHeaderFooter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlOrder PageSetup::get_Order()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlOrder)returnedValue.iVal;
	}

	void PageSetup::put_Order(Excel::XlOrder Order)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Order;
		Invoke(1, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPageOrientation PageSetup::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPageOrientation)returnedValue.iVal;
	}

	void PageSetup::put_Orientation(Excel::XlPageOrientation Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Pages PageSetup::get_Pages()
	{
		Excel::Pages returnedValue;
		Com::Param param;
		Invoke(0, 2604, L"Pages", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlPaperSize PageSetup::get_PaperSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1007, L"PaperSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPaperSize)returnedValue.iVal;
	}

	void PageSetup::put_PaperSize(Excel::XlPaperSize PaperSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PaperSize;
		Invoke(1, 1007, L"PaperSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PageSetup::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PageSetup::get_PrintArea()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1019, L"PrintArea", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_PrintArea(wstring PrintArea)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PrintArea.c_str());
		Invoke(1, 1019, L"PrintArea", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPrintLocation PageSetup::get_PrintComments()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1524, L"PrintComments", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPrintLocation)returnedValue.iVal;
	}

	void PageSetup::put_PrintComments(Excel::XlPrintLocation PrintComments)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PrintComments;
		Invoke(1, 1524, L"PrintComments", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPrintErrors PageSetup::get_PrintErrors()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2149, L"PrintErrors", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPrintErrors)returnedValue.iVal;
	}

	void PageSetup::put_PrintErrors(Excel::XlPrintErrors PrintErrors)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PrintErrors;
		Invoke(1, 2149, L"PrintErrors", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PageSetup::get_PrintGridlines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1004, L"PrintGridlines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_PrintGridlines(bool PrintGridlines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintGridlines == true) ? 1 : 0;
		Invoke(1, 1004, L"PrintGridlines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PageSetup::get_PrintHeadings()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1003, L"PrintHeadings", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_PrintHeadings(bool PrintHeadings)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintHeadings == true) ? 1 : 0;
		Invoke(1, 1003, L"PrintHeadings", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PageSetup::get_PrintNotes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1021, L"PrintNotes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_PrintNotes(bool PrintNotes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintNotes == true) ? 1 : 0;
		Invoke(1, 1021, L"PrintNotes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PageSetup::get_PrintQuality(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1022, L"PrintQuality", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PageSetup::get_PrintQuality()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1022, L"PrintQuality", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PageSetup::put_PrintQuality(_variant_t PrintQuality, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = PrintQuality;
		param[1] = Index;
		Invoke(2, 1022, L"PrintQuality", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void PageSetup::put_PrintQuality(_variant_t PrintQuality)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PrintQuality;
		Invoke(1, 1022, L"PrintQuality", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PageSetup::get_PrintTitleColumns()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1023, L"PrintTitleColumns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_PrintTitleColumns(wstring PrintTitleColumns)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PrintTitleColumns.c_str());
		Invoke(1, 1023, L"PrintTitleColumns", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PageSetup::get_PrintTitleRows()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1024, L"PrintTitleRows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_PrintTitleRows(wstring PrintTitleRows)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PrintTitleRows.c_str());
		Invoke(1, 1024, L"PrintTitleRows", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PageSetup::get_RightFooter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1025, L"RightFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_RightFooter(wstring RightFooter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(RightFooter.c_str());
		Invoke(1, 1025, L"RightFooter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Graphic PageSetup::get_RightFooterPicture()
	{
		Excel::Graphic returnedValue;
		Com::Param param;
		Invoke(0, 2155, L"RightFooterPicture", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PageSetup::get_RightHeader()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1026, L"RightHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PageSetup::put_RightHeader(wstring RightHeader)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(RightHeader.c_str());
		Invoke(1, 1026, L"RightHeader", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Graphic PageSetup::get_RightHeaderPicture()
	{
		Excel::Graphic returnedValue;
		Com::Param param;
		Invoke(0, 2154, L"RightHeaderPicture", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double PageSetup::get_RightMargin()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1000, L"RightMargin", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PageSetup::put_RightMargin(double RightMargin)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = RightMargin;
		Invoke(1, 1000, L"RightMargin", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool PageSetup::get_ScaleWithDocHeaderFooter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2602, L"ScaleWithDocHeaderFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PageSetup::put_ScaleWithDocHeaderFooter(bool ScaleWithDocHeaderFooter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ScaleWithDocHeaderFooter == true) ? 1 : 0;
		Invoke(1, 2602, L"ScaleWithDocHeaderFooter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PageSetup::get_TopMargin()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1001, L"TopMargin", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PageSetup::put_TopMargin(double TopMargin)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = TopMargin;
		Invoke(1, 1001, L"TopMargin", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PageSetup::get_Zoom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 663, L"Zoom", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PageSetup::put_Zoom(_variant_t Zoom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Zoom;
		Invoke(1, 663, L"Zoom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Names
	Names::Names()
	{
	}

	Names::~Names()
	{
	}

	Excel::Name Names::Add(_variant_t Name, _variant_t RefersTo, _variant_t Visible, _variant_t MacroType, _variant_t ShortcutKey, _variant_t Category, _variant_t NameLocal, _variant_t RefersToLocal, _variant_t CategoryLocal, _variant_t RefersToR1C1, _variant_t RefersToR1C1Local)
	{
		Excel::Name returnedValue;
		Com::Param param(11);
		param[0] = Name;
		param[1] = RefersTo;
		param[2] = Visible;
		param[3] = MacroType;
		param[4] = ShortcutKey;
		param[5] = Category;
		param[6] = NameLocal;
		param[7] = RefersToLocal;
		param[8] = CategoryLocal;
		param[9] = RefersToR1C1;
		param[10] = RefersToR1C1Local;
		Invoke(11, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Name Names::Add()
	{
		Excel::Name returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Names::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Names::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Names::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Name Names::Item(_variant_t Index, _variant_t IndexLocal, _variant_t RefersTo)
	{
		Excel::Name returnedValue;
		Com::Param param(3);
		param[0] = Index;
		param[1] = IndexLocal;
		param[2] = RefersTo;
		Invoke(3, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Name Names::Item()
	{
		Excel::Name returnedValue;
		Com::Param param(0);
		Invoke(0, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Names::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Name Names::_Default(_variant_t Index, _variant_t IndexLocal, _variant_t RefersTo)
	{
		Excel::Name returnedValue;
		Com::Param param(3);
		param[0] = Index;
		param[1] = IndexLocal;
		param[2] = RefersTo;
		Invoke(3, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Name Names::_Default()
	{
		Excel::Name returnedValue;
		Com::Param param(0);
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr Names::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Name
	Name::Name()
	{
	}

	Name::~Name()
	{
	}

	Excel::ApplicationX Name::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Name::get_Category()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 934, L"Category", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Name::put_Category(wstring Category)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Category.c_str());
		Invoke(1, 934, L"Category", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Name::get_CategoryLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 935, L"CategoryLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Name::put_CategoryLocal(wstring CategoryLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(CategoryLocal.c_str());
		Invoke(1, 935, L"CategoryLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Name::get_Comment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 910, L"Comment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Name::put_Comment(wstring Comment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Comment.c_str());
		Invoke(1, 910, L"Comment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Name::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Name::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long Name::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlXLMMacroType Name::get_MacroType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 936, L"MacroType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlXLMMacroType)returnedValue.iVal;
	}

	void Name::put_MacroType(Excel::XlXLMMacroType MacroType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MacroType;
		Invoke(1, 936, L"MacroType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Name::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Name::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Name::get_NameLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 937, L"NameLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Name::put_NameLocal(wstring NameLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NameLocal.c_str());
		Invoke(1, 937, L"NameLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Name::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Name::get_RefersTo()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 938, L"RefersTo", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Name::put_RefersTo(_variant_t RefersTo)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = RefersTo;
		Invoke(1, 938, L"RefersTo", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Name::get_RefersToLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 939, L"RefersToLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Name::put_RefersToLocal(_variant_t RefersToLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = RefersToLocal;
		Invoke(1, 939, L"RefersToLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Name::get_RefersToR1C1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 940, L"RefersToR1C1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Name::put_RefersToR1C1(_variant_t RefersToR1C1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = RefersToR1C1;
		Invoke(1, 940, L"RefersToR1C1", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Name::get_RefersToR1C1Local()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 941, L"RefersToR1C1Local", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Name::put_RefersToR1C1Local(_variant_t RefersToR1C1Local)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = RefersToR1C1Local;
		Invoke(1, 941, L"RefersToR1C1Local", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Name::get_RefersToRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1160, L"RefersToRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Name::get_ShortcutKey()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 597, L"ShortcutKey", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Name::put_ShortcutKey(wstring ShortcutKey)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ShortcutKey.c_str());
		Invoke(1, 597, L"ShortcutKey", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Name::get_ValidWorkbookParameter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2608, L"ValidWorkbookParameter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring Name::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Name::put_Value(wstring Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Value.c_str());
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Name::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Name::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Name::get_WorkbookParameter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2607, L"WorkbookParameter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Name::put_WorkbookParameter(bool WorkbookParameter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WorkbookParameter == true) ? 1 : 0;
		Invoke(1, 2607, L"WorkbookParameter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Name::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ChartObject
	ChartObject::ChartObject()
	{
	}

	ChartObject::~ChartObject()
	{
	}

	_variant_t ChartObject::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ChartObject::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border ChartObject::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ChartObject::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartObject::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartX ChartObject::get_Chart()
	{
		Excel::ChartX returnedValue;
		Com::Param param;
		Invoke(0, 7, L"Chart", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartObject::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObject::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator ChartObject::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t ChartObject::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObject::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartObject::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ChartObject::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObject::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartObject::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartObject::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartObject::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Interior ChartObject::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ChartObject::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartObject::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObject::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObject::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartObject::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartObject::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartObject::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartObject::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartObject::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartObject::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartObject::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObject::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObject::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObject::get_ProtectChartObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1529, L"ProtectChartObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObject::put_ProtectChartObject(bool ProtectChartObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ProtectChartObject == true) ? 1 : 0;
		Invoke(1, 1529, L"ProtectChartObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObject::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObject::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartObject::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObject::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObject::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ChartObject::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObject::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange ChartObject::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ChartObject::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartObject::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range ChartObject::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ChartObject::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObject::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartObject::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartObject::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartObject::get_ZOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 622, L"ZOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t ChartObject::_Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2609, L"_Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________ChartObjects
	ChartObjects::ChartObjects()
	{
	}

	ChartObjects::~ChartObjects()
	{
	}

	Excel::ChartObject ChartObjects::Add(double Left, double Top, double Width, double Height)
	{
		Excel::ChartObject returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		param[1].vt = VT_R8;
		param[1].dblVal = Top;
		param[2].vt = VT_R8;
		param[2].dblVal = Width;
		param[3].vt = VT_R8;
		param[3].dblVal = Height;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ChartObjects::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border ChartObjects::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartObjects::BringToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 602, L"BringToFront", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObjects::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObjects::CopyPicture(Excel::XlPictureAppearance Appearance, Excel::XlCopyPictureFormat Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Appearance;
		param[1].vt = VT_I2;
		param[1].iVal = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ChartObjects::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ChartObjects::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t ChartObjects::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObjects::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartObjects::Duplicate()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ChartObjects::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObjects::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupObject ChartObjects::Group()
	{
		Excel::GroupObject returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double ChartObjects::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartObjects::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior ChartObjects::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartObjects::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double ChartObjects::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartObjects::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObjects::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObjects::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartObjects::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartObjects::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartObjects::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartObjects::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartObjects::put_Placement(_variant_t Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObjects::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObjects::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObjects::get_ProtectChartObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1529, L"ProtectChartObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObjects::put_ProtectChartObject(bool ProtectChartObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ProtectChartObject == true) ? 1 : 0;
		Invoke(1, 1529, L"ProtectChartObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObjects::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObjects::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartObjects::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObjects::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartObjects::SendToBack()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 605, L"SendToBack", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ChartObjects::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObjects::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeRange ChartObjects::get_ShapeRange()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1528, L"ShapeRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ChartObjects::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartObjects::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartObjects::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartObjects::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartObjects::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartObjects::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartObjects::_Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2609, L"_Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartObjects::_Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartObjects::_Dummy12()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65548, L"_Dummy12", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartObjects::_Dummy15()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65551, L"_Dummy15", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartObjects::_Dummy22()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65558, L"_Dummy22", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartObjects::_Dummy25()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65561, L"_Dummy25", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartObjects::_Dummy27()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65563, L"_Dummy27", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartObjects::_Dummy28()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65564, L"_Dummy28", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartObjects::_Dummy3()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65539, L"_Dummy3", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr ChartObjects::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Mailer
	Mailer::Mailer()
	{
	}

	Mailer::~Mailer()
	{
	}

	Excel::ApplicationX Mailer::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Mailer::get_BCCRecipients()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 983, L"BCCRecipients", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Mailer::put_BCCRecipients(_variant_t BCCRecipients)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = BCCRecipients;
		Invoke(1, 983, L"BCCRecipients", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Mailer::get_CCRecipients()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 982, L"CCRecipients", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Mailer::put_CCRecipients(_variant_t CCRecipients)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CCRecipients;
		Invoke(1, 982, L"CCRecipients", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Mailer::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Mailer::get_Enclosures()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 984, L"Enclosures", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Mailer::put_Enclosures(_variant_t Enclosures)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Enclosures;
		Invoke(1, 984, L"Enclosures", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Mailer::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Mailer::get_Received()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 986, L"Received", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Sys::Time Mailer::get_SendDateTime()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 987, L"SendDateTime", param, returnedValue, DISPATCH_PROPERTYGET);
		return Sys::Convert::VariantToTime(returnedValue);
	}

	wstring Mailer::get_Sender()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 988, L"Sender", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Mailer::get_Subject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 953, L"Subject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Mailer::put_Subject(wstring Subject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Subject.c_str());
		Invoke(1, 953, L"Subject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Mailer::get_ToRecipients()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 981, L"ToRecipients", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Mailer::put_ToRecipients(_variant_t ToRecipients)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ToRecipients;
		Invoke(1, 981, L"ToRecipients", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Mailer::get_WhichAddress()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 974, L"WhichAddress", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Mailer::put_WhichAddress(_variant_t WhichAddress)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = WhichAddress;
		Invoke(1, 974, L"WhichAddress", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________CustomViews
	CustomViews::CustomViews()
	{
	}

	CustomViews::~CustomViews()
	{
	}

	Excel::CustomView CustomViews::Add(wstring ViewName, _variant_t PrintSettings, _variant_t RowColSettings)
	{
		Excel::CustomView returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ViewName.c_str());
		param[1] = PrintSettings;
		param[2] = RowColSettings;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CustomView CustomViews::Add(wstring ViewName)
	{
		Excel::CustomView returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ViewName.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX CustomViews::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long CustomViews::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator CustomViews::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CustomView CustomViews::Item(_variant_t ViewName)
	{
		Excel::CustomView returnedValue;
		Com::Param param(1);
		param[0] = ViewName;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object CustomViews::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::CustomView CustomViews::get__Default(_variant_t ViewName)
	{
		Excel::CustomView returnedValue;
		Com::Param param(1);
		param[0] = ViewName;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr CustomViews::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________CustomView
	CustomView::CustomView()
	{
	}

	CustomView::~CustomView()
	{
	}

	Excel::ApplicationX CustomView::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator CustomView::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void CustomView::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring CustomView::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object CustomView::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool CustomView::get_PrintSettings()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1577, L"PrintSettings", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool CustomView::get_RowColSettings()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1578, L"RowColSettings", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CustomView::Show()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 496, L"Show", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________FormatConditions
	FormatConditions::FormatConditions()
	{
	}

	FormatConditions::~FormatConditions()
	{
	}

	Com::Object FormatConditions::Add(Excel::XlFormatConditionType Type, _variant_t Operator, _variant_t Formula1, _variant_t Formula2, _variant_t String, _variant_t TextOperator, _variant_t DateOperator, _variant_t ScopeType)
	{
		Com::Object returnedValue;
		Com::Param param(8);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Operator;
		param[2] = Formula1;
		param[3] = Formula2;
		param[4] = String;
		param[5] = TextOperator;
		param[6] = DateOperator;
		param[7] = ScopeType;
		Invoke(8, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FormatConditions::Add(Excel::XlFormatConditionType Type)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FormatConditions::AddAboveAverage()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2621, L"AddAboveAverage", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FormatConditions::AddColorScale(long ColorScaleType)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ColorScaleType;
		Invoke(1, 2616, L"AddColorScale", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FormatConditions::AddDatabar()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2618, L"AddDatabar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FormatConditions::AddIconSetCondition()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2619, L"AddIconSetCondition", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FormatConditions::AddTop10()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2620, L"AddTop10", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FormatConditions::AddUniqueValues()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2622, L"AddUniqueValues", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX FormatConditions::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long FormatConditions::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator FormatConditions::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void FormatConditions::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object FormatConditions::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FormatConditions::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object FormatConditions::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr FormatConditions::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________FormatCondition
	FormatCondition::FormatCondition()
	{
	}

	FormatCondition::~FormatCondition()
	{
	}

	Excel::ApplicationX FormatCondition::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range FormatCondition::get_AppliesTo()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2626, L"AppliesTo", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Borders FormatCondition::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator FormatCondition::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlTimePeriods FormatCondition::get_DateOperator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2614, L"DateOperator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTimePeriods)returnedValue.iVal;
	}

	void FormatCondition::put_DateOperator(Excel::XlTimePeriods DateOperator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DateOperator;
		Invoke(1, 2614, L"DateOperator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void FormatCondition::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Font FormatCondition::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring FormatCondition::get_Formula1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1579, L"Formula1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring FormatCondition::get_Formula2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1580, L"Formula2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::Interior FormatCondition::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void FormatCondition::Modify(Excel::XlFormatConditionType Type, _variant_t Operator, _variant_t Formula1, _variant_t Formula2, _variant_t String, _variant_t Operator2)
	{
		_variant_t returnedValue;
		Com::Param param(6);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Operator;
		param[2] = Formula1;
		param[3] = Formula2;
		param[4] = String;
		param[5] = Operator2;
		Invoke(6, 1581, L"Modify", param, returnedValue, DISPATCH_METHOD);
	}

	void FormatCondition::Modify(Excel::XlFormatConditionType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 1581, L"Modify", param, returnedValue, DISPATCH_METHOD);
	}

	void FormatCondition::ModifyAppliesToRange(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 2627, L"ModifyAppliesToRange", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t FormatCondition::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void FormatCondition::put_NumberFormat(_variant_t NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormat;
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long FormatCondition::get_Operator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 797, L"Operator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool FormatCondition::get_PTCondition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2631, L"PTCondition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object FormatCondition::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long FormatCondition::get_Priority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void FormatCondition::put_Priority(long Priority)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Priority;
		Invoke(1, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotConditionScope FormatCondition::get_ScopeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotConditionScope)returnedValue.iVal;
	}

	void FormatCondition::put_ScopeType(Excel::XlPivotConditionScope ScopeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScopeType;
		Invoke(1, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void FormatCondition::SetFirstPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2629, L"SetFirstPriority", param, returnedValue, DISPATCH_METHOD);
	}

	void FormatCondition::SetLastPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2630, L"SetLastPriority", param, returnedValue, DISPATCH_METHOD);
	}

	bool FormatCondition::get_StopIfTrue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void FormatCondition::put_StopIfTrue(bool StopIfTrue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (StopIfTrue == true) ? 1 : 0;
		Invoke(1, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring FormatCondition::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void FormatCondition::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlContainsOperator FormatCondition::get_TextOperator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2613, L"TextOperator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlContainsOperator)returnedValue.iVal;
	}

	void FormatCondition::put_TextOperator(Excel::XlContainsOperator TextOperator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextOperator;
		Invoke(1, 2613, L"TextOperator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long FormatCondition::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void FormatCondition::_Modify(Excel::XlFormatConditionType Type, _variant_t Operator, _variant_t Formula1, _variant_t Formula2)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Operator;
		param[2] = Formula1;
		param[3] = Formula2;
		Invoke(4, 2623, L"_Modify", param, returnedValue, DISPATCH_METHOD);
	}

	void FormatCondition::_Modify(Excel::XlFormatConditionType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 2623, L"_Modify", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Comments
	Comments::Comments()
	{
	}

	Comments::~Comments()
	{
	}

	Excel::ApplicationX Comments::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Comments::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Comments::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Comment Comments::Item(long Index)
	{
		Excel::Comment returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Comments::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Comment Comments::get__Default(long Index)
	{
		Excel::Comment returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Comments::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Comment
	Comment::Comment()
	{
	}

	Comment::~Comment()
	{
	}

	Excel::ApplicationX Comment::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Comment::get_Author()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 574, L"Author", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlCreator Comment::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Comment::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Comment Comment::Next()
	{
		Excel::Comment returnedValue;
		Com::Param param;
		Invoke(0, 502, L"Next", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Comment::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Comment Comment::Previous()
	{
		Excel::Comment returnedValue;
		Com::Param param;
		Invoke(0, 503, L"Previous", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Comment::get_Shape()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 1582, L"Shape", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Comment::Text(_variant_t Text, _variant_t Start, _variant_t Overwrite)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Text;
		param[1] = Start;
		param[2] = Overwrite;
		Invoke(3, 138, L"Text", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	wstring Comment::Text()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	bool Comment::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Comment::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________RefreshEvents
	RefreshEvents::RefreshEvents()
	{
	}

	RefreshEvents::~RefreshEvents()
	{
	}

	void RefreshEvents::AfterRefresh(bool Success)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Success == true) ? 1 : 0;
		Invoke(1, 1597, L"AfterRefresh", param, returnedValue, DISPATCH_METHOD);
	}

	void RefreshEvents::BeforeRefresh(VARIANT_BOOL& Cancel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL | VT_BYREF;
		param[0].pboolVal = &Cancel;
		Invoke(1, 1596, L"BeforeRefresh", param, returnedValue, DISPATCH_METHOD);
	}

	//_________________________________________________________QueryTable
	QueryTableX::QueryTableX()
	{
	}

	QueryTableX::~QueryTableX()
	{
	}

	bool QueryTableX::get_AdjustColumnWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1868, L"AdjustColumnWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_AdjustColumnWidth(bool AdjustColumnWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AdjustColumnWidth == true) ? 1 : 0;
		Invoke(1, 1868, L"AdjustColumnWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX QueryTableX::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool QueryTableX::get_BackgroundQuery()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1427, L"BackgroundQuery", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_BackgroundQuery(bool BackgroundQuery)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BackgroundQuery == true) ? 1 : 0;
		Invoke(1, 1427, L"BackgroundQuery", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void QueryTableX::CancelRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1589, L"CancelRefresh", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t QueryTableX::get_CommandText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void QueryTableX::put_CommandText(_variant_t CommandText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CommandText;
		Invoke(1, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCmdType QueryTableX::get_CommandType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCmdType)returnedValue.iVal;
	}

	void QueryTableX::put_CommandType(Excel::XlCmdType CommandType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CommandType;
		Invoke(1, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t QueryTableX::get_Connection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void QueryTableX::put_Connection(_variant_t Connection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Connection;
		Invoke(1, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator QueryTableX::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void QueryTableX::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range QueryTableX::get_Destination()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 681, L"Destination", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t QueryTableX::get_EditWebPage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2163, L"EditWebPage", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void QueryTableX::put_EditWebPage(_variant_t EditWebPage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = EditWebPage;
		Invoke(1, 2163, L"EditWebPage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_EnableEditing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1595, L"EnableEditing", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_EnableEditing(bool EnableEditing)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableEditing == true) ? 1 : 0;
		Invoke(1, 1595, L"EnableEditing", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_EnableRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_EnableRefresh(bool EnableRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableRefresh == true) ? 1 : 0;
		Invoke(1, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_FetchedRowOverflow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1588, L"FetchedRowOverflow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool QueryTableX::get_FieldNames()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1584, L"FieldNames", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_FieldNames(bool FieldNames)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FieldNames == true) ? 1 : 0;
		Invoke(1, 1584, L"FieldNames", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_FillAdjacentFormulas()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1586, L"FillAdjacentFormulas", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_FillAdjacentFormulas(bool FillAdjacentFormulas)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FillAdjacentFormulas == true) ? 1 : 0;
		Invoke(1, 1586, L"FillAdjacentFormulas", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_HasAutoFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 695, L"HasAutoFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_HasAutoFormat(bool HasAutoFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasAutoFormat == true) ? 1 : 0;
		Invoke(1, 695, L"HasAutoFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ListObject QueryTableX::get_ListObject()
	{
		Excel::ListObject returnedValue;
		Com::Param param;
		Invoke(0, 2257, L"ListObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool QueryTableX::get_MaintainConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1832, L"MaintainConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_MaintainConnection(bool MaintainConnection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MaintainConnection == true) ? 1 : 0;
		Invoke(1, 1832, L"MaintainConnection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring QueryTableX::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void QueryTableX::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Parameters QueryTableX::get_Parameters()
	{
		Excel::Parameters returnedValue;
		Com::Param param;
		Invoke(0, 1593, L"Parameters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object QueryTableX::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring QueryTableX::get_PostText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1591, L"PostText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void QueryTableX::put_PostText(wstring PostText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(PostText.c_str());
		Invoke(1, 1591, L"PostText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_PreserveColumnInfo()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1867, L"PreserveColumnInfo", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_PreserveColumnInfo(bool PreserveColumnInfo)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PreserveColumnInfo == true) ? 1 : 0;
		Invoke(1, 1867, L"PreserveColumnInfo", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_PreserveFormatting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1500, L"PreserveFormatting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_PreserveFormatting(bool PreserveFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PreserveFormatting == true) ? 1 : 0;
		Invoke(1, 1500, L"PreserveFormatting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlQueryType QueryTableX::get_QueryType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1831, L"QueryType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlQueryType)returnedValue.iVal;
	}

	Com::Object QueryTableX::get_Recordset()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1165, L"Recordset", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void QueryTableX::put_Recordset(Com::Object Recordset)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Recordset.dispatch.GetInterfacePtr();
		Invoke(1, 1165, L"Recordset", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	bool QueryTableX::Refresh(_variant_t BackgroundQuery)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = BackgroundQuery;
		Invoke(1, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool QueryTableX::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	bool QueryTableX::get_RefreshOnFileOpen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_RefreshOnFileOpen(bool RefreshOnFileOpen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RefreshOnFileOpen == true) ? 1 : 0;
		Invoke(1, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long QueryTableX::get_RefreshPeriod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void QueryTableX::put_RefreshPeriod(long RefreshPeriod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = RefreshPeriod;
		Invoke(1, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCellInsertionMode QueryTableX::get_RefreshStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1590, L"RefreshStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCellInsertionMode)returnedValue.iVal;
	}

	void QueryTableX::put_RefreshStyle(Excel::XlCellInsertionMode RefreshStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RefreshStyle;
		Invoke(1, 1590, L"RefreshStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_Refreshing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1587, L"Refreshing", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::ResetTimer()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1834, L"ResetTimer", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range QueryTableX::get_ResultRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1592, L"ResultRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlRobustConnect QueryTableX::get_RobustConnect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2081, L"RobustConnect", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlRobustConnect)returnedValue.iVal;
	}

	void QueryTableX::put_RobustConnect(Excel::XlRobustConnect RobustConnect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RobustConnect;
		Invoke(1, 2081, L"RobustConnect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_RowNumbers()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1585, L"RowNumbers", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_RowNumbers(bool RowNumbers)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RowNumbers == true) ? 1 : 0;
		Invoke(1, 1585, L"RowNumbers", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void QueryTableX::SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		param[1] = Description;
		param[2] = Keywords;
		Invoke(3, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	void QueryTableX::SaveAsODC(wstring ODCFileName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		Invoke(1, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	bool QueryTableX::get_SaveData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 692, L"SaveData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_SaveData(bool SaveData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveData == true) ? 1 : 0;
		Invoke(1, 692, L"SaveData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_SavePassword()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_SavePassword(bool SavePassword)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SavePassword == true) ? 1 : 0;
		Invoke(1, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Sort QueryTableX::get_Sort()
	{
		Excel::Sort returnedValue;
		Com::Param param;
		Invoke(0, 880, L"Sort", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring QueryTableX::get_SourceConnectionFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void QueryTableX::put_SourceConnectionFile(wstring SourceConnectionFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceConnectionFile.c_str());
		Invoke(1, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring QueryTableX::get_SourceDataFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void QueryTableX::put_SourceDataFile(wstring SourceDataFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceDataFile.c_str());
		Invoke(1, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t QueryTableX::get_Sql()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1480, L"Sql", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void QueryTableX::put_Sql(_variant_t Sql)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Sql;
		Invoke(1, 1480, L"Sql", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_TablesOnlyFromHTML()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1594, L"TablesOnlyFromHTML", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_TablesOnlyFromHTML(bool TablesOnlyFromHTML)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TablesOnlyFromHTML == true) ? 1 : 0;
		Invoke(1, 1594, L"TablesOnlyFromHTML", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t QueryTableX::get_TextFileColumnDataTypes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1865, L"TextFileColumnDataTypes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void QueryTableX::put_TextFileColumnDataTypes(_variant_t TextFileColumnDataTypes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TextFileColumnDataTypes;
		Invoke(1, 1865, L"TextFileColumnDataTypes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_TextFileCommaDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1862, L"TextFileCommaDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_TextFileCommaDelimiter(bool TextFileCommaDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileCommaDelimiter == true) ? 1 : 0;
		Invoke(1, 1862, L"TextFileCommaDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_TextFileConsecutiveDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1859, L"TextFileConsecutiveDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_TextFileConsecutiveDelimiter(bool TextFileConsecutiveDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileConsecutiveDelimiter == true) ? 1 : 0;
		Invoke(1, 1859, L"TextFileConsecutiveDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring QueryTableX::get_TextFileDecimalSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1870, L"TextFileDecimalSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void QueryTableX::put_TextFileDecimalSeparator(wstring TextFileDecimalSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextFileDecimalSeparator.c_str());
		Invoke(1, 1870, L"TextFileDecimalSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t QueryTableX::get_TextFileFixedColumnWidths()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1866, L"TextFileFixedColumnWidths", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void QueryTableX::put_TextFileFixedColumnWidths(_variant_t TextFileFixedColumnWidths)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TextFileFixedColumnWidths;
		Invoke(1, 1866, L"TextFileFixedColumnWidths", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring QueryTableX::get_TextFileOtherDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1864, L"TextFileOtherDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void QueryTableX::put_TextFileOtherDelimiter(wstring TextFileOtherDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextFileOtherDelimiter.c_str());
		Invoke(1, 1864, L"TextFileOtherDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTextParsingType QueryTableX::get_TextFileParseType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1857, L"TextFileParseType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTextParsingType)returnedValue.iVal;
	}

	void QueryTableX::put_TextFileParseType(Excel::XlTextParsingType TextFileParseType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextFileParseType;
		Invoke(1, 1857, L"TextFileParseType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long QueryTableX::get_TextFilePlatform()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1855, L"TextFilePlatform", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void QueryTableX::put_TextFilePlatform(long TextFilePlatform)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = TextFilePlatform;
		Invoke(1, 1855, L"TextFilePlatform", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_TextFilePromptOnRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1869, L"TextFilePromptOnRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_TextFilePromptOnRefresh(bool TextFilePromptOnRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFilePromptOnRefresh == true) ? 1 : 0;
		Invoke(1, 1869, L"TextFilePromptOnRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_TextFileSemicolonDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1861, L"TextFileSemicolonDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_TextFileSemicolonDelimiter(bool TextFileSemicolonDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileSemicolonDelimiter == true) ? 1 : 0;
		Invoke(1, 1861, L"TextFileSemicolonDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_TextFileSpaceDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1863, L"TextFileSpaceDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_TextFileSpaceDelimiter(bool TextFileSpaceDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileSpaceDelimiter == true) ? 1 : 0;
		Invoke(1, 1863, L"TextFileSpaceDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long QueryTableX::get_TextFileStartRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1856, L"TextFileStartRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void QueryTableX::put_TextFileStartRow(long TextFileStartRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = TextFileStartRow;
		Invoke(1, 1856, L"TextFileStartRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_TextFileTabDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1860, L"TextFileTabDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_TextFileTabDelimiter(bool TextFileTabDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileTabDelimiter == true) ? 1 : 0;
		Invoke(1, 1860, L"TextFileTabDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTextQualifier QueryTableX::get_TextFileTextQualifier()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1858, L"TextFileTextQualifier", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTextQualifier)returnedValue.iVal;
	}

	void QueryTableX::put_TextFileTextQualifier(Excel::XlTextQualifier TextFileTextQualifier)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextFileTextQualifier;
		Invoke(1, 1858, L"TextFileTextQualifier", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring QueryTableX::get_TextFileThousandsSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1871, L"TextFileThousandsSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void QueryTableX::put_TextFileThousandsSeparator(wstring TextFileThousandsSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextFileThousandsSeparator.c_str());
		Invoke(1, 1871, L"TextFileThousandsSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_TextFileTrailingMinusNumbers()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2164, L"TextFileTrailingMinusNumbers", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_TextFileTrailingMinusNumbers(bool TextFileTrailingMinusNumbers)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileTrailingMinusNumbers == true) ? 1 : 0;
		Invoke(1, 2164, L"TextFileTrailingMinusNumbers", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTextVisualLayoutType QueryTableX::get_TextFileVisualLayout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2245, L"TextFileVisualLayout", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTextVisualLayoutType)returnedValue.iVal;
	}

	void QueryTableX::put_TextFileVisualLayout(Excel::XlTextVisualLayoutType TextFileVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextFileVisualLayout;
		Invoke(1, 2245, L"TextFileVisualLayout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_WebConsecutiveDelimitersAsOne()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1878, L"WebConsecutiveDelimitersAsOne", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_WebConsecutiveDelimitersAsOne(bool WebConsecutiveDelimitersAsOne)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WebConsecutiveDelimitersAsOne == true) ? 1 : 0;
		Invoke(1, 1878, L"WebConsecutiveDelimitersAsOne", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_WebDisableDateRecognition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1877, L"WebDisableDateRecognition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_WebDisableDateRecognition(bool WebDisableDateRecognition)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WebDisableDateRecognition == true) ? 1 : 0;
		Invoke(1, 1877, L"WebDisableDateRecognition", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_WebDisableRedirections()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2162, L"WebDisableRedirections", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_WebDisableRedirections(bool WebDisableRedirections)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WebDisableRedirections == true) ? 1 : 0;
		Invoke(1, 2162, L"WebDisableRedirections", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlWebFormatting QueryTableX::get_WebFormatting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1873, L"WebFormatting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlWebFormatting)returnedValue.iVal;
	}

	void QueryTableX::put_WebFormatting(Excel::XlWebFormatting WebFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = WebFormatting;
		Invoke(1, 1873, L"WebFormatting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_WebPreFormattedTextToColumns()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1875, L"WebPreFormattedTextToColumns", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_WebPreFormattedTextToColumns(bool WebPreFormattedTextToColumns)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WebPreFormattedTextToColumns == true) ? 1 : 0;
		Invoke(1, 1875, L"WebPreFormattedTextToColumns", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlWebSelectionType QueryTableX::get_WebSelectionType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1872, L"WebSelectionType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlWebSelectionType)returnedValue.iVal;
	}

	void QueryTableX::put_WebSelectionType(Excel::XlWebSelectionType WebSelectionType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = WebSelectionType;
		Invoke(1, 1872, L"WebSelectionType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool QueryTableX::get_WebSingleBlockTextImport()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1876, L"WebSingleBlockTextImport", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void QueryTableX::put_WebSingleBlockTextImport(bool WebSingleBlockTextImport)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WebSingleBlockTextImport == true) ? 1 : 0;
		Invoke(1, 1876, L"WebSingleBlockTextImport", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring QueryTableX::get_WebTables()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1874, L"WebTables", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void QueryTableX::put_WebTables(wstring WebTables)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(WebTables.c_str());
		Invoke(1, 1874, L"WebTables", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::WorkbookConnection QueryTableX::get_WorkbookConnection()
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param;
		Invoke(0, 2544, L"WorkbookConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________QueryTables
	QueryTables::QueryTables()
	{
	}

	QueryTables::~QueryTables()
	{
	}

	Excel::QueryTableX QueryTables::Add(_variant_t Connection, Excel::Range& Destination, _variant_t Sql)
	{
		Excel::QueryTableX returnedValue;
		Com::Param param(3);
		param[0] = Connection;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Destination.dispatch.GetInterfacePtr();
		param[2] = Sql;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::QueryTableX QueryTables::Add(_variant_t Connection, Excel::Range& Destination)
	{
		Excel::QueryTableX returnedValue;
		Com::Param param(2);
		param[0] = Connection;
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Destination.dispatch.GetInterfacePtr();
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX QueryTables::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long QueryTables::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator QueryTables::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::QueryTableX QueryTables::Item(_variant_t Index)
	{
		Excel::QueryTableX returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object QueryTables::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::QueryTableX QueryTables::get__Default(_variant_t Index)
	{
		Excel::QueryTableX returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr QueryTables::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Parameter
	Parameter::Parameter()
	{
	}

	Parameter::~Parameter()
	{
	}

	Excel::ApplicationX Parameter::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Parameter::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlParameterDataType Parameter::get_DataType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 722, L"DataType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlParameterDataType)returnedValue.iVal;
	}

	void Parameter::put_DataType(Excel::XlParameterDataType DataType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DataType;
		Invoke(1, 722, L"DataType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Parameter::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Parameter::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Parameter::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Parameter::get_PromptString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1599, L"PromptString", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool Parameter::get_RefreshOnChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1879, L"RefreshOnChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Parameter::put_RefreshOnChange(bool RefreshOnChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RefreshOnChange == true) ? 1 : 0;
		Invoke(1, 1879, L"RefreshOnChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Parameter::SetParam(Excel::XlParameterType Type, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Value;
		Invoke(2, 1601, L"SetParam", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range Parameter::get_SourceRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1600, L"SourceRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlParameterType Parameter::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlParameterType)returnedValue.iVal;
	}

	_variant_t Parameter::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Parameters
	Parameters::Parameters()
	{
	}

	Parameters::~Parameters()
	{
	}

	Excel::Parameter Parameters::Add(wstring Name, _variant_t iDataType)
	{
		Excel::Parameter returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = iDataType;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Parameter Parameters::Add(wstring Name)
	{
		Excel::Parameter returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Parameters::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Parameters::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Parameters::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Parameters::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Parameter Parameters::Item(_variant_t Index)
	{
		Excel::Parameter returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Parameters::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Parameter Parameters::get__Default(_variant_t Index)
	{
		Excel::Parameter returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Parameters::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________ODBCError
	ODBCError::ODBCError()
	{
	}

	ODBCError::~ODBCError()
	{
	}

	Excel::ApplicationX ODBCError::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ODBCError::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring ODBCError::get_ErrorString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1490, L"ErrorString", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object ODBCError::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ODBCError::get_SqlState()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1603, L"SqlState", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ODBCErrors
	ODBCErrors::ODBCErrors()
	{
	}

	ODBCErrors::~ODBCErrors()
	{
	}

	Excel::ApplicationX ODBCErrors::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ODBCErrors::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ODBCErrors::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ODBCError ODBCErrors::Item(long Index)
	{
		Excel::ODBCError returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ODBCErrors::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ODBCError ODBCErrors::get__Default(long Index)
	{
		Excel::ODBCError returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ODBCErrors::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Validation
	Validation::Validation()
	{
	}

	Validation::~Validation()
	{
	}

	void Validation::Add(Excel::XlDVType Type, _variant_t AlertStyle, _variant_t Operator, _variant_t Formula1, _variant_t Formula2)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = AlertStyle;
		param[2] = Operator;
		param[3] = Formula1;
		param[4] = Formula2;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
	}

	void Validation::Add(Excel::XlDVType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
	}

	long Validation::get_AlertStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1605, L"AlertStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::ApplicationX Validation::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Validation::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Validation::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring Validation::get_ErrorMessage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1609, L"ErrorMessage", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Validation::put_ErrorMessage(wstring ErrorMessage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ErrorMessage.c_str());
		Invoke(1, 1609, L"ErrorMessage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Validation::get_ErrorTitle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1610, L"ErrorTitle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Validation::put_ErrorTitle(wstring ErrorTitle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ErrorTitle.c_str());
		Invoke(1, 1610, L"ErrorTitle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Validation::get_Formula1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1579, L"Formula1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Validation::get_Formula2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1580, L"Formula2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long Validation::get_IMEMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1607, L"IMEMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Validation::put_IMEMode(long IMEMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = IMEMode;
		Invoke(1, 1607, L"IMEMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Validation::get_IgnoreBlank()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1606, L"IgnoreBlank", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Validation::put_IgnoreBlank(bool IgnoreBlank)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IgnoreBlank == true) ? 1 : 0;
		Invoke(1, 1606, L"IgnoreBlank", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Validation::get_InCellDropdown()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1608, L"InCellDropdown", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Validation::put_InCellDropdown(bool InCellDropdown)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InCellDropdown == true) ? 1 : 0;
		Invoke(1, 1608, L"InCellDropdown", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Validation::get_InputMessage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1611, L"InputMessage", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Validation::put_InputMessage(wstring InputMessage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(InputMessage.c_str());
		Invoke(1, 1611, L"InputMessage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Validation::get_InputTitle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1612, L"InputTitle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Validation::put_InputTitle(wstring InputTitle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(InputTitle.c_str());
		Invoke(1, 1612, L"InputTitle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Validation::Modify(_variant_t Type, _variant_t AlertStyle, _variant_t Operator, _variant_t Formula1, _variant_t Formula2)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = Type;
		param[1] = AlertStyle;
		param[2] = Operator;
		param[3] = Formula1;
		param[4] = Formula2;
		Invoke(5, 1581, L"Modify", param, returnedValue, DISPATCH_METHOD);
	}

	void Validation::Modify()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1581, L"Modify", param, returnedValue, DISPATCH_METHOD);
	}

	long Validation::get_Operator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 797, L"Operator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object Validation::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Validation::get_ShowError()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1613, L"ShowError", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Validation::put_ShowError(bool ShowError)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowError == true) ? 1 : 0;
		Invoke(1, 1613, L"ShowError", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Validation::get_ShowInput()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1614, L"ShowInput", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Validation::put_ShowInput(bool ShowInput)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowInput == true) ? 1 : 0;
		Invoke(1, 1614, L"ShowInput", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Validation::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool Validation::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	//________________________________________________________Hyperlinks
	Hyperlinks::Hyperlinks()
	{
	}

	Hyperlinks::~Hyperlinks()
	{
	}

	Com::Object Hyperlinks::Add(Com::Object Anchor, wstring Address, _variant_t SubAddress, _variant_t ScreenTip, _variant_t TextToDisplay)
	{
		Com::Object returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Anchor.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Address.c_str());
		param[2] = SubAddress;
		param[3] = ScreenTip;
		param[4] = TextToDisplay;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Hyperlinks::Add(Com::Object Anchor, wstring Address)
	{
		Com::Object returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Anchor.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Address.c_str());
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Hyperlinks::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Hyperlinks::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Hyperlinks::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Hyperlinks::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Hyperlink Hyperlinks::get_Item(_variant_t Index)
	{
		Excel::Hyperlink returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Hyperlinks::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Hyperlink Hyperlinks::get__Default(_variant_t Index)
	{
		Excel::Hyperlink returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Hyperlinks::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Hyperlink
	Hyperlink::Hyperlink()
	{
	}

	Hyperlink::~Hyperlink()
	{
	}

	void Hyperlink::AddToFavorites()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1476, L"AddToFavorites", param, returnedValue, DISPATCH_METHOD);
	}

	wstring Hyperlink::get_Address()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 236, L"Address", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Hyperlink::put_Address(wstring Address)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Address.c_str());
		Invoke(1, 236, L"Address", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Hyperlink::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Hyperlink::CreateNewDocument(wstring Filename, bool EditNow, bool Overwrite)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1].vt = VT_BOOL;
		param[1].boolVal = (EditNow == true) ? 1 : 0;
		param[2].vt = VT_BOOL;
		param[2].boolVal = (Overwrite == true) ? 1 : 0;
		Invoke(3, 1884, L"CreateNewDocument", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator Hyperlink::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Hyperlink::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring Hyperlink::get_EmailSubject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1883, L"EmailSubject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Hyperlink::put_EmailSubject(wstring EmailSubject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(EmailSubject.c_str());
		Invoke(1, 1883, L"EmailSubject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Hyperlink::Follow(_variant_t NewWindow, _variant_t AddHistory, _variant_t ExtraInfo, _variant_t Method, _variant_t HeaderInfo)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0] = NewWindow;
		param[1] = AddHistory;
		param[2] = ExtraInfo;
		param[3] = Method;
		param[4] = HeaderInfo;
		Invoke(5, 1616, L"Follow", param, returnedValue, DISPATCH_METHOD);
	}

	void Hyperlink::Follow()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1616, L"Follow", param, returnedValue, DISPATCH_METHOD);
	}

	wstring Hyperlink::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Hyperlink::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Hyperlink::get_Range()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Hyperlink::get_ScreenTip()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1881, L"ScreenTip", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Hyperlink::put_ScreenTip(wstring ScreenTip)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ScreenTip.c_str());
		Invoke(1, 1881, L"ScreenTip", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Shape Hyperlink::get_Shape()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 1582, L"Shape", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Hyperlink::get_SubAddress()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1471, L"SubAddress", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Hyperlink::put_SubAddress(wstring SubAddress)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SubAddress.c_str());
		Invoke(1, 1471, L"SubAddress", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Hyperlink::get_TextToDisplay()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1882, L"TextToDisplay", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Hyperlink::put_TextToDisplay(wstring TextToDisplay)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextToDisplay.c_str());
		Invoke(1, 1882, L"TextToDisplay", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Hyperlink::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________AutoFilter
	AutoFilter::AutoFilter()
	{
	}

	AutoFilter::~AutoFilter()
	{
	}

	Excel::ApplicationX AutoFilter::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AutoFilter::ApplyFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2640, L"ApplyFilter", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator AutoFilter::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool AutoFilter::get_FilterMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 800, L"FilterMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::Filters AutoFilter::get_Filters()
	{
		Excel::Filters returnedValue;
		Com::Param param;
		Invoke(0, 1617, L"Filters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object AutoFilter::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range AutoFilter::get_Range()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AutoFilter::ShowAllData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 794, L"ShowAllData", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Sort AutoFilter::get_Sort()
	{
		Excel::Sort returnedValue;
		Com::Param param;
		Invoke(0, 880, L"Sort", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Filters
	Filters::Filters()
	{
	}

	Filters::~Filters()
	{
	}

	Excel::ApplicationX Filters::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Filters::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Filters::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Filter Filters::get_Item(long Index)
	{
		Excel::Filter returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Filters::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Filter Filters::get__Default(long Index)
	{
		Excel::Filter returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Filters::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Filter
	Filter::Filter()
	{
	}

	Filter::~Filter()
	{
	}

	Excel::ApplicationX Filter::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Filter::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Filter::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Filter::get_Criteria1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 796, L"Criteria1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Filter::get_Criteria2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 798, L"Criteria2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Filter::get_On()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1618, L"On", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlAutoFilterOperator Filter::get_Operator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 797, L"Operator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAutoFilterOperator)returnedValue.iVal;
	}

	void Filter::put_Operator(Excel::XlAutoFilterOperator Operator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Operator;
		Invoke(1, 797, L"Operator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Filter::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlAutoFilterOperator Filter::get__Operator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2641, L"_Operator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAutoFilterOperator)returnedValue.iVal;
	}

	//________________________________________________________AutoCorrect
	AutoCorrect::AutoCorrect()
	{
	}

	AutoCorrect::~AutoCorrect()
	{
	}

	_variant_t AutoCorrect::AddReplacement(wstring What, wstring Replacement)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(What.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Replacement.c_str());
		Invoke(2, 1146, L"AddReplacement", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX AutoCorrect::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool AutoCorrect::get_AutoExpandListRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2294, L"AutoExpandListRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoCorrect::put_AutoExpandListRange(bool AutoExpandListRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoExpandListRange == true) ? 1 : 0;
		Invoke(1, 2294, L"AutoExpandListRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool AutoCorrect::get_AutoFillFormulasInLists()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2642, L"AutoFillFormulasInLists", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoCorrect::put_AutoFillFormulasInLists(bool AutoFillFormulasInLists)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoFillFormulasInLists == true) ? 1 : 0;
		Invoke(1, 2642, L"AutoFillFormulasInLists", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool AutoCorrect::get_CapitalizeNamesOfDays()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1150, L"CapitalizeNamesOfDays", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoCorrect::put_CapitalizeNamesOfDays(bool CapitalizeNamesOfDays)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CapitalizeNamesOfDays == true) ? 1 : 0;
		Invoke(1, 1150, L"CapitalizeNamesOfDays", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool AutoCorrect::get_CorrectCapsLock()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1620, L"CorrectCapsLock", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoCorrect::put_CorrectCapsLock(bool CorrectCapsLock)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CorrectCapsLock == true) ? 1 : 0;
		Invoke(1, 1620, L"CorrectCapsLock", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool AutoCorrect::get_CorrectSentenceCap()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1619, L"CorrectSentenceCap", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoCorrect::put_CorrectSentenceCap(bool CorrectSentenceCap)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CorrectSentenceCap == true) ? 1 : 0;
		Invoke(1, 1619, L"CorrectSentenceCap", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator AutoCorrect::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t AutoCorrect::DeleteReplacement(wstring What)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(What.c_str());
		Invoke(1, 1147, L"DeleteReplacement", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool AutoCorrect::get_DisplayAutoCorrectOptions()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1926, L"DisplayAutoCorrectOptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoCorrect::put_DisplayAutoCorrectOptions(bool DisplayAutoCorrectOptions)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayAutoCorrectOptions == true) ? 1 : 0;
		Invoke(1, 1926, L"DisplayAutoCorrectOptions", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object AutoCorrect::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool AutoCorrect::get_ReplaceText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1148, L"ReplaceText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoCorrect::put_ReplaceText(bool ReplaceText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ReplaceText == true) ? 1 : 0;
		Invoke(1, 1148, L"ReplaceText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t AutoCorrect::get_ReplacementList(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 1151, L"ReplacementList", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t AutoCorrect::get_ReplacementList()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1151, L"ReplacementList", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AutoCorrect::put_ReplacementList(_variant_t ReplacementList, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = ReplacementList;
		param[1] = Index;
		Invoke(2, 1151, L"ReplacementList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void AutoCorrect::put_ReplacementList(_variant_t ReplacementList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ReplacementList;
		Invoke(1, 1151, L"ReplacementList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool AutoCorrect::get_TwoInitialCapitals()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1149, L"TwoInitialCapitals", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoCorrect::put_TwoInitialCapitals(bool TwoInitialCapitals)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TwoInitialCapitals == true) ? 1 : 0;
		Invoke(1, 1149, L"TwoInitialCapitals", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Border
	Border::Border()
	{
	}

	Border::~Border()
	{
	}

	Excel::ApplicationX Border::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Border::get_Color()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Border::put_Color(_variant_t Color)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Color;
		Invoke(1, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Border::get_ColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Border::put_ColorIndex(_variant_t ColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ColorIndex;
		Invoke(1, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Border::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Border::get_LineStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 119, L"LineStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Border::put_LineStyle(_variant_t LineStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = LineStyle;
		Invoke(1, 119, L"LineStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Border::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Border::get_ThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Border::put_ThemeColor(_variant_t ThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ThemeColor;
		Invoke(1, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Border::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Border::put_TintAndShade(_variant_t TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TintAndShade;
		Invoke(1, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Border::get_Weight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 120, L"Weight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Border::put_Weight(_variant_t Weight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Weight;
		Invoke(1, 120, L"Weight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Interior
	Interior::Interior()
	{
	}

	Interior::~Interior()
	{
	}

	Excel::ApplicationX Interior::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Interior::get_Color()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_Color(_variant_t Color)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Color;
		Invoke(1, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Interior::get_ColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_ColorIndex(_variant_t ColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ColorIndex;
		Invoke(1, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Interior::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object Interior::get_Gradient()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2645, L"Gradient", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Interior::get_InvertIfNegative()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 132, L"InvertIfNegative", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_InvertIfNegative(_variant_t InvertIfNegative)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = InvertIfNegative;
		Invoke(1, 132, L"InvertIfNegative", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Interior::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Interior::get_Pattern()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 95, L"Pattern", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_Pattern(_variant_t Pattern)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Pattern;
		Invoke(1, 95, L"Pattern", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Interior::get_PatternColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 100, L"PatternColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_PatternColor(_variant_t PatternColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PatternColor;
		Invoke(1, 100, L"PatternColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Interior::get_PatternColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 98, L"PatternColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_PatternColorIndex(_variant_t PatternColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PatternColorIndex;
		Invoke(1, 98, L"PatternColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Interior::get_PatternThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2643, L"PatternThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_PatternThemeColor(_variant_t PatternThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PatternThemeColor;
		Invoke(1, 2643, L"PatternThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Interior::get_PatternTintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2644, L"PatternTintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_PatternTintAndShade(_variant_t PatternTintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PatternTintAndShade;
		Invoke(1, 2644, L"PatternTintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Interior::get_ThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_ThemeColor(_variant_t ThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ThemeColor;
		Invoke(1, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Interior::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Interior::put_TintAndShade(_variant_t TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TintAndShade;
		Invoke(1, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ChartFillFormat
	ChartFillFormat::ChartFillFormat()
	{
	}

	ChartFillFormat::~ChartFillFormat()
	{
	}

	Excel::ApplicationX ChartFillFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartColorFormat ChartFillFormat::get_BackColor()
	{
		Excel::ChartColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 1638, L"BackColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ChartFillFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ChartColorFormat ChartFillFormat::get_ForeColor()
	{
		Excel::ChartColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 1639, L"ForeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoGradientColorType*/ short ChartFillFormat::get_GradientColorType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1640, L"GradientColorType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoGradientColorType*/ short)returnedValue.iVal;
	}

	float ChartFillFormat::get_GradientDegree()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1641, L"GradientDegree", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	/* MsoGradientStyle*/ short ChartFillFormat::get_GradientStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1642, L"GradientStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoGradientStyle*/ short)returnedValue.iVal;
	}

	long ChartFillFormat::get_GradientVariant()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1643, L"GradientVariant", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartFillFormat::OneColorGradient(/* MsoGradientStyle*/ short Style, long Variant, float Degree)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = Style;
		param[1].vt = VT_I4;
		param[1].lVal = Variant;
		param[2].vt = VT_R4;
		param[2].fltVal = Degree;
		Invoke(3, 1621, L"OneColorGradient", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ChartFillFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoPatternType*/ short ChartFillFormat::get_Pattern()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 95, L"Pattern", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPatternType*/ short)returnedValue.iVal;
	}

	void ChartFillFormat::Patterned(/* MsoPatternType*/ short Pattern)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Pattern;
		Invoke(1, 1628, L"Patterned", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartFillFormat::PresetGradient(/* MsoGradientStyle*/ short Style, long Variant, /* MsoPresetGradientType*/ short PresetGradientType)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = Style;
		param[1].vt = VT_I4;
		param[1].lVal = Variant;
		param[2].vt = VT_I2;
		param[2].iVal = PresetGradientType;
		Invoke(3, 1636, L"PresetGradient", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoPresetGradientType*/ short ChartFillFormat::get_PresetGradientType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1637, L"PresetGradientType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetGradientType*/ short)returnedValue.iVal;
	}

	/* MsoPresetTexture*/ short ChartFillFormat::get_PresetTexture()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1626, L"PresetTexture", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPresetTexture*/ short)returnedValue.iVal;
	}

	void ChartFillFormat::PresetTextured(/* MsoPresetTexture*/ short PresetTexture)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PresetTexture;
		Invoke(1, 1625, L"PresetTextured", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartFillFormat::Solid()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1627, L"Solid", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ChartFillFormat::get_TextureName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1644, L"TextureName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	/* MsoTextureType*/ short ChartFillFormat::get_TextureType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1645, L"TextureType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTextureType*/ short)returnedValue.iVal;
	}

	void ChartFillFormat::TwoColorGradient(/* MsoGradientStyle*/ short Style, long Variant)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Style;
		param[1].vt = VT_I4;
		param[1].lVal = Variant;
		Invoke(2, 1624, L"TwoColorGradient", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoFillType*/ short ChartFillFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoFillType*/ short)returnedValue.iVal;
	}

	void ChartFillFormat::UserPicture(_variant_t PictureFile, _variant_t PictureFormat, _variant_t PictureStackUnit, _variant_t PicturePlacement)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = PictureFile;
		param[1] = PictureFormat;
		param[2] = PictureStackUnit;
		param[3] = PicturePlacement;
		Invoke(4, 1629, L"UserPicture", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartFillFormat::UserPicture()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 1629, L"UserPicture", param, returnedValue, DISPATCH_METHOD);
	}

	void ChartFillFormat::UserTextured(wstring TextureFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextureFile.c_str());
		Invoke(1, 1634, L"UserTextured", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short ChartFillFormat::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ChartFillFormat::put_Visible(/* MsoTriState*/ short Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ChartColorFormat
	ChartColorFormat::ChartColorFormat()
	{
	}

	ChartColorFormat::~ChartColorFormat()
	{
	}

	Excel::ApplicationX ChartColorFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ChartColorFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ChartColorFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ChartColorFormat::get_RGB()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1055, L"RGB", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ChartColorFormat::get_SchemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1646, L"SchemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartColorFormat::put_SchemeColor(long SchemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SchemeColor;
		Invoke(1, 1646, L"SchemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartColorFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ChartColorFormat::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Axis
	Axis::Axis()
	{
	}

	Axis::~Axis()
	{
	}

	Excel::ApplicationX Axis::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Axis::get_AxisBetweenCategories()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 45, L"AxisBetweenCategories", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_AxisBetweenCategories(bool AxisBetweenCategories)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AxisBetweenCategories == true) ? 1 : 0;
		Invoke(1, 45, L"AxisBetweenCategories", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlAxisGroup Axis::get_AxisGroup()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 47, L"AxisGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAxisGroup)returnedValue.iVal;
	}

	Excel::AxisTitle Axis::get_AxisTitle()
	{
		Excel::AxisTitle returnedValue;
		Com::Param param;
		Invoke(0, 82, L"AxisTitle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlTimeUnit Axis::get_BaseUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1647, L"BaseUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTimeUnit)returnedValue.iVal;
	}

	void Axis::put_BaseUnit(Excel::XlTimeUnit BaseUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BaseUnit;
		Invoke(1, 1647, L"BaseUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_BaseUnitIsAuto()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1648, L"BaseUnitIsAuto", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_BaseUnitIsAuto(bool BaseUnitIsAuto)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BaseUnitIsAuto == true) ? 1 : 0;
		Invoke(1, 1648, L"BaseUnitIsAuto", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Axis::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Axis::get_CategoryNames()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 156, L"CategoryNames", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Axis::put_CategoryNames(_variant_t CategoryNames)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CategoryNames;
		Invoke(1, 156, L"CategoryNames", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCategorySortOrder Axis::get_CategorySortOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3228, L"CategorySortOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCategorySortOrder)returnedValue.iVal;
	}

	void Axis::put_CategorySortOrder(Excel::XlCategorySortOrder CategorySortOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CategorySortOrder;
		Invoke(1, 3228, L"CategorySortOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCategoryType Axis::get_CategoryType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1651, L"CategoryType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCategoryType)returnedValue.iVal;
	}

	void Axis::put_CategoryType(Excel::XlCategoryType CategoryType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CategoryType;
		Invoke(1, 1651, L"CategoryType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Axis::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlAxisCrosses Axis::get_Crosses()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 42, L"Crosses", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAxisCrosses)returnedValue.iVal;
	}

	void Axis::put_Crosses(Excel::XlAxisCrosses Crosses)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Crosses;
		Invoke(1, 42, L"Crosses", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_CrossesAt()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 43, L"CrossesAt", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Axis::put_CrossesAt(double CrossesAt)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = CrossesAt;
		Invoke(1, 43, L"CrossesAt", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Axis::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlDisplayUnit Axis::get_DisplayUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1886, L"DisplayUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDisplayUnit)returnedValue.iVal;
	}

	void Axis::put_DisplayUnit(Excel::XlDisplayUnit DisplayUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DisplayUnit;
		Invoke(1, 1886, L"DisplayUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_DisplayUnitCustom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1887, L"DisplayUnitCustom", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Axis::put_DisplayUnitCustom(double DisplayUnitCustom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = DisplayUnitCustom;
		Invoke(1, 1887, L"DisplayUnitCustom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::DisplayUnitLabel Axis::get_DisplayUnitLabel()
	{
		Excel::DisplayUnitLabel returnedValue;
		Com::Param param;
		Invoke(0, 1889, L"DisplayUnitLabel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat Axis::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Axis::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Axis::get_HasDisplayUnitLabel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1888, L"HasDisplayUnitLabel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_HasDisplayUnitLabel(bool HasDisplayUnitLabel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasDisplayUnitLabel == true) ? 1 : 0;
		Invoke(1, 1888, L"HasDisplayUnitLabel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_HasMajorGridlines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 24, L"HasMajorGridlines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_HasMajorGridlines(bool HasMajorGridlines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasMajorGridlines == true) ? 1 : 0;
		Invoke(1, 24, L"HasMajorGridlines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_HasMinorGridlines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 25, L"HasMinorGridlines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_HasMinorGridlines(bool HasMinorGridlines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasMinorGridlines == true) ? 1 : 0;
		Invoke(1, 25, L"HasMinorGridlines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_HasTitle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 54, L"HasTitle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_HasTitle(bool HasTitle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasTitle == true) ? 1 : 0;
		Invoke(1, 54, L"HasTitle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double Axis::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double Axis::get_LogBase()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2646, L"LogBase", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Axis::put_LogBase(double LogBase)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = LogBase;
		Invoke(1, 2646, L"LogBase", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Gridlines Axis::get_MajorGridlines()
	{
		Excel::Gridlines returnedValue;
		Com::Param param;
		Invoke(0, 89, L"MajorGridlines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlTickMark Axis::get_MajorTickMark()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 26, L"MajorTickMark", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTickMark)returnedValue.iVal;
	}

	void Axis::put_MajorTickMark(Excel::XlTickMark MajorTickMark)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MajorTickMark;
		Invoke(1, 26, L"MajorTickMark", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_MajorUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 37, L"MajorUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Axis::put_MajorUnit(double MajorUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = MajorUnit;
		Invoke(1, 37, L"MajorUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_MajorUnitIsAuto()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 38, L"MajorUnitIsAuto", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_MajorUnitIsAuto(bool MajorUnitIsAuto)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MajorUnitIsAuto == true) ? 1 : 0;
		Invoke(1, 38, L"MajorUnitIsAuto", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTimeUnit Axis::get_MajorUnitScale()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1649, L"MajorUnitScale", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTimeUnit)returnedValue.iVal;
	}

	void Axis::put_MajorUnitScale(Excel::XlTimeUnit MajorUnitScale)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MajorUnitScale;
		Invoke(1, 1649, L"MajorUnitScale", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_MaximumScale()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 35, L"MaximumScale", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Axis::put_MaximumScale(double MaximumScale)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = MaximumScale;
		Invoke(1, 35, L"MaximumScale", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_MaximumScaleIsAuto()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 36, L"MaximumScaleIsAuto", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_MaximumScaleIsAuto(bool MaximumScaleIsAuto)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MaximumScaleIsAuto == true) ? 1 : 0;
		Invoke(1, 36, L"MaximumScaleIsAuto", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_MinimumScale()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 33, L"MinimumScale", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Axis::put_MinimumScale(double MinimumScale)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = MinimumScale;
		Invoke(1, 33, L"MinimumScale", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_MinimumScaleIsAuto()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 34, L"MinimumScaleIsAuto", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_MinimumScaleIsAuto(bool MinimumScaleIsAuto)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MinimumScaleIsAuto == true) ? 1 : 0;
		Invoke(1, 34, L"MinimumScaleIsAuto", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Gridlines Axis::get_MinorGridlines()
	{
		Excel::Gridlines returnedValue;
		Com::Param param;
		Invoke(0, 90, L"MinorGridlines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlTickMark Axis::get_MinorTickMark()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 27, L"MinorTickMark", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTickMark)returnedValue.iVal;
	}

	void Axis::put_MinorTickMark(Excel::XlTickMark MinorTickMark)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MinorTickMark;
		Invoke(1, 27, L"MinorTickMark", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_MinorUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 39, L"MinorUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Axis::put_MinorUnit(double MinorUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = MinorUnit;
		Invoke(1, 39, L"MinorUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_MinorUnitIsAuto()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 40, L"MinorUnitIsAuto", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_MinorUnitIsAuto(bool MinorUnitIsAuto)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MinorUnitIsAuto == true) ? 1 : 0;
		Invoke(1, 40, L"MinorUnitIsAuto", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTimeUnit Axis::get_MinorUnitScale()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1650, L"MinorUnitScale", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTimeUnit)returnedValue.iVal;
	}

	void Axis::put_MinorUnitScale(Excel::XlTimeUnit MinorUnitScale)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MinorUnitScale;
		Invoke(1, 1650, L"MinorUnitScale", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Axis::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Axis::get_ReversePlotOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 44, L"ReversePlotOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_ReversePlotOrder(bool ReversePlotOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ReversePlotOrder == true) ? 1 : 0;
		Invoke(1, 44, L"ReversePlotOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlScaleType Axis::get_ScaleType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 41, L"ScaleType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlScaleType)returnedValue.iVal;
	}

	void Axis::put_ScaleType(Excel::XlScaleType ScaleType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScaleType;
		Invoke(1, 41, L"ScaleType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Axis::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Axis::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlTickLabelPosition Axis::get_TickLabelPosition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 28, L"TickLabelPosition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTickLabelPosition)returnedValue.iVal;
	}

	void Axis::put_TickLabelPosition(Excel::XlTickLabelPosition TickLabelPosition)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TickLabelPosition;
		Invoke(1, 28, L"TickLabelPosition", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Axis::get_TickLabelSpacing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 29, L"TickLabelSpacing", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Axis::put_TickLabelSpacing(long TickLabelSpacing)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = TickLabelSpacing;
		Invoke(1, 29, L"TickLabelSpacing", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Axis::get_TickLabelSpacingIsAuto()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2647, L"TickLabelSpacingIsAuto", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Axis::put_TickLabelSpacingIsAuto(bool TickLabelSpacingIsAuto)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TickLabelSpacingIsAuto == true) ? 1 : 0;
		Invoke(1, 2647, L"TickLabelSpacingIsAuto", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::TickLabels Axis::get_TickLabels()
	{
		Excel::TickLabels returnedValue;
		Com::Param param;
		Invoke(0, 91, L"TickLabels", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Axis::get_TickMarkSpacing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 31, L"TickMarkSpacing", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Axis::put_TickMarkSpacing(long TickMarkSpacing)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = TickMarkSpacing;
		Invoke(1, 31, L"TickMarkSpacing", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	Excel::XlAxisType Axis::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAxisType)returnedValue.iVal;
	}

	void Axis::put_Type(Excel::XlAxisType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Axis::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	//________________________________________________________ChartTitle
	ChartTitle::ChartTitle()
	{
	}

	ChartTitle::~ChartTitle()
	{
	}

	Excel::ApplicationX ChartTitle::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartTitle::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartTitle::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border ChartTitle::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ChartTitle::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartTitle::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters ChartTitle::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters ChartTitle::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ChartTitle::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t ChartTitle::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat ChartTitle::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Font ChartTitle::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat ChartTitle::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ChartTitle::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartTitle::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartTitle::get_FormulaLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartTitle::put_FormulaLocal(wstring FormulaLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaLocal.c_str());
		Invoke(1, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartTitle::get_FormulaR1C1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartTitle::put_FormulaR1C1(wstring FormulaR1C1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1.c_str());
		Invoke(1, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartTitle::get_FormulaR1C1Local()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartTitle::put_FormulaR1C1Local(wstring FormulaR1C1Local)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1Local.c_str());
		Invoke(1, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartTitle::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double ChartTitle::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	_variant_t ChartTitle::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartTitle::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartTitle::get_IncludeInLayout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2648, L"IncludeInLayout", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartTitle::put_IncludeInLayout(bool IncludeInLayout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeInLayout == true) ? 1 : 0;
		Invoke(1, 2648, L"IncludeInLayout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior ChartTitle::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ChartTitle::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartTitle::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartTitle::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	_variant_t ChartTitle::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartTitle::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartTitle::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlChartElementPosition ChartTitle::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartElementPosition)returnedValue.iVal;
	}

	void ChartTitle::put_Position(Excel::XlChartElementPosition Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartTitle::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartTitle::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartTitle::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ChartTitle::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	bool ChartTitle::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartTitle::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartTitle::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartTitle::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartTitle::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartTitle::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartTitle::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartTitle::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartTitle::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	//________________________________________________________AxisTitle
	AxisTitle::AxisTitle()
	{
	}

	AxisTitle::~AxisTitle()
	{
	}

	Excel::ApplicationX AxisTitle::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t AxisTitle::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AxisTitle::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border AxisTitle::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring AxisTitle::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void AxisTitle::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters AxisTitle::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters AxisTitle::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator AxisTitle::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t AxisTitle::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat AxisTitle::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Font AxisTitle::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat AxisTitle::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring AxisTitle::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void AxisTitle::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring AxisTitle::get_FormulaLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void AxisTitle::put_FormulaLocal(wstring FormulaLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaLocal.c_str());
		Invoke(1, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring AxisTitle::get_FormulaR1C1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void AxisTitle::put_FormulaR1C1(wstring FormulaR1C1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1.c_str());
		Invoke(1, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring AxisTitle::get_FormulaR1C1Local()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void AxisTitle::put_FormulaR1C1Local(wstring FormulaR1C1Local)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1Local.c_str());
		Invoke(1, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t AxisTitle::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double AxisTitle::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	_variant_t AxisTitle::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AxisTitle::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool AxisTitle::get_IncludeInLayout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2648, L"IncludeInLayout", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AxisTitle::put_IncludeInLayout(bool IncludeInLayout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeInLayout == true) ? 1 : 0;
		Invoke(1, 2648, L"IncludeInLayout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior AxisTitle::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double AxisTitle::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void AxisTitle::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring AxisTitle::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	_variant_t AxisTitle::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AxisTitle::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object AxisTitle::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlChartElementPosition AxisTitle::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartElementPosition)returnedValue.iVal;
	}

	void AxisTitle::put_Position(Excel::XlChartElementPosition Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long AxisTitle::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void AxisTitle::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t AxisTitle::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void AxisTitle::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	bool AxisTitle::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AxisTitle::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring AxisTitle::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void AxisTitle::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double AxisTitle::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void AxisTitle::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t AxisTitle::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AxisTitle::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double AxisTitle::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	//________________________________________________________ChartGroup
	ChartGroup::ChartGroup()
	{
	}

	ChartGroup::~ChartGroup()
	{
	}

	Excel::ApplicationX ChartGroup::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlAxisGroup ChartGroup::get_AxisGroup()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 47, L"AxisGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAxisGroup)returnedValue.iVal;
	}

	void ChartGroup::put_AxisGroup(Excel::XlAxisGroup AxisGroup)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AxisGroup;
		Invoke(1, 47, L"AxisGroup", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartGroup::get_BinWidthValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3197, L"BinWidthValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartGroup::put_BinWidthValue(double BinWidthValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = BinWidthValue;
		Invoke(1, 3197, L"BinWidthValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartGroup::get_BinsCountValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3198, L"BinsCountValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_BinsCountValue(long BinsCountValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = BinsCountValue;
		Invoke(1, 3198, L"BinsCountValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartGroup::get_BinsOverflowEnabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3199, L"BinsOverflowEnabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_BinsOverflowEnabled(bool BinsOverflowEnabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BinsOverflowEnabled == true) ? 1 : 0;
		Invoke(1, 3199, L"BinsOverflowEnabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartGroup::get_BinsOverflowValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3200, L"BinsOverflowValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartGroup::put_BinsOverflowValue(double BinsOverflowValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = BinsOverflowValue;
		Invoke(1, 3200, L"BinsOverflowValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlBinsType ChartGroup::get_BinsType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3196, L"BinsType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlBinsType)returnedValue.iVal;
	}

	void ChartGroup::put_BinsType(Excel::XlBinsType BinsType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BinsType;
		Invoke(1, 3196, L"BinsType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartGroup::get_BinsUnderflowEnabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3201, L"BinsUnderflowEnabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_BinsUnderflowEnabled(bool BinsUnderflowEnabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BinsUnderflowEnabled == true) ? 1 : 0;
		Invoke(1, 3201, L"BinsUnderflowEnabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartGroup::get_BinsUnderflowValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3202, L"BinsUnderflowValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartGroup::put_BinsUnderflowValue(double BinsUnderflowValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = BinsUnderflowValue;
		Invoke(1, 3202, L"BinsUnderflowValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartGroup::get_BubbleScale()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1653, L"BubbleScale", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_BubbleScale(long BubbleScale)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = BubbleScale;
		Invoke(1, 1653, L"BubbleScale", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartGroup::CategoryCollection(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 3082, L"CategoryCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartGroup::CategoryCollection()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 3082, L"CategoryCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator ChartGroup::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long ChartGroup::get_DoughnutHoleSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1126, L"DoughnutHoleSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_DoughnutHoleSize(long DoughnutHoleSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DoughnutHoleSize;
		Invoke(1, 1126, L"DoughnutHoleSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::DownBars ChartGroup::get_DownBars()
	{
		Excel::DownBars returnedValue;
		Com::Param param;
		Invoke(0, 141, L"DownBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DropLines ChartGroup::get_DropLines()
	{
		Excel::DropLines returnedValue;
		Com::Param param;
		Invoke(0, 142, L"DropLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ChartGroup::get_FirstSliceAngle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 63, L"FirstSliceAngle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_FirstSliceAngle(long FirstSliceAngle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = FirstSliceAngle;
		Invoke(1, 63, L"FirstSliceAngle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartGroup::FullCategoryCollection(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 3081, L"FullCategoryCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartGroup::FullCategoryCollection()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 3081, L"FullCategoryCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ChartGroup::get_GapWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 51, L"GapWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_GapWidth(long GapWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = GapWidth;
		Invoke(1, 51, L"GapWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartGroup::get_Has3DShading()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1658, L"Has3DShading", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_Has3DShading(bool Has3DShading)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Has3DShading == true) ? 1 : 0;
		Invoke(1, 1658, L"Has3DShading", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartGroup::get_HasDropLines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 61, L"HasDropLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_HasDropLines(bool HasDropLines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasDropLines == true) ? 1 : 0;
		Invoke(1, 61, L"HasDropLines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartGroup::get_HasHiLoLines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 62, L"HasHiLoLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_HasHiLoLines(bool HasHiLoLines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasHiLoLines == true) ? 1 : 0;
		Invoke(1, 62, L"HasHiLoLines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartGroup::get_HasRadarAxisLabels()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 64, L"HasRadarAxisLabels", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_HasRadarAxisLabels(bool HasRadarAxisLabels)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasRadarAxisLabels == true) ? 1 : 0;
		Invoke(1, 64, L"HasRadarAxisLabels", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartGroup::get_HasSeriesLines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65, L"HasSeriesLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_HasSeriesLines(bool HasSeriesLines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasSeriesLines == true) ? 1 : 0;
		Invoke(1, 65, L"HasSeriesLines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ChartGroup::get_HasUpDownBars()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 66, L"HasUpDownBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_HasUpDownBars(bool HasUpDownBars)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasUpDownBars == true) ? 1 : 0;
		Invoke(1, 66, L"HasUpDownBars", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::HiLoLines ChartGroup::get_HiLoLines()
	{
		Excel::HiLoLines returnedValue;
		Com::Param param;
		Invoke(0, 143, L"HiLoLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ChartGroup::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long ChartGroup::get_Overlap()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 56, L"Overlap", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_Overlap(long Overlap)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Overlap;
		Invoke(1, 56, L"Overlap", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartGroup::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TickLabels ChartGroup::get_RadarAxisLabels()
	{
		Excel::TickLabels returnedValue;
		Com::Param param;
		Invoke(0, 144, L"RadarAxisLabels", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ChartGroup::get_SecondPlotSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1657, L"SecondPlotSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_SecondPlotSize(long SecondPlotSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SecondPlotSize;
		Invoke(1, 1657, L"SecondPlotSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ChartGroup::SeriesCollection(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 68, L"SeriesCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartGroup::SeriesCollection()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 68, L"SeriesCollection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::SeriesLines ChartGroup::get_SeriesLines()
	{
		Excel::SeriesLines returnedValue;
		Com::Param param;
		Invoke(0, 145, L"SeriesLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ChartGroup::get_ShowNegativeBubbles()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1654, L"ShowNegativeBubbles", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_ShowNegativeBubbles(bool ShowNegativeBubbles)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowNegativeBubbles == true) ? 1 : 0;
		Invoke(1, 1654, L"ShowNegativeBubbles", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSizeRepresents ChartGroup::get_SizeRepresents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1652, L"SizeRepresents", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSizeRepresents)returnedValue.iVal;
	}

	void ChartGroup::put_SizeRepresents(Excel::XlSizeRepresents SizeRepresents)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SizeRepresents;
		Invoke(1, 1652, L"SizeRepresents", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlChartSplitType ChartGroup::get_SplitType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1655, L"SplitType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartSplitType)returnedValue.iVal;
	}

	void ChartGroup::put_SplitType(Excel::XlChartSplitType SplitType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SplitType;
		Invoke(1, 1655, L"SplitType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartGroup::get_SplitValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1656, L"SplitValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartGroup::put_SplitValue(_variant_t SplitValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = SplitValue;
		Invoke(1, 1656, L"SplitValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartGroup::get_SubType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 109, L"SubType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_SubType(long SubType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SubType;
		Invoke(1, 109, L"SubType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ChartGroup::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ChartGroup::put_Type(long Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::UpBars ChartGroup::get_UpBars()
	{
		Excel::UpBars returnedValue;
		Com::Param param;
		Invoke(0, 140, L"UpBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ChartGroup::get_VaryByCategories()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 60, L"VaryByCategories", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartGroup::put_VaryByCategories(bool VaryByCategories)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (VaryByCategories == true) ? 1 : 0;
		Invoke(1, 60, L"VaryByCategories", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ChartGroups
	ChartGroups::ChartGroups()
	{
	}

	ChartGroups::~ChartGroups()
	{
	}

	Excel::ApplicationX ChartGroups::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ChartGroups::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ChartGroups::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ChartGroup ChartGroups::Item(_variant_t Index)
	{
		Excel::ChartGroup returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ChartGroups::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ChartGroups::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Axes
	Axes::Axes()
	{
	}

	Axes::~Axes()
	{
	}

	Excel::ApplicationX Axes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Axes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Axes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Axis Axes::Item(Excel::XlAxisType Type, Excel::XlAxisGroup AxisGroup)
	{
		Excel::Axis returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_I2;
		param[1].iVal = AxisGroup;
		Invoke(2, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Axes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Axis Axes::_Default(Excel::XlAxisType Type, Excel::XlAxisGroup AxisGroup)
	{
		Excel::Axis returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_I2;
		param[1].iVal = AxisGroup;
		Invoke(2, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr Axes::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Points
	Points::Points()
	{
	}

	Points::~Points()
	{
	}

	Excel::ApplicationX Points::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Points::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Points::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Point Points::Item(long Index)
	{
		Excel::Point returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Points::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Point Points::_Default(long Index)
	{
		Excel::Point returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr Points::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Point
	Point::Point()
	{
	}

	Point::~Point()
	{
	}

	Excel::ApplicationX Point::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Point::ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines, _variant_t ShowSeriesName, _variant_t ShowCategoryName, _variant_t ShowValue, _variant_t ShowPercentage, _variant_t ShowBubbleSize, _variant_t Separator)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = LegendKey;
		param[2] = AutoText;
		param[3] = HasLeaderLines;
		param[4] = ShowSeriesName;
		param[5] = ShowCategoryName;
		param[6] = ShowValue;
		param[7] = ShowPercentage;
		param[8] = ShowBubbleSize;
		param[9] = Separator;
		Invoke(10, 1922, L"ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Point::ApplyDataLabels(Excel::XlDataLabelsType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 1922, L"ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Point::get_ApplyPictToEnd()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1661, L"ApplyPictToEnd", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_ApplyPictToEnd(bool ApplyPictToEnd)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ApplyPictToEnd == true) ? 1 : 0;
		Invoke(1, 1661, L"ApplyPictToEnd", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Point::get_ApplyPictToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1660, L"ApplyPictToFront", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_ApplyPictToFront(bool ApplyPictToFront)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ApplyPictToFront == true) ? 1 : 0;
		Invoke(1, 1660, L"ApplyPictToFront", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Point::get_ApplyPictToSides()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1659, L"ApplyPictToSides", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_ApplyPictToSides(bool ApplyPictToSides)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ApplyPictToSides == true) ? 1 : 0;
		Invoke(1, 1659, L"ApplyPictToSides", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Point::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Point::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Point::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Point::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::DataLabel Point::get_DataLabel()
	{
		Excel::DataLabel returnedValue;
		Com::Param param;
		Invoke(0, 158, L"DataLabel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Point::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Point::get_Explosion()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 182, L"Explosion", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Point::put_Explosion(long Explosion)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Explosion;
		Invoke(1, 182, L"Explosion", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ChartFillFormat Point::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat Point::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Point::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Point::get_Has3DEffect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1665, L"Has3DEffect", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_Has3DEffect(bool Has3DEffect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Has3DEffect == true) ? 1 : 0;
		Invoke(1, 1665, L"Has3DEffect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Point::get_HasDataLabel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 77, L"HasDataLabel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_HasDataLabel(bool HasDataLabel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasDataLabel == true) ? 1 : 0;
		Invoke(1, 77, L"HasDataLabel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Point::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	Excel::Interior Point::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Point::get_InvertIfNegative()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 132, L"InvertIfNegative", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_InvertIfNegative(bool InvertIfNegative)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InvertIfNegative == true) ? 1 : 0;
		Invoke(1, 132, L"InvertIfNegative", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Point::get_IsTotal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3203, L"IsTotal", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_IsTotal(bool IsTotal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IsTotal == true) ? 1 : 0;
		Invoke(1, 3203, L"IsTotal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Point::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	long Point::get_MarkerBackgroundColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 73, L"MarkerBackgroundColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Point::put_MarkerBackgroundColor(long MarkerBackgroundColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerBackgroundColor;
		Invoke(1, 73, L"MarkerBackgroundColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex Point::get_MarkerBackgroundColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 74, L"MarkerBackgroundColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void Point::put_MarkerBackgroundColorIndex(Excel::XlColorIndex MarkerBackgroundColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerBackgroundColorIndex;
		Invoke(1, 74, L"MarkerBackgroundColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Point::get_MarkerForegroundColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 75, L"MarkerForegroundColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Point::put_MarkerForegroundColor(long MarkerForegroundColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerForegroundColor;
		Invoke(1, 75, L"MarkerForegroundColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex Point::get_MarkerForegroundColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 76, L"MarkerForegroundColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void Point::put_MarkerForegroundColorIndex(Excel::XlColorIndex MarkerForegroundColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerForegroundColorIndex;
		Invoke(1, 76, L"MarkerForegroundColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Point::get_MarkerSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 231, L"MarkerSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Point::put_MarkerSize(long MarkerSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerSize;
		Invoke(1, 231, L"MarkerSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlMarkerStyle Point::get_MarkerStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 72, L"MarkerStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlMarkerStyle)returnedValue.iVal;
	}

	void Point::put_MarkerStyle(Excel::XlMarkerStyle MarkerStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerStyle;
		Invoke(1, 72, L"MarkerStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Point::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Point::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Point::Paste()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlChartPictureType Point::get_PictureType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartPictureType)returnedValue.iVal;
	}

	void Point::put_PictureType(Excel::XlChartPictureType PictureType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PictureType;
		Invoke(1, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Point::get_PictureUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 162, L"PictureUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Point::put_PictureUnit(long PictureUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PictureUnit;
		Invoke(1, 162, L"PictureUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Point::get_PictureUnit2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2649, L"PictureUnit2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Point::put_PictureUnit2(double PictureUnit2)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = PictureUnit2;
		Invoke(1, 2649, L"PictureUnit2", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Point::PieSliceLocation(Excel::XlPieSliceLocation loc, Excel::XlPieSliceIndex Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = loc;
		param[1].vt = VT_I2;
		param[1].iVal = Index;
		Invoke(2, 2913, L"PieSliceLocation", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.dblVal;
	}

	bool Point::get_SecondaryPlot()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1662, L"SecondaryPlot", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_SecondaryPlot(bool SecondaryPlot)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SecondaryPlot == true) ? 1 : 0;
		Invoke(1, 1662, L"SecondaryPlot", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Point::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Point::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	bool Point::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Point::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Point::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double Point::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	_variant_t Point::_ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = LegendKey;
		param[2] = AutoText;
		param[3] = HasLeaderLines;
		Invoke(4, 151, L"_ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Point::_ApplyDataLabels(Excel::XlDataLabelsType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 151, L"_ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________Series
	Series::Series()
	{
	}

	Series::~Series()
	{
	}

	Excel::ApplicationX Series::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Series::ApplyCustomType(Excel::XlChartType ChartType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ChartType;
		Invoke(1, 1401, L"ApplyCustomType", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Series::ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines, _variant_t ShowSeriesName, _variant_t ShowCategoryName, _variant_t ShowValue, _variant_t ShowPercentage, _variant_t ShowBubbleSize, _variant_t Separator)
	{
		_variant_t returnedValue;
		Com::Param param(10);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = LegendKey;
		param[2] = AutoText;
		param[3] = HasLeaderLines;
		param[4] = ShowSeriesName;
		param[5] = ShowCategoryName;
		param[6] = ShowValue;
		param[7] = ShowPercentage;
		param[8] = ShowBubbleSize;
		param[9] = Separator;
		Invoke(10, 1922, L"ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Series::ApplyDataLabels(Excel::XlDataLabelsType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 1922, L"ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Series::get_ApplyPictToEnd()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1661, L"ApplyPictToEnd", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_ApplyPictToEnd(bool ApplyPictToEnd)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ApplyPictToEnd == true) ? 1 : 0;
		Invoke(1, 1661, L"ApplyPictToEnd", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Series::get_ApplyPictToFront()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1660, L"ApplyPictToFront", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_ApplyPictToFront(bool ApplyPictToFront)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ApplyPictToFront == true) ? 1 : 0;
		Invoke(1, 1660, L"ApplyPictToFront", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Series::get_ApplyPictToSides()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1659, L"ApplyPictToSides", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_ApplyPictToSides(bool ApplyPictToSides)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ApplyPictToSides == true) ? 1 : 0;
		Invoke(1, 1659, L"ApplyPictToSides", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlAxisGroup Series::get_AxisGroup()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 47, L"AxisGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAxisGroup)returnedValue.iVal;
	}

	void Series::put_AxisGroup(Excel::XlAxisGroup AxisGroup)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AxisGroup;
		Invoke(1, 47, L"AxisGroup", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlBarShape Series::get_BarShape()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1403, L"BarShape", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlBarShape)returnedValue.iVal;
	}

	void Series::put_BarShape(Excel::XlBarShape BarShape)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BarShape;
		Invoke(1, 1403, L"BarShape", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Series::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Series::get_BubbleSizes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1664, L"BubbleSizes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Series::put_BubbleSizes(_variant_t BubbleSizes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = BubbleSizes;
		Invoke(1, 1664, L"BubbleSizes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlChartType Series::get_ChartType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1400, L"ChartType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartType)returnedValue.iVal;
	}

	void Series::put_ChartType(Excel::XlChartType ChartType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ChartType;
		Invoke(1, 1400, L"ChartType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Series::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Series::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Series::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object Series::DataLabels(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 157, L"DataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Series::DataLabels()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 157, L"DataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Series::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Series::ErrorBar(Excel::XlErrorBarDirection Direction, Excel::XlErrorBarInclude Include, Excel::XlErrorBarType Type, _variant_t Amount, _variant_t MinusValues)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Direction;
		param[1].vt = VT_I2;
		param[1].iVal = Include;
		param[2].vt = VT_I2;
		param[2].iVal = Type;
		param[3] = Amount;
		param[4] = MinusValues;
		Invoke(5, 152, L"ErrorBar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Series::ErrorBar(Excel::XlErrorBarDirection Direction, Excel::XlErrorBarInclude Include, Excel::XlErrorBarType Type)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = Direction;
		param[1].vt = VT_I2;
		param[1].iVal = Include;
		param[2].vt = VT_I2;
		param[2].iVal = Type;
		Invoke(3, 152, L"ErrorBar", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ErrorBars Series::get_ErrorBars()
	{
		Excel::ErrorBars returnedValue;
		Com::Param param;
		Invoke(0, 159, L"ErrorBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Series::get_Explosion()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 182, L"Explosion", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_Explosion(long Explosion)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Explosion;
		Invoke(1, 182, L"Explosion", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ChartFillFormat Series::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat Series::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Series::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Series::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Series::get_FormulaLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Series::put_FormulaLocal(wstring FormulaLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaLocal.c_str());
		Invoke(1, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Series::get_FormulaR1C1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Series::put_FormulaR1C1(wstring FormulaR1C1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1.c_str());
		Invoke(1, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Series::get_FormulaR1C1Local()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Series::put_FormulaR1C1Local(wstring FormulaR1C1Local)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1Local.c_str());
		Invoke(1, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlGeoMappingLevel Series::get_GeoMappingLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3251, L"GeoMappingLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlGeoMappingLevel)returnedValue.iVal;
	}

	void Series::put_GeoMappingLevel(Excel::XlGeoMappingLevel GeoMappingLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = GeoMappingLevel;
		Invoke(1, 3251, L"GeoMappingLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlGeoProjectionType Series::get_GeoProjectionType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3250, L"GeoProjectionType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlGeoProjectionType)returnedValue.iVal;
	}

	void Series::put_GeoProjectionType(Excel::XlGeoProjectionType GeoProjectionType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = GeoProjectionType;
		Invoke(1, 3250, L"GeoProjectionType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Series::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Series::get_Has3DEffect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1665, L"Has3DEffect", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_Has3DEffect(bool Has3DEffect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Has3DEffect == true) ? 1 : 0;
		Invoke(1, 1665, L"Has3DEffect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Series::get_HasDataLabels()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 78, L"HasDataLabels", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_HasDataLabels(bool HasDataLabels)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasDataLabels == true) ? 1 : 0;
		Invoke(1, 78, L"HasDataLabels", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Series::get_HasErrorBars()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 160, L"HasErrorBars", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_HasErrorBars(bool HasErrorBars)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasErrorBars == true) ? 1 : 0;
		Invoke(1, 160, L"HasErrorBars", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Series::get_HasLeaderLines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1394, L"HasLeaderLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_HasLeaderLines(bool HasLeaderLines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasLeaderLines == true) ? 1 : 0;
		Invoke(1, 1394, L"HasLeaderLines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior Series::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Series::get_InvertColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2916, L"InvertColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_InvertColor(long InvertColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = InvertColor;
		Invoke(1, 2916, L"InvertColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Series::get_InvertColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2917, L"InvertColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_InvertColorIndex(long InvertColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = InvertColorIndex;
		Invoke(1, 2917, L"InvertColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Series::get_InvertIfNegative()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 132, L"InvertIfNegative", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_InvertIfNegative(bool InvertIfNegative)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InvertIfNegative == true) ? 1 : 0;
		Invoke(1, 132, L"InvertIfNegative", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Series::get_IsFiltered()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3083, L"IsFiltered", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_IsFiltered(bool IsFiltered)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IsFiltered == true) ? 1 : 0;
		Invoke(1, 3083, L"IsFiltered", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::LeaderLines Series::get_LeaderLines()
	{
		Excel::LeaderLines returnedValue;
		Com::Param param;
		Invoke(0, 1666, L"LeaderLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Series::get_MarkerBackgroundColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 73, L"MarkerBackgroundColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_MarkerBackgroundColor(long MarkerBackgroundColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerBackgroundColor;
		Invoke(1, 73, L"MarkerBackgroundColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex Series::get_MarkerBackgroundColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 74, L"MarkerBackgroundColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void Series::put_MarkerBackgroundColorIndex(Excel::XlColorIndex MarkerBackgroundColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerBackgroundColorIndex;
		Invoke(1, 74, L"MarkerBackgroundColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Series::get_MarkerForegroundColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 75, L"MarkerForegroundColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_MarkerForegroundColor(long MarkerForegroundColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerForegroundColor;
		Invoke(1, 75, L"MarkerForegroundColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex Series::get_MarkerForegroundColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 76, L"MarkerForegroundColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void Series::put_MarkerForegroundColorIndex(Excel::XlColorIndex MarkerForegroundColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerForegroundColorIndex;
		Invoke(1, 76, L"MarkerForegroundColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Series::get_MarkerSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 231, L"MarkerSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_MarkerSize(long MarkerSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerSize;
		Invoke(1, 231, L"MarkerSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlMarkerStyle Series::get_MarkerStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 72, L"MarkerStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlMarkerStyle)returnedValue.iVal;
	}

	void Series::put_MarkerStyle(Excel::XlMarkerStyle MarkerStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerStyle;
		Invoke(1, 72, L"MarkerStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Series::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Series::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Series::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlParentDataLabelOptions Series::get_ParentDataLabelOption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3204, L"ParentDataLabelOption", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlParentDataLabelOptions)returnedValue.iVal;
	}

	void Series::put_ParentDataLabelOption(Excel::XlParentDataLabelOptions ParentDataLabelOption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ParentDataLabelOption;
		Invoke(1, 3204, L"ParentDataLabelOption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Series::Paste()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlChartPictureType Series::get_PictureType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartPictureType)returnedValue.iVal;
	}

	void Series::put_PictureType(Excel::XlChartPictureType PictureType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PictureType;
		Invoke(1, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Series::get_PictureUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 162, L"PictureUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_PictureUnit(long PictureUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PictureUnit;
		Invoke(1, 162, L"PictureUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Series::get_PictureUnit2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2649, L"PictureUnit2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Series::put_PictureUnit2(double PictureUnit2)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = PictureUnit2;
		Invoke(1, 2649, L"PictureUnit2", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Series::get_PlotColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2915, L"PlotColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long Series::get_PlotOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 228, L"PlotOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_PlotOrder(long PlotOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PlotOrder;
		Invoke(1, 228, L"PlotOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Series::Points(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 70, L"Points", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Series::Points()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 70, L"Points", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Series::get_QuartileCalculationInclusiveMedian()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3205, L"QuartileCalculationInclusiveMedian", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_QuartileCalculationInclusiveMedian(bool QuartileCalculationInclusiveMedian)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (QuartileCalculationInclusiveMedian == true) ? 1 : 0;
		Invoke(1, 3205, L"QuartileCalculationInclusiveMedian", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlRegionLabelOptions Series::get_RegionLabelOption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3252, L"RegionLabelOption", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlRegionLabelOptions)returnedValue.iVal;
	}

	void Series::put_RegionLabelOption(Excel::XlRegionLabelOptions RegionLabelOption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RegionLabelOption;
		Invoke(1, 3252, L"RegionLabelOption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Series::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlSeriesColorGradientStyle Series::get_SeriesColorGradientStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3261, L"SeriesColorGradientStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSeriesColorGradientStyle)returnedValue.iVal;
	}

	void Series::put_SeriesColorGradientStyle(Excel::XlSeriesColorGradientStyle SeriesColorGradientStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SeriesColorGradientStyle;
		Invoke(1, 3261, L"SeriesColorGradientStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ChartSeriesGradientStopData Series::get_SeriesColorMaxGradientStop()
	{
		Excel::ChartSeriesGradientStopData returnedValue;
		Com::Param param;
		Invoke(0, 3264, L"SeriesColorMaxGradientStop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartSeriesGradientStopData Series::get_SeriesColorMidGradientStop()
	{
		Excel::ChartSeriesGradientStopData returnedValue;
		Com::Param param;
		Invoke(0, 3263, L"SeriesColorMidGradientStop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartSeriesGradientStopData Series::get_SeriesColorMinGradientStop()
	{
		Excel::ChartSeriesGradientStopData returnedValue;
		Com::Param param;
		Invoke(0, 3262, L"SeriesColorMinGradientStop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Series::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	bool Series::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Series::get_Smooth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 163, L"Smooth", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Series::put_Smooth(bool Smooth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Smooth == true) ? 1 : 0;
		Invoke(1, 163, L"Smooth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Series::Trendlines(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 154, L"Trendlines", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Series::Trendlines()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 154, L"Trendlines", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Series::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Series::put_Type(long Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlValueSortOrder Series::get_ValueSortOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3229, L"ValueSortOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlValueSortOrder)returnedValue.iVal;
	}

	void Series::put_ValueSortOrder(Excel::XlValueSortOrder ValueSortOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ValueSortOrder;
		Invoke(1, 3229, L"ValueSortOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Series::get_Values()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 164, L"Values", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Series::put_Values(_variant_t Values)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Values;
		Invoke(1, 164, L"Values", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Series::get_XValues()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1111, L"XValues", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Series::put_XValues(_variant_t XValues)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = XValues;
		Invoke(1, 1111, L"XValues", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Series::_ApplyDataLabels(Excel::XlDataLabelsType Type, _variant_t LegendKey, _variant_t AutoText, _variant_t HasLeaderLines)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = LegendKey;
		param[2] = AutoText;
		param[3] = HasLeaderLines;
		Invoke(4, 151, L"_ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Series::_ApplyDataLabels(Excel::XlDataLabelsType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 151, L"_ApplyDataLabels", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________SeriesCollection
	SeriesCollection::SeriesCollection()
	{
	}

	SeriesCollection::~SeriesCollection()
	{
	}

	Excel::Series SeriesCollection::Add(_variant_t Source, Excel::XlRowCol Rowcol, _variant_t SeriesLabels, _variant_t CategoryLabels, _variant_t Replace)
	{
		Excel::Series returnedValue;
		Com::Param param(5);
		param[0] = Source;
		param[1].vt = VT_I2;
		param[1].iVal = Rowcol;
		param[2] = SeriesLabels;
		param[3] = CategoryLabels;
		param[4] = Replace;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Series SeriesCollection::Add(_variant_t Source, Excel::XlRowCol Rowcol)
	{
		Excel::Series returnedValue;
		Com::Param param(2);
		param[0] = Source;
		param[1].vt = VT_I2;
		param[1].iVal = Rowcol;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX SeriesCollection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SeriesCollection::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SeriesCollection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t SeriesCollection::Extend(_variant_t Source, _variant_t Rowcol, _variant_t CategoryLabels)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0] = Source;
		param[1] = Rowcol;
		param[2] = CategoryLabels;
		Invoke(3, 227, L"Extend", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t SeriesCollection::Extend(_variant_t Source)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Source;
		Invoke(1, 227, L"Extend", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Series SeriesCollection::Item(_variant_t Index)
	{
		Excel::Series returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Series SeriesCollection::NewSeries()
	{
		Excel::Series returnedValue;
		Com::Param param;
		Invoke(0, 1117, L"NewSeries", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object SeriesCollection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t SeriesCollection::Paste(Excel::XlRowCol Rowcol, _variant_t SeriesLabels, _variant_t CategoryLabels, _variant_t Replace, _variant_t NewSeries)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Rowcol;
		param[1] = SeriesLabels;
		param[2] = CategoryLabels;
		param[3] = Replace;
		param[4] = NewSeries;
		Invoke(5, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t SeriesCollection::Paste(Excel::XlRowCol Rowcol)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Rowcol;
		Invoke(1, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Series SeriesCollection::_Default(_variant_t Index)
	{
		Excel::Series returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr SeriesCollection::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________DataLabel
	DataLabel::DataLabel()
	{
	}

	DataLabel::~DataLabel()
	{
	}

	Excel::ApplicationX DataLabel::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DataLabel::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabel::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_AutoText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 135, L"AutoText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_AutoText(bool AutoText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoText == true) ? 1 : 0;
		Invoke(1, 135, L"AutoText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border DataLabel::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DataLabel::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataLabel::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters DataLabel::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters DataLabel::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator DataLabel::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t DataLabel::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat DataLabel::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Font DataLabel::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat DataLabel::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DataLabel::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataLabel::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DataLabel::get_FormulaLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataLabel::put_FormulaLocal(wstring FormulaLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaLocal.c_str());
		Invoke(1, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DataLabel::get_FormulaR1C1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataLabel::put_FormulaR1C1(wstring FormulaR1C1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1.c_str());
		Invoke(1, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DataLabel::get_FormulaR1C1Local()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataLabel::put_FormulaR1C1Local(wstring FormulaR1C1Local)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1Local.c_str());
		Invoke(1, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabel::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double DataLabel::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DataLabel::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabel::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabel::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior DataLabel::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double DataLabel::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DataLabel::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DataLabel::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring DataLabel::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataLabel::put_NumberFormat(wstring NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NumberFormat.c_str());
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_NumberFormatLinked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 194, L"NumberFormatLinked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_NumberFormatLinked(bool NumberFormatLinked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (NumberFormatLinked == true) ? 1 : 0;
		Invoke(1, 194, L"NumberFormatLinked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabel::get_NumberFormatLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabel::put_NumberFormatLocal(_variant_t NumberFormatLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormatLocal;
		Invoke(1, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabel::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabel::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DataLabel::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlDataLabelPosition DataLabel::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDataLabelPosition)returnedValue.iVal;
	}

	void DataLabel::put_Position(Excel::XlDataLabelPosition Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DataLabel::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DataLabel::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabel::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DataLabel::get_Separator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2027, L"Separator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabel::put_Separator(_variant_t Separator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Separator;
		Invoke(1, 2027, L"Separator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DataLabel::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	bool DataLabel::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_ShowBubbleSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2026, L"ShowBubbleSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_ShowBubbleSize(bool ShowBubbleSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowBubbleSize == true) ? 1 : 0;
		Invoke(1, 2026, L"ShowBubbleSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_ShowCategoryName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2023, L"ShowCategoryName", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_ShowCategoryName(bool ShowCategoryName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowCategoryName == true) ? 1 : 0;
		Invoke(1, 2023, L"ShowCategoryName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_ShowLegendKey()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 171, L"ShowLegendKey", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_ShowLegendKey(bool ShowLegendKey)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowLegendKey == true) ? 1 : 0;
		Invoke(1, 171, L"ShowLegendKey", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_ShowPercentage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2025, L"ShowPercentage", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_ShowPercentage(bool ShowPercentage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowPercentage == true) ? 1 : 0;
		Invoke(1, 2025, L"ShowPercentage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_ShowRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3086, L"ShowRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_ShowRange(bool ShowRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowRange == true) ? 1 : 0;
		Invoke(1, 3086, L"ShowRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_ShowSeriesName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2022, L"ShowSeriesName", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_ShowSeriesName(bool ShowSeriesName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowSeriesName == true) ? 1 : 0;
		Invoke(1, 2022, L"ShowSeriesName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabel::get_ShowValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2024, L"ShowValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabel::put_ShowValue(bool ShowValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowValue == true) ? 1 : 0;
		Invoke(1, 2024, L"ShowValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DataLabel::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataLabel::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DataLabel::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DataLabel::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabel::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabel::put_Type(_variant_t Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabel::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabel::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DataLabel::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DataLabel::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DataLabel::get__Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3084, L"_Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double DataLabel::get__Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3085, L"_Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	//________________________________________________________DataLabels
	DataLabels::DataLabels()
	{
	}

	DataLabels::~DataLabels()
	{
	}

	Excel::ApplicationX DataLabels::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DataLabels::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabels::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_AutoText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 135, L"AutoText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_AutoText(bool AutoText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoText == true) ? 1 : 0;
		Invoke(1, 135, L"AutoText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border DataLabels::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long DataLabels::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator DataLabels::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t DataLabels::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat DataLabels::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Font DataLabels::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat DataLabels::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DataLabels::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DataLabels::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabels::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior DataLabels::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DataLabel DataLabels::Item(_variant_t Index)
	{
		Excel::DataLabel returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring DataLabels::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring DataLabels::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataLabels::put_NumberFormat(wstring NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NumberFormat.c_str());
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_NumberFormatLinked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 194, L"NumberFormatLinked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_NumberFormatLinked(bool NumberFormatLinked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (NumberFormatLinked == true) ? 1 : 0;
		Invoke(1, 194, L"NumberFormatLinked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabels::get_NumberFormatLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabels::put_NumberFormatLocal(_variant_t NumberFormatLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormatLocal;
		Invoke(1, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabels::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabels::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DataLabels::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlDataLabelPosition DataLabels::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDataLabelPosition)returnedValue.iVal;
	}

	void DataLabels::put_Position(Excel::XlDataLabelPosition Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DataLabels::Propagate(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 3087, L"Propagate", param, returnedValue, DISPATCH_METHOD);
	}

	long DataLabels::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DataLabels::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabels::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t DataLabels::get_Separator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2027, L"Separator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabels::put_Separator(_variant_t Separator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Separator;
		Invoke(1, 2027, L"Separator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void DataLabels::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	bool DataLabels::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_ShowBubbleSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2026, L"ShowBubbleSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_ShowBubbleSize(bool ShowBubbleSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowBubbleSize == true) ? 1 : 0;
		Invoke(1, 2026, L"ShowBubbleSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_ShowCategoryName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2023, L"ShowCategoryName", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_ShowCategoryName(bool ShowCategoryName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowCategoryName == true) ? 1 : 0;
		Invoke(1, 2023, L"ShowCategoryName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_ShowLegendKey()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 171, L"ShowLegendKey", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_ShowLegendKey(bool ShowLegendKey)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowLegendKey == true) ? 1 : 0;
		Invoke(1, 171, L"ShowLegendKey", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_ShowPercentage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2025, L"ShowPercentage", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_ShowPercentage(bool ShowPercentage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowPercentage == true) ? 1 : 0;
		Invoke(1, 2025, L"ShowPercentage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_ShowRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3086, L"ShowRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_ShowRange(bool ShowRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowRange == true) ? 1 : 0;
		Invoke(1, 3086, L"ShowRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_ShowSeriesName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2022, L"ShowSeriesName", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_ShowSeriesName(bool ShowSeriesName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowSeriesName == true) ? 1 : 0;
		Invoke(1, 2022, L"ShowSeriesName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataLabels::get_ShowValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2024, L"ShowValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataLabels::put_ShowValue(bool ShowValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowValue == true) ? 1 : 0;
		Invoke(1, 2024, L"ShowValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabels::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabels::put_Type(_variant_t Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataLabels::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataLabels::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::DataLabel DataLabels::_Default(_variant_t Index)
	{
		Excel::DataLabel returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DataLabels::_Dummy10()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65546, L"_Dummy10", param, returnedValue, DISPATCH_METHOD);
	}

	void DataLabels::_Dummy13()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65549, L"_Dummy13", param, returnedValue, DISPATCH_METHOD);
	}

	void DataLabels::_Dummy16()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65552, L"_Dummy16", param, returnedValue, DISPATCH_METHOD);
	}

	void DataLabels::_Dummy17()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65553, L"_Dummy17", param, returnedValue, DISPATCH_METHOD);
	}

	void DataLabels::_Dummy9()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65545, L"_Dummy9", param, returnedValue, DISPATCH_METHOD);
	}

	IUnknownPtr DataLabels::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________LegendEntry
	LegendEntry::LegendEntry()
	{
	}

	LegendEntry::~LegendEntry()
	{
	}

	Excel::ApplicationX LegendEntry::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t LegendEntry::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void LegendEntry::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator LegendEntry::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t LegendEntry::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Font LegendEntry::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat LegendEntry::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double LegendEntry::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	long LegendEntry::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double LegendEntry::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	Excel::LegendKey LegendEntry::get_LegendKey()
	{
		Excel::LegendKey returnedValue;
		Com::Param param;
		Invoke(0, 174, L"LegendKey", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object LegendEntry::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t LegendEntry::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double LegendEntry::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double LegendEntry::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	//________________________________________________________LegendEntries
	LegendEntries::LegendEntries()
	{
	}

	LegendEntries::~LegendEntries()
	{
	}

	Excel::ApplicationX LegendEntries::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long LegendEntries::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator LegendEntries::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::LegendEntry LegendEntries::Item(_variant_t Index)
	{
		Excel::LegendEntry returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object LegendEntries::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::LegendEntry LegendEntries::_Default(_variant_t Index)
	{
		Excel::LegendEntry returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr LegendEntries::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________LegendKey
	LegendKey::LegendKey()
	{
	}

	LegendKey::~LegendKey()
	{
	}

	Excel::ApplicationX LegendKey::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border LegendKey::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t LegendKey::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator LegendKey::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t LegendKey::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat LegendKey::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat LegendKey::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double LegendKey::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	Excel::Interior LegendKey::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool LegendKey::get_InvertIfNegative()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 132, L"InvertIfNegative", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void LegendKey::put_InvertIfNegative(bool InvertIfNegative)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InvertIfNegative == true) ? 1 : 0;
		Invoke(1, 132, L"InvertIfNegative", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double LegendKey::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	long LegendKey::get_MarkerBackgroundColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 73, L"MarkerBackgroundColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void LegendKey::put_MarkerBackgroundColor(long MarkerBackgroundColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerBackgroundColor;
		Invoke(1, 73, L"MarkerBackgroundColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex LegendKey::get_MarkerBackgroundColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 74, L"MarkerBackgroundColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void LegendKey::put_MarkerBackgroundColorIndex(Excel::XlColorIndex MarkerBackgroundColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerBackgroundColorIndex;
		Invoke(1, 74, L"MarkerBackgroundColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long LegendKey::get_MarkerForegroundColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 75, L"MarkerForegroundColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void LegendKey::put_MarkerForegroundColor(long MarkerForegroundColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerForegroundColor;
		Invoke(1, 75, L"MarkerForegroundColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex LegendKey::get_MarkerForegroundColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 76, L"MarkerForegroundColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void LegendKey::put_MarkerForegroundColorIndex(Excel::XlColorIndex MarkerForegroundColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerForegroundColorIndex;
		Invoke(1, 76, L"MarkerForegroundColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long LegendKey::get_MarkerSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 231, L"MarkerSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void LegendKey::put_MarkerSize(long MarkerSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MarkerSize;
		Invoke(1, 231, L"MarkerSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlMarkerStyle LegendKey::get_MarkerStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 72, L"MarkerStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlMarkerStyle)returnedValue.iVal;
	}

	void LegendKey::put_MarkerStyle(Excel::XlMarkerStyle MarkerStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MarkerStyle;
		Invoke(1, 72, L"MarkerStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object LegendKey::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long LegendKey::get_PictureType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void LegendKey::put_PictureType(long PictureType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PictureType;
		Invoke(1, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long LegendKey::get_PictureUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 162, L"PictureUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void LegendKey::put_PictureUnit(long PictureUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PictureUnit;
		Invoke(1, 162, L"PictureUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double LegendKey::get_PictureUnit2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2649, L"PictureUnit2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void LegendKey::put_PictureUnit2(double PictureUnit2)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = PictureUnit2;
		Invoke(1, 2649, L"PictureUnit2", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t LegendKey::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool LegendKey::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void LegendKey::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool LegendKey::get_Smooth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 163, L"Smooth", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void LegendKey::put_Smooth(bool Smooth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Smooth == true) ? 1 : 0;
		Invoke(1, 163, L"Smooth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double LegendKey::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double LegendKey::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	//________________________________________________________Trendlines
	Trendlines::Trendlines()
	{
	}

	Trendlines::~Trendlines()
	{
	}

	Excel::Trendline Trendlines::Add(Excel::XlTrendlineType Type, _variant_t Order, _variant_t Period, _variant_t Forward, _variant_t Backward, _variant_t Intercept, _variant_t DisplayEquation, _variant_t DisplayRSquared, _variant_t Name)
	{
		Excel::Trendline returnedValue;
		Com::Param param(9);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = Order;
		param[2] = Period;
		param[3] = Forward;
		param[4] = Backward;
		param[5] = Intercept;
		param[6] = DisplayEquation;
		param[7] = DisplayRSquared;
		param[8] = Name;
		Invoke(9, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Trendline Trendlines::Add(Excel::XlTrendlineType Type)
	{
		Excel::Trendline returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Trendlines::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Trendlines::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Trendlines::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Trendline Trendlines::Item(_variant_t Index)
	{
		Excel::Trendline returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Trendline Trendlines::Item()
	{
		Excel::Trendline returnedValue;
		Com::Param param(0);
		Invoke(0, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Trendlines::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Trendline Trendlines::_Default(_variant_t Index)
	{
		Excel::Trendline returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Trendline Trendlines::_Default()
	{
		Excel::Trendline returnedValue;
		Com::Param param(0);
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr Trendlines::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Trendline
	Trendline::Trendline()
	{
	}

	Trendline::~Trendline()
	{
	}

	Excel::ApplicationX Trendline::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Trendline::get_Backward()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 185, L"Backward", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Trendline::put_Backward(long Backward)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Backward;
		Invoke(1, 185, L"Backward", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Trendline::get_Backward2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2650, L"Backward2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Trendline::put_Backward2(double Backward2)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Backward2;
		Invoke(1, 2650, L"Backward2", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Trendline::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Trendline::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Trendline::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::DataLabel Trendline::get_DataLabel()
	{
		Excel::DataLabel returnedValue;
		Com::Param param;
		Invoke(0, 158, L"DataLabel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Trendline::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool Trendline::get_DisplayEquation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 190, L"DisplayEquation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Trendline::put_DisplayEquation(bool DisplayEquation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayEquation == true) ? 1 : 0;
		Invoke(1, 190, L"DisplayEquation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Trendline::get_DisplayRSquared()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 189, L"DisplayRSquared", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Trendline::put_DisplayRSquared(bool DisplayRSquared)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayRSquared == true) ? 1 : 0;
		Invoke(1, 189, L"DisplayRSquared", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ChartFormat Trendline::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Trendline::get_Forward()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 191, L"Forward", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Trendline::put_Forward(long Forward)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Forward;
		Invoke(1, 191, L"Forward", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Trendline::get_Forward2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2651, L"Forward2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Trendline::put_Forward2(double Forward2)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Forward2;
		Invoke(1, 2651, L"Forward2", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Trendline::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Trendline::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	double Trendline::get_Intercept()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 186, L"Intercept", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Trendline::put_Intercept(double Intercept)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Intercept;
		Invoke(1, 186, L"Intercept", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Trendline::get_InterceptIsAuto()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 187, L"InterceptIsAuto", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Trendline::put_InterceptIsAuto(bool InterceptIsAuto)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InterceptIsAuto == true) ? 1 : 0;
		Invoke(1, 187, L"InterceptIsAuto", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Trendline::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Trendline::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Trendline::get_NameIsAuto()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 188, L"NameIsAuto", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Trendline::put_NameIsAuto(bool NameIsAuto)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (NameIsAuto == true) ? 1 : 0;
		Invoke(1, 188, L"NameIsAuto", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Trendline::get_Order()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Trendline::put_Order(long Order)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Order;
		Invoke(1, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Trendline::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Trendline::get_Period()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 184, L"Period", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Trendline::put_Period(long Period)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Period;
		Invoke(1, 184, L"Period", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Trendline::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Trendline::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlTrendlineType Trendline::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTrendlineType)returnedValue.iVal;
	}

	void Trendline::put_Type(Excel::XlTrendlineType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Corners
	Corners::Corners()
	{
	}

	Corners::~Corners()
	{
	}

	Excel::ApplicationX Corners::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Corners::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring Corners::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Corners::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Corners::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________SeriesLines
	SeriesLines::SeriesLines()
	{
	}

	SeriesLines::~SeriesLines()
	{
	}

	Excel::ApplicationX SeriesLines::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border SeriesLines::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SeriesLines::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t SeriesLines::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFormat SeriesLines::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t SeriesLines::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring SeriesLines::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object SeriesLines::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t SeriesLines::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void SeriesLines::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________HiLoLines
	HiLoLines::HiLoLines()
	{
	}

	HiLoLines::~HiLoLines()
	{
	}

	Excel::ApplicationX HiLoLines::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border HiLoLines::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator HiLoLines::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t HiLoLines::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFormat HiLoLines::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring HiLoLines::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object HiLoLines::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t HiLoLines::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________Gridlines
	Gridlines::Gridlines()
	{
	}

	Gridlines::~Gridlines()
	{
	}

	Excel::ApplicationX Gridlines::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border Gridlines::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Gridlines::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Gridlines::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFormat Gridlines::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Gridlines::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Gridlines::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Gridlines::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Gridlines::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Gridlines::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________DropLines
	DropLines::DropLines()
	{
	}

	DropLines::~DropLines()
	{
	}

	Excel::ApplicationX DropLines::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border DropLines::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator DropLines::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t DropLines::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFormat DropLines::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DropLines::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object DropLines::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DropLines::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________LeaderLines
	LeaderLines::LeaderLines()
	{
	}

	LeaderLines::~LeaderLines()
	{
	}

	Excel::ApplicationX LeaderLines::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border LeaderLines::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator LeaderLines::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void LeaderLines::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ChartFormat LeaderLines::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object LeaderLines::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void LeaderLines::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________UpBars
	UpBars::UpBars()
	{
	}

	UpBars::~UpBars()
	{
	}

	Excel::ApplicationX UpBars::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border UpBars::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator UpBars::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t UpBars::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat UpBars::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat UpBars::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t UpBars::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Interior UpBars::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring UpBars::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object UpBars::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t UpBars::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void UpBars::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________DownBars
	DownBars::DownBars()
	{
	}

	DownBars::~DownBars()
	{
	}

	Excel::ApplicationX DownBars::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border DownBars::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator DownBars::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t DownBars::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat DownBars::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat DownBars::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DownBars::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Interior DownBars::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DownBars::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object DownBars::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DownBars::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DownBars::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________Floor
	Floor::Floor()
	{
	}

	Floor::~Floor()
	{
	}

	Excel::ApplicationX Floor::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border Floor::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Floor::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Floor::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ChartFillFormat Floor::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat Floor::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Interior Floor::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Floor::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Floor::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Floor::Paste()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Floor::get_PictureType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Floor::put_PictureType(_variant_t PictureType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PictureType;
		Invoke(1, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Floor::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Floor::get_Thickness()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2652, L"Thickness", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Floor::put_Thickness(long Thickness)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Thickness;
		Invoke(1, 2652, L"Thickness", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Walls
	Walls::Walls()
	{
	}

	Walls::~Walls()
	{
	}

	Excel::ApplicationX Walls::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border Walls::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Walls::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Walls::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ChartFillFormat Walls::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat Walls::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Interior Walls::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Walls::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Walls::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Walls::Paste()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 211, L"Paste", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Walls::get_PictureType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Walls::put_PictureType(_variant_t PictureType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PictureType;
		Invoke(1, 161, L"PictureType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Walls::get_PictureUnit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 162, L"PictureUnit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Walls::put_PictureUnit(_variant_t PictureUnit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PictureUnit;
		Invoke(1, 162, L"PictureUnit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Walls::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Walls::get_Thickness()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2652, L"Thickness", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Walls::put_Thickness(long Thickness)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Thickness;
		Invoke(1, 2652, L"Thickness", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________TickLabels
	TickLabels::TickLabels()
	{
	}

	TickLabels::~TickLabels()
	{
	}

	long TickLabels::get_Alignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 453, L"Alignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TickLabels::put_Alignment(long Alignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Alignment;
		Invoke(1, 453, L"Alignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX TickLabels::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TickLabels::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TickLabels::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator TickLabels::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t TickLabels::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long TickLabels::get_Depth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1890, L"Depth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Font TickLabels::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat TickLabels::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TickLabels::get_MultiLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2653, L"MultiLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TickLabels::put_MultiLevel(bool MultiLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MultiLevel == true) ? 1 : 0;
		Invoke(1, 2653, L"MultiLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TickLabels::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring TickLabels::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TickLabels::put_NumberFormat(wstring NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NumberFormat.c_str());
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TickLabels::get_NumberFormatLinked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 194, L"NumberFormatLinked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TickLabels::put_NumberFormatLinked(bool NumberFormatLinked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (NumberFormatLinked == true) ? 1 : 0;
		Invoke(1, 194, L"NumberFormatLinked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TickLabels::get_NumberFormatLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TickLabels::put_NumberFormatLocal(_variant_t NumberFormatLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormatLocal;
		Invoke(1, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long TickLabels::get_Offset()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 254, L"Offset", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TickLabels::put_Offset(long Offset)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Offset;
		Invoke(1, 254, L"Offset", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTickLabelOrientation TickLabels::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTickLabelOrientation)returnedValue.iVal;
	}

	void TickLabels::put_Orientation(Excel::XlTickLabelOrientation Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TickLabels::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long TickLabels::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TickLabels::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TickLabels::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________PlotArea
	PlotArea::PlotArea()
	{
	}

	PlotArea::~PlotArea()
	{
	}

	Excel::ApplicationX PlotArea::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border PlotArea::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PlotArea::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator PlotArea::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ChartFillFormat PlotArea::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat PlotArea::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PlotArea::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double PlotArea::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PlotArea::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PlotArea::get_InsideHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1670, L"InsideHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PlotArea::put_InsideHeight(double InsideHeight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = InsideHeight;
		Invoke(1, 1670, L"InsideHeight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PlotArea::get_InsideLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1667, L"InsideLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PlotArea::put_InsideLeft(double InsideLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = InsideLeft;
		Invoke(1, 1667, L"InsideLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PlotArea::get_InsideTop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1668, L"InsideTop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PlotArea::put_InsideTop(double InsideTop)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = InsideTop;
		Invoke(1, 1668, L"InsideTop", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PlotArea::get_InsideWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1669, L"InsideWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PlotArea::put_InsideWidth(double InsideWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = InsideWidth;
		Invoke(1, 1669, L"InsideWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior PlotArea::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double PlotArea::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PlotArea::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring PlotArea::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object PlotArea::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlChartElementPosition PlotArea::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartElementPosition)returnedValue.iVal;
	}

	void PlotArea::put_Position(Excel::XlChartElementPosition Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t PlotArea::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void PlotArea::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	double PlotArea::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PlotArea::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PlotArea::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void PlotArea::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double PlotArea::get__InsideHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2657, L"_InsideHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double PlotArea::get__InsideLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2654, L"_InsideLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double PlotArea::get__InsideTop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2655, L"_InsideTop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	double PlotArea::get__InsideWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2656, L"_InsideWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	//________________________________________________________ChartArea
	ChartArea::ChartArea()
	{
	}

	ChartArea::~ChartArea()
	{
	}

	Excel::ApplicationX ChartArea::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartArea::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ChartArea::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border ChartArea::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ChartArea::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartArea::ClearContents()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 113, L"ClearContents", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartArea::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ChartArea::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator ChartArea::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ChartFillFormat ChartArea::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Font ChartArea::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat ChartArea::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ChartArea::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartArea::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior ChartArea::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ChartArea::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartArea::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartArea::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object ChartArea::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ChartArea::get_RoundedCorners()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartArea::put_RoundedCorners(bool RoundedCorners)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RoundedCorners == true) ? 1 : 0;
		Invoke(1, 619, L"RoundedCorners", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ChartArea::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ChartArea::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartArea::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartArea::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartArea::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ChartArea::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ChartArea::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Legend
	Legend::Legend()
	{
	}

	Legend::~Legend()
	{
	}

	Excel::ApplicationX Legend::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Legend::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Legend::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border Legend::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Legend::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Legend::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t Legend::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat Legend::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Font Legend::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat Legend::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Legend::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double Legend::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Legend::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Legend::get_IncludeInLayout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2648, L"IncludeInLayout", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Legend::put_IncludeInLayout(bool IncludeInLayout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IncludeInLayout == true) ? 1 : 0;
		Invoke(1, 2648, L"IncludeInLayout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior Legend::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Legend::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Legend::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Legend::LegendEntries(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 173, L"LegendEntries", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Legend::LegendEntries()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 173, L"LegendEntries", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring Legend::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Legend::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlLegendPosition Legend::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlLegendPosition)returnedValue.iVal;
	}

	void Legend::put_Position(Excel::XlLegendPosition Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Legend::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void Legend::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	bool Legend::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Legend::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Legend::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Legend::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Legend::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Legend::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ErrorBars
	ErrorBars::ErrorBars()
	{
	}

	ErrorBars::~ErrorBars()
	{
	}

	Excel::ApplicationX ErrorBars::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Border ErrorBars::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ErrorBars::ClearFormats()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 112, L"ClearFormats", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator ErrorBars::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t ErrorBars::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlEndStyleCap ErrorBars::get_EndStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1124, L"EndStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlEndStyleCap)returnedValue.iVal;
	}

	void ErrorBars::put_EndStyle(Excel::XlEndStyleCap EndStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = EndStyle;
		Invoke(1, 1124, L"EndStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ChartFormat ErrorBars::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ErrorBars::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring ErrorBars::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object ErrorBars::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ErrorBars::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ErrorBars::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________DataTable
	DataTable::DataTable()
	{
	}

	DataTable::~DataTable()
	{
	}

	Excel::ApplicationX DataTable::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DataTable::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataTable::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border DataTable::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator DataTable::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void DataTable::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Font DataTable::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat DataTable::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DataTable::get_HasBorderHorizontal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1671, L"HasBorderHorizontal", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataTable::put_HasBorderHorizontal(bool HasBorderHorizontal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasBorderHorizontal == true) ? 1 : 0;
		Invoke(1, 1671, L"HasBorderHorizontal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataTable::get_HasBorderOutline()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1673, L"HasBorderOutline", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataTable::put_HasBorderOutline(bool HasBorderOutline)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasBorderOutline == true) ? 1 : 0;
		Invoke(1, 1673, L"HasBorderOutline", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataTable::get_HasBorderVertical()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1672, L"HasBorderVertical", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataTable::put_HasBorderVertical(bool HasBorderVertical)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasBorderVertical == true) ? 1 : 0;
		Invoke(1, 1672, L"HasBorderVertical", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DataTable::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataTable::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	bool DataTable::get_ShowLegendKey()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 171, L"ShowLegendKey", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataTable::put_ShowLegendKey(bool ShowLegendKey)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowLegendKey == true) ? 1 : 0;
		Invoke(1, 171, L"ShowLegendKey", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Phonetic
	Phonetic::Phonetic()
	{
	}

	Phonetic::~Phonetic()
	{
	}

	long Phonetic::get_Alignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 453, L"Alignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Phonetic::put_Alignment(long Alignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Alignment;
		Invoke(1, 453, L"Alignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Phonetic::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Phonetic::get_CharacterType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1674, L"CharacterType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Phonetic::put_CharacterType(long CharacterType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = CharacterType;
		Invoke(1, 1674, L"CharacterType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Phonetic::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Font Phonetic::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Phonetic::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Phonetic::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Phonetic::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Phonetic::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Phonetic::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Shape
	Shape::Shape()
	{
	}

	Shape::~Shape()
	{
	}

	Excel::Adjustments Shape::get_Adjustments()
	{
		Excel::Adjustments returnedValue;
		Com::Param param;
		Invoke(0, 1691, L"Adjustments", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Shape::get_AlternativeText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1891, L"AlternativeText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Shape::put_AlternativeText(wstring AlternativeText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(AlternativeText.c_str());
		Invoke(1, 1891, L"AlternativeText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Shape::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Shape::Apply()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1675, L"Apply", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoAutoShapeType*/ short Shape::get_AutoShapeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1693, L"AutoShapeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoAutoShapeType*/ short)returnedValue.iVal;
	}

	void Shape::put_AutoShapeType(/* MsoAutoShapeType*/ short AutoShapeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutoShapeType;
		Invoke(1, 1693, L"AutoShapeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoBackgroundStyleIndex*/ short Shape::get_BackgroundStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2661, L"BackgroundStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoBackgroundStyleIndex*/ short)returnedValue.iVal;
	}

	void Shape::put_BackgroundStyle(/* MsoBackgroundStyleIndex*/ short BackgroundStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BackgroundStyle;
		Invoke(1, 2661, L"BackgroundStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoBlackWhiteMode*/ short Shape::get_BlackWhiteMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1707, L"BlackWhiteMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoBlackWhiteMode*/ short)returnedValue.iVal;
	}

	void Shape::put_BlackWhiteMode(/* MsoBlackWhiteMode*/ short BlackWhiteMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BlackWhiteMode;
		Invoke(1, 1707, L"BlackWhiteMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Shape::get_BottomRightCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 615, L"BottomRightCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::CalloutFormat Shape::get_Callout()
	{
		Excel::CalloutFormat returnedValue;
		Com::Param param;
		Invoke(0, 1694, L"Callout", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Shape::CanvasCropBottom(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 2175, L"CanvasCropBottom", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::CanvasCropLeft(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 2172, L"CanvasCropLeft", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::CanvasCropRight(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 2174, L"CanvasCropRight", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::CanvasCropTop(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 2173, L"CanvasCropTop", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object Shape::get_CanvasItems()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2171, L"CanvasItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartX Shape::get_Chart()
	{
		Excel::ChartX returnedValue;
		Com::Param param;
		Invoke(0, 7, L"Chart", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short Shape::get_Child()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2169, L"Child", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	long Shape::get_ConnectionSiteCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1695, L"ConnectionSiteCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	/* MsoTriState*/ short Shape::get_Connector()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1696, L"Connector", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	Excel::ConnectorFormat Shape::get_ConnectorFormat()
	{
		Excel::ConnectorFormat returnedValue;
		Com::Param param;
		Invoke(0, 1697, L"ConnectorFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ControlFormat Shape::get_ControlFormat()
	{
		Excel::ControlFormat returnedValue;
		Com::Param param;
		Invoke(0, 1709, L"ControlFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Shape::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::CopyPicture(_variant_t Appearance, _variant_t Format)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Appearance;
		param[1] = Format;
		Invoke(2, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::CopyPicture()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 213, L"CopyPicture", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator Shape::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Shape::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Diagram Shape::get_Diagram()
	{
		Excel::Diagram returnedValue;
		Com::Param param;
		Invoke(0, 2167, L"Diagram", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DiagramNode Shape::get_DiagramNode()
	{
		Excel::DiagramNode returnedValue;
		Com::Param param;
		Invoke(0, 2165, L"DiagramNode", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Shape::get_DrawingObject()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1708, L"DrawingObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Shape Shape::Duplicate()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::FillFormat Shape::get_Fill()
	{
		Excel::FillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Shape::Flip(/* MsoFlipCmd*/ short FlipCmd)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = FlipCmd;
		Invoke(1, 1676, L"Flip", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlFormControl Shape::get_FormControlType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1712, L"FormControlType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlFormControl)returnedValue.iVal;
	}

	Com::Object Shape::get_Glow()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2663, L"Glow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoGraphicStyleIndex*/ short Shape::get_GraphicStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3272, L"GraphicStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoGraphicStyleIndex*/ short)returnedValue.iVal;
	}

	void Shape::put_GraphicStyle(/* MsoGraphicStyleIndex*/ short GraphicStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = GraphicStyle;
		Invoke(1, 3272, L"GraphicStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::GroupShapes Shape::get_GroupItems()
	{
		Excel::GroupShapes returnedValue;
		Com::Param param;
		Invoke(0, 1698, L"GroupItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short Shape::get_HasChart()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2658, L"HasChart", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	/* MsoTriState*/ short Shape::get_HasDiagram()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2168, L"HasDiagram", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	/* MsoTriState*/ short Shape::get_HasDiagramNode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2166, L"HasDiagramNode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	/* MsoTriState*/ short Shape::get_HasSmartArt()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2918, L"HasSmartArt", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	float Shape::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Shape::put_Height(float Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short Shape::get_HorizontalFlip()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1699, L"HorizontalFlip", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	Excel::Hyperlink Shape::get_Hyperlink()
	{
		Excel::Hyperlink returnedValue;
		Com::Param param;
		Invoke(0, 1706, L"Hyperlink", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Shape::get_ID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 570, L"ID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Shape::IncrementLeft(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 1678, L"IncrementLeft", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::IncrementRotation(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 1680, L"IncrementRotation", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::IncrementTop(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 1681, L"IncrementTop", param, returnedValue, DISPATCH_METHOD);
	}

	float Shape::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Shape::put_Left(float Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::LineFormat Shape::get_Line()
	{
		Excel::LineFormat returnedValue;
		Com::Param param;
		Invoke(0, 817, L"Line", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::LinkFormat Shape::get_LinkFormat()
	{
		Excel::LinkFormat returnedValue;
		Com::Param param;
		Invoke(0, 1710, L"LinkFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short Shape::get_LockAspectRatio()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1700, L"LockAspectRatio", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void Shape::put_LockAspectRatio(/* MsoTriState*/ short LockAspectRatio)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = LockAspectRatio;
		Invoke(1, 1700, L"LockAspectRatio", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Shape::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Shape::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Model3DFormat Shape::get_Model3D()
	{
		Excel::Model3DFormat returnedValue;
		Com::Param param;
		Invoke(0, 3299, L"Model3D", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Shape::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Shape::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeNodes Shape::get_Nodes()
	{
		Excel::ShapeNodes returnedValue;
		Com::Param param;
		Invoke(0, 1701, L"Nodes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::OLEFormat Shape::get_OLEFormat()
	{
		Excel::OLEFormat returnedValue;
		Com::Param param;
		Invoke(0, 1711, L"OLEFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Shape::get_OnAction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Shape::put_OnAction(wstring OnAction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(OnAction.c_str());
		Invoke(1, 596, L"OnAction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Shape::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Shape Shape::get_ParentGroup()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 2170, L"ParentGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Shape::PickUp()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1682, L"PickUp", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::PictureFormat Shape::get_PictureFormat()
	{
		Excel::PictureFormat returnedValue;
		Com::Param param;
		Invoke(0, 1631, L"PictureFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlPlacement Shape::get_Placement()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPlacement)returnedValue.iVal;
	}

	void Shape::put_Placement(Excel::XlPlacement Placement)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Placement;
		Invoke(1, 617, L"Placement", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Shape::get_Reflection()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2664, L"Reflection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Shape::RerouteConnections()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1683, L"RerouteConnections", param, returnedValue, DISPATCH_METHOD);
	}

	float Shape::get_Rotation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 59, L"Rotation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Shape::put_Rotation(float Rotation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Rotation;
		Invoke(1, 59, L"Rotation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Shape::ScaleHeight(float Factor, /* MsoTriState*/ short RelativeToOriginalSize, _variant_t Scale)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R4;
		param[0].fltVal = Factor;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeToOriginalSize;
		param[2] = Scale;
		Invoke(3, 1684, L"ScaleHeight", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::ScaleHeight(float Factor, /* MsoTriState*/ short RelativeToOriginalSize)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R4;
		param[0].fltVal = Factor;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeToOriginalSize;
		Invoke(2, 1684, L"ScaleHeight", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::ScaleWidth(float Factor, /* MsoTriState*/ short RelativeToOriginalSize, _variant_t Scale)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R4;
		param[0].fltVal = Factor;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeToOriginalSize;
		param[2] = Scale;
		Invoke(3, 1688, L"ScaleWidth", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::ScaleWidth(float Factor, /* MsoTriState*/ short RelativeToOriginalSize)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R4;
		param[0].fltVal = Factor;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeToOriginalSize;
		Invoke(2, 1688, L"ScaleWidth", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object Shape::get_Script()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1892, L"Script", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Shape::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void Shape::SetShapesDefaultProperties()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1689, L"SetShapesDefaultProperties", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ShadowFormat Shape::get_Shadow()
	{
		Excel::ShadowFormat returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoShapeStyleIndex*/ short Shape::get_ShapeStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2660, L"ShapeStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoShapeStyleIndex*/ short)returnedValue.iVal;
	}

	void Shape::put_ShapeStyle(/* MsoShapeStyleIndex*/ short ShapeStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ShapeStyle;
		Invoke(1, 2660, L"ShapeStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Shape::get_SmartArt()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2919, L"SmartArt", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Shape::get_SoftEdge()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2662, L"SoftEdge", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TextEffectFormat Shape::get_TextEffect()
	{
		Excel::TextEffectFormat returnedValue;
		Com::Param param;
		Invoke(0, 1702, L"TextEffect", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TextFrame Shape::get_TextFrame()
	{
		Excel::TextFrame returnedValue;
		Com::Param param;
		Invoke(0, 1692, L"TextFrame", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TextFrame2 Shape::get_TextFrame2()
	{
		Excel::TextFrame2 returnedValue;
		Com::Param param;
		Invoke(0, 2659, L"TextFrame2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ThreeDFormat Shape::get_ThreeD()
	{
		Excel::ThreeDFormat returnedValue;
		Com::Param param;
		Invoke(0, 1703, L"ThreeD", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Shape::get_Title()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Shape::put_Title(wstring Title)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		Invoke(1, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Shape::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Shape::put_Top(float Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range Shape::get_TopLeftCell()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 620, L"TopLeftCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoShapeType*/ short Shape::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoShapeType*/ short)returnedValue.iVal;
	}

	Excel::ShapeRange Shape::Ungroup()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 244, L"Ungroup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	/* MsoTriState*/ short Shape::get_VerticalFlip()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1704, L"VerticalFlip", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	_variant_t Shape::get_Vertices()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 621, L"Vertices", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short Shape::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void Shape::put_Visible(/* MsoTriState*/ short Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Shape::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Shape::put_Width(float Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Shape::ZOrder(/* MsoZOrderCmd*/ short ZOrderCmd)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ZOrderCmd;
		Invoke(1, 622, L"ZOrder", param, returnedValue, DISPATCH_METHOD);
	}

	long Shape::get_ZOrderPosition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1705, L"ZOrderPosition", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Shapes
	Shapes::Shapes()
	{
	}

	Shapes::~Shapes()
	{
	}

	Excel::Shape Shapes::Add3DModel(wstring Filename, _variant_t LinkToFile, _variant_t SaveWithDocument, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(7);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = LinkToFile;
		param[2] = SaveWithDocument;
		param[3] = Left;
		param[4] = Top;
		param[5] = Width;
		param[6] = Height;
		Invoke(7, 3300, L"Add3DModel", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::Add3DModel(wstring Filename)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 3300, L"Add3DModel", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddCallout(/* MsoCalloutType*/ short Type, float Left, float Top, float Width, float Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_R4;
		param[1].fltVal = Left;
		param[2].vt = VT_R4;
		param[2].fltVal = Top;
		param[3].vt = VT_R4;
		param[3].fltVal = Width;
		param[4].vt = VT_R4;
		param[4].fltVal = Height;
		Invoke(5, 1713, L"AddCallout", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddCanvas(float Left, float Top, float Width, float Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R4;
		param[0].fltVal = Left;
		param[1].vt = VT_R4;
		param[1].fltVal = Top;
		param[2].vt = VT_R4;
		param[2].fltVal = Width;
		param[3].vt = VT_R4;
		param[3].fltVal = Height;
		Invoke(4, 2177, L"AddCanvas", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddChart(_variant_t XlChartType, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0] = XlChartType;
		param[1] = Left;
		param[2] = Top;
		param[3] = Width;
		param[4] = Height;
		Invoke(5, 2665, L"AddChart", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddChart()
	{
		Excel::Shape returnedValue;
		Com::Param param(0);
		Invoke(0, 2665, L"AddChart", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddChart2(_variant_t Style, _variant_t XlChartType, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height, _variant_t NewLayout)
	{
		Excel::Shape returnedValue;
		Com::Param param(7);
		param[0] = Style;
		param[1] = XlChartType;
		param[2] = Left;
		param[3] = Top;
		param[4] = Width;
		param[5] = Height;
		param[6] = NewLayout;
		Invoke(7, 3088, L"AddChart2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddChart2()
	{
		Excel::Shape returnedValue;
		Com::Param param(0);
		Invoke(0, 3088, L"AddChart2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddConnector(/* MsoConnectorType*/ short Type, float BeginX, float BeginY, float EndX, float EndY)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_R4;
		param[1].fltVal = BeginX;
		param[2].vt = VT_R4;
		param[2].fltVal = BeginY;
		param[3].vt = VT_R4;
		param[3].fltVal = EndX;
		param[4].vt = VT_R4;
		param[4].fltVal = EndY;
		Invoke(5, 1714, L"AddConnector", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddCurve(_variant_t SafeArrayOfPoints)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = SafeArrayOfPoints;
		Invoke(1, 1719, L"AddCurve", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddDiagram(/* MsoDiagramType*/ short Type, float Left, float Top, float Width, float Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_R4;
		param[1].fltVal = Left;
		param[2].vt = VT_R4;
		param[2].fltVal = Top;
		param[3].vt = VT_R4;
		param[3].fltVal = Width;
		param[4].vt = VT_R4;
		param[4].fltVal = Height;
		Invoke(5, 2176, L"AddDiagram", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddFormControl(Excel::XlFormControl Type, long Left, long Top, long Width, long Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_I4;
		param[1].lVal = Left;
		param[2].vt = VT_I4;
		param[2].lVal = Top;
		param[3].vt = VT_I4;
		param[3].lVal = Width;
		param[4].vt = VT_I4;
		param[4].lVal = Height;
		Invoke(5, 1738, L"AddFormControl", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddLabel(/* MsoTextOrientation*/ short Orientation, float Left, float Top, float Width, float Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		param[1].vt = VT_R4;
		param[1].fltVal = Left;
		param[2].vt = VT_R4;
		param[2].fltVal = Top;
		param[3].vt = VT_R4;
		param[3].fltVal = Width;
		param[4].vt = VT_R4;
		param[4].fltVal = Height;
		Invoke(5, 1721, L"AddLabel", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddLine(float BeginX, float BeginY, float EndX, float EndY)
	{
		Excel::Shape returnedValue;
		Com::Param param(4);
		param[0].vt = VT_R4;
		param[0].fltVal = BeginX;
		param[1].vt = VT_R4;
		param[1].fltVal = BeginY;
		param[2].vt = VT_R4;
		param[2].fltVal = EndX;
		param[3].vt = VT_R4;
		param[3].fltVal = EndY;
		Invoke(4, 1722, L"AddLine", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddOLEObject(_variant_t ClassType, _variant_t Filename, _variant_t Link, _variant_t DisplayAsIcon, _variant_t IconFileName, _variant_t IconIndex, _variant_t IconLabel, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(11);
		param[0] = ClassType;
		param[1] = Filename;
		param[2] = Link;
		param[3] = DisplayAsIcon;
		param[4] = IconFileName;
		param[5] = IconIndex;
		param[6] = IconLabel;
		param[7] = Left;
		param[8] = Top;
		param[9] = Width;
		param[10] = Height;
		Invoke(11, 1739, L"AddOLEObject", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddOLEObject()
	{
		Excel::Shape returnedValue;
		Com::Param param(0);
		Invoke(0, 1739, L"AddOLEObject", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddPicture(wstring Filename, /* MsoTriState*/ short LinkToFile, /* MsoTriState*/ short SaveWithDocument, float Left, float Top, float Width, float Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(7);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = LinkToFile;
		param[2].vt = VT_I2;
		param[2].iVal = SaveWithDocument;
		param[3].vt = VT_R4;
		param[3].fltVal = Left;
		param[4].vt = VT_R4;
		param[4].fltVal = Top;
		param[5].vt = VT_R4;
		param[5].fltVal = Width;
		param[6].vt = VT_R4;
		param[6].fltVal = Height;
		Invoke(7, 1723, L"AddPicture", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddPicture2(wstring Filename, /* MsoTriState*/ short LinkToFile, /* MsoTriState*/ short SaveWithDocument, float Left, float Top, float Width, float Height, /* MsoPictureCompress*/ short Compress)
	{
		Excel::Shape returnedValue;
		Com::Param param(8);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1].vt = VT_I2;
		param[1].iVal = LinkToFile;
		param[2].vt = VT_I2;
		param[2].iVal = SaveWithDocument;
		param[3].vt = VT_R4;
		param[3].fltVal = Left;
		param[4].vt = VT_R4;
		param[4].fltVal = Top;
		param[5].vt = VT_R4;
		param[5].fltVal = Width;
		param[6].vt = VT_R4;
		param[6].fltVal = Height;
		param[7].vt = VT_I2;
		param[7].iVal = Compress;
		Invoke(8, 3159, L"AddPicture2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddPolyline(_variant_t SafeArrayOfPoints)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = SafeArrayOfPoints;
		Invoke(1, 1726, L"AddPolyline", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddShape(/* MsoAutoShapeType*/ short Type, float Left, float Top, float Width, float Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_R4;
		param[1].fltVal = Left;
		param[2].vt = VT_R4;
		param[2].fltVal = Top;
		param[3].vt = VT_R4;
		param[3].fltVal = Width;
		param[4].vt = VT_R4;
		param[4].fltVal = Height;
		Invoke(5, 1727, L"AddShape", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddSmartArt(Com::Object Layout, _variant_t Left, _variant_t Top, _variant_t Width, _variant_t Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Layout.dispatch.GetInterfacePtr();
		param[1] = Left;
		param[2] = Top;
		param[3] = Width;
		param[4] = Height;
		Invoke(5, 2920, L"AddSmartArt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddSmartArt(Com::Object Layout)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Layout.dispatch.GetInterfacePtr();
		Invoke(1, 2920, L"AddSmartArt", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddTextEffect(/* MsoPresetTextEffect*/ short PresetTextEffect, wstring Text, wstring FontName, float FontSize, /* MsoTriState*/ short FontBold, /* MsoTriState*/ short FontItalic, float Left, float Top)
	{
		Excel::Shape returnedValue;
		Com::Param param(8);
		param[0].vt = VT_I2;
		param[0].iVal = PresetTextEffect;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Text.c_str());
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(FontName.c_str());
		param[3].vt = VT_R4;
		param[3].fltVal = FontSize;
		param[4].vt = VT_I2;
		param[4].iVal = FontBold;
		param[5].vt = VT_I2;
		param[5].iVal = FontItalic;
		param[6].vt = VT_R4;
		param[6].fltVal = Left;
		param[7].vt = VT_R4;
		param[7].fltVal = Top;
		Invoke(8, 1728, L"AddTextEffect", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Shape Shapes::AddTextbox(/* MsoTextOrientation*/ short Orientation, float Left, float Top, float Width, float Height)
	{
		Excel::Shape returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		param[1].vt = VT_R4;
		param[1].fltVal = Left;
		param[2].vt = VT_R4;
		param[2].fltVal = Top;
		param[3].vt = VT_R4;
		param[3].fltVal = Width;
		param[4].vt = VT_R4;
		param[4].fltVal = Height;
		Invoke(5, 1734, L"AddTextbox", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Shapes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::FreeformBuilder Shapes::BuildFreeform(/* MsoEditingType*/ short EditingType, float X1, float Y1)
	{
		Excel::FreeformBuilder returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I2;
		param[0].iVal = EditingType;
		param[1].vt = VT_R4;
		param[1].fltVal = X1;
		param[2].vt = VT_R4;
		param[2].fltVal = Y1;
		Invoke(3, 1735, L"BuildFreeform", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long Shapes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Shapes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Shape Shapes::Item(_variant_t Index)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Shapes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ShapeRange Shapes::get_Range(_variant_t Index)
	{
		Excel::ShapeRange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Shapes::SelectAll()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1737, L"SelectAll", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Shape Shapes::_Default(_variant_t Index)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr Shapes::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ShapeRange
	ShapeRange::ShapeRange()
	{
	}

	ShapeRange::~ShapeRange()
	{
	}

	Excel::Adjustments ShapeRange::get_Adjustments()
	{
		Excel::Adjustments returnedValue;
		Com::Param param;
		Invoke(0, 1691, L"Adjustments", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ShapeRange::Align(/* MsoAlignCmd*/ short AlignCmd, /* MsoTriState*/ short RelativeTo)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = AlignCmd;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeTo;
		Invoke(2, 1740, L"Align", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ShapeRange::get_AlternativeText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1891, L"AlternativeText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ShapeRange::put_AlternativeText(wstring AlternativeText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(AlternativeText.c_str());
		Invoke(1, 1891, L"AlternativeText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX ShapeRange::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ShapeRange::Apply()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1675, L"Apply", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoAutoShapeType*/ short ShapeRange::get_AutoShapeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1693, L"AutoShapeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoAutoShapeType*/ short)returnedValue.iVal;
	}

	void ShapeRange::put_AutoShapeType(/* MsoAutoShapeType*/ short AutoShapeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutoShapeType;
		Invoke(1, 1693, L"AutoShapeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoBackgroundStyleIndex*/ short ShapeRange::get_BackgroundStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2661, L"BackgroundStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoBackgroundStyleIndex*/ short)returnedValue.iVal;
	}

	void ShapeRange::put_BackgroundStyle(/* MsoBackgroundStyleIndex*/ short BackgroundStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BackgroundStyle;
		Invoke(1, 2661, L"BackgroundStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoBlackWhiteMode*/ short ShapeRange::get_BlackWhiteMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1707, L"BlackWhiteMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoBlackWhiteMode*/ short)returnedValue.iVal;
	}

	void ShapeRange::put_BlackWhiteMode(/* MsoBlackWhiteMode*/ short BlackWhiteMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BlackWhiteMode;
		Invoke(1, 1707, L"BlackWhiteMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::CalloutFormat ShapeRange::get_Callout()
	{
		Excel::CalloutFormat returnedValue;
		Com::Param param;
		Invoke(0, 1694, L"Callout", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ShapeRange::CanvasCropBottom(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 2175, L"CanvasCropBottom", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::CanvasCropLeft(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 2172, L"CanvasCropLeft", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::CanvasCropRight(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 2174, L"CanvasCropRight", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::CanvasCropTop(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 2173, L"CanvasCropTop", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ShapeRange::get_CanvasItems()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2171, L"CanvasItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartX ShapeRange::get_Chart()
	{
		Excel::ChartX returnedValue;
		Com::Param param;
		Invoke(0, 7, L"Chart", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short ShapeRange::get_Child()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2169, L"Child", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	long ShapeRange::get_ConnectionSiteCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1695, L"ConnectionSiteCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	/* MsoTriState*/ short ShapeRange::get_Connector()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1696, L"Connector", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	Excel::ConnectorFormat ShapeRange::get_ConnectorFormat()
	{
		Excel::ConnectorFormat returnedValue;
		Com::Param param;
		Invoke(0, 1697, L"ConnectorFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ShapeRange::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ShapeRange::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ShapeRange::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Diagram ShapeRange::get_Diagram()
	{
		Excel::Diagram returnedValue;
		Com::Param param;
		Invoke(0, 2167, L"Diagram", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::DiagramNode ShapeRange::get_DiagramNode()
	{
		Excel::DiagramNode returnedValue;
		Com::Param param;
		Invoke(0, 2165, L"DiagramNode", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ShapeRange::Distribute(/* MsoDistributeCmd*/ short DistributeCmd, /* MsoTriState*/ short RelativeTo)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = DistributeCmd;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeTo;
		Invoke(2, 1742, L"Distribute", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ShapeRange ShapeRange::Duplicate()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::FillFormat ShapeRange::get_Fill()
	{
		Excel::FillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ShapeRange::Flip(/* MsoFlipCmd*/ short FlipCmd)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = FlipCmd;
		Invoke(1, 1676, L"Flip", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ShapeRange::get_Glow()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2663, L"Glow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoGraphicStyleIndex*/ short ShapeRange::get_GraphicStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3272, L"GraphicStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoGraphicStyleIndex*/ short)returnedValue.iVal;
	}

	void ShapeRange::put_GraphicStyle(/* MsoGraphicStyleIndex*/ short GraphicStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = GraphicStyle;
		Invoke(1, 3272, L"GraphicStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Shape ShapeRange::Group()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::GroupShapes ShapeRange::get_GroupItems()
	{
		Excel::GroupShapes returnedValue;
		Com::Param param;
		Invoke(0, 1698, L"GroupItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short ShapeRange::get_HasChart()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2658, L"HasChart", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	/* MsoTriState*/ short ShapeRange::get_HasDiagram()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2168, L"HasDiagram", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	/* MsoTriState*/ short ShapeRange::get_HasDiagramNode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2166, L"HasDiagramNode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	float ShapeRange::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShapeRange::put_Height(float Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short ShapeRange::get_HorizontalFlip()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1699, L"HorizontalFlip", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	long ShapeRange::get_ID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 570, L"ID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ShapeRange::IncrementLeft(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 1678, L"IncrementLeft", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::IncrementRotation(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 1680, L"IncrementRotation", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::IncrementTop(float Increment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Increment;
		Invoke(1, 1681, L"IncrementTop", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Shape ShapeRange::Item(_variant_t Index)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	float ShapeRange::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShapeRange::put_Left(float Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::LineFormat ShapeRange::get_Line()
	{
		Excel::LineFormat returnedValue;
		Com::Param param;
		Invoke(0, 817, L"Line", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short ShapeRange::get_LockAspectRatio()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1700, L"LockAspectRatio", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ShapeRange::put_LockAspectRatio(/* MsoTriState*/ short LockAspectRatio)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = LockAspectRatio;
		Invoke(1, 1700, L"LockAspectRatio", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Model3DFormat ShapeRange::get_Model3D()
	{
		Excel::Model3DFormat returnedValue;
		Com::Param param;
		Invoke(0, 3299, L"Model3D", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ShapeRange::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ShapeRange::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ShapeNodes ShapeRange::get_Nodes()
	{
		Excel::ShapeNodes returnedValue;
		Com::Param param;
		Invoke(0, 1701, L"Nodes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ShapeRange::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Shape ShapeRange::get_ParentGroup()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 2170, L"ParentGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ShapeRange::PickUp()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1682, L"PickUp", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::PictureFormat ShapeRange::get_PictureFormat()
	{
		Excel::PictureFormat returnedValue;
		Com::Param param;
		Invoke(0, 1631, L"PictureFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ShapeRange::get_Reflection()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2664, L"Reflection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Shape ShapeRange::Regroup()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 1744, L"Regroup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void ShapeRange::RerouteConnections()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1683, L"RerouteConnections", param, returnedValue, DISPATCH_METHOD);
	}

	float ShapeRange::get_Rotation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 59, L"Rotation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShapeRange::put_Rotation(float Rotation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Rotation;
		Invoke(1, 59, L"Rotation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ShapeRange::ScaleHeight(float Factor, /* MsoTriState*/ short RelativeToOriginalSize, _variant_t Scale)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R4;
		param[0].fltVal = Factor;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeToOriginalSize;
		param[2] = Scale;
		Invoke(3, 1684, L"ScaleHeight", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::ScaleHeight(float Factor, /* MsoTriState*/ short RelativeToOriginalSize)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R4;
		param[0].fltVal = Factor;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeToOriginalSize;
		Invoke(2, 1684, L"ScaleHeight", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::ScaleWidth(float Factor, /* MsoTriState*/ short RelativeToOriginalSize, _variant_t Scale)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_R4;
		param[0].fltVal = Factor;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeToOriginalSize;
		param[2] = Scale;
		Invoke(3, 1688, L"ScaleWidth", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::ScaleWidth(float Factor, /* MsoTriState*/ short RelativeToOriginalSize)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_R4;
		param[0].fltVal = Factor;
		param[1].vt = VT_I2;
		param[1].iVal = RelativeToOriginalSize;
		Invoke(2, 1688, L"ScaleWidth", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::Select(_variant_t Replace)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Replace;
		Invoke(1, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::Select()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
	}

	void ShapeRange::SetShapesDefaultProperties()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1689, L"SetShapesDefaultProperties", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ShadowFormat ShapeRange::get_Shadow()
	{
		Excel::ShadowFormat returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoShapeStyleIndex*/ short ShapeRange::get_ShapeStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2660, L"ShapeStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoShapeStyleIndex*/ short)returnedValue.iVal;
	}

	void ShapeRange::put_ShapeStyle(/* MsoShapeStyleIndex*/ short ShapeStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ShapeStyle;
		Invoke(1, 2660, L"ShapeStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ShapeRange::get_SoftEdge()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2662, L"SoftEdge", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TextEffectFormat ShapeRange::get_TextEffect()
	{
		Excel::TextEffectFormat returnedValue;
		Com::Param param;
		Invoke(0, 1702, L"TextEffect", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TextFrame ShapeRange::get_TextFrame()
	{
		Excel::TextFrame returnedValue;
		Com::Param param;
		Invoke(0, 1692, L"TextFrame", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TextFrame2 ShapeRange::get_TextFrame2()
	{
		Excel::TextFrame2 returnedValue;
		Com::Param param;
		Invoke(0, 2659, L"TextFrame2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ThreeDFormat ShapeRange::get_ThreeD()
	{
		Excel::ThreeDFormat returnedValue;
		Com::Param param;
		Invoke(0, 1703, L"ThreeD", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ShapeRange::get_Title()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ShapeRange::put_Title(wstring Title)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		Invoke(1, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ShapeRange::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShapeRange::put_Top(float Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoShapeType*/ short ShapeRange::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoShapeType*/ short)returnedValue.iVal;
	}

	Excel::ShapeRange ShapeRange::Ungroup()
	{
		Excel::ShapeRange returnedValue;
		Com::Param param;
		Invoke(0, 244, L"Ungroup", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	/* MsoTriState*/ short ShapeRange::get_VerticalFlip()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1704, L"VerticalFlip", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	_variant_t ShapeRange::get_Vertices()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 621, L"Vertices", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short ShapeRange::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void ShapeRange::put_Visible(/* MsoTriState*/ short Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Visible;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float ShapeRange::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void ShapeRange::put_Width(float Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ShapeRange::ZOrder(/* MsoZOrderCmd*/ short ZOrderCmd)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ZOrderCmd;
		Invoke(1, 622, L"ZOrder", param, returnedValue, DISPATCH_METHOD);
	}

	long ShapeRange::get_ZOrderPosition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1705, L"ZOrderPosition", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Shape ShapeRange::_Default(_variant_t Index)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr ShapeRange::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________GroupShapes
	GroupShapes::GroupShapes()
	{
	}

	GroupShapes::~GroupShapes()
	{
	}

	Excel::ApplicationX GroupShapes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long GroupShapes::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator GroupShapes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Shape GroupShapes::Item(_variant_t Index)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object GroupShapes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ShapeRange GroupShapes::get_Range(_variant_t Index)
	{
		Excel::ShapeRange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Shape GroupShapes::_Default(_variant_t Index)
	{
		Excel::Shape returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr GroupShapes::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________TextFrame
	TextFrame::TextFrame()
	{
	}

	TextFrame::~TextFrame()
	{
	}

	Excel::ApplicationX TextFrame::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TextFrame::get_AutoMargins()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1749, L"AutoMargins", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextFrame::put_AutoMargins(bool AutoMargins)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoMargins == true) ? 1 : 0;
		Invoke(1, 1749, L"AutoMargins", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextFrame::get_AutoSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextFrame::put_AutoSize(bool AutoSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoSize == true) ? 1 : 0;
		Invoke(1, 614, L"AutoSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters TextFrame::Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Characters TextFrame::Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator TextFrame::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlHAlign TextFrame::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlHAlign)returnedValue.iVal;
	}

	void TextFrame::put_HorizontalAlignment(Excel::XlHAlign HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlOartHorizontalOverflow TextFrame::get_HorizontalOverflow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2923, L"HorizontalOverflow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlOartHorizontalOverflow)returnedValue.iVal;
	}

	void TextFrame::put_HorizontalOverflow(Excel::XlOartHorizontalOverflow HorizontalOverflow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = HorizontalOverflow;
		Invoke(1, 2923, L"HorizontalOverflow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextFrame::get_MarginBottom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1745, L"MarginBottom", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextFrame::put_MarginBottom(float MarginBottom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = MarginBottom;
		Invoke(1, 1745, L"MarginBottom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextFrame::get_MarginLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1746, L"MarginLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextFrame::put_MarginLeft(float MarginLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = MarginLeft;
		Invoke(1, 1746, L"MarginLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextFrame::get_MarginRight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1747, L"MarginRight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextFrame::put_MarginRight(float MarginRight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = MarginRight;
		Invoke(1, 1747, L"MarginRight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float TextFrame::get_MarginTop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1748, L"MarginTop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void TextFrame::put_MarginTop(float MarginTop)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = MarginTop;
		Invoke(1, 1748, L"MarginTop", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTextOrientation*/ short TextFrame::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTextOrientation*/ short)returnedValue.iVal;
	}

	void TextFrame::put_Orientation(/* MsoTextOrientation*/ short Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TextFrame::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long TextFrame::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TextFrame::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlVAlign TextFrame::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlVAlign)returnedValue.iVal;
	}

	void TextFrame::put_VerticalAlignment(Excel::XlVAlign VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlOartVerticalOverflow TextFrame::get_VerticalOverflow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2922, L"VerticalOverflow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlOartVerticalOverflow)returnedValue.iVal;
	}

	void TextFrame::put_VerticalOverflow(Excel::XlOartVerticalOverflow VerticalOverflow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = VerticalOverflow;
		Invoke(1, 2922, L"VerticalOverflow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ConnectorFormat
	ConnectorFormat::ConnectorFormat()
	{
	}

	ConnectorFormat::~ConnectorFormat()
	{
	}

	Excel::ApplicationX ConnectorFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ConnectorFormat::BeginConnect(Excel::Shape& ConnectedShape, long ConnectionSite)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = ConnectedShape.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = ConnectionSite;
		Invoke(2, 1750, L"BeginConnect", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short ConnectorFormat::get_BeginConnected()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1756, L"BeginConnected", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	Excel::Shape ConnectorFormat::get_BeginConnectedShape()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 1757, L"BeginConnectedShape", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ConnectorFormat::get_BeginConnectionSite()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1758, L"BeginConnectionSite", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ConnectorFormat::BeginDisconnect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1753, L"BeginDisconnect", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator ConnectorFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ConnectorFormat::EndConnect(Excel::Shape& ConnectedShape, long ConnectionSite)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = ConnectedShape.dispatch.GetInterfacePtr();
		param[1].vt = VT_I4;
		param[1].lVal = ConnectionSite;
		Invoke(2, 1754, L"EndConnect", param, returnedValue, DISPATCH_METHOD);
	}

	/* MsoTriState*/ short ConnectorFormat::get_EndConnected()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1759, L"EndConnected", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	Excel::Shape ConnectorFormat::get_EndConnectedShape()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 1760, L"EndConnectedShape", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ConnectorFormat::get_EndConnectionSite()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1761, L"EndConnectionSite", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ConnectorFormat::EndDisconnect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1755, L"EndDisconnect", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ConnectorFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoConnectorType*/ short ConnectorFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoConnectorType*/ short)returnedValue.iVal;
	}

	void ConnectorFormat::put_Type(/* MsoConnectorType*/ short Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________FreeformBuilder
	FreeformBuilder::FreeformBuilder()
	{
	}

	FreeformBuilder::~FreeformBuilder()
	{
	}

	void FreeformBuilder::AddNodes(/* MsoSegmentType*/ short SegmentType, /* MsoEditingType*/ short EditingType, float X1, float Y1, _variant_t X2, _variant_t Y2, _variant_t X3, _variant_t Y3)
	{
		_variant_t returnedValue;
		Com::Param param(8);
		param[0].vt = VT_I2;
		param[0].iVal = SegmentType;
		param[1].vt = VT_I2;
		param[1].iVal = EditingType;
		param[2].vt = VT_R4;
		param[2].fltVal = X1;
		param[3].vt = VT_R4;
		param[3].fltVal = Y1;
		param[4] = X2;
		param[5] = Y2;
		param[6] = X3;
		param[7] = Y3;
		Invoke(8, 1762, L"AddNodes", param, returnedValue, DISPATCH_METHOD);
	}

	void FreeformBuilder::AddNodes(/* MsoSegmentType*/ short SegmentType, /* MsoEditingType*/ short EditingType, float X1, float Y1)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = SegmentType;
		param[1].vt = VT_I2;
		param[1].iVal = EditingType;
		param[2].vt = VT_R4;
		param[2].fltVal = X1;
		param[3].vt = VT_R4;
		param[3].fltVal = Y1;
		Invoke(4, 1762, L"AddNodes", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX FreeformBuilder::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Shape FreeformBuilder::ConvertToShape()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 1766, L"ConvertToShape", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator FreeformBuilder::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object FreeformBuilder::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ControlFormat
	ControlFormat::ControlFormat()
	{
	}

	ControlFormat::~ControlFormat()
	{
	}

	void ControlFormat::AddItem(wstring Text, _variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		param[1] = Index;
		Invoke(2, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
	}

	void ControlFormat::AddItem(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 851, L"AddItem", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX ControlFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ControlFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long ControlFormat::get_DropDownLines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 848, L"DropDownLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_DropDownLines(long DropDownLines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DropDownLines;
		Invoke(1, 848, L"DropDownLines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ControlFormat::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ControlFormat::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ControlFormat::get_LargeChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 845, L"LargeChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_LargeChange(long LargeChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = LargeChange;
		Invoke(1, 845, L"LargeChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ControlFormat::get_LinkedCell()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ControlFormat::put_LinkedCell(wstring LinkedCell)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(LinkedCell.c_str());
		Invoke(1, 1058, L"LinkedCell", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ControlFormat::List(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 861, L"List", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t ControlFormat::List()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 861, L"List", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long ControlFormat::get_ListCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 849, L"ListCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_ListCount(long ListCount)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListCount;
		Invoke(1, 849, L"ListCount", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ControlFormat::get_ListFillRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ControlFormat::put_ListFillRange(wstring ListFillRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ListFillRange.c_str());
		Invoke(1, 847, L"ListFillRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ControlFormat::get_ListIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_ListIndex(long ListIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListIndex;
		Invoke(1, 850, L"ListIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ControlFormat::get_LockedText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ControlFormat::put_LockedText(bool LockedText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LockedText == true) ? 1 : 0;
		Invoke(1, 616, L"LockedText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ControlFormat::get_Max()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_Max(long Max)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Max;
		Invoke(1, 842, L"Max", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ControlFormat::get_Min()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_Min(long Min)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Min;
		Invoke(1, 843, L"Min", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ControlFormat::get_MultiSelect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 32, L"MultiSelect", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_MultiSelect(long MultiSelect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MultiSelect;
		Invoke(1, 32, L"MultiSelect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ControlFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ControlFormat::get_PrintObject()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ControlFormat::put_PrintObject(bool PrintObject)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintObject == true) ? 1 : 0;
		Invoke(1, 618, L"PrintObject", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ControlFormat::RemoveAllItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 853, L"RemoveAllItems", param, returnedValue, DISPATCH_METHOD);
	}

	void ControlFormat::RemoveItem(long Index, _variant_t Count)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		param[1] = Count;
		Invoke(2, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
	}

	void ControlFormat::RemoveItem(long Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 852, L"RemoveItem", param, returnedValue, DISPATCH_METHOD);
	}

	long ControlFormat::get_SmallChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_SmallChange(long SmallChange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = SmallChange;
		Invoke(1, 844, L"SmallChange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ControlFormat::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put_Value(long Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ControlFormat::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ControlFormat::put__Default(long _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = _Default;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________OLEFormat
	OLEFormat::OLEFormat()
	{
	}

	OLEFormat::~OLEFormat()
	{
	}

	void OLEFormat::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX OLEFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator OLEFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object OLEFormat::get_Object()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 1049, L"Object", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object OLEFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OLEFormat::Verb(_variant_t Verb)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Verb;
		Invoke(1, 606, L"Verb", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEFormat::Verb()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 606, L"Verb", param, returnedValue, DISPATCH_METHOD);
	}

	wstring OLEFormat::get_progID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1523, L"progID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________LinkFormat
	LinkFormat::LinkFormat()
	{
	}

	LinkFormat::~LinkFormat()
	{
	}

	Excel::ApplicationX LinkFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool LinkFormat::get_AutoUpdate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1048, L"AutoUpdate", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void LinkFormat::put_AutoUpdate(bool AutoUpdate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AutoUpdate == true) ? 1 : 0;
		Invoke(1, 1048, L"AutoUpdate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator LinkFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool LinkFormat::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void LinkFormat::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object LinkFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void LinkFormat::Update()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 680, L"Update", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________PublishObjects
	PublishObjects::PublishObjects()
	{
	}

	PublishObjects::~PublishObjects()
	{
	}

	Excel::PublishObject PublishObjects::Add(Excel::XlSourceType SourceType, wstring Filename, _variant_t Sheet, _variant_t Source, _variant_t HtmlType, _variant_t DivID, _variant_t Title)
	{
		Excel::PublishObject returnedValue;
		Com::Param param(7);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Filename.c_str());
		param[2] = Sheet;
		param[3] = Source;
		param[4] = HtmlType;
		param[5] = DivID;
		param[6] = Title;
		Invoke(7, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PublishObject PublishObjects::Add(Excel::XlSourceType SourceType, wstring Filename)
	{
		Excel::PublishObject returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Filename.c_str());
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX PublishObjects::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PublishObjects::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PublishObjects::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void PublishObjects::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::PublishObject PublishObjects::get_Item(_variant_t Index)
	{
		Excel::PublishObject returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PublishObjects::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PublishObjects::Publish()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1895, L"Publish", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::PublishObject PublishObjects::get__Default(_variant_t Index)
	{
		Excel::PublishObject returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PublishObjects::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________OLEDBError
	OLEDBError::OLEDBError()
	{
	}

	OLEDBError::~OLEDBError()
	{
	}

	Excel::ApplicationX OLEDBError::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator OLEDBError::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring OLEDBError::get_ErrorString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1490, L"ErrorString", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long OLEDBError::get_Native()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1897, L"Native", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long OLEDBError::get_Number()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 451, L"Number", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object OLEDBError::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring OLEDBError::get_SqlState()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1603, L"SqlState", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long OLEDBError::get_Stage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1898, L"Stage", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________OLEDBErrors
	OLEDBErrors::OLEDBErrors()
	{
	}

	OLEDBErrors::~OLEDBErrors()
	{
	}

	Excel::ApplicationX OLEDBErrors::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long OLEDBErrors::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator OLEDBErrors::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::OLEDBError OLEDBErrors::Item(long Index)
	{
		Excel::OLEDBError returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object OLEDBErrors::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::OLEDBError OLEDBErrors::get__Default(long Index)
	{
		Excel::OLEDBError returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr OLEDBErrors::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Phonetics
	Phonetics::Phonetics()
	{
	}

	Phonetics::~Phonetics()
	{
	}

	void Phonetics::Add(long Start, long Length, wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_I4;
		param[0].lVal = Start;
		param[1].vt = VT_I4;
		param[1].lVal = Length;
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Text.c_str());
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
	}

	long Phonetics::get_Alignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 453, L"Alignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Phonetics::put_Alignment(long Alignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Alignment;
		Invoke(1, 453, L"Alignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX Phonetics::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Phonetics::get_CharacterType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1674, L"CharacterType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Phonetics::put_CharacterType(long CharacterType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = CharacterType;
		Invoke(1, 1674, L"CharacterType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Phonetics::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Phonetics::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Phonetics::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Font Phonetics::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Phonetics::get_Item(long Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Phonetics::get_Length()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 609, L"Length", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object Phonetics::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Phonetics::get_Start()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 608, L"Start", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring Phonetics::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Phonetics::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Phonetics::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Phonetics::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Phonetics::get__Default(long Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Phonetics::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________PivotLayout
	PivotLayout::PivotLayout()
	{
	}

	PivotLayout::~PivotLayout()
	{
	}

	void PivotLayout::AddFields(_variant_t RowFields, _variant_t ColumnFields, _variant_t PageFields, _variant_t AppendField)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0] = RowFields;
		param[1] = ColumnFields;
		param[2] = PageFields;
		param[3] = AppendField;
		Invoke(4, 708, L"AddFields", param, returnedValue, DISPATCH_METHOD);
	}

	void PivotLayout::AddFields()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 708, L"AddFields", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX PivotLayout::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_ColumnFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 713, L"ColumnFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_ColumnFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 713, L"ColumnFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PivotLayout::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CubeFields PivotLayout::get_CubeFields()
	{
		Excel::CubeFields returnedValue;
		Com::Param param;
		Invoke(0, 1839, L"CubeFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_DataFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 715, L"DataFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_DataFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 715, L"DataFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_HiddenFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 711, L"HiddenFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_HiddenFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 711, L"HiddenFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PivotLayout::get_InnerDetail()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 698, L"InnerDetail", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void PivotLayout::put_InnerDetail(wstring InnerDetail)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(InnerDetail.c_str());
		Invoke(1, 698, L"InnerDetail", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PivotLayout::get_PageFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 714, L"PageFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_PageFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 714, L"PageFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotCache PivotLayout::get_PivotCache()
	{
		Excel::PivotCache returnedValue;
		Com::Param param;
		Invoke(0, 1496, L"PivotCache", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_PivotFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 718, L"PivotFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_PivotFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 718, L"PivotFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotTable PivotLayout::get_PivotTable()
	{
		Excel::PivotTable returnedValue;
		Com::Param param;
		Invoke(0, 716, L"PivotTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_RowFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 712, L"RowFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_RowFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 712, L"RowFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_VisibleFields(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 710, L"VisibleFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLayout::get_VisibleFields()
	{
		Com::Object returnedValue;
		Com::Param param(0);
		Invoke(0, 710, L"VisibleFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________DisplayUnitLabel
	DisplayUnitLabel::DisplayUnitLabel()
	{
	}

	DisplayUnitLabel::~DisplayUnitLabel()
	{
	}

	Excel::ApplicationX DisplayUnitLabel::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayUnitLabel::get_AutoScaleFont()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DisplayUnitLabel::put_AutoScaleFont(_variant_t AutoScaleFont)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AutoScaleFont;
		Invoke(1, 1525, L"AutoScaleFont", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Border DisplayUnitLabel::get_Border()
	{
		Excel::Border returnedValue;
		Com::Param param;
		Invoke(0, 128, L"Border", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DisplayUnitLabel::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DisplayUnitLabel::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Characters DisplayUnitLabel::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters DisplayUnitLabel::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator DisplayUnitLabel::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t DisplayUnitLabel::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ChartFillFormat DisplayUnitLabel::get_Fill()
	{
		Excel::ChartFillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Font DisplayUnitLabel::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartFormat DisplayUnitLabel::get_Format()
	{
		Excel::ChartFormat returnedValue;
		Com::Param param;
		Invoke(0, 116, L"Format", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring DisplayUnitLabel::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DisplayUnitLabel::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DisplayUnitLabel::get_FormulaLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DisplayUnitLabel::put_FormulaLocal(wstring FormulaLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaLocal.c_str());
		Invoke(1, 263, L"FormulaLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DisplayUnitLabel::get_FormulaR1C1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DisplayUnitLabel::put_FormulaR1C1(wstring FormulaR1C1)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1.c_str());
		Invoke(1, 264, L"FormulaR1C1", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DisplayUnitLabel::get_FormulaR1C1Local()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DisplayUnitLabel::put_FormulaR1C1Local(wstring FormulaR1C1Local)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormulaR1C1Local.c_str());
		Invoke(1, 265, L"FormulaR1C1Local", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DisplayUnitLabel::GetProperty(wstring ID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		Invoke(1, 3256, L"GetProperty", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	double DisplayUnitLabel::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	_variant_t DisplayUnitLabel::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DisplayUnitLabel::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior DisplayUnitLabel::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double DisplayUnitLabel::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DisplayUnitLabel::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DisplayUnitLabel::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	_variant_t DisplayUnitLabel::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DisplayUnitLabel::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DisplayUnitLabel::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlChartElementPosition DisplayUnitLabel::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlChartElementPosition)returnedValue.iVal;
	}

	void DisplayUnitLabel::put_Position(Excel::XlChartElementPosition Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DisplayUnitLabel::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DisplayUnitLabel::put_ReadingOrder(long ReadingOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ReadingOrder;
		Invoke(1, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DisplayUnitLabel::Select()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 235, L"Select", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	void DisplayUnitLabel::SetProperty(wstring ID, _variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ID.c_str());
		param[1] = Value;
		Invoke(2, 3253, L"SetProperty", param, returnedValue, DISPATCH_METHOD);
	}

	bool DisplayUnitLabel::get_Shadow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DisplayUnitLabel::put_Shadow(bool Shadow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Shadow == true) ? 1 : 0;
		Invoke(1, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DisplayUnitLabel::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DisplayUnitLabel::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DisplayUnitLabel::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DisplayUnitLabel::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DisplayUnitLabel::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DisplayUnitLabel::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double DisplayUnitLabel::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void DisplayUnitLabel::_Dummy21()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65557, L"_Dummy21", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________CellFormat
	CellFormat::CellFormat()
	{
	}

	CellFormat::~CellFormat()
	{
	}

	_variant_t CellFormat::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_AddIndent(_variant_t AddIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = AddIndent;
		Invoke(1, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX CellFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Borders CellFormat::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_Borders(Excel::Borders& Borders)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Borders.dispatch.GetInterfacePtr();
		Invoke(1, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	void CellFormat::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator CellFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Font CellFormat::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_Font(Excel::Font& Font)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Font.dispatch.GetInterfacePtr();
		Invoke(1, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	_variant_t CellFormat::get_FormulaHidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 262, L"FormulaHidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_FormulaHidden(_variant_t FormulaHidden)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FormulaHidden;
		Invoke(1, 262, L"FormulaHidden", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CellFormat::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_HorizontalAlignment(_variant_t HorizontalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = HorizontalAlignment;
		Invoke(1, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CellFormat::get_IndentLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 201, L"IndentLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_IndentLevel(_variant_t IndentLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = IndentLevel;
		Invoke(1, 201, L"IndentLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Interior CellFormat::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_Interior(Excel::Interior& Interior)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Interior.dispatch.GetInterfacePtr();
		Invoke(1, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	_variant_t CellFormat::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_Locked(_variant_t Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Locked;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CellFormat::get_MergeCells()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 208, L"MergeCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_MergeCells(_variant_t MergeCells)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = MergeCells;
		Invoke(1, 208, L"MergeCells", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CellFormat::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_NumberFormat(_variant_t NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormat;
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CellFormat::get_NumberFormatLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_NumberFormatLocal(_variant_t NumberFormatLocal)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormatLocal;
		Invoke(1, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CellFormat::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_Orientation(_variant_t Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object CellFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CellFormat::get_ShrinkToFit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 209, L"ShrinkToFit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_ShrinkToFit(_variant_t ShrinkToFit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ShrinkToFit;
		Invoke(1, 209, L"ShrinkToFit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CellFormat::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_VerticalAlignment(_variant_t VerticalAlignment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VerticalAlignment;
		Invoke(1, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CellFormat::get_WrapText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 276, L"WrapText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CellFormat::put_WrapText(_variant_t WrapText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = WrapText;
		Invoke(1, 276, L"WrapText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________UsedObjects
	UsedObjects::UsedObjects()
	{
	}

	UsedObjects::~UsedObjects()
	{
	}

	Excel::ApplicationX UsedObjects::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long UsedObjects::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator UsedObjects::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object UsedObjects::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object UsedObjects::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object UsedObjects::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr UsedObjects::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________CustomProperties
	CustomProperties::CustomProperties()
	{
	}

	CustomProperties::~CustomProperties()
	{
	}

	Excel::CustomProperty CustomProperties::Add(wstring Name, _variant_t Value)
	{
		Excel::CustomProperty returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = Value;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX CustomProperties::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long CustomProperties::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator CustomProperties::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CustomProperty CustomProperties::get_Item(_variant_t Index)
	{
		Excel::CustomProperty returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object CustomProperties::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::CustomProperty CustomProperties::get__Default(_variant_t Index)
	{
		Excel::CustomProperty returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr CustomProperties::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________CustomProperty
	CustomProperty::CustomProperty()
	{
	}

	CustomProperty::~CustomProperty()
	{
	}

	Excel::ApplicationX CustomProperty::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator CustomProperty::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void CustomProperty::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring CustomProperty::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void CustomProperty::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object CustomProperty::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t CustomProperty::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void CustomProperty::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t CustomProperty::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________CalculatedMembers
	CalculatedMembers::CalculatedMembers()
	{
	}

	CalculatedMembers::~CalculatedMembers()
	{
	}

	Excel::CalculatedMember CalculatedMembers::Add(wstring Name, _variant_t Formula, _variant_t SolveOrder, _variant_t Type, _variant_t Dynamic, _variant_t DisplayFolder, _variant_t HierarchizeDistinct)
	{
		Excel::CalculatedMember returnedValue;
		Com::Param param(7);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = Formula;
		param[2] = SolveOrder;
		param[3] = Type;
		param[4] = Dynamic;
		param[5] = DisplayFolder;
		param[6] = HierarchizeDistinct;
		Invoke(7, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CalculatedMember CalculatedMembers::Add(wstring Name, _variant_t Formula)
	{
		Excel::CalculatedMember returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = Formula;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CalculatedMember CalculatedMembers::AddCalculatedMember(wstring Name, _variant_t Formula, _variant_t SolveOrder, _variant_t Type, _variant_t DisplayFolder, _variant_t MeasureGroup, _variant_t ParentHierarchy, _variant_t ParentMember, _variant_t NumberFormat)
	{
		Excel::CalculatedMember returnedValue;
		Com::Param param(9);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = Formula;
		param[2] = SolveOrder;
		param[3] = Type;
		param[4] = DisplayFolder;
		param[5] = MeasureGroup;
		param[6] = ParentHierarchy;
		param[7] = ParentMember;
		param[8] = NumberFormat;
		Invoke(9, 3091, L"AddCalculatedMember", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CalculatedMember CalculatedMembers::AddCalculatedMember(wstring Name, _variant_t Formula)
	{
		Excel::CalculatedMember returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1] = Formula;
		Invoke(2, 3091, L"AddCalculatedMember", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX CalculatedMembers::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long CalculatedMembers::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator CalculatedMembers::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CalculatedMember CalculatedMembers::get_Item(_variant_t Index)
	{
		Excel::CalculatedMember returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object CalculatedMembers::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::CalculatedMember CalculatedMembers::_Add(wstring Name, wstring Formula, _variant_t SolveOrder, _variant_t Type)
	{
		Excel::CalculatedMember returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		param[2] = SolveOrder;
		param[3] = Type;
		Invoke(4, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CalculatedMember CalculatedMembers::_Add(wstring Name, wstring Formula)
	{
		Excel::CalculatedMember returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		Invoke(2, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::CalculatedMember CalculatedMembers::get__Default(_variant_t Index)
	{
		Excel::CalculatedMember returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr CalculatedMembers::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________CalculatedMember
	CalculatedMember::CalculatedMember()
	{
	}

	CalculatedMember::~CalculatedMember()
	{
	}

	Excel::ApplicationX CalculatedMember::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator CalculatedMember::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void CalculatedMember::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring CalculatedMember::get_DisplayFolder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2927, L"DisplayFolder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool CalculatedMember::get_Dynamic()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2926, L"Dynamic", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool CalculatedMember::get_FlattenHierarchies()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2924, L"FlattenHierarchies", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CalculatedMember::put_FlattenHierarchies(bool FlattenHierarchies)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FlattenHierarchies == true) ? 1 : 0;
		Invoke(1, 2924, L"FlattenHierarchies", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring CalculatedMember::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool CalculatedMember::get_HierarchizeDistinct()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2925, L"HierarchizeDistinct", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void CalculatedMember::put_HierarchizeDistinct(bool HierarchizeDistinct)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HierarchizeDistinct == true) ? 1 : 0;
		Invoke(1, 2925, L"HierarchizeDistinct", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool CalculatedMember::get_IsValid()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2188, L"IsValid", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring CalculatedMember::get_MeasureGroup()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3092, L"MeasureGroup", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring CalculatedMember::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlCalcMemNumberFormatType CalculatedMember::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCalcMemNumberFormatType)returnedValue.iVal;
	}

	Com::Object CalculatedMember::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring CalculatedMember::get_ParentHierarchy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3093, L"ParentHierarchy", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring CalculatedMember::get_ParentMember()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3094, L"ParentMember", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long CalculatedMember::get_SolveOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2187, L"SolveOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	wstring CalculatedMember::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlCalculatedMemberType CalculatedMember::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCalculatedMemberType)returnedValue.iVal;
	}

	wstring CalculatedMember::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________Watches
	Watches::Watches()
	{
	}

	Watches::~Watches()
	{
	}

	Excel::Watch Watches::Add(_variant_t Source)
	{
		Excel::Watch returnedValue;
		Com::Param param(1);
		param[0] = Source;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Watches::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Watches::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Watches::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Watches::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Watch Watches::get_Item(_variant_t Index)
	{
		Excel::Watch returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Watches::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Watch Watches::get__Default(_variant_t Index)
	{
		Excel::Watch returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Watches::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Watch
	Watch::Watch()
	{
	}

	Watch::~Watch()
	{
	}

	Excel::ApplicationX Watch::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Watch::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Watch::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object Watch::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Watch::get_Source()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 222, L"Source", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________PivotCell
	PivotCell::PivotCell()
	{
	}

	PivotCell::~PivotCell()
	{
	}

	void PivotCell::AllocateChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2928, L"AllocateChange", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX PivotCell::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCellChangedState PivotCell::get_CellChanged()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2931, L"CellChanged", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCellChangedState)returnedValue.iVal;
	}

	Excel::PivotItemList PivotCell::get_ColumnItems()
	{
		Excel::PivotItemList returnedValue;
		Com::Param param;
		Invoke(0, 2191, L"ColumnItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PivotCell::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlConsolidationFunction PivotCell::get_CustomSubtotalFunction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2193, L"CustomSubtotalFunction", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlConsolidationFunction)returnedValue.iVal;
	}

	Excel::PivotField PivotCell::get_DataField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 2091, L"DataField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotCell::get_DataSourceValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2930, L"DataSourceValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotCell::DiscardChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2929, L"DiscardChange", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotCell::get_Dummy18()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2295, L"Dummy18", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring PivotCell::get_MDX()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2123, L"MDX", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object PivotCell::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlPivotCellType PivotCell::get_PivotCellType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2189, L"PivotCellType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotCellType)returnedValue.iVal;
	}

	Excel::PivotLine PivotCell::get_PivotColumnLine()
	{
		Excel::PivotLine returnedValue;
		Com::Param param;
		Invoke(0, 2674, L"PivotColumnLine", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotField PivotCell::get_PivotField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 731, L"PivotField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotItem PivotCell::get_PivotItem()
	{
		Excel::PivotItem returnedValue;
		Com::Param param;
		Invoke(0, 740, L"PivotItem", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotLine PivotCell::get_PivotRowLine()
	{
		Excel::PivotLine returnedValue;
		Com::Param param;
		Invoke(0, 2673, L"PivotRowLine", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotTable PivotCell::get_PivotTable()
	{
		Excel::PivotTable returnedValue;
		Com::Param param;
		Invoke(0, 716, L"PivotTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range PivotCell::get_Range()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotItemList PivotCell::get_RowItems()
	{
		Excel::PivotItemList returnedValue;
		Com::Param param;
		Invoke(0, 2190, L"RowItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Actions PivotCell::get_ServerActions()
	{
		Excel::Actions returnedValue;
		Com::Param param;
		Invoke(0, 2491, L"ServerActions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Graphic
	Graphic::Graphic()
	{
	}

	Graphic::~Graphic()
	{
	}

	Excel::ApplicationX Graphic::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float Graphic::get_Brightness()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2194, L"Brightness", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Graphic::put_Brightness(float Brightness)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Brightness;
		Invoke(1, 2194, L"Brightness", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoPictureColorType*/ short Graphic::get_ColorType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2195, L"ColorType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoPictureColorType*/ short)returnedValue.iVal;
	}

	void Graphic::put_ColorType(/* MsoPictureColorType*/ short ColorType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ColorType;
		Invoke(1, 2195, L"ColorType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Graphic::get_Contrast()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2196, L"Contrast", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Graphic::put_Contrast(float Contrast)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Contrast;
		Invoke(1, 2196, L"Contrast", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Graphic::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	float Graphic::get_CropBottom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2197, L"CropBottom", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Graphic::put_CropBottom(float CropBottom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = CropBottom;
		Invoke(1, 2197, L"CropBottom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Graphic::get_CropLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2198, L"CropLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Graphic::put_CropLeft(float CropLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = CropLeft;
		Invoke(1, 2198, L"CropLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Graphic::get_CropRight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2199, L"CropRight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Graphic::put_CropRight(float CropRight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = CropRight;
		Invoke(1, 2199, L"CropRight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Graphic::get_CropTop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2200, L"CropTop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Graphic::put_CropTop(float CropTop)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = CropTop;
		Invoke(1, 2200, L"CropTop", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Graphic::get_Filename()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1415, L"Filename", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Graphic::put_Filename(wstring Filename)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1415, L"Filename", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float Graphic::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Graphic::put_Height(float Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short Graphic::get_LockAspectRatio()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1700, L"LockAspectRatio", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void Graphic::put_LockAspectRatio(/* MsoTriState*/ short LockAspectRatio)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = LockAspectRatio;
		Invoke(1, 1700, L"LockAspectRatio", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Graphic::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	float Graphic::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void Graphic::put_Width(float Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________AutoRecover
	AutoRecover::AutoRecover()
	{
	}

	AutoRecover::~AutoRecover()
	{
	}

	Excel::ApplicationX AutoRecover::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator AutoRecover::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool AutoRecover::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AutoRecover::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object AutoRecover::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring AutoRecover::get_Path()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 291, L"Path", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void AutoRecover::put_Path(wstring Path)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Path.c_str());
		Invoke(1, 291, L"Path", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long AutoRecover::get_Time()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 394, L"Time", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void AutoRecover::put_Time(long Time)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Time;
		Invoke(1, 394, L"Time", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ErrorCheckingOptions
	ErrorCheckingOptions::ErrorCheckingOptions()
	{
	}

	ErrorCheckingOptions::~ErrorCheckingOptions()
	{
	}

	Excel::ApplicationX ErrorCheckingOptions::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ErrorCheckingOptions::get_BackgroundChecking()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2201, L"BackgroundChecking", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_BackgroundChecking(bool BackgroundChecking)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BackgroundChecking == true) ? 1 : 0;
		Invoke(1, 2201, L"BackgroundChecking", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator ErrorCheckingOptions::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool ErrorCheckingOptions::get_EmptyCellReferences()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2209, L"EmptyCellReferences", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_EmptyCellReferences(bool EmptyCellReferences)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EmptyCellReferences == true) ? 1 : 0;
		Invoke(1, 2209, L"EmptyCellReferences", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ErrorCheckingOptions::get_EvaluateToError()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2203, L"EvaluateToError", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_EvaluateToError(bool EvaluateToError)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EvaluateToError == true) ? 1 : 0;
		Invoke(1, 2203, L"EvaluateToError", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ErrorCheckingOptions::get_InconsistentFormula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2206, L"InconsistentFormula", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_InconsistentFormula(bool InconsistentFormula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InconsistentFormula == true) ? 1 : 0;
		Invoke(1, 2206, L"InconsistentFormula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ErrorCheckingOptions::get_InconsistentTableFormula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2675, L"InconsistentTableFormula", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_InconsistentTableFormula(bool InconsistentTableFormula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InconsistentTableFormula == true) ? 1 : 0;
		Invoke(1, 2675, L"InconsistentTableFormula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex ErrorCheckingOptions::get_IndicatorColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2202, L"IndicatorColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void ErrorCheckingOptions::put_IndicatorColorIndex(Excel::XlColorIndex IndicatorColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = IndicatorColorIndex;
		Invoke(1, 2202, L"IndicatorColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ErrorCheckingOptions::get_ListDataValidation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2296, L"ListDataValidation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_ListDataValidation(bool ListDataValidation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ListDataValidation == true) ? 1 : 0;
		Invoke(1, 2296, L"ListDataValidation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ErrorCheckingOptions::get_NumberAsText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2205, L"NumberAsText", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_NumberAsText(bool NumberAsText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (NumberAsText == true) ? 1 : 0;
		Invoke(1, 2205, L"NumberAsText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ErrorCheckingOptions::get_OmittedCells()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2207, L"OmittedCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_OmittedCells(bool OmittedCells)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (OmittedCells == true) ? 1 : 0;
		Invoke(1, 2207, L"OmittedCells", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ErrorCheckingOptions::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ErrorCheckingOptions::get_TextDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2204, L"TextDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_TextDate(bool TextDate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextDate == true) ? 1 : 0;
		Invoke(1, 2204, L"TextDate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ErrorCheckingOptions::get_UnlockedFormulaCells()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2208, L"UnlockedFormulaCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ErrorCheckingOptions::put_UnlockedFormulaCells(bool UnlockedFormulaCells)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UnlockedFormulaCells == true) ? 1 : 0;
		Invoke(1, 2208, L"UnlockedFormulaCells", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Errors
	Errors::Errors()
	{
	}

	Errors::~Errors()
	{
	}

	Excel::ApplicationX Errors::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Errors::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Error Errors::get_Item(_variant_t Index)
	{
		Excel::Error returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Errors::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Error Errors::get__Default(_variant_t Index)
	{
		Excel::Error returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Error
	Error::Error()
	{
	}

	Error::~Error()
	{
	}

	Excel::ApplicationX Error::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Error::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool Error::get_Ignore()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2210, L"Ignore", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Error::put_Ignore(bool Ignore)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Ignore == true) ? 1 : 0;
		Invoke(1, 2210, L"Ignore", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Error::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Error::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	//________________________________________________________SmartTagAction
	SmartTagAction::SmartTagAction()
	{
	}

	SmartTagAction::~SmartTagAction()
	{
	}

	Com::Object SmartTagAction::get_ActiveXControl()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2303, L"ActiveXControl", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX SmartTagAction::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool SmartTagAction::get_CheckboxState()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2299, L"CheckboxState", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SmartTagAction::put_CheckboxState(bool CheckboxState)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CheckboxState == true) ? 1 : 0;
		Invoke(1, 2299, L"CheckboxState", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator SmartTagAction::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void SmartTagAction::Execute()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2211, L"Execute", param, returnedValue, DISPATCH_METHOD);
	}

	bool SmartTagAction::get_ExpandHelp()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2298, L"ExpandHelp", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SmartTagAction::put_ExpandHelp(bool ExpandHelp)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ExpandHelp == true) ? 1 : 0;
		Invoke(1, 2298, L"ExpandHelp", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long SmartTagAction::get_ListSelection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2301, L"ListSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void SmartTagAction::put_ListSelection(long ListSelection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ListSelection;
		Invoke(1, 2301, L"ListSelection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring SmartTagAction::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object SmartTagAction::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool SmartTagAction::get_PresentInPane()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2297, L"PresentInPane", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long SmartTagAction::get_RadioGroupSelection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2302, L"RadioGroupSelection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void SmartTagAction::put_RadioGroupSelection(long RadioGroupSelection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = RadioGroupSelection;
		Invoke(1, 2302, L"RadioGroupSelection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring SmartTagAction::get_TextboxText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2300, L"TextboxText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void SmartTagAction::put_TextboxText(wstring TextboxText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextboxText.c_str());
		Invoke(1, 2300, L"TextboxText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSmartTagControlType SmartTagAction::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSmartTagControlType)returnedValue.iVal;
	}

	wstring SmartTagAction::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________SmartTagActions
	SmartTagActions::SmartTagActions()
	{
	}

	SmartTagActions::~SmartTagActions()
	{
	}

	Excel::ApplicationX SmartTagActions::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SmartTagActions::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SmartTagActions::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::SmartTagAction SmartTagActions::get_Item(_variant_t Index)
	{
		Excel::SmartTagAction returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SmartTagActions::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SmartTagAction SmartTagActions::get__Default(_variant_t Index)
	{
		Excel::SmartTagAction returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SmartTagActions::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SmartTag
	SmartTag::SmartTag()
	{
	}

	SmartTag::~SmartTag()
	{
	}

	Excel::ApplicationX SmartTag::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SmartTag::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void SmartTag::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring SmartTag::get_DownloadURL()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2212, L"DownloadURL", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring SmartTag::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object SmartTag::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::CustomProperties SmartTag::get_Properties()
	{
		Excel::CustomProperties returnedValue;
		Com::Param param;
		Invoke(0, 2135, L"Properties", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range SmartTag::get_Range()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SmartTagActions SmartTag::get_SmartTagActions()
	{
		Excel::SmartTagActions returnedValue;
		Com::Param param;
		Invoke(0, 2214, L"SmartTagActions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring SmartTag::get_XML()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2213, L"XML", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring SmartTag::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________SmartTags
	SmartTags::SmartTags()
	{
	}

	SmartTags::~SmartTags()
	{
	}

	Excel::SmartTag SmartTags::Add(wstring SmartTagType)
	{
		Excel::SmartTag returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SmartTagType.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX SmartTags::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SmartTags::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SmartTags::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object SmartTags::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SmartTag SmartTags::get__Default(_variant_t Index)
	{
		Excel::SmartTag returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SmartTags::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SmartTagRecognizer
	SmartTagRecognizer::SmartTagRecognizer()
	{
	}

	SmartTagRecognizer::~SmartTagRecognizer()
	{
	}

	Excel::ApplicationX SmartTagRecognizer::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SmartTagRecognizer::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool SmartTagRecognizer::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SmartTagRecognizer::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring SmartTagRecognizer::get_FullName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 289, L"FullName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object SmartTagRecognizer::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring SmartTagRecognizer::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring SmartTagRecognizer::get_progID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2216, L"progID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________SmartTagRecognizers
	SmartTagRecognizers::SmartTagRecognizers()
	{
	}

	SmartTagRecognizers::~SmartTagRecognizers()
	{
	}

	Excel::ApplicationX SmartTagRecognizers::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SmartTagRecognizers::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SmartTagRecognizers::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::SmartTagRecognizer SmartTagRecognizers::get_Item(_variant_t Index)
	{
		Excel::SmartTagRecognizer returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SmartTagRecognizers::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool SmartTagRecognizers::get_Recognize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2217, L"Recognize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SmartTagRecognizers::put_Recognize(bool Recognize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Recognize == true) ? 1 : 0;
		Invoke(1, 2217, L"Recognize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::SmartTagRecognizer SmartTagRecognizers::get__Default(_variant_t Index)
	{
		Excel::SmartTagRecognizer returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SmartTagRecognizers::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SmartTagOptions
	SmartTagOptions::SmartTagOptions()
	{
	}

	SmartTagOptions::~SmartTagOptions()
	{
	}

	Excel::ApplicationX SmartTagOptions::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SmartTagOptions::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlSmartTagDisplayMode SmartTagOptions::get_DisplaySmartTags()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2218, L"DisplaySmartTags", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSmartTagDisplayMode)returnedValue.iVal;
	}

	void SmartTagOptions::put_DisplaySmartTags(Excel::XlSmartTagDisplayMode DisplaySmartTags)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DisplaySmartTags;
		Invoke(1, 2218, L"DisplaySmartTags", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SmartTagOptions::get_EmbedSmartTags()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2219, L"EmbedSmartTags", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SmartTagOptions::put_EmbedSmartTags(bool EmbedSmartTags)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EmbedSmartTags == true) ? 1 : 0;
		Invoke(1, 2219, L"EmbedSmartTags", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object SmartTagOptions::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________SpellingOptions
	SpellingOptions::SpellingOptions()
	{
	}

	SpellingOptions::~SpellingOptions()
	{
	}

	Excel::XlArabicModes SpellingOptions::get_ArabicModes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2231, L"ArabicModes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlArabicModes)returnedValue.iVal;
	}

	void SpellingOptions::put_ArabicModes(Excel::XlArabicModes ArabicModes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ArabicModes;
		Invoke(1, 2231, L"ArabicModes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_ArabicStrictAlefHamza()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2932, L"ArabicStrictAlefHamza", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_ArabicStrictAlefHamza(bool ArabicStrictAlefHamza)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ArabicStrictAlefHamza == true) ? 1 : 0;
		Invoke(1, 2932, L"ArabicStrictAlefHamza", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_ArabicStrictFinalYaa()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2933, L"ArabicStrictFinalYaa", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_ArabicStrictFinalYaa(bool ArabicStrictFinalYaa)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ArabicStrictFinalYaa == true) ? 1 : 0;
		Invoke(1, 2933, L"ArabicStrictFinalYaa", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_ArabicStrictTaaMarboota()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2934, L"ArabicStrictTaaMarboota", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_ArabicStrictTaaMarboota(bool ArabicStrictTaaMarboota)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ArabicStrictTaaMarboota == true) ? 1 : 0;
		Invoke(1, 2934, L"ArabicStrictTaaMarboota", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPortugueseReform SpellingOptions::get_BrazilReform()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2938, L"BrazilReform", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPortugueseReform)returnedValue.iVal;
	}

	void SpellingOptions::put_BrazilReform(Excel::XlPortugueseReform BrazilReform)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BrazilReform;
		Invoke(1, 2938, L"BrazilReform", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long SpellingOptions::get_DictLang()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2220, L"DictLang", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void SpellingOptions::put_DictLang(long DictLang)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DictLang;
		Invoke(1, 2220, L"DictLang", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_GermanPostReform()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2226, L"GermanPostReform", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_GermanPostReform(bool GermanPostReform)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (GermanPostReform == true) ? 1 : 0;
		Invoke(1, 2226, L"GermanPostReform", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlHebrewModes SpellingOptions::get_HebrewModes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2230, L"HebrewModes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlHebrewModes)returnedValue.iVal;
	}

	void SpellingOptions::put_HebrewModes(Excel::XlHebrewModes HebrewModes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = HebrewModes;
		Invoke(1, 2230, L"HebrewModes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_IgnoreCaps()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2222, L"IgnoreCaps", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_IgnoreCaps(bool IgnoreCaps)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IgnoreCaps == true) ? 1 : 0;
		Invoke(1, 2222, L"IgnoreCaps", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_IgnoreFileNames()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2225, L"IgnoreFileNames", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_IgnoreFileNames(bool IgnoreFileNames)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IgnoreFileNames == true) ? 1 : 0;
		Invoke(1, 2225, L"IgnoreFileNames", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_IgnoreMixedDigits()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2224, L"IgnoreMixedDigits", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_IgnoreMixedDigits(bool IgnoreMixedDigits)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IgnoreMixedDigits == true) ? 1 : 0;
		Invoke(1, 2224, L"IgnoreMixedDigits", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_KoreanCombineAux()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2227, L"KoreanCombineAux", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_KoreanCombineAux(bool KoreanCombineAux)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (KoreanCombineAux == true) ? 1 : 0;
		Invoke(1, 2227, L"KoreanCombineAux", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_KoreanProcessCompound()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2229, L"KoreanProcessCompound", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_KoreanProcessCompound(bool KoreanProcessCompound)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (KoreanProcessCompound == true) ? 1 : 0;
		Invoke(1, 2229, L"KoreanProcessCompound", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_KoreanUseAutoChangeList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2228, L"KoreanUseAutoChangeList", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_KoreanUseAutoChangeList(bool KoreanUseAutoChangeList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (KoreanUseAutoChangeList == true) ? 1 : 0;
		Invoke(1, 2228, L"KoreanUseAutoChangeList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPortugueseReform SpellingOptions::get_PortugalReform()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2937, L"PortugalReform", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPortugueseReform)returnedValue.iVal;
	}

	void SpellingOptions::put_PortugalReform(Excel::XlPortugueseReform PortugalReform)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PortugalReform;
		Invoke(1, 2937, L"PortugalReform", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_RussianStrictE()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2935, L"RussianStrictE", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_RussianStrictE(bool RussianStrictE)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RussianStrictE == true) ? 1 : 0;
		Invoke(1, 2935, L"RussianStrictE", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSpanishModes SpellingOptions::get_SpanishModes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2936, L"SpanishModes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSpanishModes)returnedValue.iVal;
	}

	void SpellingOptions::put_SpanishModes(Excel::XlSpanishModes SpanishModes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SpanishModes;
		Invoke(1, 2936, L"SpanishModes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SpellingOptions::get_SuggestMainOnly()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2223, L"SuggestMainOnly", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SpellingOptions::put_SuggestMainOnly(bool SuggestMainOnly)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SuggestMainOnly == true) ? 1 : 0;
		Invoke(1, 2223, L"SuggestMainOnly", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring SpellingOptions::get_UserDict()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2221, L"UserDict", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void SpellingOptions::put_UserDict(wstring UserDict)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(UserDict.c_str());
		Invoke(1, 2221, L"UserDict", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Speech
	Speech::Speech()
	{
	}

	Speech::~Speech()
	{
	}

	Excel::XlSpeakDirection Speech::get_Direction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 168, L"Direction", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSpeakDirection)returnedValue.iVal;
	}

	void Speech::put_Direction(Excel::XlSpeakDirection Direction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Direction;
		Invoke(1, 168, L"Direction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Speech::Speak(wstring Text, _variant_t SpeakAsync, _variant_t SpeakXML, _variant_t Purge)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		param[1] = SpeakAsync;
		param[2] = SpeakXML;
		param[3] = Purge;
		Invoke(4, 2017, L"Speak", param, returnedValue, DISPATCH_METHOD);
	}

	void Speech::Speak(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 2017, L"Speak", param, returnedValue, DISPATCH_METHOD);
	}

	bool Speech::get_SpeakCellOnEnter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2235, L"SpeakCellOnEnter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Speech::put_SpeakCellOnEnter(bool SpeakCellOnEnter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SpeakCellOnEnter == true) ? 1 : 0;
		Invoke(1, 2235, L"SpeakCellOnEnter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Protection
	Protection::Protection()
	{
	}

	Protection::~Protection()
	{
	}

	bool Protection::get_AllowDeletingColumns()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2038, L"AllowDeletingColumns", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowDeletingRows()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2039, L"AllowDeletingRows", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::AllowEditRanges Protection::get_AllowEditRanges()
	{
		Excel::AllowEditRanges returnedValue;
		Com::Param param;
		Invoke(0, 2236, L"AllowEditRanges", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Protection::get_AllowFiltering()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2041, L"AllowFiltering", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowFormattingCells()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2032, L"AllowFormattingCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowFormattingColumns()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2033, L"AllowFormattingColumns", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowFormattingRows()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2034, L"AllowFormattingRows", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowInsertingColumns()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2035, L"AllowInsertingColumns", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowInsertingHyperlinks()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2037, L"AllowInsertingHyperlinks", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowInsertingRows()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2036, L"AllowInsertingRows", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowSorting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2040, L"AllowSorting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool Protection::get_AllowUsingPivotTables()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2042, L"AllowUsingPivotTables", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	//________________________________________________________PivotItemList
	PivotItemList::PivotItemList()
	{
	}

	PivotItemList::~PivotItemList()
	{
	}

	Excel::ApplicationX PivotItemList::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotItemList::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotItemList::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotItem PivotItemList::Item(_variant_t Index)
	{
		Excel::PivotItem returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object PivotItemList::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotItem PivotItemList::get__Default(_variant_t Field)
	{
		Excel::PivotItem returnedValue;
		Com::Param param(1);
		param[0] = Field;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotItemList::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________Tab
	Tab::Tab()
	{
	}

	Tab::~Tab()
	{
	}

	Excel::ApplicationX Tab::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Tab::get_Color()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Tab::put_Color(_variant_t Color)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Color;
		Invoke(1, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex Tab::get_ColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void Tab::put_ColorIndex(Excel::XlColorIndex ColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ColorIndex;
		Invoke(1, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Tab::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object Tab::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlThemeColor Tab::get_ThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlThemeColor)returnedValue.iVal;
	}

	void Tab::put_ThemeColor(Excel::XlThemeColor ThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ThemeColor;
		Invoke(1, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t Tab::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Tab::put_TintAndShade(_variant_t TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TintAndShade;
		Invoke(1, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________AllowEditRanges
	AllowEditRanges::AllowEditRanges()
	{
	}

	AllowEditRanges::~AllowEditRanges()
	{
	}

	Excel::AllowEditRange AllowEditRanges::Add(wstring Title, Excel::Range& Range, _variant_t Password)
	{
		Excel::AllowEditRange returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Range.dispatch.GetInterfacePtr();
		param[2] = Password;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::AllowEditRange AllowEditRanges::Add(wstring Title, Excel::Range& Range)
	{
		Excel::AllowEditRange returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long AllowEditRanges::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::AllowEditRange AllowEditRanges::get_Item(_variant_t Index)
	{
		Excel::AllowEditRange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::AllowEditRange AllowEditRanges::get__Default(_variant_t Index)
	{
		Excel::AllowEditRange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr AllowEditRanges::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________AllowEditRange
	AllowEditRange::AllowEditRange()
	{
	}

	AllowEditRange::~AllowEditRange()
	{
	}

	void AllowEditRange::ChangePassword(wstring Password)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Password.c_str());
		Invoke(1, 2237, L"ChangePassword", param, returnedValue, DISPATCH_METHOD);
	}

	void AllowEditRange::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range AllowEditRange::get_Range()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AllowEditRange::put_Range(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	wstring AllowEditRange::get_Title()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void AllowEditRange::put_Title(wstring Title)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Title.c_str());
		Invoke(1, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void AllowEditRange::Unprotect(_variant_t Password)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Password;
		Invoke(1, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	void AllowEditRange::Unprotect()
	{
		_variant_t returnedValue;
		Com::Param param(0);
		Invoke(0, 285, L"Unprotect", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::UserAccessList AllowEditRange::get_Users()
	{
		Excel::UserAccessList returnedValue;
		Com::Param param;
		Invoke(0, 2238, L"Users", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________UserAccessList
	UserAccessList::UserAccessList()
	{
	}

	UserAccessList::~UserAccessList()
	{
	}

	Excel::UserAccess UserAccessList::Add(wstring Name, bool AllowEdit)
	{
		Excel::UserAccess returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BOOL;
		param[1].boolVal = (AllowEdit == true) ? 1 : 0;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	long UserAccessList::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void UserAccessList::DeleteAll()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2239, L"DeleteAll", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::UserAccess UserAccessList::get_Item(_variant_t Index)
	{
		Excel::UserAccess returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::UserAccess UserAccessList::get__Default(_variant_t Index)
	{
		Excel::UserAccess returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr UserAccessList::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________UserAccess
	UserAccess::UserAccess()
	{
	}

	UserAccess::~UserAccess()
	{
	}

	bool UserAccess::get_AllowEdit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2020, L"AllowEdit", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void UserAccess::put_AllowEdit(bool AllowEdit)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AllowEdit == true) ? 1 : 0;
		Invoke(1, 2020, L"AllowEdit", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void UserAccess::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring UserAccess::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________RTD
	RTD::RTD()
	{
	}

	RTD::~RTD()
	{
	}

	void RTD::RefreshData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2241, L"RefreshData", param, returnedValue, DISPATCH_METHOD);
	}

	void RTD::RestartServers()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2242, L"RestartServers", param, returnedValue, DISPATCH_METHOD);
	}

	long RTD::get_ThrottleInterval()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2240, L"ThrottleInterval", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void RTD::put_ThrottleInterval(long ThrottleInterval)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ThrottleInterval;
		Invoke(1, 2240, L"ThrottleInterval", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Diagram
	Diagram::Diagram()
	{
	}

	Diagram::~Diagram()
	{
	}

	Excel::ApplicationX Diagram::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short Diagram::get_AutoFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 114, L"AutoFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void Diagram::put_AutoFormat(/* MsoTriState*/ short AutoFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutoFormat;
		Invoke(1, 114, L"AutoFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoTriState*/ short Diagram::get_AutoLayout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2243, L"AutoLayout", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void Diagram::put_AutoLayout(/* MsoTriState*/ short AutoLayout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutoLayout;
		Invoke(1, 2243, L"AutoLayout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Diagram::Convert(/* MsoDiagramType*/ short Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 1046, L"Convert", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator Diagram::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Diagram::FitText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2304, L"FitText", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::DiagramNodes Diagram::get_Nodes()
	{
		Excel::DiagramNodes returnedValue;
		Com::Param param;
		Invoke(0, 1701, L"Nodes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Diagram::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoTriState*/ short Diagram::get_Reverse()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2244, L"Reverse", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoTriState*/ short)returnedValue.iVal;
	}

	void Diagram::put_Reverse(/* MsoTriState*/ short Reverse)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Reverse;
		Invoke(1, 2244, L"Reverse", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoDiagramType*/ short Diagram::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoDiagramType*/ short)returnedValue.iVal;
	}

	//________________________________________________________ListObjects
	ListObjects::ListObjects()
	{
	}

	ListObjects::~ListObjects()
	{
	}

	Excel::ListObject ListObjects::Add(Excel::XlListObjectSourceType SourceType, _variant_t Source, _variant_t LinkSource, Excel::XlYesNoGuess XlListObjectHasHeaders, _variant_t Destination, _variant_t TableStyleName)
	{
		Excel::ListObject returnedValue;
		Com::Param param(6);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		param[1] = Source;
		param[2] = LinkSource;
		param[3].vt = VT_I2;
		param[3].iVal = XlListObjectHasHeaders;
		param[4] = Destination;
		param[5] = TableStyleName;
		Invoke(6, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListObject ListObjects::Add(Excel::XlListObjectSourceType SourceType, _variant_t Source, _variant_t LinkSource, Excel::XlYesNoGuess XlListObjectHasHeaders)
	{
		Excel::ListObject returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		param[1] = Source;
		param[2] = LinkSource;
		param[3].vt = VT_I2;
		param[3].iVal = XlListObjectHasHeaders;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ListObjects::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ListObjects::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ListObjects::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ListObject ListObjects::get_Item(_variant_t Index)
	{
		Excel::ListObject returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ListObjects::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ListObject ListObjects::_Add(Excel::XlListObjectSourceType SourceType, _variant_t Source, _variant_t LinkSource, Excel::XlYesNoGuess XlListObjectHasHeaders, _variant_t Destination)
	{
		Excel::ListObject returnedValue;
		Com::Param param(5);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		param[1] = Source;
		param[2] = LinkSource;
		param[3].vt = VT_I2;
		param[3].iVal = XlListObjectHasHeaders;
		param[4] = Destination;
		Invoke(5, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListObject ListObjects::_Add(Excel::XlListObjectSourceType SourceType, _variant_t Source, _variant_t LinkSource, Excel::XlYesNoGuess XlListObjectHasHeaders)
	{
		Excel::ListObject returnedValue;
		Com::Param param(4);
		param[0].vt = VT_I2;
		param[0].iVal = SourceType;
		param[1] = Source;
		param[2] = LinkSource;
		param[3].vt = VT_I2;
		param[3].iVal = XlListObjectHasHeaders;
		Invoke(4, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListObject ListObjects::get__Default(_variant_t Index)
	{
		Excel::ListObject returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ListObjects::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ListObject
	ListObject::ListObject()
	{
	}

	ListObject::~ListObject()
	{
	}

	bool ListObject::get_Active()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2312, L"Active", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring ListObject::get_AlternativeText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1891, L"AlternativeText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListObject::put_AlternativeText(wstring AlternativeText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(AlternativeText.c_str());
		Invoke(1, 1891, L"AlternativeText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX ListObject::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::AutoFilter ListObject::get_AutoFilter()
	{
		Excel::AutoFilter returnedValue;
		Com::Param param;
		Invoke(0, 793, L"AutoFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ListObject::get_Comment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 910, L"Comment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListObject::put_Comment(wstring Comment)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Comment.c_str());
		Invoke(1, 910, L"Comment", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator ListObject::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Range ListObject::get_DataBodyRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 705, L"DataBodyRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListObject::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ListObject::get_DisplayName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2677, L"DisplayName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListObject::put_DisplayName(wstring DisplayName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(DisplayName.c_str());
		Invoke(1, 2677, L"DisplayName", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListObject::get_DisplayRightToLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1774, L"DisplayRightToLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::ExportToVisio()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2680, L"ExportToVisio", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range ListObject::get_HeaderRowRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2313, L"HeaderRowRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ListObject::get_InsertRowRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2314, L"InsertRowRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ListColumns ListObject::get_ListColumns()
	{
		Excel::ListColumns returnedValue;
		Com::Param param;
		Invoke(0, 2315, L"ListColumns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ListRows ListObject::get_ListRows()
	{
		Excel::ListRows returnedValue;
		Com::Param param;
		Invoke(0, 2316, L"ListRows", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ListObject::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListObject::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ListObject::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ListObject::Publish(_variant_t Target, bool LinkSource)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = Target;
		param[1].vt = VT_BOOL;
		param[1].boolVal = (LinkSource == true) ? 1 : 0;
		Invoke(2, 1895, L"Publish", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	Excel::QueryTableX ListObject::get_QueryTable()
	{
		Excel::QueryTableX returnedValue;
		Com::Param param;
		Invoke(0, 1386, L"QueryTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ListObject::get_Range()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListObject::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	void ListObject::Resize(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 256, L"Resize", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ListObject::get_SharePointURL()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2320, L"SharePointURL", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	bool ListObject::get_ShowAutoFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2317, L"ShowAutoFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::put_ShowAutoFilter(bool ShowAutoFilter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAutoFilter == true) ? 1 : 0;
		Invoke(1, 2317, L"ShowAutoFilter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListObject::get_ShowAutoFilterDropDown()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3096, L"ShowAutoFilterDropDown", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::put_ShowAutoFilterDropDown(bool ShowAutoFilterDropDown)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAutoFilterDropDown == true) ? 1 : 0;
		Invoke(1, 3096, L"ShowAutoFilterDropDown", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListObject::get_ShowHeaders()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2678, L"ShowHeaders", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::put_ShowHeaders(bool ShowHeaders)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowHeaders == true) ? 1 : 0;
		Invoke(1, 2678, L"ShowHeaders", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListObject::get_ShowTableStyleColumnStripes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2565, L"ShowTableStyleColumnStripes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::put_ShowTableStyleColumnStripes(bool ShowTableStyleColumnStripes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleColumnStripes == true) ? 1 : 0;
		Invoke(1, 2565, L"ShowTableStyleColumnStripes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListObject::get_ShowTableStyleFirstColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2679, L"ShowTableStyleFirstColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::put_ShowTableStyleFirstColumn(bool ShowTableStyleFirstColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleFirstColumn == true) ? 1 : 0;
		Invoke(1, 2679, L"ShowTableStyleFirstColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListObject::get_ShowTableStyleLastColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2563, L"ShowTableStyleLastColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::put_ShowTableStyleLastColumn(bool ShowTableStyleLastColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleLastColumn == true) ? 1 : 0;
		Invoke(1, 2563, L"ShowTableStyleLastColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListObject::get_ShowTableStyleRowStripes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2564, L"ShowTableStyleRowStripes", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::put_ShowTableStyleRowStripes(bool ShowTableStyleRowStripes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTableStyleRowStripes == true) ? 1 : 0;
		Invoke(1, 2564, L"ShowTableStyleRowStripes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ListObject::get_ShowTotals()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2318, L"ShowTotals", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ListObject::put_ShowTotals(bool ShowTotals)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTotals == true) ? 1 : 0;
		Invoke(1, 2318, L"ShowTotals", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Slicers ListObject::get_Slicers()
	{
		Excel::Slicers returnedValue;
		Com::Param param;
		Invoke(0, 2881, L"Slicers", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Sort ListObject::get_Sort()
	{
		Excel::Sort returnedValue;
		Com::Param param;
		Invoke(0, 880, L"Sort", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlListObjectSourceType ListObject::get_SourceType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 685, L"SourceType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlListObjectSourceType)returnedValue.iVal;
	}

	wstring ListObject::get_Summary()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 273, L"Summary", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListObject::put_Summary(wstring Summary)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Summary.c_str());
		Invoke(1, 273, L"Summary", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::TableObject ListObject::get_TableObject()
	{
		Excel::TableObject returnedValue;
		Com::Param param;
		Invoke(0, 3095, L"TableObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListObject::get_TableStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1504, L"TableStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListObject::put_TableStyle(_variant_t TableStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TableStyle;
		Invoke(1, 1504, L"TableStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range ListObject::get_TotalsRowRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2319, L"TotalsRowRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListObject::Unlink()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2308, L"Unlink", param, returnedValue, DISPATCH_METHOD);
	}

	void ListObject::Unlist()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2309, L"Unlist", param, returnedValue, DISPATCH_METHOD);
	}

	void ListObject::UpdateChanges(Excel::XlListConflict iConflictType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = iConflictType;
		Invoke(1, 2310, L"UpdateChanges", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XmlMap ListObject::get_XmlMap()
	{
		Excel::XmlMap returnedValue;
		Com::Param param;
		Invoke(0, 2253, L"XmlMap", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ListObject::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ListColumns
	ListColumns::ListColumns()
	{
	}

	ListColumns::~ListColumns()
	{
	}

	Excel::ListColumn ListColumns::Add(_variant_t Position)
	{
		Excel::ListColumn returnedValue;
		Com::Param param(1);
		param[0] = Position;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListColumn ListColumns::Add()
	{
		Excel::ListColumn returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ListColumns::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ListColumns::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ListColumns::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ListColumn ListColumns::get_Item(_variant_t Index)
	{
		Excel::ListColumn returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ListColumns::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ListColumn ListColumns::get__Default(_variant_t Index)
	{
		Excel::ListColumn returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ListColumns::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ListColumn
	ListColumn::ListColumn()
	{
	}

	ListColumn::~ListColumn()
	{
	}

	Excel::ApplicationX ListColumn::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ListColumn::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Range ListColumn::get_DataBodyRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 705, L"DataBodyRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ListColumn::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long ListColumn::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::ListDataFormat ListColumn::get_ListDataFormat()
	{
		Excel::ListDataFormat returnedValue;
		Com::Param param;
		Invoke(0, 2321, L"ListDataFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ListColumn::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ListColumn::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ListColumn::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ListColumn::get_Range()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ListColumn::get_SharePointFormula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2323, L"SharePointFormula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::Range ListColumn::get_Total()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2681, L"Total", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlTotalsCalculation ListColumn::get_TotalsCalculation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2322, L"TotalsCalculation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTotalsCalculation)returnedValue.iVal;
	}

	void ListColumn::put_TotalsCalculation(Excel::XlTotalsCalculation TotalsCalculation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TotalsCalculation;
		Invoke(1, 2322, L"TotalsCalculation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XPath ListColumn::get_XPath()
	{
		Excel::XPath returnedValue;
		Com::Param param;
		Invoke(0, 2258, L"XPath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ListColumn::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ListRows
	ListRows::ListRows()
	{
	}

	ListRows::~ListRows()
	{
	}

	Excel::ListRow ListRows::Add(_variant_t Position, _variant_t AlwaysInsert)
	{
		Excel::ListRow returnedValue;
		Com::Param param(2);
		param[0] = Position;
		param[1] = AlwaysInsert;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListRow ListRows::Add()
	{
		Excel::ListRow returnedValue;
		Com::Param param(0);
		Invoke(0, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ListRows::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ListRows::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ListRows::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ListRow ListRows::get_Item(_variant_t Index)
	{
		Excel::ListRow returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ListRows::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ListRow ListRows::_Add(_variant_t Position)
	{
		Excel::ListRow returnedValue;
		Com::Param param(1);
		param[0] = Position;
		Invoke(1, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListRow ListRows::_Add()
	{
		Excel::ListRow returnedValue;
		Com::Param param(0);
		Invoke(0, 2085, L"_Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ListRow ListRows::get__Default(_variant_t Index)
	{
		Excel::ListRow returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ListRows::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ListRow
	ListRow::ListRow()
	{
	}

	ListRow::~ListRow()
	{
	}

	Excel::ApplicationX ListRow::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ListRow::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ListRow::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long ListRow::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool ListRow::get_InvalidData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2324, L"InvalidData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object ListRow::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ListRow::get_Range()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 197, L"Range", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________XmlNamespace
	XmlNamespace::XmlNamespace()
	{
	}

	XmlNamespace::~XmlNamespace()
	{
	}

	Excel::ApplicationX XmlNamespace::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator XmlNamespace::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object XmlNamespace::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring XmlNamespace::get_Prefix()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2326, L"Prefix", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring XmlNamespace::get_Uri()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2325, L"Uri", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring XmlNamespace::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________XmlNamespaces
	XmlNamespaces::XmlNamespaces()
	{
	}

	XmlNamespaces::~XmlNamespaces()
	{
	}

	Excel::ApplicationX XmlNamespaces::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long XmlNamespaces::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator XmlNamespaces::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void XmlNamespaces::InstallManifest(wstring Path, _variant_t InstallForAllUsers)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Path.c_str());
		param[1] = InstallForAllUsers;
		Invoke(2, 2327, L"InstallManifest", param, returnedValue, DISPATCH_METHOD);
	}

	void XmlNamespaces::InstallManifest(wstring Path)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Path.c_str());
		Invoke(1, 2327, L"InstallManifest", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XmlNamespace XmlNamespaces::get_Item(_variant_t Index)
	{
		Excel::XmlNamespace returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object XmlNamespaces::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring XmlNamespaces::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XmlNamespace XmlNamespaces::get__Default(_variant_t Index)
	{
		Excel::XmlNamespace returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr XmlNamespaces::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________XmlDataBinding
	XmlDataBinding::XmlDataBinding()
	{
	}

	XmlDataBinding::~XmlDataBinding()
	{
	}

	Excel::ApplicationX XmlDataBinding::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void XmlDataBinding::ClearSettings()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2330, L"ClearSettings", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator XmlDataBinding::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void XmlDataBinding::LoadSettings(wstring Url)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Url.c_str());
		Invoke(1, 2329, L"LoadSettings", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object XmlDataBinding::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlXmlImportResult XmlDataBinding::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	wstring XmlDataBinding::get_SourceUrl()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2331, L"SourceUrl", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring XmlDataBinding::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________XmlSchema
	XmlSchema::XmlSchema()
	{
	}

	XmlSchema::~XmlSchema()
	{
	}

	Excel::ApplicationX XmlSchema::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator XmlSchema::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring XmlSchema::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XmlNamespace XmlSchema::get_Namespace()
	{
		Excel::XmlNamespace returnedValue;
		Com::Param param;
		Invoke(0, 2332, L"Namespace", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object XmlSchema::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring XmlSchema::get_XML()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2333, L"XML", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________XmlSchemas
	XmlSchemas::XmlSchemas()
	{
	}

	XmlSchemas::~XmlSchemas()
	{
	}

	Excel::ApplicationX XmlSchemas::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long XmlSchemas::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator XmlSchemas::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XmlSchema XmlSchemas::get_Item(_variant_t Index)
	{
		Excel::XmlSchema returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object XmlSchemas::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XmlSchema XmlSchemas::get__Default(_variant_t Index)
	{
		Excel::XmlSchema returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr XmlSchemas::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________XmlMap
	XmlMap::XmlMap()
	{
	}

	XmlMap::~XmlMap()
	{
	}

	bool XmlMap::get_AdjustColumnWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1868, L"AdjustColumnWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void XmlMap::put_AdjustColumnWidth(bool AdjustColumnWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AdjustColumnWidth == true) ? 1 : 0;
		Invoke(1, 1868, L"AdjustColumnWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool XmlMap::get_AppendOnImport()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2339, L"AppendOnImport", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void XmlMap::put_AppendOnImport(bool AppendOnImport)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AppendOnImport == true) ? 1 : 0;
		Invoke(1, 2339, L"AppendOnImport", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX XmlMap::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator XmlMap::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XmlDataBinding XmlMap::get_DataBinding()
	{
		Excel::XmlDataBinding returnedValue;
		Com::Param param;
		Invoke(0, 2343, L"DataBinding", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void XmlMap::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlXmlExportResult XmlMap::Export(wstring Url, _variant_t Overwrite)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Url.c_str());
		param[1] = Overwrite;
		Invoke(2, 1414, L"Export", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlExportResult)returnedValue.iVal;
	}

	Excel::XlXmlExportResult XmlMap::Export(wstring Url)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Url.c_str());
		Invoke(1, 1414, L"Export", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlExportResult)returnedValue.iVal;
	}

	Excel::XlXmlExportResult XmlMap::ExportXml(_bstr_t& Data)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR | VT_BYREF;
		param[0].pbstrVal = &Data.GetBSTR();
		Invoke(1, 2346, L"ExportXml", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlExportResult)returnedValue.iVal;
	}

	Excel::XlXmlImportResult XmlMap::Import(wstring Url, _variant_t Overwrite)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Url.c_str());
		param[1] = Overwrite;
		Invoke(2, 917, L"Import", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	Excel::XlXmlImportResult XmlMap::Import(wstring Url)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Url.c_str());
		Invoke(1, 917, L"Import", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	Excel::XlXmlImportResult XmlMap::ImportXml(wstring XmlData, _variant_t Overwrite)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(XmlData.c_str());
		param[1] = Overwrite;
		Invoke(2, 2344, L"ImportXml", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	Excel::XlXmlImportResult XmlMap::ImportXml(wstring XmlData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(XmlData.c_str());
		Invoke(1, 2344, L"ImportXml", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlXmlImportResult)returnedValue.iVal;
	}

	bool XmlMap::get_IsExportable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2334, L"IsExportable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring XmlMap::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void XmlMap::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object XmlMap::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool XmlMap::get_PreserveColumnFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2337, L"PreserveColumnFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void XmlMap::put_PreserveColumnFilter(bool PreserveColumnFilter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PreserveColumnFilter == true) ? 1 : 0;
		Invoke(1, 2337, L"PreserveColumnFilter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool XmlMap::get_PreserveNumberFormatting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2338, L"PreserveNumberFormatting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void XmlMap::put_PreserveNumberFormatting(bool PreserveNumberFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PreserveNumberFormatting == true) ? 1 : 0;
		Invoke(1, 2338, L"PreserveNumberFormatting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring XmlMap::get_RootElementName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2340, L"RootElementName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XmlNamespace XmlMap::get_RootElementNamespace()
	{
		Excel::XmlNamespace returnedValue;
		Com::Param param;
		Invoke(0, 2341, L"RootElementNamespace", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool XmlMap::get_SaveDataSourceDefinition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2336, L"SaveDataSourceDefinition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void XmlMap::put_SaveDataSourceDefinition(bool SaveDataSourceDefinition)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveDataSourceDefinition == true) ? 1 : 0;
		Invoke(1, 2336, L"SaveDataSourceDefinition", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XmlSchemas XmlMap::get_Schemas()
	{
		Excel::XmlSchemas returnedValue;
		Com::Param param;
		Invoke(0, 2342, L"Schemas", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool XmlMap::get_ShowImportExportValidationErrors()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2335, L"ShowImportExportValidationErrors", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void XmlMap::put_ShowImportExportValidationErrors(bool ShowImportExportValidationErrors)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowImportExportValidationErrors == true) ? 1 : 0;
		Invoke(1, 2335, L"ShowImportExportValidationErrors", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::WorkbookConnection XmlMap::get_WorkbookConnection()
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param;
		Invoke(0, 2544, L"WorkbookConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring XmlMap::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________XmlMaps
	XmlMaps::XmlMaps()
	{
	}

	XmlMaps::~XmlMaps()
	{
	}

	Excel::XmlMap XmlMaps::Add(wstring Schema, _variant_t RootElementName)
	{
		Excel::XmlMap returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Schema.c_str());
		param[1] = RootElementName;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XmlMap XmlMaps::Add(wstring Schema)
	{
		Excel::XmlMap returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Schema.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX XmlMaps::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long XmlMaps::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator XmlMaps::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XmlMap XmlMaps::get_Item(_variant_t Index)
	{
		Excel::XmlMap returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object XmlMaps::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XmlMap XmlMaps::get__Default(_variant_t Index)
	{
		Excel::XmlMap returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr XmlMaps::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ListDataFormat
	ListDataFormat::ListDataFormat()
	{
	}

	ListDataFormat::~ListDataFormat()
	{
	}

	bool ListDataFormat::get_AllowFillIn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2357, L"AllowFillIn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::ApplicationX ListDataFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListDataFormat::get_Choices()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2348, L"Choices", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ListDataFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long ListDataFormat::get_DecimalPlaces()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t ListDataFormat::get_DefaultValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2350, L"DefaultValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ListDataFormat::get_IsPercent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2351, L"IsPercent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long ListDataFormat::get_MaxCharacters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2353, L"MaxCharacters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t ListDataFormat::get_MaxNumber()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2354, L"MaxNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ListDataFormat::get_MinNumber()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2355, L"MinNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ListDataFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ListDataFormat::get_ReadOnly()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 296, L"ReadOnly", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool ListDataFormat::get_Required()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2356, L"Required", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlListDataType ListDataFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlListDataType)returnedValue.iVal;
	}

	Excel::XlListDataType ListDataFormat::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlListDataType)returnedValue.iVal;
	}

	long ListDataFormat::get_lcid()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2352, L"lcid", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________XPath
	XPath::XPath()
	{
	}

	XPath::~XPath()
	{
	}

	Excel::ApplicationX XPath::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void XPath::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator XPath::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XmlMap XPath::get_Map()
	{
		Excel::XmlMap returnedValue;
		Com::Param param;
		Invoke(0, 2262, L"Map", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object XPath::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool XPath::get_Repeating()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2360, L"Repeating", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void XPath::SetValue(Excel::XmlMap& Map, wstring XPath, _variant_t SelectionNamespace, _variant_t Repeating)
	{
		_variant_t returnedValue;
		Com::Param param(4);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Map.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(XPath.c_str());
		param[2] = SelectionNamespace;
		param[3] = Repeating;
		Invoke(4, 2358, L"SetValue", param, returnedValue, DISPATCH_METHOD);
	}

	void XPath::SetValue(Excel::XmlMap& Map, wstring XPath)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Map.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(XPath.c_str());
		Invoke(2, 2358, L"SetValue", param, returnedValue, DISPATCH_METHOD);
	}

	wstring XPath::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring XPath::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________PivotLineCells
	PivotLineCells::PivotLineCells()
	{
	}

	PivotLineCells::~PivotLineCells()
	{
	}

	Excel::ApplicationX PivotLineCells::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotLineCells::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotLineCells::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool PivotLineCells::get_Full()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3097, L"Full", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::PivotCell PivotLineCells::get_Item(_variant_t Index)
	{
		Excel::PivotCell returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLineCells::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotCell PivotLineCells::get__Default(_variant_t Index)
	{
		Excel::PivotCell returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotLineCells::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________PivotLine
	PivotLine::PivotLine()
	{
	}

	PivotLine::~PivotLine()
	{
	}

	Excel::ApplicationX PivotLine::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PivotLine::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlPivotLineType PivotLine::get_LineType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2683, L"LineType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotLineType)returnedValue.iVal;
	}

	Com::Object PivotLine::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotLineCells PivotLine::get_PivotLineCells()
	{
		Excel::PivotLineCells returnedValue;
		Com::Param param;
		Invoke(0, 2684, L"PivotLineCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotLineCells PivotLine::get_PivotLineCellsFull()
	{
		Excel::PivotLineCells returnedValue;
		Com::Param param;
		Invoke(0, 3098, L"PivotLineCellsFull", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotLine::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________PivotLines
	PivotLines::PivotLines()
	{
	}

	PivotLines::~PivotLines()
	{
	}

	Excel::ApplicationX PivotLines::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotLines::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotLines::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotLine PivotLines::get_Item(_variant_t Index)
	{
		Excel::PivotLine returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotLines::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotLine PivotLines::get__Default(_variant_t Index)
	{
		Excel::PivotLine returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotLines::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________PivotAxis
	PivotAxis::PivotAxis()
	{
	}

	PivotAxis::~PivotAxis()
	{
	}

	Excel::ApplicationX PivotAxis::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PivotAxis::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object PivotAxis::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotLines PivotAxis::get_PivotLines()
	{
		Excel::PivotLines returnedValue;
		Com::Param param;
		Invoke(0, 2685, L"PivotLines", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________PivotFilter
	PivotFilter::PivotFilter()
	{
	}

	PivotFilter::~PivotFilter()
	{
	}

	bool PivotFilter::get_Active()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2312, L"Active", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::ApplicationX PivotFilter::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PivotFilter::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::CubeField PivotFilter::get_DataCubeField()
	{
		Excel::CubeField returnedValue;
		Com::Param param;
		Invoke(0, 2687, L"DataCubeField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotField PivotFilter::get_DataField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 2091, L"DataField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotFilter::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring PivotFilter::get_Description()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 218, L"Description", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlPivotFilterType PivotFilter::get_FilterType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2686, L"FilterType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotFilterType)returnedValue.iVal;
	}

	bool PivotFilter::get_IsMemberPropertyFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2690, L"IsMemberPropertyFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::PivotField PivotFilter::get_MemberPropertyField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 2689, L"MemberPropertyField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring PivotFilter::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long PivotFilter::get_Order()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void PivotFilter::put_Order(long Order)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Order;
		Invoke(1, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object PivotFilter::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotField PivotFilter::get_PivotField()
	{
		Excel::PivotField returnedValue;
		Com::Param param;
		Invoke(0, 731, L"PivotField", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotFilter::get_Value1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2688, L"Value1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t PivotFilter::get_Value2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1388, L"Value2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool PivotFilter::get_WholeDayFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3099, L"WholeDayFilter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void PivotFilter::put_WholeDayFilter(bool WholeDayFilter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (WholeDayFilter == true) ? 1 : 0;
		Invoke(1, 3099, L"WholeDayFilter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________PivotFilters
	PivotFilters::PivotFilters()
	{
	}

	PivotFilters::~PivotFilters()
	{
	}

	Excel::PivotFilter PivotFilters::Add(Excel::XlPivotFilterType Type, _variant_t DataField, _variant_t Value1, _variant_t Value2, _variant_t Order, _variant_t Name, _variant_t Description, _variant_t MemberPropertyField)
	{
		Excel::PivotFilter returnedValue;
		Com::Param param(8);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = DataField;
		param[2] = Value1;
		param[3] = Value2;
		param[4] = Order;
		param[5] = Name;
		param[6] = Description;
		param[7] = MemberPropertyField;
		Invoke(8, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotFilter PivotFilters::Add(Excel::XlPivotFilterType Type)
	{
		Excel::PivotFilter returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotFilter PivotFilters::Add2(Excel::XlPivotFilterType Type, _variant_t DataField, _variant_t Value1, _variant_t Value2, _variant_t Order, _variant_t Name, _variant_t Description, _variant_t MemberPropertyField, _variant_t WholeDayFilter)
	{
		Excel::PivotFilter returnedValue;
		Com::Param param(9);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1] = DataField;
		param[2] = Value1;
		param[3] = Value2;
		param[4] = Order;
		param[5] = Name;
		param[6] = Description;
		param[7] = MemberPropertyField;
		param[8] = WholeDayFilter;
		Invoke(9, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::PivotFilter PivotFilters::Add2(Excel::XlPivotFilterType Type)
	{
		Excel::PivotFilter returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX PivotFilters::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotFilters::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotFilters::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotFilter PivotFilters::get_Item(_variant_t Index)
	{
		Excel::PivotFilter returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotFilters::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotFilter PivotFilters::get__Default(_variant_t Index)
	{
		Excel::PivotFilter returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotFilters::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________WorkbookConnection
	WorkbookConnection::WorkbookConnection()
	{
	}

	WorkbookConnection::~WorkbookConnection()
	{
	}

	Excel::ApplicationX WorkbookConnection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator WorkbookConnection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::DataFeedConnection WorkbookConnection::get_DataFeedConnection()
	{
		Excel::DataFeedConnection returnedValue;
		Com::Param param;
		Invoke(0, 3104, L"DataFeedConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookConnection::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorkbookConnection::get_Description()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 218, L"Description", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookConnection::put_Description(wstring Description)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Description.c_str());
		Invoke(1, 218, L"Description", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorkbookConnection::get_InModel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3105, L"InModel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::ModelConnection WorkbookConnection::get_ModelConnection()
	{
		Excel::ModelConnection returnedValue;
		Com::Param param;
		Invoke(0, 3100, L"ModelConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTables WorkbookConnection::get_ModelTables()
	{
		Excel::ModelTables returnedValue;
		Com::Param param;
		Invoke(0, 3106, L"ModelTables", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookConnection::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookConnection::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ODBCConnection WorkbookConnection::get_ODBCConnection()
	{
		Excel::ODBCConnection returnedValue;
		Com::Param param;
		Invoke(0, 2698, L"ODBCConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::OLEDBConnection WorkbookConnection::get_OLEDBConnection()
	{
		Excel::OLEDBConnection returnedValue;
		Com::Param param;
		Invoke(0, 2697, L"OLEDBConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorkbookConnection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Ranges WorkbookConnection::get_Ranges()
	{
		Excel::Ranges returnedValue;
		Com::Param param;
		Invoke(0, 2699, L"Ranges", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorkbookConnection::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	bool WorkbookConnection::get_RefreshWithRefreshAll()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3102, L"RefreshWithRefreshAll", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorkbookConnection::put_RefreshWithRefreshAll(bool RefreshWithRefreshAll)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RefreshWithRefreshAll == true) ? 1 : 0;
		Invoke(1, 3102, L"RefreshWithRefreshAll", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::TextConnection WorkbookConnection::get_TextConnection()
	{
		Excel::TextConnection returnedValue;
		Com::Param param;
		Invoke(0, 3103, L"TextConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlConnectionType WorkbookConnection::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlConnectionType)returnedValue.iVal;
	}

	Excel::WorksheetDataConnection WorkbookConnection::get_WorksheetDataConnection()
	{
		Excel::WorksheetDataConnection returnedValue;
		Com::Param param;
		Invoke(0, 3101, L"WorksheetDataConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookConnection::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookConnection::put__Default(wstring _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_Default.c_str());
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Connections
	Connections::Connections()
	{
	}

	Connections::~Connections()
	{
	}

	Excel::WorkbookConnection Connections::Add(wstring Name, wstring Description, _variant_t ConnectionString, _variant_t CommandText, _variant_t lCmdtype)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Description.c_str());
		param[2] = ConnectionString;
		param[3] = CommandText;
		param[4] = lCmdtype;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookConnection Connections::Add(wstring Name, wstring Description, _variant_t ConnectionString, _variant_t CommandText)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Description.c_str());
		param[2] = ConnectionString;
		param[3] = CommandText;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookConnection Connections::Add2(wstring Name, wstring Description, _variant_t ConnectionString, _variant_t CommandText, _variant_t lCmdtype, _variant_t CreateModelConnection, _variant_t ImportRelationships)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(7);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Description.c_str());
		param[2] = ConnectionString;
		param[3] = CommandText;
		param[4] = lCmdtype;
		param[5] = CreateModelConnection;
		param[6] = ImportRelationships;
		Invoke(7, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookConnection Connections::Add2(wstring Name, wstring Description, _variant_t ConnectionString, _variant_t CommandText)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Description.c_str());
		param[2] = ConnectionString;
		param[3] = CommandText;
		Invoke(4, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookConnection Connections::AddFromFile(wstring Filename, _variant_t CreateModelConnection, _variant_t ImportRelationships)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = CreateModelConnection;
		param[2] = ImportRelationships;
		Invoke(3, 3107, L"AddFromFile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookConnection Connections::AddFromFile(wstring Filename)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 3107, L"AddFromFile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Connections::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Connections::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Connections::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::WorkbookConnection Connections::Item(_variant_t Index)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Connections::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookConnection Connections::_AddFromFile(wstring Filename)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 2700, L"_AddFromFile", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookConnection Connections::get__Default(_variant_t Index)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Connections::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________WorksheetView
	WorksheetView::WorksheetView()
	{
	}

	WorksheetView::~WorksheetView()
	{
	}

	Excel::ApplicationX WorksheetView::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator WorksheetView::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool WorksheetView::get_DisplayFormulas()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 644, L"DisplayFormulas", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetView::put_DisplayFormulas(bool DisplayFormulas)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayFormulas == true) ? 1 : 0;
		Invoke(1, 644, L"DisplayFormulas", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetView::get_DisplayGridlines()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 645, L"DisplayGridlines", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetView::put_DisplayGridlines(bool DisplayGridlines)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayGridlines == true) ? 1 : 0;
		Invoke(1, 645, L"DisplayGridlines", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetView::get_DisplayHeadings()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 646, L"DisplayHeadings", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetView::put_DisplayHeadings(bool DisplayHeadings)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayHeadings == true) ? 1 : 0;
		Invoke(1, 646, L"DisplayHeadings", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetView::get_DisplayOutline()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 647, L"DisplayOutline", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetView::put_DisplayOutline(bool DisplayOutline)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayOutline == true) ? 1 : 0;
		Invoke(1, 647, L"DisplayOutline", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool WorksheetView::get_DisplayZeros()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 649, L"DisplayZeros", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void WorksheetView::put_DisplayZeros(bool DisplayZeros)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayZeros == true) ? 1 : 0;
		Invoke(1, 649, L"DisplayZeros", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorksheetView::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object WorksheetView::get_Sheet()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 751, L"Sheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ChartView
	ChartView::ChartView()
	{
	}

	ChartView::~ChartView()
	{
	}

	Excel::ApplicationX ChartView::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ChartView::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ChartView::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartView::get_Sheet()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 751, L"Sheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ModuleView
	ModuleView::ModuleView()
	{
	}

	ModuleView::~ModuleView()
	{
	}

	Excel::ApplicationX ModuleView::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModuleView::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ModuleView::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ModuleView::get_Sheet()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 751, L"Sheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________DialogSheetView
	DialogSheetView::DialogSheetView()
	{
	}

	DialogSheetView::~DialogSheetView()
	{
	}

	Excel::ApplicationX DialogSheetView::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator DialogSheetView::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object DialogSheetView::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DialogSheetView::get_Sheet()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 751, L"Sheet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________SheetViews
	SheetViews::SheetViews()
	{
	}

	SheetViews::~SheetViews()
	{
	}

	Excel::ApplicationX SheetViews::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SheetViews::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SheetViews::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object SheetViews::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SheetViews::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SheetViews::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SheetViews::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________OLEDBConnection
	OLEDBConnection::OLEDBConnection()
	{
	}

	OLEDBConnection::~OLEDBConnection()
	{
	}

	Com::Object OLEDBConnection::get_ADOConnection()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2074, L"ADOConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool OLEDBConnection::get_AlwaysUseConnectionFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2706, L"AlwaysUseConnectionFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_AlwaysUseConnectionFile(bool AlwaysUseConnectionFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AlwaysUseConnectionFile == true) ? 1 : 0;
		Invoke(1, 2706, L"AlwaysUseConnectionFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX OLEDBConnection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool OLEDBConnection::get_BackgroundQuery()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1427, L"BackgroundQuery", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_BackgroundQuery(bool BackgroundQuery)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BackgroundQuery == true) ? 1 : 0;
		Invoke(1, 1427, L"BackgroundQuery", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::CalculatedMembers OLEDBConnection::get_CalculatedMembers()
	{
		Excel::CalculatedMembers returnedValue;
		Com::Param param;
		Invoke(0, 2125, L"CalculatedMembers", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OLEDBConnection::CancelRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1589, L"CancelRefresh", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t OLEDBConnection::get_CommandText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OLEDBConnection::put_CommandText(_variant_t CommandText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CommandText;
		Invoke(1, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCmdType OLEDBConnection::get_CommandType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCmdType)returnedValue.iVal;
	}

	void OLEDBConnection::put_CommandType(Excel::XlCmdType CommandType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CommandType;
		Invoke(1, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t OLEDBConnection::get_Connection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OLEDBConnection::put_Connection(_variant_t Connection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Connection;
		Invoke(1, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator OLEDBConnection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool OLEDBConnection::get_EnableRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_EnableRefresh(bool EnableRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableRefresh == true) ? 1 : 0;
		Invoke(1, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_IsConnected()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2075, L"IsConnected", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	_variant_t OLEDBConnection::get_LocalConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1835, L"LocalConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OLEDBConnection::put_LocalConnection(_variant_t LocalConnection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = LocalConnection;
		Invoke(1, 1835, L"LocalConnection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long OLEDBConnection::get_LocaleID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2940, L"LocaleID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void OLEDBConnection::put_LocaleID(long LocaleID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = LocaleID;
		Invoke(1, 2940, L"LocaleID", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_MaintainConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1832, L"MaintainConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_MaintainConnection(bool MaintainConnection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MaintainConnection == true) ? 1 : 0;
		Invoke(1, 1832, L"MaintainConnection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void OLEDBConnection::MakeConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2076, L"MakeConnection", param, returnedValue, DISPATCH_METHOD);
	}

	long OLEDBConnection::get_MaxDrillthroughRecords()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2703, L"MaxDrillthroughRecords", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void OLEDBConnection::put_MaxDrillthroughRecords(long MaxDrillthroughRecords)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = MaxDrillthroughRecords;
		Invoke(1, 2703, L"MaxDrillthroughRecords", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_OLAP()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2077, L"OLAP", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object OLEDBConnection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void OLEDBConnection::Reconnect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2939, L"Reconnect", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEDBConnection::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	Sys::Time OLEDBConnection::get_RefreshDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 696, L"RefreshDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return Sys::Convert::VariantToTime(returnedValue);
	}

	bool OLEDBConnection::get_RefreshOnFileOpen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_RefreshOnFileOpen(bool RefreshOnFileOpen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RefreshOnFileOpen == true) ? 1 : 0;
		Invoke(1, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long OLEDBConnection::get_RefreshPeriod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void OLEDBConnection::put_RefreshPeriod(long RefreshPeriod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = RefreshPeriod;
		Invoke(1, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_Refreshing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1587, L"Refreshing", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	bool OLEDBConnection::get_RetrieveInOfficeUILang()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2711, L"RetrieveInOfficeUILang", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_RetrieveInOfficeUILang(bool RetrieveInOfficeUILang)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RetrieveInOfficeUILang == true) ? 1 : 0;
		Invoke(1, 2711, L"RetrieveInOfficeUILang", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlRobustConnect OLEDBConnection::get_RobustConnect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2081, L"RobustConnect", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlRobustConnect)returnedValue.iVal;
	}

	void OLEDBConnection::put_RobustConnect(Excel::XlRobustConnect RobustConnect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RobustConnect;
		Invoke(1, 2081, L"RobustConnect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void OLEDBConnection::SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		param[1] = Description;
		param[2] = Keywords;
		Invoke(3, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	void OLEDBConnection::SaveAsODC(wstring ODCFileName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		Invoke(1, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	bool OLEDBConnection::get_SavePassword()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_SavePassword(bool SavePassword)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SavePassword == true) ? 1 : 0;
		Invoke(1, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCredentialsMethod OLEDBConnection::get_ServerCredentialsMethod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2704, L"ServerCredentialsMethod", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCredentialsMethod)returnedValue.iVal;
	}

	void OLEDBConnection::put_ServerCredentialsMethod(Excel::XlCredentialsMethod ServerCredentialsMethod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ServerCredentialsMethod;
		Invoke(1, 2704, L"ServerCredentialsMethod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_ServerFillColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2707, L"ServerFillColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_ServerFillColor(bool ServerFillColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ServerFillColor == true) ? 1 : 0;
		Invoke(1, 2707, L"ServerFillColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_ServerFontStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2708, L"ServerFontStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_ServerFontStyle(bool ServerFontStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ServerFontStyle == true) ? 1 : 0;
		Invoke(1, 2708, L"ServerFontStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_ServerNumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2709, L"ServerNumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_ServerNumberFormat(bool ServerNumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ServerNumberFormat == true) ? 1 : 0;
		Invoke(1, 2709, L"ServerNumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OLEDBConnection::get_ServerSSOApplicationID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2705, L"ServerSSOApplicationID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEDBConnection::put_ServerSSOApplicationID(wstring ServerSSOApplicationID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ServerSSOApplicationID.c_str());
		Invoke(1, 2705, L"ServerSSOApplicationID", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_ServerTextColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2710, L"ServerTextColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_ServerTextColor(bool ServerTextColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ServerTextColor == true) ? 1 : 0;
		Invoke(1, 2710, L"ServerTextColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OLEDBConnection::get_SourceConnectionFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEDBConnection::put_SourceConnectionFile(wstring SourceConnectionFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceConnectionFile.c_str());
		Invoke(1, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring OLEDBConnection::get_SourceDataFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void OLEDBConnection::put_SourceDataFile(wstring SourceDataFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceDataFile.c_str());
		Invoke(1, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool OLEDBConnection::get_UseLocalConnection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1837, L"UseLocalConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void OLEDBConnection::put_UseLocalConnection(bool UseLocalConnection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseLocalConnection == true) ? 1 : 0;
		Invoke(1, 1837, L"UseLocalConnection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ODBCConnection
	ODBCConnection::ODBCConnection()
	{
	}

	ODBCConnection::~ODBCConnection()
	{
	}

	bool ODBCConnection::get_AlwaysUseConnectionFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2706, L"AlwaysUseConnectionFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ODBCConnection::put_AlwaysUseConnectionFile(bool AlwaysUseConnectionFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AlwaysUseConnectionFile == true) ? 1 : 0;
		Invoke(1, 2706, L"AlwaysUseConnectionFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX ODBCConnection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ODBCConnection::get_BackgroundQuery()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1427, L"BackgroundQuery", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ODBCConnection::put_BackgroundQuery(bool BackgroundQuery)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (BackgroundQuery == true) ? 1 : 0;
		Invoke(1, 1427, L"BackgroundQuery", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ODBCConnection::CancelRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1589, L"CancelRefresh", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t ODBCConnection::get_CommandText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ODBCConnection::put_CommandText(_variant_t CommandText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CommandText;
		Invoke(1, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCmdType ODBCConnection::get_CommandType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCmdType)returnedValue.iVal;
	}

	void ODBCConnection::put_CommandType(Excel::XlCmdType CommandType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CommandType;
		Invoke(1, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ODBCConnection::get_Connection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ODBCConnection::put_Connection(_variant_t Connection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Connection;
		Invoke(1, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator ODBCConnection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool ODBCConnection::get_EnableRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ODBCConnection::put_EnableRefresh(bool EnableRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableRefresh == true) ? 1 : 0;
		Invoke(1, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ODBCConnection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ODBCConnection::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	Sys::Time ODBCConnection::get_RefreshDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 696, L"RefreshDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return Sys::Convert::VariantToTime(returnedValue);
	}

	bool ODBCConnection::get_RefreshOnFileOpen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ODBCConnection::put_RefreshOnFileOpen(bool RefreshOnFileOpen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RefreshOnFileOpen == true) ? 1 : 0;
		Invoke(1, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ODBCConnection::get_RefreshPeriod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ODBCConnection::put_RefreshPeriod(long RefreshPeriod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = RefreshPeriod;
		Invoke(1, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ODBCConnection::get_Refreshing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1587, L"Refreshing", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlRobustConnect ODBCConnection::get_RobustConnect()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2081, L"RobustConnect", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlRobustConnect)returnedValue.iVal;
	}

	void ODBCConnection::put_RobustConnect(Excel::XlRobustConnect RobustConnect)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RobustConnect;
		Invoke(1, 2081, L"RobustConnect", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ODBCConnection::SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		param[1] = Description;
		param[2] = Keywords;
		Invoke(3, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	void ODBCConnection::SaveAsODC(wstring ODCFileName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		Invoke(1, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	bool ODBCConnection::get_SavePassword()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ODBCConnection::put_SavePassword(bool SavePassword)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SavePassword == true) ? 1 : 0;
		Invoke(1, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCredentialsMethod ODBCConnection::get_ServerCredentialsMethod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2704, L"ServerCredentialsMethod", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCredentialsMethod)returnedValue.iVal;
	}

	void ODBCConnection::put_ServerCredentialsMethod(Excel::XlCredentialsMethod ServerCredentialsMethod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ServerCredentialsMethod;
		Invoke(1, 2704, L"ServerCredentialsMethod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ODBCConnection::get_ServerSSOApplicationID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2705, L"ServerSSOApplicationID", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ODBCConnection::put_ServerSSOApplicationID(wstring ServerSSOApplicationID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ServerSSOApplicationID.c_str());
		Invoke(1, 2705, L"ServerSSOApplicationID", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ODBCConnection::get_SourceConnectionFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ODBCConnection::put_SourceConnectionFile(wstring SourceConnectionFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceConnectionFile.c_str());
		Invoke(1, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ODBCConnection::get_SourceData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ODBCConnection::put_SourceData(_variant_t SourceData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = SourceData;
		Invoke(1, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ODBCConnection::get_SourceDataFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ODBCConnection::put_SourceDataFile(wstring SourceDataFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceDataFile.c_str());
		Invoke(1, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Action
	Action::Action()
	{
	}

	Action::~Action()
	{
	}

	Excel::ApplicationX Action::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Action::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Action::get_Content()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2713, L"Content", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring Action::get_Coordinate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2712, L"Coordinate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlCreator Action::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Action::Execute()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2211, L"Execute", param, returnedValue, DISPATCH_METHOD);
	}

	wstring Action::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Action::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlActionType Action::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlActionType)returnedValue.iVal;
	}

	//________________________________________________________Actions
	Actions::Actions()
	{
	}

	Actions::~Actions()
	{
	}

	Excel::ApplicationX Actions::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Actions::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Actions::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Action Actions::get_Item(_variant_t Index)
	{
		Excel::Action returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Actions::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Action Actions::get__Default(_variant_t Index)
	{
		Excel::Action returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Actions::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________FormatColor
	FormatColor::FormatColor()
	{
	}

	FormatColor::~FormatColor()
	{
	}

	Excel::ApplicationX FormatColor::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t FormatColor::get_Color()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void FormatColor::put_Color(_variant_t Color)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Color;
		Invoke(1, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlColorIndex FormatColor::get_ColorIndex()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlColorIndex)returnedValue.iVal;
	}

	void FormatColor::put_ColorIndex(Excel::XlColorIndex ColorIndex)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ColorIndex;
		Invoke(1, 97, L"ColorIndex", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator FormatColor::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object FormatColor::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t FormatColor::get_ThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void FormatColor::put_ThemeColor(_variant_t ThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = ThemeColor;
		Invoke(1, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t FormatColor::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void FormatColor::put_TintAndShade(_variant_t TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TintAndShade;
		Invoke(1, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ConditionValue
	ConditionValue::ConditionValue()
	{
	}

	ConditionValue::~ConditionValue()
	{
	}

	Excel::ApplicationX ConditionValue::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ConditionValue::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ConditionValue::Modify(Excel::XlConditionValueTypes newtype, _variant_t newvalue)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = newtype;
		param[1] = newvalue;
		Invoke(2, 1581, L"Modify", param, returnedValue, DISPATCH_METHOD);
	}

	void ConditionValue::Modify(Excel::XlConditionValueTypes newtype)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = newtype;
		Invoke(1, 1581, L"Modify", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ConditionValue::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlConditionValueTypes ConditionValue::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlConditionValueTypes)returnedValue.iVal;
	}

	_variant_t ConditionValue::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ColorScale
	ColorScale::ColorScale()
	{
	}

	ColorScale::~ColorScale()
	{
	}

	Excel::ApplicationX ColorScale::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range ColorScale::get_AppliesTo()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2626, L"AppliesTo", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ColorScaleCriteria ColorScale::get_ColorScaleCriteria()
	{
		Excel::ColorScaleCriteria returnedValue;
		Com::Param param;
		Invoke(0, 2716, L"ColorScaleCriteria", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ColorScale::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ColorScale::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ColorScale::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ColorScale::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ColorScale::ModifyAppliesToRange(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 2627, L"ModifyAppliesToRange", param, returnedValue, DISPATCH_METHOD);
	}

	bool ColorScale::get_PTCondition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2631, L"PTCondition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object ColorScale::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ColorScale::get_Priority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ColorScale::put_Priority(long Priority)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Priority;
		Invoke(1, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotConditionScope ColorScale::get_ScopeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotConditionScope)returnedValue.iVal;
	}

	void ColorScale::put_ScopeType(Excel::XlPivotConditionScope ScopeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScopeType;
		Invoke(1, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void ColorScale::SetFirstPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2629, L"SetFirstPriority", param, returnedValue, DISPATCH_METHOD);
	}

	void ColorScale::SetLastPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2630, L"SetLastPriority", param, returnedValue, DISPATCH_METHOD);
	}

	bool ColorScale::get_StopIfTrue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long ColorScale::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________ColorScaleCriteria
	ColorScaleCriteria::ColorScaleCriteria()
	{
	}

	ColorScaleCriteria::~ColorScaleCriteria()
	{
	}

	long ColorScaleCriteria::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::ColorScaleCriterion ColorScaleCriteria::get_Item(_variant_t Index)
	{
		Excel::ColorScaleCriterion returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ColorScaleCriterion ColorScaleCriteria::get__Default(_variant_t Index)
	{
		Excel::ColorScaleCriterion returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ColorScaleCriteria::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ColorScaleCriterion
	ColorScaleCriterion::ColorScaleCriterion()
	{
	}

	ColorScaleCriterion::~ColorScaleCriterion()
	{
	}

	Excel::FormatColor ColorScaleCriterion::get_FormatColor()
	{
		Excel::FormatColor returnedValue;
		Com::Param param;
		Invoke(0, 2717, L"FormatColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ColorScaleCriterion::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlConditionValueTypes ColorScaleCriterion::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlConditionValueTypes)returnedValue.iVal;
	}

	void ColorScaleCriterion::put_Type(Excel::XlConditionValueTypes Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ColorScaleCriterion::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ColorScaleCriterion::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Databar
	Databar::Databar()
	{
	}

	Databar::~Databar()
	{
	}

	Excel::ApplicationX Databar::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Databar::get_AppliesTo()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2626, L"AppliesTo", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Databar::get_AxisColor()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2943, L"AxisColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlDataBarAxisPosition Databar::get_AxisPosition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2942, L"AxisPosition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDataBarAxisPosition)returnedValue.iVal;
	}

	void Databar::put_AxisPosition(Excel::XlDataBarAxisPosition AxisPosition)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AxisPosition;
		Invoke(1, 2942, L"AxisPosition", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::DataBarBorder Databar::get_BarBorder()
	{
		Excel::DataBarBorder returnedValue;
		Com::Param param;
		Invoke(0, 2944, L"BarBorder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Databar::get_BarColor()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2722, L"BarColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlDataBarFillType Databar::get_BarFillType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2941, L"BarFillType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDataBarFillType)returnedValue.iVal;
	}

	void Databar::put_BarFillType(Excel::XlDataBarFillType BarFillType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BarFillType;
		Invoke(1, 2941, L"BarFillType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Databar::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Databar::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long Databar::get_Direction()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 168, L"Direction", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Databar::put_Direction(long Direction)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Direction;
		Invoke(1, 168, L"Direction", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Databar::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Databar::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ConditionValue Databar::get_MaxPoint()
	{
		Excel::ConditionValue returnedValue;
		Com::Param param;
		Invoke(0, 2719, L"MaxPoint", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ConditionValue Databar::get_MinPoint()
	{
		Excel::ConditionValue returnedValue;
		Com::Param param;
		Invoke(0, 2718, L"MinPoint", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Databar::ModifyAppliesToRange(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 2627, L"ModifyAppliesToRange", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::NegativeBarFormat Databar::get_NegativeBarFormat()
	{
		Excel::NegativeBarFormat returnedValue;
		Com::Param param;
		Invoke(0, 2945, L"NegativeBarFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Databar::get_PTCondition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2631, L"PTCondition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object Databar::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Databar::get_PercentMax()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2721, L"PercentMax", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Databar::put_PercentMax(long PercentMax)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PercentMax;
		Invoke(1, 2721, L"PercentMax", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Databar::get_PercentMin()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2720, L"PercentMin", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Databar::put_PercentMin(long PercentMin)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PercentMin;
		Invoke(1, 2720, L"PercentMin", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Databar::get_Priority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Databar::put_Priority(long Priority)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Priority;
		Invoke(1, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotConditionScope Databar::get_ScopeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotConditionScope)returnedValue.iVal;
	}

	void Databar::put_ScopeType(Excel::XlPivotConditionScope ScopeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScopeType;
		Invoke(1, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Databar::SetFirstPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2629, L"SetFirstPriority", param, returnedValue, DISPATCH_METHOD);
	}

	void Databar::SetLastPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2630, L"SetLastPriority", param, returnedValue, DISPATCH_METHOD);
	}

	bool Databar::get_ShowValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2024, L"ShowValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Databar::put_ShowValue(bool ShowValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowValue == true) ? 1 : 0;
		Invoke(1, 2024, L"ShowValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Databar::get_StopIfTrue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long Databar::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________IconSetCondition
	IconSetCondition::IconSetCondition()
	{
	}

	IconSetCondition::~IconSetCondition()
	{
	}

	Excel::ApplicationX IconSetCondition::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range IconSetCondition::get_AppliesTo()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2626, L"AppliesTo", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator IconSetCondition::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void IconSetCondition::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring IconSetCondition::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void IconSetCondition::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::IconCriteria IconSetCondition::get_IconCriteria()
	{
		Excel::IconCriteria returnedValue;
		Com::Param param;
		Invoke(0, 2727, L"IconCriteria", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t IconSetCondition::get_IconSet()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2726, L"IconSet", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void IconSetCondition::put_IconSet(_variant_t IconSet)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = IconSet;
		Invoke(1, 2726, L"IconSet", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void IconSetCondition::ModifyAppliesToRange(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 2627, L"ModifyAppliesToRange", param, returnedValue, DISPATCH_METHOD);
	}

	bool IconSetCondition::get_PTCondition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2631, L"PTCondition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object IconSetCondition::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool IconSetCondition::get_PercentileValues()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2724, L"PercentileValues", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void IconSetCondition::put_PercentileValues(bool PercentileValues)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PercentileValues == true) ? 1 : 0;
		Invoke(1, 2724, L"PercentileValues", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long IconSetCondition::get_Priority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void IconSetCondition::put_Priority(long Priority)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Priority;
		Invoke(1, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool IconSetCondition::get_ReverseOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2723, L"ReverseOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void IconSetCondition::put_ReverseOrder(bool ReverseOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ReverseOrder == true) ? 1 : 0;
		Invoke(1, 2723, L"ReverseOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotConditionScope IconSetCondition::get_ScopeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotConditionScope)returnedValue.iVal;
	}

	void IconSetCondition::put_ScopeType(Excel::XlPivotConditionScope ScopeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScopeType;
		Invoke(1, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void IconSetCondition::SetFirstPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2629, L"SetFirstPriority", param, returnedValue, DISPATCH_METHOD);
	}

	void IconSetCondition::SetLastPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2630, L"SetLastPriority", param, returnedValue, DISPATCH_METHOD);
	}

	bool IconSetCondition::get_ShowIconOnly()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2725, L"ShowIconOnly", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void IconSetCondition::put_ShowIconOnly(bool ShowIconOnly)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowIconOnly == true) ? 1 : 0;
		Invoke(1, 2725, L"ShowIconOnly", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool IconSetCondition::get_StopIfTrue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long IconSetCondition::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________IconCriteria
	IconCriteria::IconCriteria()
	{
	}

	IconCriteria::~IconCriteria()
	{
	}

	long IconCriteria::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::IconCriterion IconCriteria::get_Item(_variant_t Index)
	{
		Excel::IconCriterion returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::IconCriterion IconCriteria::get__Default(_variant_t Index)
	{
		Excel::IconCriterion returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr IconCriteria::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________IconCriterion
	IconCriterion::IconCriterion()
	{
	}

	IconCriterion::~IconCriterion()
	{
	}

	Excel::XlIcon IconCriterion::get_Icon()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2747, L"Icon", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlIcon)returnedValue.iVal;
	}

	void IconCriterion::put_Icon(Excel::XlIcon Icon)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Icon;
		Invoke(1, 2747, L"Icon", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long IconCriterion::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	long IconCriterion::get_Operator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 797, L"Operator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void IconCriterion::put_Operator(long Operator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Operator;
		Invoke(1, 797, L"Operator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlConditionValueTypes IconCriterion::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlConditionValueTypes)returnedValue.iVal;
	}

	void IconCriterion::put_Type(Excel::XlConditionValueTypes Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t IconCriterion::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void IconCriterion::put_Value(_variant_t Value)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Value;
		Invoke(1, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Icon
	Icon::Icon()
	{
	}

	Icon::~Icon()
	{
	}

	Excel::ApplicationX Icon::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Icon::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long Icon::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::IconSet Icon::get_Parent()
	{
		Excel::IconSet returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________IconSet
	IconSet::IconSet()
	{
	}

	IconSet::~IconSet()
	{
	}

	Excel::ApplicationX IconSet::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long IconSet::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator IconSet::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlIconSet IconSet::get_ID()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 570, L"ID", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlIconSet)returnedValue.iVal;
	}

	Excel::Icon IconSet::get_Item(_variant_t Index)
	{
		Excel::Icon returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object IconSet::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Icon IconSet::get__Default(_variant_t Index)
	{
		Excel::Icon returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr IconSet::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________IconSets
	IconSets::IconSets()
	{
	}

	IconSets::~IconSets()
	{
	}

	Excel::ApplicationX IconSets::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long IconSets::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator IconSets::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object IconSets::get_Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object IconSets::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object IconSets::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr IconSets::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Top10
	Top10::Top10()
	{
	}

	Top10::~Top10()
	{
	}

	Excel::ApplicationX Top10::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Top10::get_AppliesTo()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2626, L"AppliesTo", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Borders Top10::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCalcFor Top10::get_CalcFor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2730, L"CalcFor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCalcFor)returnedValue.iVal;
	}

	void Top10::put_CalcFor(Excel::XlCalcFor CalcFor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CalcFor;
		Invoke(1, 2730, L"CalcFor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator Top10::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Top10::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Font Top10::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Interior Top10::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Top10::ModifyAppliesToRange(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 2627, L"ModifyAppliesToRange", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t Top10::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Top10::put_NumberFormat(_variant_t NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormat;
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Top10::get_PTCondition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2631, L"PTCondition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object Top10::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool Top10::get_Percent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2729, L"Percent", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Top10::put_Percent(bool Percent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Percent == true) ? 1 : 0;
		Invoke(1, 2729, L"Percent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Top10::get_Priority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Top10::put_Priority(long Priority)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Priority;
		Invoke(1, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Top10::get_Rank()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1290, L"Rank", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Top10::put_Rank(long Rank)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Rank;
		Invoke(1, 1290, L"Rank", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotConditionScope Top10::get_ScopeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotConditionScope)returnedValue.iVal;
	}

	void Top10::put_ScopeType(Excel::XlPivotConditionScope ScopeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScopeType;
		Invoke(1, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Top10::SetFirstPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2629, L"SetFirstPriority", param, returnedValue, DISPATCH_METHOD);
	}

	void Top10::SetLastPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2630, L"SetLastPriority", param, returnedValue, DISPATCH_METHOD);
	}

	bool Top10::get_StopIfTrue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Top10::put_StopIfTrue(bool StopIfTrue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (StopIfTrue == true) ? 1 : 0;
		Invoke(1, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTopBottom Top10::get_TopBottom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2728, L"TopBottom", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTopBottom)returnedValue.iVal;
	}

	void Top10::put_TopBottom(Excel::XlTopBottom TopBottom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TopBottom;
		Invoke(1, 2728, L"TopBottom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Top10::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________AboveAverage
	AboveAverage::AboveAverage()
	{
	}

	AboveAverage::~AboveAverage()
	{
	}

	Excel::XlAboveBelow AboveAverage::get_AboveBelow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2731, L"AboveBelow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAboveBelow)returnedValue.iVal;
	}

	void AboveAverage::put_AboveBelow(Excel::XlAboveBelow AboveBelow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AboveBelow;
		Invoke(1, 2731, L"AboveBelow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX AboveAverage::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range AboveAverage::get_AppliesTo()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2626, L"AppliesTo", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Borders AboveAverage::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCalcFor AboveAverage::get_CalcFor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2730, L"CalcFor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCalcFor)returnedValue.iVal;
	}

	void AboveAverage::put_CalcFor(Excel::XlCalcFor CalcFor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CalcFor;
		Invoke(1, 2730, L"CalcFor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator AboveAverage::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void AboveAverage::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Font AboveAverage::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Interior AboveAverage::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AboveAverage::ModifyAppliesToRange(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 2627, L"ModifyAppliesToRange", param, returnedValue, DISPATCH_METHOD);
	}

	long AboveAverage::get_NumStdDev()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2732, L"NumStdDev", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void AboveAverage::put_NumStdDev(long NumStdDev)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = NumStdDev;
		Invoke(1, 2732, L"NumStdDev", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t AboveAverage::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void AboveAverage::put_NumberFormat(_variant_t NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormat;
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool AboveAverage::get_PTCondition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2631, L"PTCondition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object AboveAverage::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long AboveAverage::get_Priority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void AboveAverage::put_Priority(long Priority)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Priority;
		Invoke(1, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotConditionScope AboveAverage::get_ScopeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotConditionScope)returnedValue.iVal;
	}

	void AboveAverage::put_ScopeType(Excel::XlPivotConditionScope ScopeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScopeType;
		Invoke(1, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void AboveAverage::SetFirstPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2629, L"SetFirstPriority", param, returnedValue, DISPATCH_METHOD);
	}

	void AboveAverage::SetLastPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2630, L"SetLastPriority", param, returnedValue, DISPATCH_METHOD);
	}

	bool AboveAverage::get_StopIfTrue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void AboveAverage::put_StopIfTrue(bool StopIfTrue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (StopIfTrue == true) ? 1 : 0;
		Invoke(1, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long AboveAverage::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________UniqueValues
	UniqueValues::UniqueValues()
	{
	}

	UniqueValues::~UniqueValues()
	{
	}

	Excel::ApplicationX UniqueValues::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range UniqueValues::get_AppliesTo()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2626, L"AppliesTo", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Borders UniqueValues::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator UniqueValues::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void UniqueValues::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlDupeUnique UniqueValues::get_DupeUnique()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2733, L"DupeUnique", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDupeUnique)returnedValue.iVal;
	}

	void UniqueValues::put_DupeUnique(Excel::XlDupeUnique DupeUnique)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DupeUnique;
		Invoke(1, 2733, L"DupeUnique", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Font UniqueValues::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Interior UniqueValues::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void UniqueValues::ModifyAppliesToRange(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 2627, L"ModifyAppliesToRange", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t UniqueValues::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void UniqueValues::put_NumberFormat(_variant_t NumberFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = NumberFormat;
		Invoke(1, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool UniqueValues::get_PTCondition()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2631, L"PTCondition", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object UniqueValues::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long UniqueValues::get_Priority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void UniqueValues::put_Priority(long Priority)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Priority;
		Invoke(1, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotConditionScope UniqueValues::get_ScopeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotConditionScope)returnedValue.iVal;
	}

	void UniqueValues::put_ScopeType(Excel::XlPivotConditionScope ScopeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ScopeType;
		Invoke(1, 2615, L"ScopeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void UniqueValues::SetFirstPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2629, L"SetFirstPriority", param, returnedValue, DISPATCH_METHOD);
	}

	void UniqueValues::SetLastPriority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2630, L"SetLastPriority", param, returnedValue, DISPATCH_METHOD);
	}

	bool UniqueValues::get_StopIfTrue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void UniqueValues::put_StopIfTrue(bool StopIfTrue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (StopIfTrue == true) ? 1 : 0;
		Invoke(1, 2625, L"StopIfTrue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long UniqueValues::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	//________________________________________________________Ranges
	Ranges::Ranges()
	{
	}

	Ranges::~Ranges()
	{
	}

	Excel::ApplicationX Ranges::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Ranges::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Ranges::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Range Ranges::get_Item(_variant_t Index)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Ranges::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Ranges::get__Default(_variant_t Index)
	{
		Excel::Range returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Ranges::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________HeaderFooter
	HeaderFooter::HeaderFooter()
	{
	}

	HeaderFooter::~HeaderFooter()
	{
	}

	Excel::Graphic HeaderFooter::get_Picture()
	{
		Excel::Graphic returnedValue;
		Com::Param param;
		Invoke(0, 479, L"Picture", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring HeaderFooter::get_Text()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void HeaderFooter::put_Text(wstring Text)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Text.c_str());
		Invoke(1, 138, L"Text", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Page
	Page::Page()
	{
	}

	Page::~Page()
	{
	}

	Excel::HeaderFooter Page::get_CenterFooter()
	{
		Excel::HeaderFooter returnedValue;
		Com::Param param;
		Invoke(0, 1010, L"CenterFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::HeaderFooter Page::get_CenterHeader()
	{
		Excel::HeaderFooter returnedValue;
		Com::Param param;
		Invoke(0, 1011, L"CenterHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::HeaderFooter Page::get_LeftFooter()
	{
		Excel::HeaderFooter returnedValue;
		Com::Param param;
		Invoke(0, 1017, L"LeftFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::HeaderFooter Page::get_LeftHeader()
	{
		Excel::HeaderFooter returnedValue;
		Com::Param param;
		Invoke(0, 1018, L"LeftHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::HeaderFooter Page::get_RightFooter()
	{
		Excel::HeaderFooter returnedValue;
		Com::Param param;
		Invoke(0, 1025, L"RightFooter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::HeaderFooter Page::get_RightHeader()
	{
		Excel::HeaderFooter returnedValue;
		Com::Param param;
		Invoke(0, 1026, L"RightHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Pages
	Pages::Pages()
	{
	}

	Pages::~Pages()
	{
	}

	long Pages::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::Page Pages::get_Item(_variant_t Index)
	{
		Excel::Page returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Page Pages::get__Default(_variant_t Index)
	{
		Excel::Page returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Pages::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ServerViewableItems
	ServerViewableItems::ServerViewableItems()
	{
	}

	ServerViewableItems::~ServerViewableItems()
	{
	}

	Com::Object ServerViewableItems::Add(_variant_t Obj)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Obj;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ServerViewableItems::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ServerViewableItems::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ServerViewableItems::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ServerViewableItems::Delete(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	void ServerViewableItems::DeleteAll()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2239, L"DeleteAll", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ServerViewableItems::Item(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ServerViewableItems::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ServerViewableItems::get__Default(_variant_t Index)
	{
		Com::Object returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ServerViewableItems::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________TableStyleElement
	TableStyleElement::TableStyleElement()
	{
	}

	TableStyleElement::~TableStyleElement()
	{
	}

	Excel::ApplicationX TableStyleElement::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Borders TableStyleElement::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TableStyleElement::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator TableStyleElement::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Font TableStyleElement::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TableStyleElement::get_HasFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2735, L"HasFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::Interior TableStyleElement::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object TableStyleElement::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long TableStyleElement::get_StripeSize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2736, L"StripeSize", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TableStyleElement::put_StripeSize(long StripeSize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = StripeSize;
		Invoke(1, 2736, L"StripeSize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________TableStyleElements
	TableStyleElements::TableStyleElements()
	{
	}

	TableStyleElements::~TableStyleElements()
	{
	}

	Excel::ApplicationX TableStyleElements::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long TableStyleElements::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator TableStyleElements::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::TableStyleElement TableStyleElements::Item(Excel::XlTableStyleElementType Index)
	{
		Excel::TableStyleElement returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object TableStyleElements::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TableStyleElement TableStyleElements::get__Default(Excel::XlTableStyleElementType Index)
	{
		Excel::TableStyleElement returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr TableStyleElements::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________TableStyle
	TableStyle::TableStyle()
	{
	}

	TableStyle::~TableStyle()
	{
	}

	Excel::ApplicationX TableStyle::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TableStyle::get_BuiltIn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 553, L"BuiltIn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlCreator TableStyle::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void TableStyle::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::TableStyle TableStyle::Duplicate(_variant_t NewTableStyleName)
	{
		Excel::TableStyle returnedValue;
		Com::Param param(1);
		param[0] = NewTableStyleName;
		Invoke(1, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::TableStyle TableStyle::Duplicate()
	{
		Excel::TableStyle returnedValue;
		Com::Param param(0);
		Invoke(0, 1039, L"Duplicate", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	wstring TableStyle::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring TableStyle::get_NameLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 937, L"NameLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object TableStyle::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TableStyle::get_ShowAsAvailablePivotTableStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2739, L"ShowAsAvailablePivotTableStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableStyle::put_ShowAsAvailablePivotTableStyle(bool ShowAsAvailablePivotTableStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAsAvailablePivotTableStyle == true) ? 1 : 0;
		Invoke(1, 2739, L"ShowAsAvailablePivotTableStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TableStyle::get_ShowAsAvailableSlicerStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2946, L"ShowAsAvailableSlicerStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableStyle::put_ShowAsAvailableSlicerStyle(bool ShowAsAvailableSlicerStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAsAvailableSlicerStyle == true) ? 1 : 0;
		Invoke(1, 2946, L"ShowAsAvailableSlicerStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TableStyle::get_ShowAsAvailableTableStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2738, L"ShowAsAvailableTableStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableStyle::put_ShowAsAvailableTableStyle(bool ShowAsAvailableTableStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAsAvailableTableStyle == true) ? 1 : 0;
		Invoke(1, 2738, L"ShowAsAvailableTableStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TableStyle::get_ShowAsAvailableTimelineStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3110, L"ShowAsAvailableTimelineStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableStyle::put_ShowAsAvailableTimelineStyle(bool ShowAsAvailableTimelineStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAsAvailableTimelineStyle == true) ? 1 : 0;
		Invoke(1, 3110, L"ShowAsAvailableTimelineStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::TableStyleElements TableStyle::get_TableStyleElements()
	{
		Excel::TableStyleElements returnedValue;
		Com::Param param;
		Invoke(0, 2737, L"TableStyleElements", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring TableStyle::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________TableStyles
	TableStyles::TableStyles()
	{
	}

	TableStyles::~TableStyles()
	{
	}

	Excel::TableStyle TableStyles::Add(wstring TableStyleName)
	{
		Excel::TableStyle returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TableStyleName.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX TableStyles::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long TableStyles::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator TableStyles::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::TableStyle TableStyles::Item(_variant_t Index)
	{
		Excel::TableStyle returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object TableStyles::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TableStyle TableStyles::get__Default(_variant_t Index)
	{
		Excel::TableStyle returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr TableStyles::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SortField
	SortField::SortField()
	{
	}

	SortField::~SortField()
	{
	}

	Excel::ApplicationX SortField::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SortField::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t SortField::get_CustomOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2743, L"CustomOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SortField::put_CustomOrder(_variant_t CustomOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CustomOrder;
		Invoke(1, 2743, L"CustomOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSortDataOption SortField::get_DataOption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2744, L"DataOption", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSortDataOption)returnedValue.iVal;
	}

	void SortField::put_DataOption(Excel::XlSortDataOption DataOption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DataOption;
		Invoke(1, 2744, L"DataOption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void SortField::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range SortField::get_Key()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 155, L"Key", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SortField::ModifyKey(Excel::Range& Key)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Key.dispatch.GetInterfacePtr();
		Invoke(1, 2745, L"ModifyKey", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlSortOrder SortField::get_Order()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSortOrder)returnedValue.iVal;
	}

	void SortField::put_Order(Excel::XlSortOrder Order)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Order;
		Invoke(1, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object SortField::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SortField::get_Priority()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void SortField::put_Priority(long Priority)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Priority;
		Invoke(1, 985, L"Priority", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void SortField::SetIcon(Excel::Icon& Icon)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Icon.dispatch.GetInterfacePtr();
		Invoke(1, 2746, L"SetIcon", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlSortOn SortField::get_SortOn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2741, L"SortOn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSortOn)returnedValue.iVal;
	}

	void SortField::put_SortOn(Excel::XlSortOn SortOn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SortOn;
		Invoke(1, 2741, L"SortOn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object SortField::get_SortOnValue()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2742, L"SortOnValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________SortFields
	SortFields::SortFields()
	{
	}

	SortFields::~SortFields()
	{
	}

	Excel::SortField SortFields::Add(Excel::Range& Key, _variant_t SortOn, _variant_t Order, _variant_t CustomOrder, _variant_t DataOption)
	{
		Excel::SortField returnedValue;
		Com::Param param(5);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Key.dispatch.GetInterfacePtr();
		param[1] = SortOn;
		param[2] = Order;
		param[3] = CustomOrder;
		param[4] = DataOption;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::SortField SortFields::Add(Excel::Range& Key)
	{
		Excel::SortField returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Key.dispatch.GetInterfacePtr();
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX SortFields::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SortFields::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
	}

	long SortFields::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SortFields::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::SortField SortFields::get_Item(_variant_t Index)
	{
		Excel::SortField returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SortFields::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SortField SortFields::get__Default(_variant_t Index)
	{
		Excel::SortField returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SortFields::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Sort
	Sort::Sort()
	{
	}

	Sort::~Sort()
	{
	}

	Excel::ApplicationX Sort::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Sort::Apply()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1675, L"Apply", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator Sort::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlYesNoGuess Sort::get_Header()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 895, L"Header", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlYesNoGuess)returnedValue.iVal;
	}

	void Sort::put_Header(Excel::XlYesNoGuess Header)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Header;
		Invoke(1, 895, L"Header", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Sort::get_MatchCase()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 426, L"MatchCase", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Sort::put_MatchCase(bool MatchCase)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MatchCase == true) ? 1 : 0;
		Invoke(1, 426, L"MatchCase", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSortOrientation Sort::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSortOrientation)returnedValue.iVal;
	}

	void Sort::put_Orientation(Excel::XlSortOrientation Orientation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Orientation;
		Invoke(1, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Sort::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Range Sort::get_Rng()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 2748, L"Rng", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Sort::SetRange(Excel::Range& Rng)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Rng.dispatch.GetInterfacePtr();
		Invoke(1, 2750, L"SetRange", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::SortFields Sort::get_SortFields()
	{
		Excel::SortFields returnedValue;
		Com::Param param;
		Invoke(0, 2749, L"SortFields", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlSortMethod Sort::get_SortMethod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 897, L"SortMethod", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSortMethod)returnedValue.iVal;
	}

	void Sort::put_SortMethod(Excel::XlSortMethod SortMethod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SortMethod;
		Invoke(1, 897, L"SortMethod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Research
	Research::Research()
	{
	}

	Research::~Research()
	{
	}

	Excel::ApplicationX Research::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Research::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool Research::IsResearchService(wstring ServiceID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ServiceID.c_str());
		Invoke(1, 2757, L"IsResearchService", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Com::Object Research::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t Research::Query(wstring ServiceID, _variant_t QueryString, _variant_t QueryLanguage, _variant_t UseSelection, _variant_t LaunchQuery)
	{
		_variant_t returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ServiceID.c_str());
		param[1] = QueryString;
		param[2] = QueryLanguage;
		param[3] = UseSelection;
		param[4] = LaunchQuery;
		Invoke(5, 2751, L"Query", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Research::Query(wstring ServiceID)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ServiceID.c_str());
		Invoke(1, 2751, L"Query", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	_variant_t Research::SetLanguagePair(long LanguageFrom, long LanguageTo)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I4;
		param[0].lVal = LanguageFrom;
		param[1].vt = VT_I4;
		param[1].lVal = LanguageTo;
		Invoke(2, 2758, L"SetLanguagePair", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________ColorStop
	ColorStop::ColorStop()
	{
	}

	ColorStop::~ColorStop()
	{
	}

	Excel::ApplicationX ColorStop::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ColorStop::get_Color()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ColorStop::put_Color(_variant_t Color)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Color;
		Invoke(1, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator ColorStop::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ColorStop::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object ColorStop::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double ColorStop::get_Position()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ColorStop::put_Position(double Position)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Position;
		Invoke(1, 133, L"Position", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long ColorStop::get_ThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ColorStop::put_ThemeColor(long ThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ThemeColor;
		Invoke(1, 2365, L"ThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ColorStop::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ColorStop::put_TintAndShade(_variant_t TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TintAndShade;
		Invoke(1, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ColorStops
	ColorStops::ColorStops()
	{
	}

	ColorStops::~ColorStops()
	{
	}

	Excel::ColorStop ColorStops::Add(double Position)
	{
		Excel::ColorStop returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Position;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ColorStops::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ColorStops::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
	}

	long ColorStops::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ColorStops::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ColorStop ColorStops::Item(_variant_t Index)
	{
		Excel::ColorStop returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ColorStops::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ColorStop ColorStops::get__Default(_variant_t Index)
	{
		Excel::ColorStop returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ColorStops::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________LinearGradient
	LinearGradient::LinearGradient()
	{
	}

	LinearGradient::~LinearGradient()
	{
	}

	Excel::ApplicationX LinearGradient::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ColorStops LinearGradient::get_ColorStops()
	{
		Excel::ColorStops returnedValue;
		Com::Param param;
		Invoke(0, 2761, L"ColorStops", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator LinearGradient::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	double LinearGradient::get_Degree()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1623, L"Degree", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void LinearGradient::put_Degree(double Degree)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Degree;
		Invoke(1, 1623, L"Degree", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object LinearGradient::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________RectangularGradient
	RectangularGradient::RectangularGradient()
	{
	}

	RectangularGradient::~RectangularGradient()
	{
	}

	Excel::ApplicationX RectangularGradient::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ColorStops RectangularGradient::get_ColorStops()
	{
		Excel::ColorStops returnedValue;
		Com::Param param;
		Invoke(0, 2761, L"ColorStops", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator RectangularGradient::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object RectangularGradient::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double RectangularGradient::get_RectangleBottom()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2763, L"RectangleBottom", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void RectangularGradient::put_RectangleBottom(double RectangleBottom)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = RectangleBottom;
		Invoke(1, 2763, L"RectangleBottom", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double RectangularGradient::get_RectangleLeft()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2764, L"RectangleLeft", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void RectangularGradient::put_RectangleLeft(double RectangleLeft)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = RectangleLeft;
		Invoke(1, 2764, L"RectangleLeft", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double RectangularGradient::get_RectangleRight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2765, L"RectangleRight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void RectangularGradient::put_RectangleRight(double RectangleRight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = RectangleRight;
		Invoke(1, 2765, L"RectangleRight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double RectangularGradient::get_RectangleTop()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2762, L"RectangleTop", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void RectangularGradient::put_RectangleTop(double RectangleTop)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = RectangleTop;
		Invoke(1, 2762, L"RectangleTop", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________MultiThreadedCalculation
	MultiThreadedCalculation::MultiThreadedCalculation()
	{
	}

	MultiThreadedCalculation::~MultiThreadedCalculation()
	{
	}

	Excel::ApplicationX MultiThreadedCalculation::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator MultiThreadedCalculation::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool MultiThreadedCalculation::get_Enabled()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void MultiThreadedCalculation::put_Enabled(bool Enabled)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Enabled == true) ? 1 : 0;
		Invoke(1, 600, L"Enabled", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object MultiThreadedCalculation::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long MultiThreadedCalculation::get_ThreadCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2767, L"ThreadCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void MultiThreadedCalculation::put_ThreadCount(long ThreadCount)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = ThreadCount;
		Invoke(1, 2767, L"ThreadCount", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlThreadMode MultiThreadedCalculation::get_ThreadMode()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2766, L"ThreadMode", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlThreadMode)returnedValue.iVal;
	}

	void MultiThreadedCalculation::put_ThreadMode(Excel::XlThreadMode ThreadMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ThreadMode;
		Invoke(1, 2766, L"ThreadMode", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ChartFormat
	ChartFormat::ChartFormat()
	{
	}

	ChartFormat::~ChartFormat()
	{
	}

	Excel::Adjustments ChartFormat::get_Adjustments()
	{
		Excel::Adjustments returnedValue;
		Com::Param param;
		Invoke(0, 1691, L"Adjustments", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX ChartFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	/* MsoAutoShapeType*/ short ChartFormat::get_AutoShapeType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1693, L"AutoShapeType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoAutoShapeType*/ short)returnedValue.iVal;
	}

	void ChartFormat::put_AutoShapeType(/* MsoAutoShapeType*/ short AutoShapeType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = AutoShapeType;
		Invoke(1, 1693, L"AutoShapeType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator ChartFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::FillFormat ChartFormat::get_Fill()
	{
		Excel::FillFormat returnedValue;
		Com::Param param;
		Invoke(0, 1663, L"Fill", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartFormat::get_Glow()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2663, L"Glow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::LineFormat ChartFormat::get_Line()
	{
		Excel::LineFormat returnedValue;
		Com::Param param;
		Invoke(0, 817, L"Line", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PictureFormat ChartFormat::get_PictureFormat()
	{
		Excel::PictureFormat returnedValue;
		Com::Param param;
		Invoke(0, 1631, L"PictureFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ShadowFormat ChartFormat::get_Shadow()
	{
		Excel::ShadowFormat returnedValue;
		Com::Param param;
		Invoke(0, 103, L"Shadow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ChartFormat::get_SoftEdge()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2662, L"SoftEdge", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::TextFrame2 ChartFormat::get_TextFrame2()
	{
		Excel::TextFrame2 returnedValue;
		Com::Param param;
		Invoke(0, 2659, L"TextFrame2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ThreeDFormat ChartFormat::get_ThreeD()
	{
		Excel::ThreeDFormat returnedValue;
		Com::Param param;
		Invoke(0, 1703, L"ThreeD", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________FileExportConverter
	FileExportConverter::FileExportConverter()
	{
	}

	FileExportConverter::~FileExportConverter()
	{
	}

	Excel::ApplicationX FileExportConverter::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator FileExportConverter::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring FileExportConverter::get_Description()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 218, L"Description", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring FileExportConverter::get_Extensions()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2769, L"Extensions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long FileExportConverter::get_FileFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 288, L"FileFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object FileExportConverter::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________FileExportConverters
	FileExportConverters::FileExportConverters()
	{
	}

	FileExportConverters::~FileExportConverters()
	{
	}

	Excel::ApplicationX FileExportConverters::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long FileExportConverters::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator FileExportConverters::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::FileExportConverter FileExportConverters::get_Item(_variant_t Index)
	{
		Excel::FileExportConverter returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object FileExportConverters::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::FileExportConverter FileExportConverters::get__Default(_variant_t Index)
	{
		Excel::FileExportConverter returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr FileExportConverters::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________AddIns2
	AddIns2::AddIns2()
	{
	}

	AddIns2::~AddIns2()
	{
	}

	Excel::AddIn AddIns2::Add(wstring Filename, _variant_t CopyFile)
	{
		Excel::AddIn returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = CopyFile;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::AddIn AddIns2::Add(wstring Filename)
	{
		Excel::AddIn returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX AddIns2::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long AddIns2::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator AddIns2::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::AddIn AddIns2::get_Item(_variant_t Index)
	{
		Excel::AddIn returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object AddIns2::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::AddIn AddIns2::get__Default(_variant_t Index)
	{
		Excel::AddIn returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr AddIns2::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SparklineGroups
	SparklineGroups::SparklineGroups()
	{
	}

	SparklineGroups::~SparklineGroups()
	{
	}

	Excel::SparklineGroup SparklineGroups::Add(Excel::XlSparkType Type, wstring SourceData)
	{
		Excel::SparklineGroup returnedValue;
		Com::Param param(2);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(SourceData.c_str());
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX SparklineGroups::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SparklineGroups::Clear()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 111, L"Clear", param, returnedValue, DISPATCH_METHOD);
	}

	void SparklineGroups::ClearGroups()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2947, L"ClearGroups", param, returnedValue, DISPATCH_METHOD);
	}

	long SparklineGroups::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SparklineGroups::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void SparklineGroups::Group(Excel::Range& Location)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Location.dispatch.GetInterfacePtr();
		Invoke(1, 46, L"Group", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::SparklineGroup SparklineGroups::get_Item(_variant_t Index)
	{
		Excel::SparklineGroup returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SparklineGroups::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SparklineGroups::Ungroup()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 244, L"Ungroup", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::SparklineGroup SparklineGroups::get__Default(_variant_t Index)
	{
		Excel::SparklineGroup returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SparklineGroups::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SparklineGroup
	SparklineGroup::SparklineGroup()
	{
	}

	SparklineGroup::~SparklineGroup()
	{
	}

	Excel::ApplicationX SparklineGroup::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparkAxes SparklineGroup::get_Axes()
	{
		Excel::SparkAxes returnedValue;
		Com::Param param;
		Invoke(0, 23, L"Axes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SparklineGroup::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SparklineGroup::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring SparklineGroup::get_DateRange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2948, L"DateRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void SparklineGroup::put_DateRange(wstring DateRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(DateRange.c_str());
		Invoke(1, 2948, L"DateRange", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void SparklineGroup::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlDisplayBlanksAs SparklineGroup::get_DisplayBlanksAs()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 93, L"DisplayBlanksAs", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDisplayBlanksAs)returnedValue.iVal;
	}

	void SparklineGroup::put_DisplayBlanksAs(Excel::XlDisplayBlanksAs DisplayBlanksAs)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = DisplayBlanksAs;
		Invoke(1, 93, L"DisplayBlanksAs", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SparklineGroup::get_DisplayHidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2953, L"DisplayHidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SparklineGroup::put_DisplayHidden(bool DisplayHidden)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayHidden == true) ? 1 : 0;
		Invoke(1, 2953, L"DisplayHidden", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Sparkline SparklineGroup::get_Item(_variant_t Index)
	{
		Excel::Sparkline returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t SparklineGroup::get_LineWeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2954, L"LineWeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SparklineGroup::put_LineWeight(_variant_t LineWeight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = LineWeight;
		Invoke(1, 2954, L"LineWeight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range SparklineGroup::get_Location()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SparklineGroup::put_Location(Excel::Range& Location)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Location.dispatch.GetInterfacePtr();
		Invoke(1, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	void SparklineGroup::Modify(Excel::Range& Location, wstring SourceData)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Location.dispatch.GetInterfacePtr();
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(SourceData.c_str());
		Invoke(2, 1581, L"Modify", param, returnedValue, DISPATCH_METHOD);
	}

	void SparklineGroup::ModifyDateRange(wstring DateRange)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(DateRange.c_str());
		Invoke(1, 2951, L"ModifyDateRange", param, returnedValue, DISPATCH_METHOD);
	}

	void SparklineGroup::ModifyLocation(Excel::Range& Location)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Location.dispatch.GetInterfacePtr();
		Invoke(1, 2949, L"ModifyLocation", param, returnedValue, DISPATCH_METHOD);
	}

	void SparklineGroup::ModifySourceData(wstring SourceData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceData.c_str());
		Invoke(1, 2950, L"ModifySourceData", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object SparklineGroup::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlSparklineRowCol SparklineGroup::get_PlotBy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 202, L"PlotBy", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSparklineRowCol)returnedValue.iVal;
	}

	void SparklineGroup::put_PlotBy(Excel::XlSparklineRowCol PlotBy)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = PlotBy;
		Invoke(1, 202, L"PlotBy", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::SparkPoints SparklineGroup::get_Points()
	{
		Excel::SparkPoints returnedValue;
		Com::Param param;
		Invoke(0, 70, L"Points", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::FormatColor SparklineGroup::get_SeriesColor()
	{
		Excel::FormatColor returnedValue;
		Com::Param param;
		Invoke(0, 2952, L"SeriesColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring SparklineGroup::get_SourceData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void SparklineGroup::put_SourceData(wstring SourceData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceData.c_str());
		Invoke(1, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSparkType SparklineGroup::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSparkType)returnedValue.iVal;
	}

	void SparklineGroup::put_Type(Excel::XlSparkType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	IUnknownPtr SparklineGroup::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SparkPoints
	SparkPoints::SparkPoints()
	{
	}

	SparkPoints::~SparkPoints()
	{
	}

	Excel::ApplicationX SparkPoints::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SparkPoints::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::SparkColor SparkPoints::get_Firstpoint()
	{
		Excel::SparkColor returnedValue;
		Com::Param param;
		Invoke(0, 2959, L"Firstpoint", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparkColor SparkPoints::get_Highpoint()
	{
		Excel::SparkColor returnedValue;
		Com::Param param;
		Invoke(0, 2957, L"Highpoint", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparkColor SparkPoints::get_Lastpoint()
	{
		Excel::SparkColor returnedValue;
		Com::Param param;
		Invoke(0, 2960, L"Lastpoint", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparkColor SparkPoints::get_Lowpoint()
	{
		Excel::SparkColor returnedValue;
		Com::Param param;
		Invoke(0, 2958, L"Lowpoint", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparkColor SparkPoints::get_Markers()
	{
		Excel::SparkColor returnedValue;
		Com::Param param;
		Invoke(0, 2956, L"Markers", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparkColor SparkPoints::get_Negative()
	{
		Excel::SparkColor returnedValue;
		Com::Param param;
		Invoke(0, 2955, L"Negative", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SparkPoints::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Sparkline
	Sparkline::Sparkline()
	{
	}

	Sparkline::~Sparkline()
	{
	}

	Excel::ApplicationX Sparkline::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator Sparkline::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Range Sparkline::get_Location()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Sparkline::put_Location(Excel::Range& Location)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Location.dispatch.GetInterfacePtr();
		Invoke(1, 1397, L"Location", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	void Sparkline::ModifyLocation(Excel::Range& Range)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = Range.dispatch.GetInterfacePtr();
		Invoke(1, 2949, L"ModifyLocation", param, returnedValue, DISPATCH_METHOD);
	}

	void Sparkline::ModifySourceData(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 2950, L"ModifySourceData", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object Sparkline::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Sparkline::get_SourceData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Sparkline::put_SourceData(wstring SourceData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceData.c_str());
		Invoke(1, 686, L"SourceData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________SparkAxes
	SparkAxes::SparkAxes()
	{
	}

	SparkAxes::~SparkAxes()
	{
	}

	Excel::ApplicationX SparkAxes::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SparkAxes::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::SparkHorizontalAxis SparkAxes::get_Horizontal()
	{
		Excel::SparkHorizontalAxis returnedValue;
		Com::Param param;
		Invoke(0, 2962, L"Horizontal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SparkAxes::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparkVerticalAxis SparkAxes::get_Vertical()
	{
		Excel::SparkVerticalAxis returnedValue;
		Com::Param param;
		Invoke(0, 2961, L"Vertical", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________SparkHorizontalAxis
	SparkHorizontalAxis::SparkHorizontalAxis()
	{
	}

	SparkHorizontalAxis::~SparkHorizontalAxis()
	{
	}

	Excel::ApplicationX SparkHorizontalAxis::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SparkColor SparkHorizontalAxis::get_Axis()
	{
		Excel::SparkColor returnedValue;
		Com::Param param;
		Invoke(0, 67, L"Axis", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SparkHorizontalAxis::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool SparkHorizontalAxis::get_IsDateAxis()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2963, L"IsDateAxis", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object SparkHorizontalAxis::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool SparkHorizontalAxis::get_RightToLeftPlotOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2964, L"RightToLeftPlotOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SparkHorizontalAxis::put_RightToLeftPlotOrder(bool RightToLeftPlotOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RightToLeftPlotOrder == true) ? 1 : 0;
		Invoke(1, 2964, L"RightToLeftPlotOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________SparkVerticalAxis
	SparkVerticalAxis::SparkVerticalAxis()
	{
	}

	SparkVerticalAxis::~SparkVerticalAxis()
	{
	}

	Excel::ApplicationX SparkVerticalAxis::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SparkVerticalAxis::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t SparkVerticalAxis::get_CustomMaxScaleValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2968, L"CustomMaxScaleValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SparkVerticalAxis::put_CustomMaxScaleValue(_variant_t CustomMaxScaleValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CustomMaxScaleValue;
		Invoke(1, 2968, L"CustomMaxScaleValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t SparkVerticalAxis::get_CustomMinScaleValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2966, L"CustomMinScaleValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SparkVerticalAxis::put_CustomMinScaleValue(_variant_t CustomMinScaleValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CustomMinScaleValue;
		Invoke(1, 2966, L"CustomMinScaleValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSparkScale SparkVerticalAxis::get_MaxScaleType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2967, L"MaxScaleType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSparkScale)returnedValue.iVal;
	}

	void SparkVerticalAxis::put_MaxScaleType(Excel::XlSparkScale MaxScaleType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MaxScaleType;
		Invoke(1, 2967, L"MaxScaleType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlSparkScale SparkVerticalAxis::get_MinScaleType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2965, L"MinScaleType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSparkScale)returnedValue.iVal;
	}

	void SparkVerticalAxis::put_MinScaleType(Excel::XlSparkScale MinScaleType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = MinScaleType;
		Invoke(1, 2965, L"MinScaleType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object SparkVerticalAxis::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________SparkColor
	SparkColor::SparkColor()
	{
	}

	SparkColor::~SparkColor()
	{
	}

	Excel::ApplicationX SparkColor::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::FormatColor SparkColor::get_Color()
	{
		Excel::FormatColor returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SparkColor::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object SparkColor::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool SparkColor::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SparkColor::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________DataBarBorder
	DataBarBorder::DataBarBorder()
	{
	}

	DataBarBorder::~DataBarBorder()
	{
	}

	Excel::ApplicationX DataBarBorder::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DataBarBorder::get_Color()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator DataBarBorder::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object DataBarBorder::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlDataBarBorderType DataBarBorder::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDataBarBorderType)returnedValue.iVal;
	}

	void DataBarBorder::put_Type(Excel::XlDataBarBorderType Type)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Type;
		Invoke(1, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________NegativeBarFormat
	NegativeBarFormat::NegativeBarFormat()
	{
	}

	NegativeBarFormat::~NegativeBarFormat()
	{
	}

	Excel::ApplicationX NegativeBarFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object NegativeBarFormat::get_BorderColor()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2970, L"BorderColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlDataBarNegativeColorType NegativeBarFormat::get_BorderColorType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2969, L"BorderColorType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDataBarNegativeColorType)returnedValue.iVal;
	}

	void NegativeBarFormat::put_BorderColorType(Excel::XlDataBarNegativeColorType BorderColorType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = BorderColorType;
		Invoke(1, 2969, L"BorderColorType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object NegativeBarFormat::get_Color()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 99, L"Color", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlDataBarNegativeColorType NegativeBarFormat::get_ColorType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2195, L"ColorType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlDataBarNegativeColorType)returnedValue.iVal;
	}

	void NegativeBarFormat::put_ColorType(Excel::XlDataBarNegativeColorType ColorType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ColorType;
		Invoke(1, 2195, L"ColorType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator NegativeBarFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object NegativeBarFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ValueChange
	ValueChange::ValueChange()
	{
	}

	ValueChange::~ValueChange()
	{
	}

	Excel::XlAllocationMethod ValueChange::get_AllocationMethod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2875, L"AllocationMethod", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAllocationMethod)returnedValue.iVal;
	}

	Excel::XlAllocationValue ValueChange::get_AllocationValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2874, L"AllocationValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlAllocationValue)returnedValue.iVal;
	}

	wstring ValueChange::get_AllocationWeightExpression()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2876, L"AllocationWeightExpression", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::ApplicationX ValueChange::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ValueChange::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ValueChange::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	long ValueChange::get_Order()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 192, L"Order", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object ValueChange::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotCell ValueChange::get_PivotCell()
	{
		Excel::PivotCell returnedValue;
		Com::Param param;
		Invoke(0, 2013, L"PivotCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ValueChange::get_Tuple()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2972, L"Tuple", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	double ValueChange::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	bool ValueChange::get_VisibleInPivotTable()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2971, L"VisibleInPivotTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	//________________________________________________________PivotTableChangeList
	PivotTableChangeList::PivotTableChangeList()
	{
	}

	PivotTableChangeList::~PivotTableChangeList()
	{
	}

	Excel::ValueChange PivotTableChangeList::Add(wstring Tuple, double Value, _variant_t AllocationValue, _variant_t AllocationMethod, _variant_t AllocationWeightExpression)
	{
		Excel::ValueChange returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Tuple.c_str());
		param[1].vt = VT_R8;
		param[1].dblVal = Value;
		param[2] = AllocationValue;
		param[3] = AllocationMethod;
		param[4] = AllocationWeightExpression;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ValueChange PivotTableChangeList::Add(wstring Tuple, double Value)
	{
		Excel::ValueChange returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Tuple.c_str());
		param[1].vt = VT_R8;
		param[1].dblVal = Value;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX PivotTableChangeList::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PivotTableChangeList::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PivotTableChangeList::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ValueChange PivotTableChangeList::get_Item(_variant_t Index)
	{
		Excel::ValueChange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object PivotTableChangeList::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ValueChange PivotTableChangeList::get__Default(_variant_t Index)
	{
		Excel::ValueChange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr PivotTableChangeList::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________DisplayFormat
	DisplayFormat::DisplayFormat()
	{
	}

	DisplayFormat::~DisplayFormat()
	{
	}

	_variant_t DisplayFormat::get_AddIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1063, L"AddIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX DisplayFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Borders DisplayFormat::get_Borders()
	{
		Excel::Borders returnedValue;
		Com::Param param;
		Invoke(0, 435, L"Borders", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters DisplayFormat::get_Characters(_variant_t Start, _variant_t Length)
	{
		Excel::Characters returnedValue;
		Com::Param param(2);
		param[0] = Start;
		param[1] = Length;
		Invoke(2, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Characters DisplayFormat::get_Characters()
	{
		Excel::Characters returnedValue;
		Com::Param param(0);
		Invoke(0, 603, L"Characters", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator DisplayFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Font DisplayFormat::get_Font()
	{
		Excel::Font returnedValue;
		Com::Param param;
		Invoke(0, 146, L"Font", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_FormulaHidden()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 262, L"FormulaHidden", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_HorizontalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 136, L"HorizontalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_IndentLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 201, L"IndentLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Interior DisplayFormat::get_Interior()
	{
		Excel::Interior returnedValue;
		Com::Param param;
		Invoke(0, 129, L"Interior", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_MergeCells()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 208, L"MergeCells", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_NumberFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 193, L"NumberFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_NumberFormatLocal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1097, L"NumberFormatLocal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_Orientation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 134, L"Orientation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object DisplayFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long DisplayFormat::get_ReadingOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 975, L"ReadingOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	_variant_t DisplayFormat::get_ShrinkToFit()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 209, L"ShrinkToFit", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_Style()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 260, L"Style", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_VerticalAlignment()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 137, L"VerticalAlignment", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t DisplayFormat::get_WrapText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 276, L"WrapText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________SlicerCaches
	SlicerCaches::SlicerCaches()
	{
	}

	SlicerCaches::~SlicerCaches()
	{
	}

	Excel::SlicerCache SlicerCaches::Add(_variant_t Source, _variant_t SourceField, _variant_t Name)
	{
		Excel::SlicerCache returnedValue;
		Com::Param param(3);
		param[0] = Source;
		param[1] = SourceField;
		param[2] = Name;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::SlicerCache SlicerCaches::Add(_variant_t Source, _variant_t SourceField)
	{
		Excel::SlicerCache returnedValue;
		Com::Param param(2);
		param[0] = Source;
		param[1] = SourceField;
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::SlicerCache SlicerCaches::Add2(_variant_t Source, _variant_t SourceField, _variant_t Name, _variant_t SlicerCacheType)
	{
		Excel::SlicerCache returnedValue;
		Com::Param param(4);
		param[0] = Source;
		param[1] = SourceField;
		param[2] = Name;
		param[3] = SlicerCacheType;
		Invoke(4, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::SlicerCache SlicerCaches::Add2(_variant_t Source, _variant_t SourceField)
	{
		Excel::SlicerCache returnedValue;
		Com::Param param(2);
		param[0] = Source;
		param[1] = SourceField;
		Invoke(2, 3054, L"Add2", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX SlicerCaches::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SlicerCaches::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SlicerCaches::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::SlicerCache SlicerCaches::get_Item(_variant_t Index)
	{
		Excel::SlicerCache returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SlicerCaches::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerCache SlicerCaches::get__Default(_variant_t Index)
	{
		Excel::SlicerCache returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SlicerCaches::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SlicerCache
	SlicerCache::SlicerCache()
	{
	}

	SlicerCache::~SlicerCache()
	{
	}

	Excel::ApplicationX SlicerCache::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SlicerCache::ClearAllFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2561, L"ClearAllFilters", param, returnedValue, DISPATCH_METHOD);
	}

	void SlicerCache::ClearDateFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3115, L"ClearDateFilter", param, returnedValue, DISPATCH_METHOD);
	}

	void SlicerCache::ClearManualFilter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2594, L"ClearManualFilter", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator SlicerCache::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlSlicerCrossFilterType SlicerCache::get_CrossFilterType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2978, L"CrossFilterType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSlicerCrossFilterType)returnedValue.iVal;
	}

	void SlicerCache::put_CrossFilterType(Excel::XlSlicerCrossFilterType CrossFilterType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CrossFilterType;
		Invoke(1, 2978, L"CrossFilterType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void SlicerCache::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	bool SlicerCache::get_FilterCleared()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3113, L"FilterCleared", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	long SlicerCache::get_Index()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 486, L"Index", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	bool SlicerCache::get_List()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 861, L"List", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::ListObject SlicerCache::get_ListObject()
	{
		Excel::ListObject returnedValue;
		Com::Param param;
		Invoke(0, 2257, L"ListObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring SlicerCache::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void SlicerCache::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SlicerCache::get_OLAP()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2077, L"OLAP", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Com::Object SlicerCache::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerPivotTables SlicerCache::get_PivotTables()
	{
		Excel::SlicerPivotTables returnedValue;
		Com::Param param;
		Invoke(0, 690, L"PivotTables", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool SlicerCache::get_RequireManualUpdate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3114, L"RequireManualUpdate", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SlicerCache::put_RequireManualUpdate(bool RequireManualUpdate)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RequireManualUpdate == true) ? 1 : 0;
		Invoke(1, 3114, L"RequireManualUpdate", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SlicerCache::get_ShowAllItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 452, L"ShowAllItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SlicerCache::put_ShowAllItems(bool ShowAllItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowAllItems == true) ? 1 : 0;
		Invoke(1, 452, L"ShowAllItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::SlicerCacheLevels SlicerCache::get_SlicerCacheLevels()
	{
		Excel::SlicerCacheLevels returnedValue;
		Com::Param param;
		Invoke(0, 2974, L"SlicerCacheLevels", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlSlicerCacheType SlicerCache::get_SlicerCacheType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3111, L"SlicerCacheType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSlicerCacheType)returnedValue.iVal;
	}

	Excel::SlicerItems SlicerCache::get_SlicerItems()
	{
		Excel::SlicerItems returnedValue;
		Com::Param param;
		Invoke(0, 2977, L"SlicerItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Slicers SlicerCache::get_Slicers()
	{
		Excel::Slicers returnedValue;
		Com::Param param;
		Invoke(0, 2881, L"Slicers", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlSlicerSort SlicerCache::get_SortItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2979, L"SortItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSlicerSort)returnedValue.iVal;
	}

	void SlicerCache::put_SortItems(Excel::XlSlicerSort SortItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SortItems;
		Invoke(1, 2979, L"SortItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool SlicerCache::get_SortUsingCustomLists()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2574, L"SortUsingCustomLists", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SlicerCache::put_SortUsingCustomLists(bool SortUsingCustomLists)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SortUsingCustomLists == true) ? 1 : 0;
		Invoke(1, 2574, L"SortUsingCustomLists", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring SlicerCache::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlPivotTableSourceType SlicerCache::get_SourceType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 685, L"SourceType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotTableSourceType)returnedValue.iVal;
	}

	Excel::TimelineState SlicerCache::get_TimelineState()
	{
		Excel::TimelineState returnedValue;
		Com::Param param;
		Invoke(0, 3112, L"TimelineState", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerItems SlicerCache::get_VisibleSlicerItems()
	{
		Excel::SlicerItems returnedValue;
		Com::Param param;
		Invoke(0, 2975, L"VisibleSlicerItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t SlicerCache::get_VisibleSlicerItemsList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2976, L"VisibleSlicerItemsList", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SlicerCache::put_VisibleSlicerItemsList(_variant_t VisibleSlicerItemsList)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = VisibleSlicerItemsList;
		Invoke(1, 2976, L"VisibleSlicerItemsList", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::WorkbookConnection SlicerCache::get_WorkbookConnection()
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param;
		Invoke(0, 2544, L"WorkbookConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________SlicerCacheLevels
	SlicerCacheLevels::SlicerCacheLevels()
	{
	}

	SlicerCacheLevels::~SlicerCacheLevels()
	{
	}

	Excel::ApplicationX SlicerCacheLevels::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SlicerCacheLevels::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SlicerCacheLevels::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::SlicerCacheLevel SlicerCacheLevels::get_Item(_variant_t Level)
	{
		Excel::SlicerCacheLevel returnedValue;
		Com::Param param(1);
		param[0] = Level;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerCacheLevel SlicerCacheLevels::get_Item()
	{
		Excel::SlicerCacheLevel returnedValue;
		Com::Param param(0);
		Invoke(0, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SlicerCacheLevels::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerCacheLevel SlicerCacheLevels::get__Default(_variant_t Level)
	{
		Excel::SlicerCacheLevel returnedValue;
		Com::Param param(1);
		param[0] = Level;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerCacheLevel SlicerCacheLevels::get__Default()
	{
		Excel::SlicerCacheLevel returnedValue;
		Com::Param param(0);
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SlicerCacheLevels::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SlicerCacheLevel
	SlicerCacheLevel::SlicerCacheLevel()
	{
	}

	SlicerCacheLevel::~SlicerCacheLevel()
	{
	}

	Excel::ApplicationX SlicerCacheLevel::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SlicerCacheLevel::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SlicerCacheLevel::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlSlicerCrossFilterType SlicerCacheLevel::get_CrossFilterType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2978, L"CrossFilterType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSlicerCrossFilterType)returnedValue.iVal;
	}

	void SlicerCacheLevel::put_CrossFilterType(Excel::XlSlicerCrossFilterType CrossFilterType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CrossFilterType;
		Invoke(1, 2978, L"CrossFilterType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring SlicerCacheLevel::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	long SlicerCacheLevel::get_Ordinal()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2981, L"Ordinal", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object SlicerCacheLevel::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerItems SlicerCacheLevel::get_SlicerItems()
	{
		Excel::SlicerItems returnedValue;
		Com::Param param;
		Invoke(0, 2977, L"SlicerItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlSlicerSort SlicerCacheLevel::get_SortItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2979, L"SortItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSlicerSort)returnedValue.iVal;
	}

	void SlicerCacheLevel::put_SortItems(Excel::XlSlicerSort SortItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = SortItems;
		Invoke(1, 2979, L"SortItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t SlicerCacheLevel::get_VisibleSlicerItemsList()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2976, L"VisibleSlicerItemsList", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________Slicers
	Slicers::Slicers()
	{
	}

	Slicers::~Slicers()
	{
	}

	Excel::Slicer Slicers::Add(_variant_t SlicerDestination, _variant_t Level, _variant_t Name, _variant_t Caption, _variant_t Top, _variant_t Left, _variant_t Width, _variant_t Height)
	{
		Excel::Slicer returnedValue;
		Com::Param param(8);
		param[0] = SlicerDestination;
		param[1] = Level;
		param[2] = Name;
		param[3] = Caption;
		param[4] = Top;
		param[5] = Left;
		param[6] = Width;
		param[7] = Height;
		Invoke(8, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::Slicer Slicers::Add(_variant_t SlicerDestination)
	{
		Excel::Slicer returnedValue;
		Com::Param param(1);
		param[0] = SlicerDestination;
		Invoke(1, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Slicers::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Slicers::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Slicers::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Slicer Slicers::get_Item(_variant_t Index)
	{
		Excel::Slicer returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object Slicers::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Slicer Slicers::get__Default(_variant_t Index)
	{
		Excel::Slicer returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Slicers::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Slicer
	Slicer::Slicer()
	{
	}

	Slicer::~Slicer()
	{
	}

	Excel::SlicerItem Slicer::get_ActiveItem()
	{
		Excel::SlicerItem returnedValue;
		Com::Param param;
		Invoke(0, 2988, L"ActiveItem", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX Slicer::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Slicer::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Slicer::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Slicer::get_ColumnWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 242, L"ColumnWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Slicer::put_ColumnWidth(double ColumnWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = ColumnWidth;
		Invoke(1, 242, L"ColumnWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	void Slicer::Copy()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 551, L"Copy", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::XlCreator Slicer::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void Slicer::Cut()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 565, L"Cut", param, returnedValue, DISPATCH_METHOD);
	}

	void Slicer::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	bool Slicer::get_DisableMoveResizeUI()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2983, L"DisableMoveResizeUI", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Slicer::put_DisableMoveResizeUI(bool DisableMoveResizeUI)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisableMoveResizeUI == true) ? 1 : 0;
		Invoke(1, 2983, L"DisableMoveResizeUI", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Slicer::get_DisplayHeader()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2985, L"DisplayHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Slicer::put_DisplayHeader(bool DisplayHeader)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayHeader == true) ? 1 : 0;
		Invoke(1, 2985, L"DisplayHeader", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Slicer::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Slicer::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Slicer::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Slicer::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool Slicer::get_Locked()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Slicer::put_Locked(bool Locked)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Locked == true) ? 1 : 0;
		Invoke(1, 269, L"Locked", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring Slicer::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void Slicer::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long Slicer::get_NumberOfColumns()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2984, L"NumberOfColumns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void Slicer::put_NumberOfColumns(long NumberOfColumns)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = NumberOfColumns;
		Invoke(1, 2984, L"NumberOfColumns", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object Slicer::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Slicer::get_RowHeight()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 272, L"RowHeight", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Slicer::put_RowHeight(double RowHeight)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = RowHeight;
		Invoke(1, 272, L"RowHeight", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Shape Slicer::get_Shape()
	{
		Excel::Shape returnedValue;
		Com::Param param;
		Invoke(0, 1582, L"Shape", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerCache Slicer::get_SlicerCache()
	{
		Excel::SlicerCache returnedValue;
		Com::Param param;
		Invoke(0, 2986, L"SlicerCache", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerCacheLevel Slicer::get_SlicerCacheLevel()
	{
		Excel::SlicerCacheLevel returnedValue;
		Com::Param param;
		Invoke(0, 2987, L"SlicerCacheLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlSlicerCacheType Slicer::get_SlicerCacheType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3111, L"SlicerCacheType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlSlicerCacheType)returnedValue.iVal;
	}

	_variant_t Slicer::get_Style()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 260, L"Style", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Slicer::put_Style(_variant_t Style)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Style;
		Invoke(1, 260, L"Style", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::TimelineViewState Slicer::get_TimelineViewState()
	{
		Excel::TimelineViewState returnedValue;
		Com::Param param;
		Invoke(0, 3116, L"TimelineViewState", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	double Slicer::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Slicer::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double Slicer::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void Slicer::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________SlicerItem
	SlicerItem::SlicerItem()
	{
	}

	SlicerItem::~SlicerItem()
	{
	}

	Excel::ApplicationX SlicerItem::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring SlicerItem::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlCreator SlicerItem::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool SlicerItem::get_HasData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2989, L"HasData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	wstring SlicerItem::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::SlicerCache SlicerItem::get_Parent()
	{
		Excel::SlicerCache returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool SlicerItem::get_Selected()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void SlicerItem::put_Selected(bool Selected)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Selected == true) ? 1 : 0;
		Invoke(1, 1123, L"Selected", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t SlicerItem::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring SlicerItem::get_SourceNameStandard()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2148, L"SourceNameStandard", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring SlicerItem::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________SlicerItems
	SlicerItems::SlicerItems()
	{
	}

	SlicerItems::~SlicerItems()
	{
	}

	Excel::ApplicationX SlicerItems::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SlicerItems::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SlicerItems::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::SlicerItem SlicerItems::get_Item(_variant_t Index)
	{
		Excel::SlicerItem returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SlicerItems::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SlicerItem SlicerItems::get__Default(_variant_t Index)
	{
		Excel::SlicerItem returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SlicerItems::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________SlicerPivotTables
	SlicerPivotTables::SlicerPivotTables()
	{
	}

	SlicerPivotTables::~SlicerPivotTables()
	{
	}

	void SlicerPivotTables::AddPivotTable(Excel::PivotTable& PivotTable)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotTable.dispatch.GetInterfacePtr();
		Invoke(1, 2990, L"AddPivotTable", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ApplicationX SlicerPivotTables::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SlicerPivotTables::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator SlicerPivotTables::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PivotTable SlicerPivotTables::get_Item(_variant_t Index)
	{
		Excel::PivotTable returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object SlicerPivotTables::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void SlicerPivotTables::RemovePivotTable(_variant_t PivotTable)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = PivotTable;
		Invoke(1, 2991, L"RemovePivotTable", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::PivotTable SlicerPivotTables::get__Default(_variant_t Index)
	{
		Excel::PivotTable returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr SlicerPivotTables::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ProtectedViewWindows
	ProtectedViewWindows::ProtectedViewWindows()
	{
	}

	ProtectedViewWindows::~ProtectedViewWindows()
	{
	}

	Excel::ApplicationX ProtectedViewWindows::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ProtectedViewWindows::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ProtectedViewWindows::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ProtectedViewWindow ProtectedViewWindows::get_Item(_variant_t Index)
	{
		Excel::ProtectedViewWindow returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ProtectedViewWindow ProtectedViewWindows::Open(wstring Filename, _variant_t Password, _variant_t AddToMru, _variant_t RepairMode)
	{
		Excel::ProtectedViewWindow returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		param[1] = Password;
		param[2] = AddToMru;
		param[3] = RepairMode;
		Invoke(4, 1923, L"Open", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ProtectedViewWindow ProtectedViewWindows::Open(wstring Filename)
	{
		Excel::ProtectedViewWindow returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Filename.c_str());
		Invoke(1, 1923, L"Open", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ProtectedViewWindows::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ProtectedViewWindow ProtectedViewWindows::get__Default(_variant_t Index)
	{
		Excel::ProtectedViewWindow returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ProtectedViewWindows::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ProtectedViewWindow
	ProtectedViewWindow::ProtectedViewWindow()
	{
	}

	ProtectedViewWindow::~ProtectedViewWindow()
	{
	}

	void ProtectedViewWindow::Activate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 304, L"Activate", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ProtectedViewWindow::get_Caption()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ProtectedViewWindow::put_Caption(wstring Caption)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Caption.c_str());
		Invoke(1, 139, L"Caption", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ProtectedViewWindow::Close()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 277, L"Close", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::WorkbookX ProtectedViewWindow::Edit(_variant_t WriteResPassword, _variant_t UpdateLinks)
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(2);
		param[0] = WriteResPassword;
		param[1] = UpdateLinks;
		Invoke(2, 562, L"Edit", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookX ProtectedViewWindow::Edit()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param(0);
		Invoke(0, 562, L"Edit", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	bool ProtectedViewWindow::get_EnableResize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1192, L"EnableResize", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ProtectedViewWindow::put_EnableResize(bool EnableResize)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableResize == true) ? 1 : 0;
		Invoke(1, 1192, L"EnableResize", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ProtectedViewWindow::get_Height()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ProtectedViewWindow::put_Height(double Height)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Height;
		Invoke(1, 123, L"Height", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ProtectedViewWindow::get_Left()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ProtectedViewWindow::put_Left(double Left)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Left;
		Invoke(1, 127, L"Left", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ProtectedViewWindow::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring ProtectedViewWindow::get_SourcePath()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2993, L"SourcePath", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	double ProtectedViewWindow::get_Top()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ProtectedViewWindow::put_Top(double Top)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Top;
		Invoke(1, 126, L"Top", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool ProtectedViewWindow::get_Visible()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ProtectedViewWindow::put_Visible(bool Visible)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Visible == true) ? 1 : 0;
		Invoke(1, 558, L"Visible", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	double ProtectedViewWindow::get_Width()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.dblVal;
	}

	void ProtectedViewWindow::put_Width(double Width)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R8;
		param[0].dblVal = Width;
		Invoke(1, 122, L"Width", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlProtectedViewWindowState ProtectedViewWindow::get_WindowState()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 396, L"WindowState", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlProtectedViewWindowState)returnedValue.iVal;
	}

	void ProtectedViewWindow::put_WindowState(Excel::XlProtectedViewWindowState WindowState)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = WindowState;
		Invoke(1, 396, L"WindowState", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::WorkbookX ProtectedViewWindow::get_Workbook()
	{
		Excel::WorkbookX returnedValue;
		Com::Param param;
		Invoke(0, 752, L"Workbook", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ProtectedViewWindow::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________TableObject
	TableObject::TableObject()
	{
	}

	TableObject::~TableObject()
	{
	}

	bool TableObject::get_AdjustColumnWidth()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1868, L"AdjustColumnWidth", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableObject::put_AdjustColumnWidth(bool AdjustColumnWidth)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AdjustColumnWidth == true) ? 1 : 0;
		Invoke(1, 1868, L"AdjustColumnWidth", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX TableObject::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator TableObject::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void TableObject::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::Range TableObject::get_Destination()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 681, L"Destination", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TableObject::get_EnableEditing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1595, L"EnableEditing", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableObject::put_EnableEditing(bool EnableEditing)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableEditing == true) ? 1 : 0;
		Invoke(1, 1595, L"EnableEditing", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TableObject::get_EnableRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableObject::put_EnableRefresh(bool EnableRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableRefresh == true) ? 1 : 0;
		Invoke(1, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TableObject::get_FetchedRowOverflow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1588, L"FetchedRowOverflow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::ListObject TableObject::get_ListObject()
	{
		Excel::ListObject returnedValue;
		Com::Param param;
		Invoke(0, 2257, L"ListObject", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object TableObject::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TableObject::get_PreserveColumnInfo()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1867, L"PreserveColumnInfo", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableObject::put_PreserveColumnInfo(bool PreserveColumnInfo)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PreserveColumnInfo == true) ? 1 : 0;
		Invoke(1, 1867, L"PreserveColumnInfo", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TableObject::get_PreserveFormatting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1500, L"PreserveFormatting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableObject::put_PreserveFormatting(bool PreserveFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PreserveFormatting == true) ? 1 : 0;
		Invoke(1, 1500, L"PreserveFormatting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TableObject::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlCellInsertionMode TableObject::get_RefreshStyle()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1590, L"RefreshStyle", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCellInsertionMode)returnedValue.iVal;
	}

	void TableObject::put_RefreshStyle(Excel::XlCellInsertionMode RefreshStyle)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RefreshStyle;
		Invoke(1, 1590, L"RefreshStyle", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::Range TableObject::get_ResultRange()
	{
		Excel::Range returnedValue;
		Com::Param param;
		Invoke(0, 1592, L"ResultRange", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TableObject::get_RowNumbers()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1585, L"RowNumbers", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TableObject::put_RowNumbers(bool RowNumbers)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RowNumbers == true) ? 1 : 0;
		Invoke(1, 1585, L"RowNumbers", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::WorkbookConnection TableObject::get_WorkbookConnection()
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param;
		Invoke(0, 2544, L"WorkbookConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________PivotValueCell
	PivotValueCell::PivotValueCell()
	{
	}

	PivotValueCell::~PivotValueCell()
	{
	}

	Excel::ApplicationX PivotValueCell::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PivotValueCell::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object PivotValueCell::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PivotCell PivotValueCell::get_PivotCell()
	{
		Excel::PivotCell returnedValue;
		Com::Param param;
		Invoke(0, 2013, L"PivotCell", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Actions PivotValueCell::get_ServerActions()
	{
		Excel::Actions returnedValue;
		Com::Param param;
		Invoke(0, 2491, L"ServerActions", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void PivotValueCell::ShowDetail()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 585, L"ShowDetail", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t PivotValueCell::get_Value()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 6, L"Value", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________QuickAnalysis
	QuickAnalysis::QuickAnalysis()
	{
	}

	QuickAnalysis::~QuickAnalysis()
	{
	}

	Excel::ApplicationX QuickAnalysis::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator QuickAnalysis::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void QuickAnalysis::Hide(Excel::XlQuickAnalysisMode XlQuickAnalysisMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = XlQuickAnalysisMode;
		Invoke(1, 813, L"Hide", param, returnedValue, DISPATCH_METHOD);
	}

	Com::Object QuickAnalysis::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void QuickAnalysis::Show(Excel::XlQuickAnalysisMode XlQuickAnalysisMode)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = XlQuickAnalysisMode;
		Invoke(1, 496, L"Show", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________ModelConnection
	ModelConnection::ModelConnection()
	{
	}

	ModelConnection::~ModelConnection()
	{
	}

	Com::Object ModelConnection::get_ADOConnection()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 2074, L"ADOConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ApplicationX ModelConnection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::CalculatedMembers ModelConnection::get_CalculatedMembers()
	{
		Excel::CalculatedMembers returnedValue;
		Com::Param param;
		Invoke(0, 2125, L"CalculatedMembers", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t ModelConnection::get_CommandText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ModelConnection::put_CommandText(_variant_t CommandText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CommandText;
		Invoke(1, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCmdType ModelConnection::get_CommandType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCmdType)returnedValue.iVal;
	}

	void ModelConnection::put_CommandType(Excel::XlCmdType CommandType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CommandType;
		Invoke(1, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator ModelConnection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ModelConnection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________WorksheetDataConnection
	WorksheetDataConnection::WorksheetDataConnection()
	{
	}

	WorksheetDataConnection::~WorksheetDataConnection()
	{
	}

	Excel::ApplicationX WorksheetDataConnection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t WorksheetDataConnection::get_CommandText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void WorksheetDataConnection::put_CommandText(_variant_t CommandText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CommandText;
		Invoke(1, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCmdType WorksheetDataConnection::get_CommandType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCmdType)returnedValue.iVal;
	}

	void WorksheetDataConnection::put_CommandType(Excel::XlCmdType CommandType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CommandType;
		Invoke(1, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t WorksheetDataConnection::get_Connection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator WorksheetDataConnection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object WorksheetDataConnection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________TextConnection
	TextConnection::TextConnection()
	{
	}

	TextConnection::~TextConnection()
	{
	}

	Excel::ApplicationX TextConnection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextConnection::get_Connection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextConnection::put_Connection(_variant_t Connection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Connection;
		Invoke(1, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator TextConnection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object TextConnection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TextConnection::get_TextFileColumnDataTypes()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1865, L"TextFileColumnDataTypes", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextConnection::put_TextFileColumnDataTypes(_variant_t TextFileColumnDataTypes)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TextFileColumnDataTypes;
		Invoke(1, 1865, L"TextFileColumnDataTypes", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextConnection::get_TextFileCommaDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1862, L"TextFileCommaDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextConnection::put_TextFileCommaDelimiter(bool TextFileCommaDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileCommaDelimiter == true) ? 1 : 0;
		Invoke(1, 1862, L"TextFileCommaDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextConnection::get_TextFileConsecutiveDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1859, L"TextFileConsecutiveDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextConnection::put_TextFileConsecutiveDelimiter(bool TextFileConsecutiveDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileConsecutiveDelimiter == true) ? 1 : 0;
		Invoke(1, 1859, L"TextFileConsecutiveDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TextConnection::get_TextFileDecimalSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1870, L"TextFileDecimalSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextConnection::put_TextFileDecimalSeparator(wstring TextFileDecimalSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextFileDecimalSeparator.c_str());
		Invoke(1, 1870, L"TextFileDecimalSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t TextConnection::get_TextFileFixedColumnWidths()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1866, L"TextFileFixedColumnWidths", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void TextConnection::put_TextFileFixedColumnWidths(_variant_t TextFileFixedColumnWidths)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = TextFileFixedColumnWidths;
		Invoke(1, 1866, L"TextFileFixedColumnWidths", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextConnection::get_TextFileHeaderRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3118, L"TextFileHeaderRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextConnection::put_TextFileHeaderRow(bool TextFileHeaderRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileHeaderRow == true) ? 1 : 0;
		Invoke(1, 3118, L"TextFileHeaderRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TextConnection::get_TextFileOtherDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1864, L"TextFileOtherDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextConnection::put_TextFileOtherDelimiter(wstring TextFileOtherDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextFileOtherDelimiter.c_str());
		Invoke(1, 1864, L"TextFileOtherDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTextParsingType TextConnection::get_TextFileParseType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1857, L"TextFileParseType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTextParsingType)returnedValue.iVal;
	}

	void TextConnection::put_TextFileParseType(Excel::XlTextParsingType TextFileParseType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextFileParseType;
		Invoke(1, 1857, L"TextFileParseType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPlatform TextConnection::get_TextFilePlatform()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1855, L"TextFilePlatform", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPlatform)returnedValue.iVal;
	}

	void TextConnection::put_TextFilePlatform(Excel::XlPlatform TextFilePlatform)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextFilePlatform;
		Invoke(1, 1855, L"TextFilePlatform", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextConnection::get_TextFilePromptOnRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1869, L"TextFilePromptOnRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextConnection::put_TextFilePromptOnRefresh(bool TextFilePromptOnRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFilePromptOnRefresh == true) ? 1 : 0;
		Invoke(1, 1869, L"TextFilePromptOnRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextConnection::get_TextFileSemicolonDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1861, L"TextFileSemicolonDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextConnection::put_TextFileSemicolonDelimiter(bool TextFileSemicolonDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileSemicolonDelimiter == true) ? 1 : 0;
		Invoke(1, 1861, L"TextFileSemicolonDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextConnection::get_TextFileSpaceDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1863, L"TextFileSpaceDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextConnection::put_TextFileSpaceDelimiter(bool TextFileSpaceDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileSpaceDelimiter == true) ? 1 : 0;
		Invoke(1, 1863, L"TextFileSpaceDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long TextConnection::get_TextFileStartRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1856, L"TextFileStartRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void TextConnection::put_TextFileStartRow(long TextFileStartRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = TextFileStartRow;
		Invoke(1, 1856, L"TextFileStartRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextConnection::get_TextFileTabDelimiter()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1860, L"TextFileTabDelimiter", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextConnection::put_TextFileTabDelimiter(bool TextFileTabDelimiter)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileTabDelimiter == true) ? 1 : 0;
		Invoke(1, 1860, L"TextFileTabDelimiter", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTextQualifier TextConnection::get_TextFileTextQualifier()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1858, L"TextFileTextQualifier", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTextQualifier)returnedValue.iVal;
	}

	void TextConnection::put_TextFileTextQualifier(Excel::XlTextQualifier TextFileTextQualifier)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextFileTextQualifier;
		Invoke(1, 1858, L"TextFileTextQualifier", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring TextConnection::get_TextFileThousandsSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1871, L"TextFileThousandsSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void TextConnection::put_TextFileThousandsSeparator(wstring TextFileThousandsSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(TextFileThousandsSeparator.c_str());
		Invoke(1, 1871, L"TextFileThousandsSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TextConnection::get_TextFileTrailingMinusNumbers()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2164, L"TextFileTrailingMinusNumbers", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TextConnection::put_TextFileTrailingMinusNumbers(bool TextFileTrailingMinusNumbers)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TextFileTrailingMinusNumbers == true) ? 1 : 0;
		Invoke(1, 2164, L"TextFileTrailingMinusNumbers", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlTextVisualLayoutType TextConnection::get_TextFileVisualLayout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2245, L"TextFileVisualLayout", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTextVisualLayoutType)returnedValue.iVal;
	}

	void TextConnection::put_TextFileVisualLayout(Excel::XlTextVisualLayoutType TextFileVisualLayout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = TextFileVisualLayout;
		Invoke(1, 2245, L"TextFileVisualLayout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________DataFeedConnection
	DataFeedConnection::DataFeedConnection()
	{
	}

	DataFeedConnection::~DataFeedConnection()
	{
	}

	bool DataFeedConnection::get_AlwaysUseConnectionFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2706, L"AlwaysUseConnectionFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataFeedConnection::put_AlwaysUseConnectionFile(bool AlwaysUseConnectionFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AlwaysUseConnectionFile == true) ? 1 : 0;
		Invoke(1, 2706, L"AlwaysUseConnectionFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX DataFeedConnection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataFeedConnection::CancelRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1589, L"CancelRefresh", param, returnedValue, DISPATCH_METHOD);
	}

	_variant_t DataFeedConnection::get_CommandText()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataFeedConnection::put_CommandText(_variant_t CommandText)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = CommandText;
		Invoke(1, 1829, L"CommandText", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCmdType DataFeedConnection::get_CommandType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCmdType)returnedValue.iVal;
	}

	void DataFeedConnection::put_CommandType(Excel::XlCmdType CommandType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = CommandType;
		Invoke(1, 1830, L"CommandType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t DataFeedConnection::get_Connection()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataFeedConnection::put_Connection(_variant_t Connection)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Connection;
		Invoke(1, 1432, L"Connection", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator DataFeedConnection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool DataFeedConnection::get_EnableRefresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataFeedConnection::put_EnableRefresh(bool EnableRefresh)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableRefresh == true) ? 1 : 0;
		Invoke(1, 1477, L"EnableRefresh", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DataFeedConnection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void DataFeedConnection::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	Sys::Time DataFeedConnection::get_RefreshDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 696, L"RefreshDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return Sys::Convert::VariantToTime(returnedValue);
	}

	bool DataFeedConnection::get_RefreshOnFileOpen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataFeedConnection::put_RefreshOnFileOpen(bool RefreshOnFileOpen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RefreshOnFileOpen == true) ? 1 : 0;
		Invoke(1, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DataFeedConnection::get_RefreshPeriod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DataFeedConnection::put_RefreshPeriod(long RefreshPeriod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = RefreshPeriod;
		Invoke(1, 1833, L"RefreshPeriod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DataFeedConnection::get_Refreshing()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1587, L"Refreshing", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataFeedConnection::SaveAsODC(wstring ODCFileName, _variant_t Description, _variant_t Keywords)
	{
		_variant_t returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		param[1] = Description;
		param[2] = Keywords;
		Invoke(3, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	void DataFeedConnection::SaveAsODC(wstring ODCFileName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ODCFileName.c_str());
		Invoke(1, 2082, L"SaveAsODC", param, returnedValue, DISPATCH_METHOD);
	}

	bool DataFeedConnection::get_SavePassword()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DataFeedConnection::put_SavePassword(bool SavePassword)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SavePassword == true) ? 1 : 0;
		Invoke(1, 1481, L"SavePassword", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCredentialsMethod DataFeedConnection::get_ServerCredentialsMethod()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2704, L"ServerCredentialsMethod", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCredentialsMethod)returnedValue.iVal;
	}

	void DataFeedConnection::put_ServerCredentialsMethod(Excel::XlCredentialsMethod ServerCredentialsMethod)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ServerCredentialsMethod;
		Invoke(1, 2704, L"ServerCredentialsMethod", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DataFeedConnection::get_SourceConnectionFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataFeedConnection::put_SourceConnectionFile(wstring SourceConnectionFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceConnectionFile.c_str());
		Invoke(1, 2079, L"SourceConnectionFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DataFeedConnection::get_SourceDataFile()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DataFeedConnection::put_SourceDataFile(wstring SourceDataFile)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(SourceDataFile.c_str());
		Invoke(1, 2080, L"SourceDataFile", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ModelTableColumn
	ModelTableColumn::ModelTableColumn()
	{
	}

	ModelTableColumn::~ModelTableColumn()
	{
	}

	Excel::ApplicationX ModelTableColumn::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelTableColumn::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long ModelTableColumn::get_DataType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 722, L"DataType", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ModelTableColumn::Dummy1(wstring NewName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NewName.c_str());
		Invoke(1, 1782, L"Dummy1", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ModelTableColumn::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object ModelTableColumn::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ModelTableColumns
	ModelTableColumns::ModelTableColumns()
	{
	}

	ModelTableColumns::~ModelTableColumns()
	{
	}

	Excel::ApplicationX ModelTableColumns::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelTableColumns::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelTableColumns::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ModelTableColumn ModelTableColumns::Item(_variant_t Index)
	{
		Excel::ModelTableColumn returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ModelTableColumns::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTableColumn ModelTableColumns::get__Default(_variant_t Index)
	{
		Excel::ModelTableColumn returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ModelTableColumns::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ModelTable
	ModelTable::ModelTable()
	{
	}

	ModelTable::~ModelTable()
	{
	}

	Excel::ApplicationX ModelTable::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelTable::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ModelTable::Dummy1(wstring NewName)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NewName.c_str());
		Invoke(1, 1782, L"Dummy1", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ModelTableColumns ModelTable::get_ModelTableColumns()
	{
		Excel::ModelTableColumns returnedValue;
		Com::Param param;
		Invoke(0, 3119, L"ModelTableColumns", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelTable::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object ModelTable::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelTable::get_RecordCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1478, L"RecordCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ModelTable::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ModelTable::get_SourceName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 721, L"SourceName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::WorkbookConnection ModelTable::get_SourceWorkbookConnection()
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param;
		Invoke(0, 3120, L"SourceWorkbookConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ModelTable::_Dummy7()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 65543, L"_Dummy7", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________ModelTables
	ModelTables::ModelTables()
	{
	}

	ModelTables::~ModelTables()
	{
	}

	Excel::ApplicationX ModelTables::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelTables::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelTables::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ModelTable ModelTables::Item(_variant_t Index)
	{
		Excel::ModelTable returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ModelTables::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTable ModelTables::get__Default(_variant_t Index)
	{
		Excel::ModelTable returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ModelTables::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ModelRelationship
	ModelRelationship::ModelRelationship()
	{
	}

	ModelRelationship::~ModelRelationship()
	{
	}

	bool ModelRelationship::get_Active()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2312, L"Active", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ModelRelationship::put_Active(bool Active)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Active == true) ? 1 : 0;
		Invoke(1, 2312, L"Active", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX ModelRelationship::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelRelationship::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ModelRelationship::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ModelTableColumn ModelRelationship::get_ForeignKeyColumn()
	{
		Excel::ModelTableColumn returnedValue;
		Com::Param param;
		Invoke(0, 3123, L"ForeignKeyColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTable ModelRelationship::get_ForeignKeyTable()
	{
		Excel::ModelTable returnedValue;
		Com::Param param;
		Invoke(0, 3122, L"ForeignKeyTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ModelRelationship::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTableColumn ModelRelationship::get_PrimaryKeyColumn()
	{
		Excel::ModelTableColumn returnedValue;
		Com::Param param;
		Invoke(0, 3125, L"PrimaryKeyColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTable ModelRelationship::get_PrimaryKeyTable()
	{
		Excel::ModelTable returnedValue;
		Com::Param param;
		Invoke(0, 3124, L"PrimaryKeyTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ModelRelationships
	ModelRelationships::ModelRelationships()
	{
	}

	ModelRelationships::~ModelRelationships()
	{
	}

	Excel::ModelRelationship ModelRelationships::Add(Excel::ModelTableColumn& ForeignKeyColumn, Excel::ModelTableColumn& PrimaryKeyColumn)
	{
		Excel::ModelRelationship returnedValue;
		Com::Param param(2);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = ForeignKeyColumn.dispatch.GetInterfacePtr();
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = PrimaryKeyColumn.dispatch.GetInterfacePtr();
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ModelRelationships::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelRelationships::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelRelationships::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ModelRelationships::DetectRelationships(Excel::PivotTable& PivotTable)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = PivotTable.dispatch.GetInterfacePtr();
		Invoke(1, 3209, L"DetectRelationships", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ModelRelationship ModelRelationships::Item(_variant_t Index)
	{
		Excel::ModelRelationship returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ModelRelationships::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelRelationship ModelRelationships::get__Default(_variant_t Index)
	{
		Excel::ModelRelationship returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ModelRelationships::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________Model
	Model::Model()
	{
	}

	Model::~Model()
	{
	}

	Excel::WorkbookConnection Model::AddConnection(Excel::WorkbookConnection& ConnectionToDataSource)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = ConnectionToDataSource.dispatch.GetInterfacePtr();
		Invoke(1, 3127, L"AddConnection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Model::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookConnection Model::CreateModelWorkbookConnection(_variant_t ModelTable)
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param(1);
		param[0] = ModelTable;
		Invoke(1, 3129, L"CreateModelWorkbookConnection", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::XlCreator Model::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::WorkbookConnection Model::get_DataModelConnection()
	{
		Excel::WorkbookConnection returnedValue;
		Com::Param param;
		Invoke(0, 3131, L"DataModelConnection", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Model::Initialize()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3132, L"Initialize", param, returnedValue, DISPATCH_METHOD);
	}

	Excel::ModelFormatBoolean Model::get_ModelFormatBoolean()
	{
		Excel::ModelFormatBoolean returnedValue;
		Com::Param param;
		Invoke(0, 3221, L"ModelFormatBoolean", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatCurrency Model::get_ModelFormatCurrency(_variant_t Symbol, _variant_t DecimalPlaces)
	{
		Excel::ModelFormatCurrency returnedValue;
		Com::Param param(2);
		param[0] = Symbol;
		param[1] = DecimalPlaces;
		Invoke(2, 3219, L"ModelFormatCurrency", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatCurrency Model::get_ModelFormatCurrency()
	{
		Excel::ModelFormatCurrency returnedValue;
		Com::Param param(0);
		Invoke(0, 3219, L"ModelFormatCurrency", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatDate Model::get_ModelFormatDate(_variant_t FormatString)
	{
		Excel::ModelFormatDate returnedValue;
		Com::Param param(1);
		param[0] = FormatString;
		Invoke(1, 3212, L"ModelFormatDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatDate Model::get_ModelFormatDate()
	{
		Excel::ModelFormatDate returnedValue;
		Com::Param param(0);
		Invoke(0, 3212, L"ModelFormatDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatDecimalNumber Model::get_ModelFormatDecimalNumber(_variant_t UseThousandSeparator, _variant_t DecimalPlaces)
	{
		Excel::ModelFormatDecimalNumber returnedValue;
		Com::Param param(2);
		param[0] = UseThousandSeparator;
		param[1] = DecimalPlaces;
		Invoke(2, 3214, L"ModelFormatDecimalNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatDecimalNumber Model::get_ModelFormatDecimalNumber()
	{
		Excel::ModelFormatDecimalNumber returnedValue;
		Com::Param param(0);
		Invoke(0, 3214, L"ModelFormatDecimalNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatGeneral Model::get_ModelFormatGeneral()
	{
		Excel::ModelFormatGeneral returnedValue;
		Com::Param param;
		Invoke(0, 3211, L"ModelFormatGeneral", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatPercentageNumber Model::get_ModelFormatPercentageNumber(_variant_t UseThousandSeparator, _variant_t DecimalPlaces)
	{
		Excel::ModelFormatPercentageNumber returnedValue;
		Com::Param param(2);
		param[0] = UseThousandSeparator;
		param[1] = DecimalPlaces;
		Invoke(2, 3217, L"ModelFormatPercentageNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatPercentageNumber Model::get_ModelFormatPercentageNumber()
	{
		Excel::ModelFormatPercentageNumber returnedValue;
		Com::Param param(0);
		Invoke(0, 3217, L"ModelFormatPercentageNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatScientificNumber Model::get_ModelFormatScientificNumber(_variant_t DecimalPlaces)
	{
		Excel::ModelFormatScientificNumber returnedValue;
		Com::Param param(1);
		param[0] = DecimalPlaces;
		Invoke(1, 3218, L"ModelFormatScientificNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatScientificNumber Model::get_ModelFormatScientificNumber()
	{
		Excel::ModelFormatScientificNumber returnedValue;
		Com::Param param(0);
		Invoke(0, 3218, L"ModelFormatScientificNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatWholeNumber Model::get_ModelFormatWholeNumber(_variant_t UseThousandSeparator)
	{
		Excel::ModelFormatWholeNumber returnedValue;
		Com::Param param(1);
		param[0] = UseThousandSeparator;
		Invoke(1, 3216, L"ModelFormatWholeNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelFormatWholeNumber Model::get_ModelFormatWholeNumber()
	{
		Excel::ModelFormatWholeNumber returnedValue;
		Com::Param param(0);
		Invoke(0, 3216, L"ModelFormatWholeNumber", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelMeasures Model::get_ModelMeasures()
	{
		Excel::ModelMeasures returnedValue;
		Com::Param param;
		Invoke(0, 3210, L"ModelMeasures", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelRelationships Model::get_ModelRelationships()
	{
		Excel::ModelRelationships returnedValue;
		Com::Param param;
		Invoke(0, 3126, L"ModelRelationships", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTables Model::get_ModelTables()
	{
		Excel::ModelTables returnedValue;
		Com::Param param;
		Invoke(0, 3106, L"ModelTables", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring Model::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object Model::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void Model::Refresh()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1417, L"Refresh", param, returnedValue, DISPATCH_METHOD);
	}

	//________________________________________________________FullSeriesCollection
	FullSeriesCollection::FullSeriesCollection()
	{
	}

	FullSeriesCollection::~FullSeriesCollection()
	{
	}

	Excel::ApplicationX FullSeriesCollection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long FullSeriesCollection::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator FullSeriesCollection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::Series FullSeriesCollection::Item(_variant_t Index)
	{
		Excel::Series returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object FullSeriesCollection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::Series FullSeriesCollection::_Default(_variant_t Index)
	{
		Excel::Series returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr FullSeriesCollection::_NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.punkVal;
	}

	//________________________________________________________ChartCategory
	ChartCategory::ChartCategory()
	{
	}

	ChartCategory::~ChartCategory()
	{
	}

	Excel::ApplicationX ChartCategory::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ChartCategory::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool ChartCategory::get_IsFiltered()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3083, L"IsFiltered", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ChartCategory::put_IsFiltered(bool IsFiltered)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (IsFiltered == true) ? 1 : 0;
		Invoke(1, 3083, L"IsFiltered", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartCategory::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object ChartCategory::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________CategoryCollection
	CategoryCollection::CategoryCollection()
	{
	}

	CategoryCollection::~CategoryCollection()
	{
	}

	Excel::ApplicationX CategoryCollection::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long CategoryCollection::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator CategoryCollection::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ChartCategory CategoryCollection::Item(_variant_t Index)
	{
		Excel::ChartCategory returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object CategoryCollection::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ChartCategory CategoryCollection::_Default(_variant_t Index)
	{
		Excel::ChartCategory returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	//________________________________________________________TimelineState
	TimelineState::TimelineState()
	{
	}

	TimelineState::~TimelineState()
	{
	}

	Excel::ApplicationX TimelineState::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator TimelineState::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	_variant_t TimelineState::get_EndDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3134, L"EndDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlPivotFilterType TimelineState::get_FilterType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2686, L"FilterType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotFilterType)returnedValue.iVal;
	}

	_variant_t TimelineState::get_FilterValue1()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3135, L"FilterValue1", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	_variant_t TimelineState::get_FilterValue2()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3136, L"FilterValue2", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object TimelineState::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlFilterStatus TimelineState::SetFilterDateRange(_variant_t StartDate, _variant_t EndDate)
	{
		_variant_t returnedValue;
		Com::Param param(2);
		param[0] = StartDate;
		param[1] = EndDate;
		Invoke(2, 3138, L"SetFilterDateRange", param, returnedValue, DISPATCH_METHOD);
		return (Excel::XlFilterStatus)returnedValue.iVal;
	}

	bool TimelineState::get_SingleRangeFilterState()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3137, L"SingleRangeFilterState", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	_variant_t TimelineState::get_StartDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3133, L"StartDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________TimelineViewState
	TimelineViewState::TimelineViewState()
	{
	}

	TimelineViewState::~TimelineViewState()
	{
	}

	Excel::ApplicationX TimelineViewState::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator TimelineViewState::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::XlTimelineLevel TimelineViewState::get_Level()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2980, L"Level", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlTimelineLevel)returnedValue.iVal;
	}

	void TimelineViewState::put_Level(Excel::XlTimelineLevel Level)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = Level;
		Invoke(1, 2980, L"Level", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object TimelineViewState::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool TimelineViewState::get_ShowHeader()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3139, L"ShowHeader", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TimelineViewState::put_ShowHeader(bool ShowHeader)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowHeader == true) ? 1 : 0;
		Invoke(1, 3139, L"ShowHeader", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TimelineViewState::get_ShowHorizontalScrollbar()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3142, L"ShowHorizontalScrollbar", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TimelineViewState::put_ShowHorizontalScrollbar(bool ShowHorizontalScrollbar)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowHorizontalScrollbar == true) ? 1 : 0;
		Invoke(1, 3142, L"ShowHorizontalScrollbar", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TimelineViewState::get_ShowSelectionLabel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3140, L"ShowSelectionLabel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TimelineViewState::put_ShowSelectionLabel(bool ShowSelectionLabel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowSelectionLabel == true) ? 1 : 0;
		Invoke(1, 3140, L"ShowSelectionLabel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool TimelineViewState::get_ShowTimeLevel()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3141, L"ShowTimeLevel", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void TimelineViewState::put_ShowTimeLevel(bool ShowTimeLevel)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowTimeLevel == true) ? 1 : 0;
		Invoke(1, 3141, L"ShowTimeLevel", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ModelTableNames
	ModelTableNames::ModelTableNames()
	{
	}

	ModelTableNames::~ModelTableNames()
	{
	}

	Excel::ApplicationX ModelTableNames::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelTableNames::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelTableNames::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring ModelTableNames::Item(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue.bstrVal;
	}

	Com::Object ModelTableNames::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelTableNames::get__Default(_variant_t Index)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ModelTableNameChange
	ModelTableNameChange::ModelTableNameChange()
	{
	}

	ModelTableNameChange::~ModelTableNameChange()
	{
	}

	Excel::ApplicationX ModelTableNameChange::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelTableNameChange::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ModelTableNameChange::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelTableNameChange::get_TableNameNew()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3144, L"TableNameNew", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring ModelTableNameChange::get_TableNameOld()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3143, L"TableNameOld", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ModelTableNameChanges
	ModelTableNameChanges::ModelTableNameChanges()
	{
	}

	ModelTableNameChanges::~ModelTableNameChanges()
	{
	}

	Excel::ApplicationX ModelTableNameChanges::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelTableNameChanges::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelTableNameChanges::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ModelTableNameChange ModelTableNameChanges::Item(_variant_t Index)
	{
		Excel::ModelTableNameChange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ModelTableNameChanges::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTableNameChange ModelTableNameChanges::get__Default(_variant_t Index)
	{
		Excel::ModelTableNameChange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ModelTableNameChanges::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ModelChanges
	ModelChanges::ModelChanges()
	{
	}

	ModelChanges::~ModelChanges()
	{
	}

	Excel::ApplicationX ModelChanges::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelColumnNames ModelChanges::get_ColumnsAdded()
	{
		Excel::ModelColumnNames returnedValue;
		Com::Param param;
		Invoke(0, 3150, L"ColumnsAdded", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelColumnChanges ModelChanges::get_ColumnsChanged()
	{
		Excel::ModelColumnChanges returnedValue;
		Com::Param param;
		Invoke(0, 3152, L"ColumnsChanged", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelColumnNames ModelChanges::get_ColumnsDeleted()
	{
		Excel::ModelColumnNames returnedValue;
		Com::Param param;
		Invoke(0, 3151, L"ColumnsDeleted", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelChanges::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ModelMeasureNames ModelChanges::get_MeasuresAdded()
	{
		Excel::ModelMeasureNames returnedValue;
		Com::Param param;
		Invoke(0, 3153, L"MeasuresAdded", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Com::Object ModelChanges::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ModelChanges::get_RelationshipChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3149, L"RelationshipChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	Excel::XlModelChangeSource ModelChanges::get_Source()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 222, L"Source", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlModelChangeSource)returnedValue.iVal;
	}

	Excel::ModelTableNameChanges ModelChanges::get_TableNamesChanged()
	{
		Excel::ModelTableNameChanges returnedValue;
		Com::Param param;
		Invoke(0, 3148, L"TableNamesChanged", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTableNames ModelChanges::get_TablesAdded()
	{
		Excel::ModelTableNames returnedValue;
		Com::Param param;
		Invoke(0, 3145, L"TablesAdded", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTableNames ModelChanges::get_TablesDeleted()
	{
		Excel::ModelTableNames returnedValue;
		Com::Param param;
		Invoke(0, 3146, L"TablesDeleted", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTableNames ModelChanges::get_TablesModified()
	{
		Excel::ModelTableNames returnedValue;
		Com::Param param;
		Invoke(0, 3147, L"TablesModified", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ModelChanges::get_UnknownChange()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3154, L"UnknownChange", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	//________________________________________________________ModelColumnName
	ModelColumnName::ModelColumnName()
	{
	}

	ModelColumnName::~ModelColumnName()
	{
	}

	Excel::ApplicationX ModelColumnName::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelColumnName::get_ColumnName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3156, L"ColumnName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlCreator ModelColumnName::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ModelColumnName::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelColumnName::get_TableName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 688, L"TableName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ModelColumnNames
	ModelColumnNames::ModelColumnNames()
	{
	}

	ModelColumnNames::~ModelColumnNames()
	{
	}

	Excel::ApplicationX ModelColumnNames::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelColumnNames::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelColumnNames::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ModelColumnName ModelColumnNames::Item(_variant_t Index)
	{
		Excel::ModelColumnName returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ModelColumnNames::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelColumnName ModelColumnNames::get__Default(_variant_t Index)
	{
		Excel::ModelColumnName returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ModelColumnNames::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ModelColumnChange
	ModelColumnChange::ModelColumnChange()
	{
	}

	ModelColumnChange::~ModelColumnChange()
	{
	}

	Excel::ApplicationX ModelColumnChange::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelColumnChange::get_ColumnName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3156, L"ColumnName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Excel::XlCreator ModelColumnChange::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ModelColumnChange::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelColumnChange::get_TableName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 688, L"TableName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ModelColumnChanges
	ModelColumnChanges::ModelColumnChanges()
	{
	}

	ModelColumnChanges::~ModelColumnChanges()
	{
	}

	Excel::ApplicationX ModelColumnChanges::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelColumnChanges::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelColumnChanges::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ModelColumnChange ModelColumnChanges::Item(_variant_t Index)
	{
		Excel::ModelColumnChange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ModelColumnChanges::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelColumnChange ModelColumnChanges::get__Default(_variant_t Index)
	{
		Excel::ModelColumnChange returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ModelColumnChanges::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ModelMeasureName
	ModelMeasureName::ModelMeasureName()
	{
	}

	ModelMeasureName::~ModelMeasureName()
	{
	}

	Excel::ApplicationX ModelMeasureName::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelMeasureName::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring ModelMeasureName::get_MeasureName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3157, L"MeasureName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	Com::Object ModelMeasureName::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelMeasureName::get_TableName()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 688, L"TableName", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________ModelMeasureNames
	ModelMeasureNames::ModelMeasureNames()
	{
	}

	ModelMeasureNames::~ModelMeasureNames()
	{
	}

	Excel::ApplicationX ModelMeasureNames::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelMeasureNames::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelMeasureNames::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ModelMeasureName ModelMeasureNames::Item(_variant_t Index)
	{
		Excel::ModelMeasureName returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ModelMeasureNames::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelMeasureName ModelMeasureNames::get__Default(_variant_t Index)
	{
		Excel::ModelMeasureName returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ModelMeasureNames::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________WorkbookQuery
	WorkbookQuery::WorkbookQuery()
	{
	}

	WorkbookQuery::~WorkbookQuery()
	{
	}

	Excel::ApplicationX WorkbookQuery::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator WorkbookQuery::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void WorkbookQuery::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring WorkbookQuery::get_Description()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 218, L"Description", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookQuery::put_Description(wstring Description)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Description.c_str());
		Invoke(1, 218, L"Description", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorkbookQuery::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookQuery::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring WorkbookQuery::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookQuery::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object WorkbookQuery::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring WorkbookQuery::get__Default()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void WorkbookQuery::put__Default(wstring _Default)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(_Default.c_str());
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________Queries
	Queries::Queries()
	{
	}

	Queries::~Queries()
	{
	}

	Excel::WorkbookQuery Queries::Add(wstring Name, wstring Formula, _variant_t Description)
	{
		Excel::WorkbookQuery returnedValue;
		Com::Param param(3);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		param[2] = Description;
		Invoke(3, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::WorkbookQuery Queries::Add(wstring Name, wstring Formula)
	{
		Excel::WorkbookQuery returnedValue;
		Com::Param param(2);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		param[1].vt = VT_BSTR;
		param[1].bstrVal = _bstr_t(Formula.c_str());
		Invoke(2, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX Queries::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long Queries::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator Queries::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool Queries::get_FastCombine()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3223, L"FastCombine", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void Queries::put_FastCombine(bool FastCombine)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FastCombine == true) ? 1 : 0;
		Invoke(1, 3223, L"FastCombine", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::WorkbookQuery Queries::Item(_variant_t NameOrIndex)
	{
		Excel::WorkbookQuery returnedValue;
		Com::Param param(1);
		param[0] = NameOrIndex;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object Queries::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::WorkbookQuery Queries::get__Default(_variant_t NameOrIndex)
	{
		Excel::WorkbookQuery returnedValue;
		Com::Param param(1);
		param[0] = NameOrIndex;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr Queries::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ModelMeasure
	ModelMeasure::ModelMeasure()
	{
	}

	ModelMeasure::~ModelMeasure()
	{
	}

	Excel::ApplicationX ModelMeasure::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelTable ModelMeasure::get_AssociatedTable()
	{
		Excel::ModelTable returnedValue;
		Com::Param param;
		Invoke(0, 3224, L"AssociatedTable", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ModelMeasure::put_AssociatedTable(Excel::ModelTable& AssociatedTable)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_DISPATCH;
		param[0].pdispVal = AssociatedTable.dispatch.GetInterfacePtr();
		Invoke(1, 3224, L"AssociatedTable", param, returnedValue, DISPATCH_PROPERTYPUTREF);
	}

	Excel::XlCreator ModelMeasure::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	void ModelMeasure::Delete()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 117, L"Delete", param, returnedValue, DISPATCH_METHOD);
	}

	wstring ModelMeasure::get_Description()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 218, L"Description", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ModelMeasure::put_Description(wstring Description)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Description.c_str());
		Invoke(1, 218, L"Description", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	_variant_t ModelMeasure::get_FormatInformation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3225, L"FormatInformation", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	void ModelMeasure::put_FormatInformation(_variant_t FormatInformation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0] = FormatInformation;
		Invoke(1, 3225, L"FormatInformation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ModelMeasure::get_Formula()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ModelMeasure::put_Formula(wstring Formula)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Formula.c_str());
		Invoke(1, 261, L"Formula", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ModelMeasure::get_Name()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ModelMeasure::put_Name(wstring Name)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Name.c_str());
		Invoke(1, 110, L"Name", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ModelMeasure::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ModelMeasures
	ModelMeasures::ModelMeasures()
	{
	}

	ModelMeasures::~ModelMeasures()
	{
	}

	Excel::ModelMeasure ModelMeasures::Add(wstring MeasureName, Excel::ModelTable& AssociatedTable, wstring Formula, _variant_t FormatInformation, _variant_t Description)
	{
		Excel::ModelMeasure returnedValue;
		Com::Param param(5);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(MeasureName.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = AssociatedTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Formula.c_str());
		param[3] = FormatInformation;
		param[4] = Description;
		Invoke(5, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ModelMeasure ModelMeasures::Add(wstring MeasureName, Excel::ModelTable& AssociatedTable, wstring Formula, _variant_t FormatInformation)
	{
		Excel::ModelMeasure returnedValue;
		Com::Param param(4);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(MeasureName.c_str());
		param[1].vt = VT_DISPATCH;
		param[1].pdispVal = AssociatedTable.dispatch.GetInterfacePtr();
		param[2].vt = VT_BSTR;
		param[2].bstrVal = _bstr_t(Formula.c_str());
		param[3] = FormatInformation;
		Invoke(4, 181, L"Add", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Excel::ApplicationX ModelMeasures::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long ModelMeasures::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator ModelMeasures::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::ModelMeasure ModelMeasures::Item(_variant_t Index)
	{
		Excel::ModelMeasure returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object ModelMeasures::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::ModelMeasure ModelMeasures::get__Default(_variant_t Index)
	{
		Excel::ModelMeasure returnedValue;
		Com::Param param(1);
		param[0] = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	IUnknownPtr ModelMeasures::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________ModelFormatGeneral
	ModelFormatGeneral::ModelFormatGeneral()
	{
	}

	ModelFormatGeneral::~ModelFormatGeneral()
	{
	}

	Excel::ApplicationX ModelFormatGeneral::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelFormatGeneral::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ModelFormatGeneral::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ModelFormatDate
	ModelFormatDate::ModelFormatDate()
	{
	}

	ModelFormatDate::~ModelFormatDate()
	{
	}

	Excel::ApplicationX ModelFormatDate::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelFormatDate::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	wstring ModelFormatDate::get_FormatString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3213, L"FormatString", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ModelFormatDate::put_FormatString(wstring FormatString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(FormatString.c_str());
		Invoke(1, 3213, L"FormatString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ModelFormatDate::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ModelFormatDecimalNumber
	ModelFormatDecimalNumber::ModelFormatDecimalNumber()
	{
	}

	ModelFormatDecimalNumber::~ModelFormatDecimalNumber()
	{
	}

	Excel::ApplicationX ModelFormatDecimalNumber::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelFormatDecimalNumber::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long ModelFormatDecimalNumber::get_DecimalPlaces()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ModelFormatDecimalNumber::put_DecimalPlaces(long DecimalPlaces)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DecimalPlaces;
		Invoke(1, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ModelFormatDecimalNumber::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ModelFormatDecimalNumber::get_UseThousandSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3215, L"UseThousandSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ModelFormatDecimalNumber::put_UseThousandSeparator(bool UseThousandSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseThousandSeparator == true) ? 1 : 0;
		Invoke(1, 3215, L"UseThousandSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ModelFormatWholeNumber
	ModelFormatWholeNumber::ModelFormatWholeNumber()
	{
	}

	ModelFormatWholeNumber::~ModelFormatWholeNumber()
	{
	}

	Excel::ApplicationX ModelFormatWholeNumber::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelFormatWholeNumber::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ModelFormatWholeNumber::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ModelFormatWholeNumber::get_UseThousandSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3215, L"UseThousandSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ModelFormatWholeNumber::put_UseThousandSeparator(bool UseThousandSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseThousandSeparator == true) ? 1 : 0;
		Invoke(1, 3215, L"UseThousandSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ModelFormatPercentageNumber
	ModelFormatPercentageNumber::ModelFormatPercentageNumber()
	{
	}

	ModelFormatPercentageNumber::~ModelFormatPercentageNumber()
	{
	}

	Excel::ApplicationX ModelFormatPercentageNumber::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelFormatPercentageNumber::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long ModelFormatPercentageNumber::get_DecimalPlaces()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ModelFormatPercentageNumber::put_DecimalPlaces(long DecimalPlaces)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DecimalPlaces;
		Invoke(1, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ModelFormatPercentageNumber::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool ModelFormatPercentageNumber::get_UseThousandSeparator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3215, L"UseThousandSeparator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void ModelFormatPercentageNumber::put_UseThousandSeparator(bool UseThousandSeparator)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (UseThousandSeparator == true) ? 1 : 0;
		Invoke(1, 3215, L"UseThousandSeparator", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ModelFormatScientificNumber
	ModelFormatScientificNumber::ModelFormatScientificNumber()
	{
	}

	ModelFormatScientificNumber::~ModelFormatScientificNumber()
	{
	}

	Excel::ApplicationX ModelFormatScientificNumber::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelFormatScientificNumber::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long ModelFormatScientificNumber::get_DecimalPlaces()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ModelFormatScientificNumber::put_DecimalPlaces(long DecimalPlaces)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DecimalPlaces;
		Invoke(1, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ModelFormatScientificNumber::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________ModelFormatCurrency
	ModelFormatCurrency::ModelFormatCurrency()
	{
	}

	ModelFormatCurrency::~ModelFormatCurrency()
	{
	}

	Excel::ApplicationX ModelFormatCurrency::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelFormatCurrency::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long ModelFormatCurrency::get_DecimalPlaces()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void ModelFormatCurrency::put_DecimalPlaces(long DecimalPlaces)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = DecimalPlaces;
		Invoke(1, 2349, L"DecimalPlaces", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object ModelFormatCurrency::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	wstring ModelFormatCurrency::get_Symbol()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3220, L"Symbol", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ModelFormatCurrency::put_Symbol(wstring Symbol)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(Symbol.c_str());
		Invoke(1, 3220, L"Symbol", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________ModelFormatBoolean
	ModelFormatBoolean::ModelFormatBoolean()
	{
	}

	ModelFormatBoolean::~ModelFormatBoolean()
	{
	}

	Excel::ApplicationX ModelFormatBoolean::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ModelFormatBoolean::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ModelFormatBoolean::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	//________________________________________________________PublishedDocs
	PublishedDocs::PublishedDocs()
	{
	}

	PublishedDocs::~PublishedDocs()
	{
	}

	Excel::ApplicationX PublishedDocs::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long PublishedDocs::get_Count()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 118, L"Count", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Excel::XlCreator PublishedDocs::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Excel::PublishedDoc PublishedDocs::Item(long Index)
	{
		Excel::PublishedDoc returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 170, L"Item", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	Com::Object PublishedDocs::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::PublishedDoc PublishedDocs::_Default(long Index)
	{
		Excel::PublishedDoc returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = Index;
		Invoke(1, 0, L"_Default", param, returnedValue, DISPATCH_METHOD);
		return returnedValue;
	}

	IUnknownPtr PublishedDocs::get__NewEnum()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, -4, L"_NewEnum", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.punkVal;
	}

	//________________________________________________________PublishedDoc
	PublishedDoc::PublishedDoc()
	{
	}

	PublishedDoc::~PublishedDoc()
	{
	}

	Excel::ApplicationX PublishedDoc::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator PublishedDoc::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	long PublishedDoc::get_DisclosureScope()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3195, L"DisclosureScope", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	Com::Object PublishedDoc::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Sys::Time PublishedDoc::get_PublishedDate()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3230, L"PublishedDate", param, returnedValue, DISPATCH_PROPERTYGET);
		return Sys::Convert::VariantToTime(returnedValue);
	}

	wstring PublishedDoc::get_Title()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 199, L"Title", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	wstring PublishedDoc::get_Url()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2271, L"Url", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	//________________________________________________________SeriesGradientStopColorFormat
	SeriesGradientStopColorFormat::SeriesGradientStopColorFormat()
	{
	}

	SeriesGradientStopColorFormat::~SeriesGradientStopColorFormat()
	{
	}

	Excel::ApplicationX SeriesGradientStopColorFormat::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator SeriesGradientStopColorFormat::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	/* MsoThemeColorIndex*/ short SeriesGradientStopColorFormat::get_ObjectThemeColor()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3265, L"ObjectThemeColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoThemeColorIndex*/ short)returnedValue.iVal;
	}

	void SeriesGradientStopColorFormat::put_ObjectThemeColor(/* MsoThemeColorIndex*/ short ObjectThemeColor)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = ObjectThemeColor;
		Invoke(1, 3265, L"ObjectThemeColor", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object SeriesGradientStopColorFormat::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	long SeriesGradientStopColorFormat::get_RGB()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1055, L"RGB", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void SeriesGradientStopColorFormat::put_RGB(long RGB)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = RGB;
		Invoke(1, 1055, L"RGB", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float SeriesGradientStopColorFormat::get_TintAndShade()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void SeriesGradientStopColorFormat::put_TintAndShade(float TintAndShade)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = TintAndShade;
		Invoke(1, 2366, L"TintAndShade", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	float SeriesGradientStopColorFormat::get_Transparency()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3266, L"Transparency", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.fltVal;
	}

	void SeriesGradientStopColorFormat::put_Transparency(float Transparency)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_R4;
		param[0].fltVal = Transparency;
		Invoke(1, 3266, L"Transparency", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	/* MsoColorType*/ short SeriesGradientStopColorFormat::get_Type()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 108, L"Type", param, returnedValue, DISPATCH_PROPERTYGET);
		return (/* MsoColorType*/ short)returnedValue.iVal;
	}

	//________________________________________________________ChartSeriesGradientStopData
	ChartSeriesGradientStopData::ChartSeriesGradientStopData()
	{
	}

	ChartSeriesGradientStopData::~ChartSeriesGradientStopData()
	{
	}

	Excel::ApplicationX ChartSeriesGradientStopData::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlCreator ChartSeriesGradientStopData::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	Com::Object ChartSeriesGradientStopData::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::SeriesGradientStopColorFormat ChartSeriesGradientStopData::get_StopColor()
	{
		Excel::SeriesGradientStopColorFormat returnedValue;
		Com::Param param;
		Invoke(0, 3267, L"StopColor", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	Excel::XlGradientStopPositionType ChartSeriesGradientStopData::get_StopPositionType()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3268, L"StopPositionType", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlGradientStopPositionType)returnedValue.iVal;
	}

	void ChartSeriesGradientStopData::put_StopPositionType(Excel::XlGradientStopPositionType StopPositionType)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = StopPositionType;
		Invoke(1, 3268, L"StopPositionType", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring ChartSeriesGradientStopData::get_StopValue()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3269, L"StopValue", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void ChartSeriesGradientStopData::put_StopValue(wstring StopValue)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(StopValue.c_str());
		Invoke(1, 3269, L"StopValue", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	//________________________________________________________DefaultPivotTableLayoutOptions
	DefaultPivotTableLayoutOptions::DefaultPivotTableLayoutOptions()
	{
	}

	DefaultPivotTableLayoutOptions::~DefaultPivotTableLayoutOptions()
	{
	}

	bool DefaultPivotTableLayoutOptions::get_AllowMultipleFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2570, L"AllowMultipleFilters", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_AllowMultipleFilters(bool AllowMultipleFilters)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (AllowMultipleFilters == true) ? 1 : 0;
		Invoke(1, 2570, L"AllowMultipleFilters", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::ApplicationX DefaultPivotTableLayoutOptions::get_Application()
	{
		Excel::ApplicationX returnedValue;
		Com::Param param;
		Invoke(0, 148, L"Application", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DefaultPivotTableLayoutOptions::get_CalculatedMembersInFilters()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2884, L"CalculatedMembersInFilters", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_CalculatedMembersInFilters(bool CalculatedMembersInFilters)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (CalculatedMembersInFilters == true) ? 1 : 0;
		Invoke(1, 2884, L"CalculatedMembersInFilters", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_ColumnGrand()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 694, L"ColumnGrand", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_ColumnGrand(bool ColumnGrand)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ColumnGrand == true) ? 1 : 0;
		Invoke(1, 694, L"ColumnGrand", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DefaultPivotTableLayoutOptions::get_CompactRowIndent()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2553, L"CompactRowIndent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DefaultPivotTableLayoutOptions::put_CompactRowIndent(long CompactRowIndent)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = CompactRowIndent;
		Invoke(1, 2553, L"CompactRowIndent", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlCreator DefaultPivotTableLayoutOptions::get_Creator()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 149, L"Creator", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlCreator)returnedValue.iVal;
	}

	bool DefaultPivotTableLayoutOptions::get_DisplayContextTooltips()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2551, L"DisplayContextTooltips", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_DisplayContextTooltips(bool DisplayContextTooltips)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayContextTooltips == true) ? 1 : 0;
		Invoke(1, 2551, L"DisplayContextTooltips", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_DisplayEmptyColumn()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2137, L"DisplayEmptyColumn", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_DisplayEmptyColumn(bool DisplayEmptyColumn)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayEmptyColumn == true) ? 1 : 0;
		Invoke(1, 2137, L"DisplayEmptyColumn", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_DisplayEmptyRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2136, L"DisplayEmptyRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_DisplayEmptyRow(bool DisplayEmptyRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayEmptyRow == true) ? 1 : 0;
		Invoke(1, 2136, L"DisplayEmptyRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_DisplayErrorString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1485, L"DisplayErrorString", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_DisplayErrorString(bool DisplayErrorString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayErrorString == true) ? 1 : 0;
		Invoke(1, 1485, L"DisplayErrorString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_DisplayFieldCaptions()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2555, L"DisplayFieldCaptions", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_DisplayFieldCaptions(bool DisplayFieldCaptions)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayFieldCaptions == true) ? 1 : 0;
		Invoke(1, 2555, L"DisplayFieldCaptions", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_DisplayImmediateItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2126, L"DisplayImmediateItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_DisplayImmediateItems(bool DisplayImmediateItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayImmediateItems == true) ? 1 : 0;
		Invoke(1, 2126, L"DisplayImmediateItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_DisplayMemberPropertyTooltips()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2550, L"DisplayMemberPropertyTooltips", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_DisplayMemberPropertyTooltips(bool DisplayMemberPropertyTooltips)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayMemberPropertyTooltips == true) ? 1 : 0;
		Invoke(1, 2550, L"DisplayMemberPropertyTooltips", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_DisplayNullString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1486, L"DisplayNullString", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_DisplayNullString(bool DisplayNullString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (DisplayNullString == true) ? 1 : 0;
		Invoke(1, 1486, L"DisplayNullString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_EnableDrilldown()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1487, L"EnableDrilldown", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_EnableDrilldown(bool EnableDrilldown)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableDrilldown == true) ? 1 : 0;
		Invoke(1, 1487, L"EnableDrilldown", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_EnableWriteback()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2872, L"EnableWriteback", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_EnableWriteback(bool EnableWriteback)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (EnableWriteback == true) ? 1 : 0;
		Invoke(1, 2872, L"EnableWriteback", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DefaultPivotTableLayoutOptions::get_ErrorString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1490, L"ErrorString", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DefaultPivotTableLayoutOptions::put_ErrorString(wstring ErrorString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(ErrorString.c_str());
		Invoke(1, 1490, L"ErrorString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_FieldListSortAscending()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2573, L"FieldListSortAscending", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_FieldListSortAscending(bool FieldListSortAscending)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (FieldListSortAscending == true) ? 1 : 0;
		Invoke(1, 2573, L"FieldListSortAscending", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_HasAutoFormat()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 695, L"HasAutoFormat", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_HasAutoFormat(bool HasAutoFormat)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (HasAutoFormat == true) ? 1 : 0;
		Invoke(1, 695, L"HasAutoFormat", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_InGridDropZones()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2560, L"InGridDropZones", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_InGridDropZones(bool InGridDropZones)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (InGridDropZones == true) ? 1 : 0;
		Invoke(1, 2560, L"InGridDropZones", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_LayoutBlankLine()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1845, L"LayoutBlankLine", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_LayoutBlankLine(bool LayoutBlankLine)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (LayoutBlankLine == true) ? 1 : 0;
		Invoke(1, 1845, L"LayoutBlankLine", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_MergeLabels()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1494, L"MergeLabels", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_MergeLabels(bool MergeLabels)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (MergeLabels == true) ? 1 : 0;
		Invoke(1, 1494, L"MergeLabels", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	wstring DefaultPivotTableLayoutOptions::get_NullString()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1495, L"NullString", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.bstrVal;
	}

	void DefaultPivotTableLayoutOptions::put_NullString(wstring NullString)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BSTR;
		param[0].bstrVal = _bstr_t(NullString.c_str());
		Invoke(1, 1495, L"NullString", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_PageFieldOrder()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1429, L"PageFieldOrder", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_PageFieldOrder(bool PageFieldOrder)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PageFieldOrder == true) ? 1 : 0;
		Invoke(1, 1429, L"PageFieldOrder", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DefaultPivotTableLayoutOptions::get_PageFieldWrapCount()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1430, L"PageFieldWrapCount", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DefaultPivotTableLayoutOptions::put_PageFieldWrapCount(long PageFieldWrapCount)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = PageFieldWrapCount;
		Invoke(1, 1430, L"PageFieldWrapCount", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Com::Object DefaultPivotTableLayoutOptions::get_Parent()
	{
		Com::Object returnedValue;
		Com::Param param;
		Invoke(0, 150, L"Parent", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue;
	}

	bool DefaultPivotTableLayoutOptions::get_PreserveFormatting()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1500, L"PreserveFormatting", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_PreserveFormatting(bool PreserveFormatting)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PreserveFormatting == true) ? 1 : 0;
		Invoke(1, 1500, L"PreserveFormatting", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_PrintDrillIndicators()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2549, L"PrintDrillIndicators", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_PrintDrillIndicators(bool PrintDrillIndicators)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintDrillIndicators == true) ? 1 : 0;
		Invoke(1, 2549, L"PrintDrillIndicators", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_PrintTitles()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1838, L"PrintTitles", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_PrintTitles(bool PrintTitles)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (PrintTitles == true) ? 1 : 0;
		Invoke(1, 1838, L"PrintTitles", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_RefreshOnFileOpen()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_RefreshOnFileOpen(bool RefreshOnFileOpen)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RefreshOnFileOpen == true) ? 1 : 0;
		Invoke(1, 1479, L"RefreshOnFileOpen", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlPivotFieldRepeatLabels DefaultPivotTableLayoutOptions::get_RepeatAllLabels()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2879, L"RepeatAllLabels", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlPivotFieldRepeatLabels)returnedValue.iVal;
	}

	void DefaultPivotTableLayoutOptions::put_RepeatAllLabels(Excel::XlPivotFieldRepeatLabels RepeatAllLabels)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RepeatAllLabels;
		Invoke(1, 2879, L"RepeatAllLabels", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_RepeatItemsOnEachPrintedPage()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1842, L"RepeatItemsOnEachPrintedPage", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_RepeatItemsOnEachPrintedPage(bool RepeatItemsOnEachPrintedPage)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RepeatItemsOnEachPrintedPage == true) ? 1 : 0;
		Invoke(1, 1842, L"RepeatItemsOnEachPrintedPage", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	Excel::XlLayoutRowType DefaultPivotTableLayoutOptions::get_RowAxisLayout()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2556, L"RowAxisLayout", param, returnedValue, DISPATCH_PROPERTYGET);
		return (Excel::XlLayoutRowType)returnedValue.iVal;
	}

	void DefaultPivotTableLayoutOptions::put_RowAxisLayout(Excel::XlLayoutRowType RowAxisLayout)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I2;
		param[0].iVal = RowAxisLayout;
		Invoke(1, 2556, L"RowAxisLayout", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_RowGrand()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 693, L"RowGrand", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_RowGrand(bool RowGrand)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (RowGrand == true) ? 1 : 0;
		Invoke(1, 693, L"RowGrand", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_SaveData()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 692, L"SaveData", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_SaveData(bool SaveData)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SaveData == true) ? 1 : 0;
		Invoke(1, 692, L"SaveData", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_ShowDrillIndicators()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2548, L"ShowDrillIndicators", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_ShowDrillIndicators(bool ShowDrillIndicators)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowDrillIndicators == true) ? 1 : 0;
		Invoke(1, 2548, L"ShowDrillIndicators", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_ShowValuesRow()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2883, L"ShowValuesRow", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_ShowValuesRow(bool ShowValuesRow)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ShowValuesRow == true) ? 1 : 0;
		Invoke(1, 2883, L"ShowValuesRow", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_SortUsingCustomLists()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2574, L"SortUsingCustomLists", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_SortUsingCustomLists(bool SortUsingCustomLists)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SortUsingCustomLists == true) ? 1 : 0;
		Invoke(1, 2574, L"SortUsingCustomLists", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_SubtotalHiddenPageItems()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1498, L"SubtotalHiddenPageItems", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_SubtotalHiddenPageItems(bool SubtotalHiddenPageItems)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SubtotalHiddenPageItems == true) ? 1 : 0;
		Invoke(1, 1498, L"SubtotalHiddenPageItems", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_SubtotalLocation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2558, L"SubtotalLocation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_SubtotalLocation(bool SubtotalLocation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (SubtotalLocation == true) ? 1 : 0;
		Invoke(1, 2558, L"SubtotalLocation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_Subtotals()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 733, L"Subtotals", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_Subtotals(bool Subtotals)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (Subtotals == true) ? 1 : 0;
		Invoke(1, 733, L"Subtotals", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_TotalsAnnotation()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 1843, L"TotalsAnnotation", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_TotalsAnnotation(bool TotalsAnnotation)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (TotalsAnnotation == true) ? 1 : 0;
		Invoke(1, 1843, L"TotalsAnnotation", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_ViewCalculatedMembers()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2124, L"ViewCalculatedMembers", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_ViewCalculatedMembers(bool ViewCalculatedMembers)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (ViewCalculatedMembers == true) ? 1 : 0;
		Invoke(1, 2124, L"ViewCalculatedMembers", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_VisualTotals()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2129, L"VisualTotals", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_VisualTotals(bool VisualTotals)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (VisualTotals == true) ? 1 : 0;
		Invoke(1, 2129, L"VisualTotals", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	bool DefaultPivotTableLayoutOptions::get_VisualTotalsForSets()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 2882, L"VisualTotalsForSets", param, returnedValue, DISPATCH_PROPERTYGET);
		return (returnedValue.boolVal != 0);
	}

	void DefaultPivotTableLayoutOptions::put_VisualTotalsForSets(bool VisualTotalsForSets)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_BOOL;
		param[0].boolVal = (VisualTotalsForSets == true) ? 1 : 0;
		Invoke(1, 2882, L"VisualTotalsForSets", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

	long DefaultPivotTableLayoutOptions::get_xlMissingItemsNone()
	{
		_variant_t returnedValue;
		Com::Param param;
		Invoke(0, 3270, L"xlMissingItemsNone", param, returnedValue, DISPATCH_PROPERTYGET);
		return returnedValue.lVal;
	}

	void DefaultPivotTableLayoutOptions::put_xlMissingItemsNone(long xlMissingItemsNone)
	{
		_variant_t returnedValue;
		Com::Param param(1);
		param[0].vt = VT_I4;
		param[0].lVal = xlMissingItemsNone;
		Invoke(1, 3270, L"xlMissingItemsNone", param, returnedValue, DISPATCH_PROPERTYPUT);
	}

}
